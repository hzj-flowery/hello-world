(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
//第1步 - 准备Canvas和获取WebGL的渲染上下文
Object.defineProperty(exports, "__esModule", { value: true });
var Device_1 = require("./core/Device");
var LoaderManager_1 = require("./core/LoaderManager");
var RenderFlow_1 = require("./core/RenderFlow");
var ShaderFactory_1 = require("./core/renderer/shader/ShaderFactory");
var BufferManager_1 = require("./core/renderer/base/buffer/BufferManager");
var DrawEngine_1 = require("./core/renderer/base/DrawEngine");
var ShaderCenter_1 = require("./core/renderer/shader/ShaderCenter");
var LightCenter_1 = require("./core/renderer/light/LightCenter");
var LightModel_1 = require("./core/renderer/light/LightModel");
var UiSetting_1 = require("./core/ui/UiSetting");
Device_1.default.Instance.init();
DrawEngine_1.G_DrawEngine.init(Device_1.default.Instance.gl);
ShaderFactory_1.G_ShaderFactory.init(Device_1.default.Instance.gl);
BufferManager_1.G_BufferManager.init(Device_1.default.Instance.gl);
ShaderCenter_1.G_ShaderCenter.init();
LightCenter_1.G_LightCenter.init();
LightModel_1.G_LightModel.init();
UiSetting_1.G_UISetting.setUI();
//UI
// G_CameraModel.init(Device.Instance.gl);
//testWebl_Label.run();
//LightTest.run();
// skyBoxTest.run();
// SkinTes1.run();
var arr = [
    "res/f-texture.png",
    "res/models/killer_whale/whale.CYCLES.bin",
    "res/models/killer_whale/whale.CYCLES.gltf",
    "res/models/HeadData/head.json",
    "res/models/char/F.json",
    "res/models/Robart/blockGuyNodeDescriptions.json",
    "res/8x8-font.png",
    "res/wood.jpg",
    "res/tree.jpg",
    "res/ground.jpg",
    "res/wicker.jpg"
];
// ThreeDTexture.run();
// LabelTest.run();
// ShaderShadowTest.run();
// Stage.run();
// EarthSunTest.run();
// RobartTest.run();
// CaptureTest.run();
// CameraTest.run();
// TextureTest.run();
// SpeedTest.run();
//  HaiTwn1.run();
// ThreeDLightTest.run();
// SpotLightTest.run();
// PointLightTest.run();
// FogTest.run();
LoaderManager_1.default.instance.load(arr, null, function () {
    console.log("-888888----", /mobile|android|iphone|ipad/.test("mobilczjjjjj"));
    new RenderFlow_1.default().startup();
    // RampTextureTest.run();
    // CameraTest.run();
    // RobartTest.run();
    // ObjTest.run();
    // Stage.run();
    // SpotLightTest.run();
    // PointLightTest.run();
    // ThreeDLightTest.run();
    // ShaderShadowTest.run();
    // StencilTest.run();
    // RenderTargetTexture.run();
    // ShadowMapProjectionTest.run();
});
},{"./core/Device":3,"./core/LoaderManager":5,"./core/RenderFlow":7,"./core/renderer/base/DrawEngine":20,"./core/renderer/base/buffer/BufferManager":27,"./core/renderer/light/LightCenter":53,"./core/renderer/light/LightModel":54,"./core/renderer/shader/ShaderCenter":57,"./core/renderer/shader/ShaderFactory":59,"./core/ui/UiSetting":61}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Component = /** @class */ (function () {
    function Component() {
    }
    return Component;
}());
var Ref = /** @class */ (function () {
    function Ref() {
        this._referenceCount = 0;
        this._referenceCount = 1;
    }
    Ref.prototype.addReferenceCount = function () {
        this._referenceCount++;
    };
    Ref.prototype.reduceReferenceCount = function () {
        this._referenceCount--;
    };
    return Ref;
}());
exports.default = Ref;
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Matrix_1 = require("./Matrix");
var CameraModel_1 = require("./renderer/camera/CameraModel");
var GameMainCamera_1 = require("./renderer/camera/GameMainCamera");
var RenderData_1 = require("./renderer/data/RenderData");
var State_1 = require("./renderer/gfx/State");
var ShaderFactory_1 = require("./renderer/shader/ShaderFactory");
var GLapi_1 = require("./renderer/gfx/GLapi");
var DrawEngine_1 = require("./renderer/base/DrawEngine");
var LightCenter_1 = require("./renderer/light/LightCenter");
/**
 渲染流程：
 阶段1--》CPU准备数据（顶点，法线，uv坐标，切线等）
 阶段2--》顶点着色器：主要完成顶点的空间变换，将顶点从模型空间变换到世界空间，再变换到视口空间，再变换到齐次裁切空间
 上面的三种变换就是大名鼎鼎的(PVM*position),在这三种变换以后，下面的操作就是GPU的内置操作了，如下：
 会进行齐次除法，完成真正的投影，然后会自动进行归一化，生成标准的NDC坐标，NDC的坐标范围是【-1,1】，而屏幕坐标的范围是【0,1】，最后会进行屏幕映射生成屏幕坐标
 阶段3--》图元装配：点，线，三角形目前支持这三种
 阶段4--》光栅化，生成片元，这里面也有裁切操作进行
 阶段5--》片元着色器
 阶段6--》逐片元操作

 */
/**
* _attach
*/
function _attach(gl, location, attachment, face) {
    if (face === void 0) { face = 0; }
    // if (attachment instanceof Texture2D) {
    //     gl.framebufferTexture2D(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.TEXTURE_2D,
    //         attachment._glID,
    //         0
    //     );
    // } 
    // else if (attachment instanceof TextureCube) {
    //     gl.framebufferTexture2D(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,
    //         attachment._glID,
    //         0
    //     );
    // } else {
    //     gl.framebufferRenderbuffer(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.RENDERBUFFER,
    //         attachment._glID
    //     );
    // }
}
//----------------------------------------------------------下面是状态管理-----------------------------
//深度缓冲区 也称Z缓冲区
/**
深度缓冲区其实就是一个二维数组，下标就是屏幕坐标，里面存放着的值就是z坐标，我们可以通过下面描述的方法来对这个数组进行操作
它的主要功能就是判断前后遮挡关系，选择片元是否渲染
gl.enable(gl.DEPTH_TEST);开启深度检测
gl.disable(gl.DEPTH_TEST);关闭深度检测
gl.depthFunc(param)函数的参数如下：
    gl.NEVER （总不通过）
    gl.LESS（如果新值小于缓冲区中的值则通过）
    gl.EQUAL（如果新值等于缓冲区中的值则通过）
    gl.LEQUAL（如果新值小于等于缓冲区中的值则通过）
    gl.GREATER（如果新值大于缓冲区中的值则通过）
    gl.NOTEQUAL（如果新值不等于缓冲区中的值则通过）
    gl.GEQUAL（如果新值大于等于缓冲区中的值则通过）
    gl.ALWAYS（总通过）
gl.depthMask(true);//允许往深度缓存写数据
gl.depthMask(false);//不允许往深度缓存写数据

gl.clearDepth(depth);指定深度缓冲区填充深度值，这个值一般是是最大值，因为屏幕坐标的范围是【0,1】，所以最大值一般为1
注意上面这个函数并不是去清理，需要结合gl.clear(gl.DEPTH_BUFFER_BIT)这个清理函数来使用

gl.depthRange(0,1);这个函数有两个参数near,far,near默认为0，far默认为1，near永远小于far
这个函数的设置会影响到屏幕的z坐标的计算，当我们进行屏幕映射的时候，会用下边的公式将NDC的z坐标转为屏幕坐标系下的z坐标
Zw = ((Far - Near)/2)*Zndc+(Far+Near)/2
最终写入到深度缓冲区的值也是这个屏幕坐标系下的z坐标，我们在片段着色器中可以gl_FragCoord.z拿到这个z坐标
  
下面这个函数很有意思，叫多边形偏移
出现这个功能是由于深度冲突才产生的，深度冲突指的是深度缓冲区的值和当前的顶点深度值，已经无法比较谁大谁小了
比如在屏幕上有两个三角形他们在某个像素点的z值几乎是一样的，也就是在小数点n位才可以区分出来，而这个n位大于深度缓冲区的精度
gl.disable(gl.POLYGON_OFFSET_FILL);//关闭多边形偏移
gl.enable(gl.POLYGON_OFFSET_FILL); //开启多边形偏移
多边形偏移使用举例：
// 开启多边形偏移
gl.enable(gl.POLYGON_OFFSET_FILL);
// 绘制的时候分两次绘制产生冲突
gl.drawArrays(gl.TRIANGLES, 0, n / 2);   // 绿色三角形
gl.polygonOffset(1.0, 1.0);          // 设置偏移量
gl.drawArrays(gl.TRIANGLES, n / 2, n / 2); // 黄色三角形

 */
function _commitDepthState(gl, cur, next) {
    /**
     * 下面函数中，只对面消除，深度写入，深度比较函数这个三个进行操作
     */
    if (cur.depthTest != next.depthTest) {
        next.depthTest ? gl.enable(gl.DEPTH_TEST) : gl.disable(gl.DEPTH_TEST);
    }
    if (cur.depthWrite != next.depthWrite) {
        next.depthWrite ? gl.depthMask(true) : gl.depthMask(false);
    }
    if (cur.depthFunc != next.depthFunc) {
        gl.depthFunc(next.depthFunc);
    }
}
/**
 *
gl.enable(gl.CULL_FACE);开启面剔除
gl.disable(gl.CULL_FACE);关闭面剔除
gl.frontFace()这个函数是设置那个面是正面
gl.CW：表示逆时针绘制的代表正面gl.FRONT，否则是背面gl.BACK，这个是默认设置
gl.CCW：表示顺时针绘制的代表正面gl.FRONT，否则是背面gl.BACK
gl.cullFace()设置那一面被剔除有三个函数，如下
gl.BACK：背面
gl.FRONT：前面
gl.FRONT_AND_BACK：前后两面
 */
function _commitCullState(gl, cur, next) {
    if (cur.cullMode === next.cullMode) {
        return;
    }
    if (next.cullMode === GLapi_1.glEnums.CULL_NONE) {
        gl.disable(gl.CULL_FACE);
        return;
    }
    gl.enable(gl.CULL_FACE);
    gl.cullFace(next.cullMode);
}
/**
 * 裁切状态
 * 剪裁测试用于限制绘制区域。区域内的像素，将被绘制修改。区域外的像素，将不会被修改。
 * 例子 比如我要在画布的某个区域做一些其他的事情，让其为纯色等
 */
function _commitScissorState(gl, cur, next) {
    // gl.enable(gl.SCISSOR_TEST);
    // gl.scissor(0,0,50,50);
    // gl.clearColor(1.0, 0.0, 0.0,1.0);
    // gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    // gl.disable(gl.SCISSOR_TEST);
}
/**
 * 混合状态
 * 最常实现的功能就是半透明叠加
 * 有一个问题 必须是透明的颜色才具备混合，也就是alpha的值必须小于1，否则就是覆盖了
 * 所以我们说的混合都是针对alpha小于1的顶点颜色
 *
 * gl.enable(gl.BLEND);开启混合
 * gl.enable(gl.BLEND);//关闭混合
公式：COLORfinal = COLORsource*FACTORsource op COLORdest * FACTORdest
COLORfinal：混合之后的颜色。
COLORsource：即将写入缓冲区的颜色。
FACTORsource：写入颜色的比例因子，会与颜色值进行乘法计算。
op：数学计算方法，将操作符左右两边的结果进行某种数学运算。最常见的是加法。
COLORdest：缓冲区已经存在的颜色
FACTORdest：已存在颜色的比例因子

gl.blendFunc(sFactor,dFactor);设置混合方式，可以用的参数如下：
gl.ONE;
gl.ZERO;
gl.SRC_COLOR;
gl.DST_COLOR
gl.SRC_ALPHA;
gl.DST_ALPHA;
gl.CONSTANT_ALPHA;
gl.CONSTANT_COLOR;
gl.ONE_MINUS_SRC_ALPHA;
gl.ONE_MINUS_SRC_COLOR;
gl.ONE_MINUS_DST_ALPHA;
gl.ONE_MINUS_DST_COLOR;
gl.ONE_MINUS_CONSTANT_ALPHA;
gl.ONE_MINUS_CONSTANT_COLOR;
最常见的混合方式gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);但这样的混合方式会改变alpha
如果不希望改变混合后的alpha,可以使用下面这个函数
gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ZERO, gl.ONE);

如果我们使用了上面提到的constant的混合因子，可以使用下面这个函数来指定混合颜色
gl.blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)

gl.blendEquation(mode):该函数可以设置op的操作函数如下：
gl.FUNC_ADD：相加处理
gl.FUNC_SUBTRACT：相减处理
gl.FUNC_REVERSE_SUBSTRACT：反向相减处理，即 dest 减去 source
下面这个函数可以对rgb和alpha
gl.blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
 */
function _commitBlendState(gl, cur, next) {
}
var Device = /** @class */ (function () {
    function Device() {
        this._width = 0;
        this._height = 0;
        this._isCapture = false;
        this._temp1Matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._curGLID = -1;
        this._renderData = []; //绘制的数据
        //copy-------------------------------------------------------------------------------------------------
        this._caps = {
            maxVertexStreams: 4,
            maxVertexTextures: 0,
            maxFragUniforms: 0,
            maxTextureUnits: 0,
            maxVertexAttribs: 0,
            maxTextureSize: 0,
            maxDrawBuffers: 0,
            maxColorAttachments: 0
        };
        this._extensions = [];
    }
    ;
    Object.defineProperty(Device, "Instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new Device();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    Device.prototype.init = function () {
        var canvas = window["canvas"];
        var gl = this.createGLContext(canvas);
        this.gl = gl;
        this.canvas = canvas;
        this._nextFrameS = new State_1.default(gl);
        this._curFrameS = new State_1.default(gl);
        canvas.onmousedown = this.onMouseDown.bind(this);
        canvas.onmousemove = this.onMouseMove.bind(this);
        canvas.onmouseup = this.onMouseUp.bind(this);
        // canvas.onkeydown = this.onKeyDown.bind(this);
        this._width = canvas.clientWidth;
        this._height = canvas.clientHeight;
        console.log("画布的尺寸----", this._width, this._height);
        this.initExt();
        //添加事件监听
        canvas.addEventListener("webglcontextlost", this.contextLost.bind(this));
        canvas.addEventListener("webglcontextrestored", this.resume.bind(this));
        this.openStats();
    };
    Device.prototype.openStats = function () {
        this.stats = new window["Stats"]();
        this.stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom
        window["document"].body.appendChild(this.stats.dom);
    };
    Device.prototype.startSonWorker = function () {
        var canvasBitmap = window["canvas2d"];
        var ctxBitmap = canvasBitmap.getContext('2d');
        if (!this._worker) {
            this._worker = new Worker('./bitmap_worker.js');
            this._worker.postMessage({ msg: 'init' });
            this._worker.onmessage = function (e) {
                console.log("收到来自子线程的数据------", e.data.imageBitmap);
                ctxBitmap.drawImage(e.data.imageBitmap, 0, 0);
            };
        }
        ctxBitmap.clearRect(0, 0, canvasBitmap.width, canvasBitmap.height);
        this._worker.postMessage({ msg: 'draw' });
    };
    Device.prototype.getCanvas2D = function () {
        var result = window["canvas2d"].getContext("2d");
        if (!result) {
            console.log("没有canvas 2d画笔--------------");
        }
        return result;
    };
    Device.prototype.contextLost = function () {
        console.log("丢失上下文----");
    };
    Device.prototype.resume = function () {
        console.log("回来-----");
    };
    Device.prototype.getWebglContext = function () {
        return this.canvas.getContext("webgl");
    };
    //获取webgl画笔的类型
    Device.prototype.getContextType = function () {
        if (this.gl instanceof WebGL2RenderingContext) {
            return "webgl2";
        }
        else if (this.gl instanceof WebGLRenderingContext) {
            return "webgl";
        }
    };
    //创建webgl画笔
    Device.prototype.createGLContext = function (canvas) {
        var options = {
            stencil: true,
        };
        var names = ["webgl2", "webgl", "experimental-webgl"];
        var context = null;
        for (var i = 0; i < names.length; i++) {
            try {
                console.log("-names---", names[i]);
                context = canvas.getContext(names[i], options);
            }
            catch (e) { }
            if (context) {
                break;
            }
        }
        if (context) {
            //添加动态属性记录画布的大小
            context.viewportWidth = canvas.width;
            context.viewportHeight = canvas.height;
        }
        else {
            alert("Failed to create WebGL context!");
        }
        return context;
    };
    Device.prototype.onMouseDown = function (ev) {
        this._isCapture = true;
    };
    Device.prototype.onMouseMove = function (ev) {
    };
    Device.prototype.onMouseUp = function (ev) {
        this._isCapture = false;
    };
    Device.prototype.onKeyDown = function (key) {
        console.log("key---------", key);
    };
    Device.prototype.startDraw = function (time, stage) {
        this.onBeforeRender();
        this.visitRenderTree(time, stage);
        this.drawToUI();
        this.draw2screen();
        this.onAfterRender();
    };
    /**
     * 遍历渲染树
     * @param time
     * @param scene2D
     * @param scene3D
     */
    Device.prototype.visitRenderTree = function (time, stage) {
        stage.visit(time);
    };
    /**
     * 将结果绘制到UI上
     */
    Device.prototype.drawToUI = function () {
        var frameBuffer = GameMainCamera_1.default.instance.get2DCamera().getFramebuffer();
        this._commitRenderState(frameBuffer);
        this.triggerRender(false, false);
    };
    //将结果绘制到窗口
    Device.prototype.draw2screen = function () {
        var isShowCamera = true;
        if (isShowCamera) {
            this._commitRenderState(null, { x: 0, y: 0, w: 0.5, h: 1 });
            this.triggerRender(false, true);
            this.setViewPort({ x: 0.5, y: 0, w: 0.5, h: 1 });
            this.triggerRender(true, true);
        }
        else {
            this._commitRenderState(null);
            this.triggerRender(false, true);
        }
        if (this._isCapture) {
            this._isCapture = false;
            this.capture();
        }
    };
    //渲染前
    Device.prototype.onBeforeRender = function () {
        this.stats.begin();
        this._renderData = [];
    };
    //提交渲染状态
    Device.prototype._commitRenderState = function (frameBuffer, viewPort) {
        if (viewPort === void 0) { viewPort = { x: 0, y: 0, w: 1, h: 1 }; }
        var gl = this.gl;
        this._nextFrameS.depthTest = true; //开启深度测试
        this._nextFrameS.depthFunc = gl.LESS;
        this._nextFrameS.depthWrite = true; //可以写入
        this._nextFrameS.cullMode = GLapi_1.glEnums.CULL_BACK;
        this._nextFrameS.ScissorTest = true; //裁切测试
        //设置viewport
        var x = viewPort.x * this.width;
        var y = viewPort.y * this.height;
        var width = viewPort.w * this.width;
        var height = viewPort.h * this.height;
        this._nextFrameS.setViewPort(x, y, width, height);
        _commitDepthState(gl, this._curFrameS, this._nextFrameS);
        _commitCullState(gl, this._curFrameS, this._nextFrameS);
        _commitScissorState(gl, this._curFrameS, this._nextFrameS);
        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
        this.setViewPort(viewPort);
        gl.clearColor(0.5, 0.5, 0.5, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        //更新状态
        this._curFrameS.set(this._nextFrameS);
    };
    //渲染后
    Device.prototype.onAfterRender = function () {
        this.stats.end();
        RenderData_1.RenderDataPool.return(this._renderData);
    };
    Device.prototype.triggerRender = function (isScene, isRenderToScreen) {
        if (isScene === void 0) { isScene = false; }
        if (isScene) {
            var cameraData = GameMainCamera_1.default.instance.getCamera(this._renderData[0]._cameraType).getCameraData();
            CameraModel_1.G_CameraModel.draw(cameraData.projectMat, cameraData.modelMat);
        }
        //提交数据给GPU 立即绘制
        for (var j = 0; j < this._renderData.length; j++) {
            if (this._renderData[j]._isOffline && !isRenderToScreen) {
                //对于离屏渲染的数据 如果当前是离屏渲染的话 则不可以渲染它 否则会报错
                //你想啊你把一堆显示数据渲染到一张纹理中，这张纹理本身就在这一堆渲染数据中 自然是会冲突的
                //[.Offscreen-For-WebGL-07E77500]GL ERROR :GL_INVALID_OPERATION : glDrawElements: Source and destination textures of the draw are the same
                continue;
            }
            this.draw(this._renderData[j], isScene);
        }
    };
    /**
     *
     * @param rData
     * @param projMatix 投影矩阵
     * @param viewMatrix 视口矩阵
     */
    Device.prototype._drawBase = function (rData, projMatix, viewMatrix) {
        DrawEngine_1.G_DrawEngine.run(rData, viewMatrix, projMatix, rData._shader);
    };
    /**
     * 此函数每调用一次就有可能产生一次drawcall
     * @param rData
     * @param isUseScene
     */
    Device.prototype.draw = function (rData, isUseScene) {
        if (isUseScene === void 0) { isUseScene = false; }
        var cameraData = GameMainCamera_1.default.instance.getCamera(rData._cameraType).getCameraData();
        Matrix_1.glMatrix.mat4.identity(this._temp1Matrix);
        //补一下光的数据
        rData._lightColor = LightCenter_1.G_LightCenter.lightData.color;
        rData._lightDirection = LightCenter_1.G_LightCenter.lightData.direction;
        rData._cameraPosition = cameraData.position;
        switch (rData._type) {
            case RenderData_1.RenderDataType.Base:
                if (isUseScene) {
                    var projMatix = CameraModel_1.G_CameraModel.getSceneProjectMatrix();
                    Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, CameraModel_1.G_CameraModel.getSceneCameraMatrix());
                    this._drawBase(rData, projMatix, this._temp1Matrix);
                }
                else {
                    Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, cameraData.modelMat);
                    this._drawBase(rData, cameraData.projectMat, this._temp1Matrix);
                }
                ;
                break;
            case RenderData_1.RenderDataType.Normal:
                if (isUseScene) {
                    var projMatix = CameraModel_1.G_CameraModel.getSceneProjectMatrix();
                    Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, CameraModel_1.G_CameraModel.getSceneCameraMatrix());
                    cameraData.projectMat = projMatix;
                    cameraData.modelMat = this._temp1Matrix;
                    this._drawNormal(rData, cameraData);
                }
                else {
                    this._drawNormal(rData, cameraData);
                }
                break;
            case RenderData_1.RenderDataType.Spine:
                if (isUseScene) {
                    var projMatix = CameraModel_1.G_CameraModel.getSceneProjectMatrix();
                    Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, CameraModel_1.G_CameraModel.getSceneCameraMatrix());
                    this._drawSpine(rData, projMatix, this._temp1Matrix);
                }
                else {
                    Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, cameraData.modelMat);
                    this._drawSpine(rData, cameraData.projectMat, this._temp1Matrix);
                }
                ;
                break;
        }
    };
    Device.prototype._drawSpine = function (sData, projMatix, viewMatrix) {
        if (this._curGLID != sData._shaderData.spGlID) {
            this.gl.useProgram(sData._shaderData.spGlID);
            this._curGLID == sData._shaderData.spGlID;
        }
        ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(sData._shaderData.attrSetters, sData._attrbufferData);
        for (var j = 0; j < sData._uniformData.length; j++) {
            ShaderFactory_1.G_ShaderFactory.setUniforms(sData._shaderData.uniSetters, sData._uniformData[j]);
        }
        var vleft = Matrix_1.glMatrix.mat4.multiply(null, viewMatrix, sData._extraViewLeftMatrix);
        var projData = {};
        projData[sData._projKey] = projMatix;
        ShaderFactory_1.G_ShaderFactory.setUniforms(sData._shaderData.uniSetters, projData);
        var viewData = {};
        viewData[sData._viewKey] = vleft;
        ShaderFactory_1.G_ShaderFactory.setUniforms(sData._shaderData.uniSetters, viewData);
        ShaderFactory_1.G_ShaderFactory.drawBufferInfo(sData._attrbufferData, sData._glPrimitiveType);
    };
    Device.prototype._drawNormal = function (sData, cameraData) {
        this.gl.useProgram(sData._shaderData.spGlID);
        sData._node.updateUniformsData(cameraData, LightCenter_1.G_LightCenter.lightData);
        ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(sData._shaderData.attrSetters, sData._attrbufferData);
        for (var j in sData._uniformData) {
            ShaderFactory_1.G_ShaderFactory.setUniforms(sData._shaderData.uniSetters, sData._uniformData[j]);
        }
        ShaderFactory_1.G_ShaderFactory.drawBufferInfo(sData._attrbufferData, sData._glPrimitiveType);
    };
    Device.prototype.collectData = function (rData) {
        this._renderData.push(rData);
    };
    /**
   * @method setFrameBuffer
   * @param {FrameBuffer} fb - null means use the backbuffer
   */
    Device.prototype.setFrameBuffer = function (fb) {
        if (this._framebuffer === fb) {
            return;
        }
        this._framebuffer = fb;
        var gl = this.gl;
        if (!fb) {
            console.log("绑定帧缓冲失败--------");
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            return;
        }
        else {
            console.log("绑定帧缓冲成功");
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, fb.getHandle());
        // let numColors = fb._colors.length;
        // for (let i = 0; i < numColors; ++i) {
        //     let colorBuffer = fb._colors[i];
        //     _attach(gl, gl.COLOR_ATTACHMENT0 + i, colorBuffer);
        //     // TODO: what about cubemap face??? should be the target parameter for colorBuffer
        // }
        // for (let i = numColors; i < this._caps.maxColorAttachments; ++i) {
        //     gl.framebufferTexture2D(
        //         gl.FRAMEBUFFER,
        //         gl.COLOR_ATTACHMENT0 + i,
        //         gl.TEXTURE_2D,
        //         null,
        //         0
        //     );
        // }
        // if (fb._depth) {
        //     _attach(gl, gl.DEPTH_ATTACHMENT, fb._depth);
        // }
        // if (fb._stencil) {
        //     _attach(gl, gl.STENCIL_ATTACHMENT, fb._stencil);
        // }
        // if (fb._depthStencil) {
        //     _attach(gl, gl.DEPTH_STENCIL_ATTACHMENT, fb._depthStencil);
        // }
    };
    /**
     * 设置视口
     * @param object
     * {
     * x:【0,1】
     * y:【0,1】
     * w:【0,1】
     * h:【0,1】
     * }
     */
    Device.prototype.setViewPort = function (object) {
        var x = object.x * this.width;
        var y = object.y * this.height;
        var width = object.w * this.width;
        var height = object.h * this.height;
        if (this._curFrameS.isSameViewPort(x, y, width, height) == false) {
            this.gl.viewport(x, y, width, height);
            this.gl.scissor(x, y, width, height);
        }
    };
    Object.defineProperty(Device.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (width) {
            this.width = width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (height) {
            this._height = height;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Resize a canvas to match the size its displayed.
     * @param {HTMLCanvasElement} canvas The canvas to resize.
     * @param {number} [multiplier] amount to multiply by.
     *    Pass in window.devicePixelRatio for native pixels.
     * @return {boolean} true if the canvas was resized.
     * @memberOf module:webgl-utils
     */
    Device.prototype.resizeCanvasToDisplaySize = function (canvas, multiplier) {
        multiplier = multiplier || 1;
        var width = canvas.clientWidth * multiplier | 0;
        var height = canvas.clientHeight * multiplier | 0;
        if (canvas.width !== width || canvas.height !== height) {
            canvas.width = width;
            canvas.height = height;
            return true;
        }
        return false;
    };
    Device.prototype.initExt = function () {
        this._stats = {
            texture: 0,
            vb: 0,
            ib: 0,
            drawcalls: 0,
        };
        // https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Using_Extensions
        this._initExtensions([
            'EXT_texture_filter_anisotropic',
            'EXT_shader_texture_lod',
            'OES_standard_derivatives',
            'OES_texture_float',
            'OES_texture_float_linear',
            'OES_texture_half_float',
            'OES_texture_half_float_linear',
            'OES_vertex_array_object',
            'WEBGL_compressed_texture_atc',
            'WEBGL_compressed_texture_etc',
            'WEBGL_compressed_texture_etc1',
            'WEBGL_compressed_texture_pvrtc',
            'WEBGL_compressed_texture_s3tc',
            'WEBGL_depth_texture',
            'WEBGL_draw_buffers',
        ]);
        this._initCaps();
        // this._initStates();
        this.handlePrecision();
        console.log("拓展-----", this.gl.getSupportedExtensions());
        /**
         * 'EXT_color_buffer_float',
         * 'EXT_disjoint_timer_query_webgl2',
         * 'EXT_float_blend',
         * 'EXT_texture_compression_bptc',
         * 'EXT_texture_compression_rgtc',
         * 'EXT_texture_filter_anisotropic',
         * 'KHR_parallel_shader_compile',
         * 'OES_texture_float_linear',
         * 'WEBGL_compressed_texture_s3tc',
         * 'WEBGL_compressed_texture_s3tc_srgb',
         * 'WEBGL_debug_renderer_info',
         * 'WEBGL_debug_shaders',
         * 'WEBGL_lose_context',
         * 'WEBGL_multi_draw',
         * 'OVR_multiview2
         */
    };
    Device.prototype.handlePrecision = function () {
        var gl = this.gl;
        console.log("处理精度");
        var data1 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT);
        var data2 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);
        var data3 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
        var data4 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT);
        var data5 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT);
        var data6 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT);
        console.log("vertex 精度值---", data1, data2, data3, data4, data5, data6);
        var data1 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT);
        var data2 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);
        var data3 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
        var data4 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT);
        var data5 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT);
        var data6 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT);
        console.log("fragment 精度值---", data1, data2, data3, data4, data5, data6);
    };
    /**
     * 初始化渲染状态
     */
    Device.prototype._initStates = function () {
        var gl = this.gl;
        // gl.frontFace(gl.CCW);这一句代码是多余的，webgl默认的就是逆时针为正面
        gl.disable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ZERO);
        gl.blendEquation(gl.FUNC_ADD);
        gl.blendColor(1, 1, 1, 1);
        gl.colorMask(true, true, true, true); //允许往颜色缓冲写数据
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        gl.disable(gl.DEPTH_TEST);
        gl.depthFunc(gl.LESS);
        gl.depthMask(true); //允许往深度缓存写数据
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.depthRange(0, 1);
        gl.disable(gl.STENCIL_TEST);
        gl.stencilFunc(gl.ALWAYS, 0, 0xFF);
        gl.stencilMask(0xFF);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        gl.clearDepth(1);
        gl.clearColor(0, 0, 0, 0);
        gl.clearStencil(0);
        gl.disable(gl.SCISSOR_TEST);
    };
    Device.prototype._initExtensions = function (extensions) {
        var gl = this.gl;
        for (var i = 0; i < extensions.length; ++i) {
            var name_1 = extensions[i];
            var vendorPrefixes = ["", "WEBKIT_", "MOZ_"];
            for (var j = 0; j < vendorPrefixes.length; j++) {
                try {
                    var ext = gl.getExtension(vendorPrefixes[j] + name_1);
                    if (ext) {
                        this._extensions[name_1] = ext;
                        break;
                    }
                }
                catch (e) {
                    console.error(e);
                }
            }
        }
    };
    /**
* @method ext
* @param {string} name
*/
    Device.prototype.ext = function (name) {
        return this._extensions[name];
    };
    Device.prototype._initCaps = function () {
        var gl = this.gl;
        var extDrawBuffers = this.ext('WEBGL_draw_buffers');
        this._caps.maxVertexStreams = 4;
        this._caps.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        this._caps.maxFragUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
        this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        this._caps.maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
        this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this._caps.maxDrawBuffers = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
        this._caps.maxColorAttachments = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
        console.log("this._caps---", this._caps);
        localStorage.setItem("zm", "nihaoa");
    };
    /**
     * 显示当前帧缓存中的图像数据
     * @param width
     * @param height
     */
    Device.prototype.showCurFramerBufferOnCanvas = function (width, height) {
        var gl = this.gl;
        height = height || 512;
        width = width || 512;
        var pixels = new Uint8Array(width * height * 4);
        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
        var imageData = new ImageData(new Uint8ClampedArray(pixels), width, height);
        var ctx = Device.Instance.getCanvas2D();
        ctx.putImageData(imageData, 0, 0);
        //截图保存下来
        // this.capture(window["canvas2d"]);
    };
    /**
     * 截图
     */
    Device.prototype.capture = function (canvas) {
        var saveBlob = (function () {
            var a = document.createElement('a');
            document.body.appendChild(a);
            a.style.display = 'none';
            return function saveData(blob, fileName) {
                var url = window.URL.createObjectURL(blob);
                a.href = url;
                a.download = fileName;
                a.click();
            };
        }());
        var gl = this.gl;
        if (!canvas) {
            canvas = this.gl.canvas;
        }
        canvas.toBlob(function (blob) {
            saveBlob(blob, "screencapture-" + gl.canvas.width + "x" + gl.canvas.height + ".png");
        });
    };
    //-----------------------------------------------------状态处理-------------------------------------------------------------
    //剔除某一个面
    /**
     *
     * @param back true 代表剔除背面 false 代表剔除前面
     * @param both 表示前后面都剔除
     */
    Device.prototype.cullFace = function (back, both) {
        if (back === void 0) { back = true; }
        var gl = this.gl;
        gl.enable(gl.CULL_FACE); //开启面剔除功能
        gl.frontFace(gl.CW); //逆时针绘制的代表正面 正常理解，看到的面是正面gl.FRONT，看不到的面是背面gl.BACK
        // gl.frontFace(gl.CCW);//顺时针绘制的代表正面  需要反过来理解，即我们看到的面是背面，看不到的面是正面
        if (both) {
            gl.cullFace(gl.FRONT_AND_BACK); //前后两个面都剔除
        }
        else if (back) {
            gl.cullFace(gl.BACK); //只剔除背面
        }
        else {
            gl.cullFace(gl.FRONT); //只剔除前面
        }
    };
    /**
     * 关闭面剔除功能
     */
    Device.prototype.closeCullFace = function () {
        var gl = this.gl;
        gl.disable(gl.CULL_FACE);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.FRONT);
        gl.disable(gl.CULL_FACE);
    };
    //写入模板值
    Device.prototype.writeStencil = function (ref, mask, isCloseColorWrite) {
        if (ref === void 0) { ref = 1; }
        if (mask === void 0) { mask = 1; }
        if (isCloseColorWrite === void 0) { isCloseColorWrite = true; }
        /**
         * 可以把模板缓存想象成一个二维数组stencil[width][height]
         * 清空缓存，就是将这个数组的每一个元素设为0
         * 开启模板测试，就是当下面进行绘制的时候，每一个片元进行逐片元的操作时，会有模板测试
         * 对于一个片元而言，它本身会携带位置信息，通过位置我们就能在模板缓冲中对应的模板值
         * 设置模板测试参数ref，这个其实就是一个全局变量，GPU会拿这个值和模板值进行比较
         * gl.ALWAYS：这个是比较函数，它的意思是不管最后比较结果如何，都通过模板测试
         * 设置模板操作，其实就是说如果模板测试通过了，将采取什么操作
         * gl.REPLACE：表示拿全局测试参数ref，替换掉模板缓冲的值
         * 综上：其实这个函数的作用就是将接下来绘制的所有片元，以他们的位置为索引，替换掉模板缓冲的值
         */
        var gl = this.gl;
        // 清除模板缓存
        gl.clear(gl.STENCIL_BUFFER_BIT);
        // 开启模板测试
        gl.enable(gl.STENCIL_TEST);
        // 设置模板测试参数
        gl.stencilFunc(gl.ALWAYS, ref, mask);
        // 设置模板值操作
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
        if (isCloseColorWrite) {
            //关闭向颜色附件中写入颜色值
            gl.colorMask(false, false, false, false);
        }
    };
    //比较模板值
    Device.prototype.compareStencil = function (ref, mask) {
        if (ref === void 0) { ref = 1; }
        if (mask === void 0) { mask = 1; }
        /**
         * 在我们调用了 writeStencil 这个函数以后，然后进行了绘制，那么模板缓冲中已经有了我们设置的值
         * 接着我们调用了这个函数
         * 设置模板测试参数ref
         * gl.EQUAL:意思是在进行模板测试的时候，只有模板值和我们的模板测试参数一样，才可以通过，否则不通过测试，即丢弃
         * 设置模板操作，注意到这里写的都是gl.keep,它的意思就是无论测试结果如何，都保持模板缓冲现有的值
         *
         * 综上：这个函数的功能就是说，在接下来的绘制中，必须模板缓冲的值必须和我们现在设置的模板参数ref一样，才可以进行绘制
         */
        var gl = this.gl;
        //设置模板测试参数
        gl.stencilFunc(gl.EQUAL, ref, mask);
        //设置模板测试后的操作
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        // ----- 模板方法 end -----
        // 关闭深度检测
        gl.disable(gl.DEPTH_TEST);
        gl.colorMask(true, true, true, true);
    };
    //关闭模板测试
    Device.prototype.closeStencil = function () {
        var gl = this.gl;
        // 开启深度检测
        gl.enable(gl.DEPTH_TEST);
        // 关闭模板测试
        gl.disable(gl.STENCIL_TEST);
    };
    return Device;
}());
exports.default = Device;
},{"./Matrix":6,"./renderer/base/DrawEngine":20,"./renderer/camera/CameraModel":40,"./renderer/camera/GameMainCamera":41,"./renderer/data/RenderData":49,"./renderer/gfx/GLapi":51,"./renderer/gfx/State":52,"./renderer/light/LightCenter":53,"./renderer/shader/ShaderFactory":59}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graphic = void 0;
var Matrix_1 = require("../Matrix");
var ShaderFactory_1 = require("../renderer/shader/ShaderFactory");
/**
 *
 */
var Graphic = /** @class */ (function () {
    function Graphic(gl) {
        this.vert = 'attribute vec4 a_position;' +
            'attribute vec4 a_color;' +
            'uniform mat4 u_worldViewProjection;' +
            'varying vec4 v_color;' +
            'void main() {' +
            'gl_Position = u_worldViewProjection * a_position;' +
            'gl_PointSize = 5.0;' +
            'v_color = a_color;' +
            '}';
        this.frag = 'precision mediump float;' +
            'uniform vec4 u_color;' +
            'varying vec4 v_color;' +
            'void main() {' +
            'gl_FragColor = u_color * v_color;' +
            '}';
        this._coordinateArrays = {
            position: [
                0, 0, 0,
                1, 0, 0,
                0, 1, 0,
                0, 0, 1,
                0, 0, 0,
                0, 0, 0,
                0, 0, 0,
                1.2, 0, 0,
                0, 1.2, 0,
                0, 0, 1.2,
                0, 0, 0, 0,
                0, 1, 1, 0
            ],
            color: [
                0, 0, 0, 1,
                1, 0, 0, 1,
                0, 1, 0, 1,
                0, 0, 1, 1,
                1, 0, 0, 1,
                0, 1, 0, 1,
                0, 0, 1, 1,
                0, 0, 0, 1,
                0, 0, 0, 1,
                0, 0, 0, 1,
                1, 1, 0, 0,
                1, 1, 0, 0 // 13
            ],
            indices: [
                4, 1, 5, 2, 6, 3, 1, 7, 2, 8, 3, 9, 10, 11 //11 12 13
            ]
        };
        this._pointArrays = {
            position: [
                0, 0, 0,
                1, 0, 0,
                0, 1, 0,
                0, 0, 1 //11
            ],
            color: [
                0, 0, 0, 1,
                1, 0, 0, 1,
                0, 1, 0, 1,
                0, 0, 1, 1
            ]
        };
        this.gl = gl;
        this.init();
    }
    Graphic.prototype.init = function () {
        var scale = 6;
        for (var j = 0; j < this._coordinateArrays.position.length; j++) {
            this._coordinateArrays.position[j] = this._coordinateArrays.position[j] * scale;
        }
        this._pointBufferInfor = ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(this._pointArrays);
        //创建shader
        this._programInfor = ShaderFactory_1.G_ShaderFactory.createProgramInfo(this.vert, this.frag);
        //创建attribuffer
        this._coordinateBufferInfo = ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(this._coordinateArrays);
        this._tempMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp1Matrix = Matrix_1.glMatrix.mat4.identity(null);
    };
    /**
     * 绘制世界坐标系
     * 你想在上面位置来观察世界坐标系
     * @param proj 投影矩阵
     * @param camera 相机矩阵
     * @param world 世界矩阵  当前模型中的点需要乘以这个矩阵转换到世界坐标系下
     *
     */
    Graphic.prototype.drawLine = function (proj, camera, world) {
        if (world === void 0) { world = Matrix_1.glMatrix.mat4.identity(null); }
        Matrix_1.glMatrix.mat4.invert(this._tempMatrix, camera);
        var pv = Matrix_1.glMatrix.mat4.multiply(this._temp1Matrix, proj, this._tempMatrix);
        Matrix_1.glMatrix.mat4.multiply(this._temp1Matrix, this._temp1Matrix, world);
        this.gl.useProgram(this._programInfor.spGlID);
        ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(this._programInfor.attrSetters, this._coordinateBufferInfo);
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, { u_worldViewProjection: pv });
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, { u_color: [1, 1, 1, 1] });
        ShaderFactory_1.G_ShaderFactory.drawBufferInfo(this._coordinateBufferInfo, this.gl.LINES);
    };
    Graphic.prototype.updatePoint = function () {
        var change = 0.1;
        this._pointArrays.position[3] = this._pointArrays.position[3] + change; //眼睛的位置
        this._pointArrays.position[7] = this._pointArrays.position[7] + change;
        this._pointArrays.position[11] = this._pointArrays.position[11] + change;
        this._pointBufferInfor = ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(this._pointArrays);
    };
    Graphic.prototype.drawPoint = function (proj, camera, world) {
        if (world === void 0) { world = Matrix_1.glMatrix.mat4.identity(null); }
        this.updatePoint();
        var view = Matrix_1.glMatrix.mat4.invert(null, camera);
        var vp = Matrix_1.glMatrix.mat4.multiply(null, proj, view);
        Matrix_1.glMatrix.mat4.multiply(vp, vp, world);
        this.gl.useProgram(this._programInfor.spGlID);
        ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(this._programInfor.attrSetters, this._pointBufferInfor);
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, { u_worldViewProjection: vp });
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, { u_color: [1, 1, 1, 1] });
        ShaderFactory_1.G_ShaderFactory.drawBufferInfo(this._pointBufferInfor, this.gl.POINTS);
    };
    return Graphic;
}());
exports.Graphic = Graphic;
},{"../Matrix":6,"../renderer/shader/ShaderFactory":59}],5:[function(require,module,exports){
"use strict";
/**
 * 加载管理员
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 var myHeaders = new Headers();
var myInit:any = { method: 'GET',
              headers: myHeaders,
              mode: 'cors',
              cache: 'default' };
var myRequest = new Request('http:localhost:3000//res/models/windmill/windmill.obj', myInit);

fetch(myRequest).then(function(response) {
   return response.text();
 }).then(function(myBlob) {
   console.log("myBlob-------",myBlob);
 });
 */
function loadFile(url, typeFunc) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetch(url)];
                case 1:
                    response = _a.sent();
                    if (!response.ok) {
                        throw new Error("could not load: " + url);
                    }
                    return [4 /*yield*/, response[typeFunc]()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function loadBinary(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, loadFile(url, 'arrayBuffer')];
        });
    });
}
function loadJSON(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, loadFile(url, 'json')];
        });
    });
}
function loadText(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, loadFile(url, 'text')];
        });
    });
}
var LoaderManager = /** @class */ (function () {
    function LoaderManager() {
        this._cache = new Map();
    }
    Object.defineProperty(LoaderManager, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new LoaderManager();
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    //加载gltf动画文件
    LoaderManager.prototype.loadGLTF = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var gltf, baseURL, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, loadJSON(path)];
                    case 1:
                        gltf = _b.sent();
                        baseURL = new URL(path, location.href);
                        _a = gltf;
                        return [4 /*yield*/, Promise.all(gltf.buffers.map(function (buffer) {
                                var url = new URL(buffer.uri, baseURL.href);
                                return loadBinary(url.href);
                            }))];
                    case 2:
                        _a.buffers = _b.sent();
                        this._cache.set(path, gltf);
                        return [2 /*return*/];
                }
            });
        });
    };
    //加载json格式的二进制
    //就是将json转为二进制 然后以二进制读取再转会json
    LoaderManager.prototype.loadJsonBlobData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        //以二进制方式读取数据,读取到的结果将放入Blob的一个对象中存放
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                fr.onload = function (e) {
                    console.log("bin file---", fr.result);
                    var rawData = new Float32Array(fr.result);
                    var str = "";
                    for (var i = 0; i < rawData.length; i++) {
                        str = str + String.fromCharCode((rawData[i]));
                    }
                    JSON.parse(str);
                    console.log("result --", str);
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result, path);
                };
            }
        };
    };
    /**
     * 加载obj
     */
    LoaderManager.prototype.loadObjData = function (path, callBackProgress, callBackFinish) {
    };
    //加载二进制数据
    LoaderManager.prototype.loadBlobData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                fr.onload = function (e) {
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result, path);
                };
            }
        };
    };
    //加载json数据
    LoaderManager.prototype.loadJsonData = function (path, callBackProgress, callBackFinish) {
        var request = new XMLHttpRequest();
        var _this = this;
        request.open("get", path);
        request.send(null);
        request.responseType = "json";
        request.onload = function () {
            if (request.status == 0) {
                var jsonData = request.response;
                if (callBackFinish)
                    callBackFinish.call(null, jsonData, path);
            }
        };
    };
    //加载可以转化为json的数据
    LoaderManager.prototype.loadJsonStringData = function (path, callBackProgress, callBackFinish) {
        var request = new XMLHttpRequest();
        var _this = this;
        request.open("get", path);
        request.send(null);
        request.responseType = "text";
        request.onload = function () {
            if (request.status == 0) {
                var jsonData = JSON.parse(request.responseText);
                if (callBackFinish)
                    callBackFinish.call(null, jsonData, path);
            }
        };
    };
    //加载骨骼数据
    LoaderManager.prototype.loadSkelData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                // fr.readAsText(request.response);
                fr.onload = function (e) {
                    // console.log("加载二进制成功---",fr.result);
                    // var uint8_msg = new Uint8Array(fr.result as ArrayBuffer);
                    // // 解码成字符串
                    // var decodedString = String.fromCharCode.apply(null, uint8_msg);
                    // console.log("字符串--",decodedString); 
                    // // parse,转成json数据
                    // var data = JSON.parse(decodedString);
                    // console.log(data);
                    // let content = fr.result;//arraybuffer类型数据
                    // let resBlob = new Blob([content])
                    // let reader = new FileReader()
                    // reader.readAsText(resBlob, "utf-8")
                    // reader.onload = () => {
                    //     console.log("gagag---",reader.result);
                    //         let res = JSON.parse(reader.result as string)
                    //         console.log(res);
                    // }
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result, path);
                };
            }
        };
    };
    //加载图片数据
    LoaderManager.prototype.loadImageData = function (path, callBackProgress, callBackFinish) {
        console.log("path------", path);
        var isHttp = path.indexOf("http") >= 0;
        if (!isHttp) {
            //本地
            var img = new Image();
            img.onload = function (img) {
                if (!img) {
                    console.log("加载的图片路径不存在---", path);
                    return;
                }
                if (callBackFinish)
                    callBackFinish.call(null, img, path);
            }.bind(this, img);
            img.src = path;
        }
        else {
            //远程加载
            // fetch(path).then((response)=>{
            //     console.log("response-------",response);
            //     if(response.ok)
            //     {
            //         console.log("进来啦----");
            //         let myBlob =  response.blob();
            //         var objectURL = URL.createObjectURL(myBlob);
            //         var img = new Image(); 
            //         img.src = objectURL;
            //         console.log("objectURL------",objectURL);
            //         if (callBackFinish) callBackFinish.call(null, img, path); 
            //     }
            //     throw new Error('Network response was not ok.');
            // }).catch((err)=>{
            //     console.log("加载图片失败了啊");
            // })
            var request = new XMLHttpRequest();
            request.open("get", path, true);
            request.send();
            request.responseType = "blob";
            request.onload = function () {
                var objectURL = URL.createObjectURL(request.response);
                var img = new Image();
                img.src = objectURL;
                if (callBackFinish)
                    callBackFinish.call(null, img, path);
            };
        }
    };
    LoaderManager.prototype.getLoadFunc = function (path) {
        var strArr = path.split('.');
        var extName = strArr[strArr.length - 1];
        switch (extName) {
            case "jpg": return this.loadImageData;
            case "png": return this.loadImageData;
            case "bin": return this.loadBlobData;
            case "obj": return this.loadObjData;
            case "json": return this.loadJsonData;
            case "gltf": return this.loadJsonStringData;
            case "skel": return this.loadSkelData;
            default:
                console.log("发现未知后缀名的文件----", path);
                null;
                break;
        }
    };
    //加载数据
    LoaderManager.prototype.load = function (arr, callBackProgress, callBackFinish) {
        return __awaiter(this, void 0, void 0, function () {
            var count, length, resRet, j, path, result, loadFunc;
            var _this_1 = this;
            return __generator(this, function (_a) {
                //test
                // await this.loadGLTF("https://webglfundamentals.org/webgl/resources/models/killer_whale/whale.CYCLES.gltf");
                if (!(arr instanceof Array)) {
                    arr = [arr];
                }
                count = 0;
                length = arr.length;
                resRet = [];
                for (j = 0; j < length; j++) {
                    path = arr[j];
                    result = this.getRes(path);
                    if (result) {
                        //资源存在 不用重新加载
                        resRet.push(result);
                        count++;
                        if (callBackProgress)
                            callBackProgress(count / length);
                        this.onLoadProgress(count / length);
                        if (count == length) {
                            this.onLoadFinish();
                            if (callBackFinish)
                                callBackFinish(resRet.length == 1 ? resRet[0] : resRet);
                            return [2 /*return*/];
                        }
                        //继续加载
                        continue;
                    }
                    loadFunc = this.getLoadFunc(path);
                    loadFunc.call(this, path, null, function (res, path) {
                        resRet.push(res);
                        _this_1._cache.set(path, res);
                        if (callBackProgress)
                            callBackProgress(count / length);
                        count++;
                        _this_1.onLoadProgress(count / length);
                        if (count == length) {
                            _this_1.onLoadFinish();
                            if (callBackFinish)
                                callBackFinish(resRet.length == 1 ? resRet[0] : resRet);
                        }
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    //获取缓存中的数据
    LoaderManager.prototype.getRes = function (url) {
        return this._cache.get(url);
    };
    /**
     * 移除CPU端内存中的图片缓存
     * @param url
     */
    LoaderManager.prototype.removeImage = function (url) {
        var img = this.getRes(url);
        if (img) {
            console.log("解除引用");
            this._cache.delete(url);
            this.releaseCPUMemoryForImageCache(img);
        }
        else {
            console.log("sorry----没找到---无法清理-", url);
        }
    };
    /**
     *
     * @param img
     * 释放CPU端内存中的图片缓存
     */
    LoaderManager.prototype.releaseCPUMemoryForImageCache = function (img) {
        img.src = "";
        img = null;
    };
    LoaderManager.prototype.onLoadProgress = function (progress) {
        console.log("加载进度---------", progress);
    };
    LoaderManager.prototype.onLoadFinish = function () {
        console.log("加载完成啦");
    };
    return LoaderManager;
}());
exports.default = LoaderManager;
},{}],6:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.glMatrix = void 0;
var glMatrix;
(function (glMatrix_1) {
    /**
* Common utilities
* @module glMatrix
*/
    // Configuration Constants
    var EPSILON = 0.000001;
    var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
    var RANDOM = Math.random;
    /**
     * Sets the type of array used when creating new vectors and matrices
     *
     * @param {Type} type Array type, such as Float32Array or Array
     */
    function setMatrixArrayType(type) {
        ARRAY_TYPE = type;
    }
    var degree = Math.PI / 180;
    /**
     * Convert Degree To Radian
     *
     * @param {Number} a Angle in Degrees
     */
    function toRadian(a) {
        return a * degree;
    }
    /**
     * Tests whether or not the arguments have approximately the same value, within an absolute
     * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
     * than or equal to 1.0, and a relative tolerance is used for larger values)
     *
     * @param {Number} a The first number to test.
     * @param {Number} b The second number to test.
     * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
     */
    function equals(a, b) {
        return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
    }
    if (!Math.hypot)
        Math.hypot = function () {
            var y = 0, i = arguments.length;
            while (i--) {
                y += arguments[i] * arguments[i];
            }
            return Math.sqrt(y);
        };
    var MatType = Float32Array;
    var common = /*#__PURE__*/ Object.freeze({
        EPSILON: EPSILON,
        get ARRAY_TYPE() { return ARRAY_TYPE; },
        RANDOM: RANDOM,
        setMatrixArrayType: setMatrixArrayType,
        toRadian: toRadian,
        equals: equals
    });
    /**
     * 2x2 Matrix
     * @module mat2
     */
    /**
     * Creates a new identity mat2
     *
     * @returns {mat2} a new 2x2 matrix
     */
    function create() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
        }
        out[0] = 1;
        out[3] = 1;
        return out;
    }
    /**
     * Creates a new mat2 initialized with values from an existing matrix
     *
     * @param {mat2} a matrix to clone
     * @returns {mat2} a new 2x2 matrix
     */
    function clone(a) {
        var out = new ARRAY_TYPE(4);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Copy the values from one mat2 to another
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Set a mat2 to the identity matrix
     *
     * @param {mat2} out the receiving matrix
     * @returns {mat2} out
     */
    function identity(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
    }
    /**
     * Create a new mat2 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m10 Component in column 1, row 0 position (index 2)
     * @param {Number} m11 Component in column 1, row 1 position (index 3)
     * @returns {mat2} out A new 2x2 matrix
     */
    function fromValues(m00, m01, m10, m11) {
        var out = new ARRAY_TYPE(4);
        out[0] = m00;
        out[1] = m01;
        out[2] = m10;
        out[3] = m11;
        return out;
    }
    /**
     * Set the components of a mat2 to the given values
     *
     * @param {mat2} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m10 Component in column 1, row 0 position (index 2)
     * @param {Number} m11 Component in column 1, row 1 position (index 3)
     * @returns {mat2} out
     */
    function set(out, m00, m01, m10, m11) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m10;
        out[3] = m11;
        return out;
    }
    /**
     * Transpose the values of a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function transpose(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache
        // some values
        if (out === a) {
            var a1 = a[1];
            out[1] = a[2];
            out[2] = a1;
        }
        else {
            out[0] = a[0];
            out[1] = a[2];
            out[2] = a[1];
            out[3] = a[3];
        }
        return out;
    }
    /**
     * adds 2 vectors3s
     * @param {Vector3} a a
     * @param {Vector3} b b
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function addVectors(dst, a, b) {
        dst = dst || new MatType(3);
        dst[0] = a[0] + b[0];
        dst[1] = a[1] + b[1];
        dst[2] = a[2] + b[2];
        return dst;
    }
    /**
     * subtracts 2 vectors3s
     * @param {Vector3} a a
     * @param {Vector3} b b
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function subtractVectors(dst, a, b) {
        dst = dst || new MatType(3);
        dst[0] = a[0] - b[0];
        dst[1] = a[1] - b[1];
        dst[2] = a[2] - b[2];
        return dst;
    }
    /**
     * scale vectors3
     * @param {Vector3} v vector
     * @param {Number} s scale
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function scaleVector(dst, v, s) {
        dst = dst || new MatType(3);
        dst[0] = v[0] * s;
        dst[1] = v[1] * s;
        dst[2] = v[2] * s;
        return dst;
    }
    /**
     * Inverts a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function invert(out, a) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3]; // Calculate the determinant
        var det = a0 * a3 - a2 * a1;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = a3 * det;
        out[1] = -a1 * det;
        out[2] = -a2 * det;
        out[3] = a0 * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function adjoint(out, a) {
        // Caching this value is nessecary if out == a
        var a0 = a[0];
        out[0] = a[3];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a0;
        return out;
    }
    /**
     * Calculates the determinant of a mat2
     *
     * @param {mat2} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant(a) {
        return a[0] * a[3] - a[2] * a[1];
    }
    /**
     * Multiplies two mat2's
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function multiply(out, a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        out[0] = a0 * b0 + a2 * b1;
        out[1] = a1 * b0 + a3 * b1;
        out[2] = a0 * b2 + a2 * b3;
        out[3] = a1 * b2 + a3 * b3;
        return out;
    }
    /**
     * Rotates a mat2 by the given angle
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2} out
     */
    function rotate(out, a, rad) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = a0 * c + a2 * s;
        out[1] = a1 * c + a3 * s;
        out[2] = a0 * -s + a2 * c;
        out[3] = a1 * -s + a3 * c;
        return out;
    }
    /**
     * Scales the mat2 by the dimensions in the given vec2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to rotate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat2} out
     **/
    function scale(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var v0 = v[0], v1 = v[1];
        out[0] = a0 * v0;
        out[1] = a1 * v0;
        out[2] = a2 * v1;
        out[3] = a3 * v1;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat2.identity(dest);
     *     mat2.rotate(dest, dest, rad);
     *
     * @param {mat2} out mat2 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2} out
     */
    function fromRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = -s;
        out[3] = c;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat2.identity(dest);
     *     mat2.scale(dest, dest, vec);
     *
     * @param {mat2} out mat2 receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat2} out
     */
    function fromScaling(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = v[1];
        return out;
    }
    /**
     * Returns a string representation of a mat2
     *
     * @param {mat2} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str(a) {
        return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Returns Frobenius norm of a mat2
     *
     * @param {mat2} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob(a) {
        return Math.hypot(a[0], a[1], a[2], a[3]);
    }
    /**
     * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
     * @param {mat2} L the lower triangular matrix
     * @param {mat2} D the diagonal matrix
     * @param {mat2} U the upper triangular matrix
     * @param {mat2} a the input matrix to factorize
     */
    function LDU(L, D, U, a) {
        L[2] = a[2] / a[0];
        U[0] = a[0];
        U[1] = a[1];
        U[3] = a[3] - L[2] * U[1];
        return [L, D, U];
    }
    /**
     * Adds two mat2's
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function subtract(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat2} a The first matrix.
     * @param {mat2} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat2} a The first matrix.
     * @param {mat2} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$1(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat2} out
     */
    function multiplyScalar(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        return out;
    }
    /**
     * Adds two mat2's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat2} out the receiving vector
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat2} out
     */
    function multiplyScalarAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        return out;
    }
    /**
     * Alias for {@link mat2.multiply}
     * @function
     */
    var mul = multiply;
    /**
     * Alias for {@link mat2.subtract}
     * @function
     */
    var sub = subtract;
    glMatrix_1.mat2 = Object.freeze({
        create: create,
        clone: clone,
        copy: copy,
        identity: identity,
        fromValues: fromValues,
        set: set,
        transpose: transpose,
        invert: invert,
        adjoint: adjoint,
        determinant: determinant,
        multiply: multiply,
        rotate: rotate,
        scale: scale,
        fromRotation: fromRotation,
        fromScaling: fromScaling,
        str: str,
        frob: frob,
        LDU: LDU,
        add: add,
        subtract: subtract,
        exactEquals: exactEquals,
        equals: equals$1,
        multiplyScalar: multiplyScalar,
        multiplyScalarAndAdd: multiplyScalarAndAdd,
        mul: mul,
        sub: sub
    });
    /**
     * 2x3 Matrix
     * @module mat2d
     *
     * @description
     * A mat2d contains six elements defined as:
     * <pre>
     * [a, c, tx,
     *  b, d, ty]
     * </pre>
     * This is a short form for the 3x3 matrix:
     * <pre>
     * [a, c, tx,
     *  b, d, ty,
     *  0, 0, 1]
     * </pre>
     * The last row is ignored so the array is shorter and operations are faster.
     */
    /**
     * Creates a new identity mat2d
     *
     * @returns {mat2d} a new 2x3 matrix
     */
    function create$1() {
        var out = new ARRAY_TYPE(6);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[4] = 0;
            out[5] = 0;
        }
        out[0] = 1;
        out[3] = 1;
        return out;
    }
    /**
     * Creates a new mat2d initialized with values from an existing matrix
     *
     * @param {mat2d} a matrix to clone
     * @returns {mat2d} a new 2x3 matrix
     */
    function clone$1(a) {
        var out = new ARRAY_TYPE(6);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        return out;
    }
    /**
     * Copy the values from one mat2d to another
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the source matrix
     * @returns {mat2d} out
     */
    function copy$1(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        return out;
    }
    /**
     * Set a mat2d to the identity matrix
     *
     * @param {mat2d} out the receiving matrix
     * @returns {mat2d} out
     */
    function identity$1(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Create a new mat2d with the given values
     *
     * @param {Number} a Component A (index 0)
     * @param {Number} b Component B (index 1)
     * @param {Number} c Component C (index 2)
     * @param {Number} d Component D (index 3)
     * @param {Number} tx Component TX (index 4)
     * @param {Number} ty Component TY (index 5)
     * @returns {mat2d} A new mat2d
     */
    function fromValues$1(a, b, c, d, tx, ty) {
        var out = new ARRAY_TYPE(6);
        out[0] = a;
        out[1] = b;
        out[2] = c;
        out[3] = d;
        out[4] = tx;
        out[5] = ty;
        return out;
    }
    /**
     * Set the components of a mat2d to the given values
     *
     * @param {mat2d} out the receiving matrix
     * @param {Number} a Component A (index 0)
     * @param {Number} b Component B (index 1)
     * @param {Number} c Component C (index 2)
     * @param {Number} d Component D (index 3)
     * @param {Number} tx Component TX (index 4)
     * @param {Number} ty Component TY (index 5)
     * @returns {mat2d} out
     */
    function set$1(out, a, b, c, d, tx, ty) {
        out[0] = a;
        out[1] = b;
        out[2] = c;
        out[3] = d;
        out[4] = tx;
        out[5] = ty;
        return out;
    }
    /**
     * Inverts a mat2d
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the source matrix
     * @returns {mat2d} out
     */
    function invert$1(out, a) {
        var aa = a[0], ab = a[1], ac = a[2], ad = a[3];
        var atx = a[4], aty = a[5];
        var det = aa * ad - ab * ac;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = ad * det;
        out[1] = -ab * det;
        out[2] = -ac * det;
        out[3] = aa * det;
        out[4] = (ac * aty - ad * atx) * det;
        out[5] = (ab * atx - aa * aty) * det;
        return out;
    }
    /**
     * Calculates the determinant of a mat2d
     *
     * @param {mat2d} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$1(a) {
        return a[0] * a[3] - a[1] * a[2];
    }
    /**
     * Multiplies two mat2d's
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function multiply$1(out, a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
        out[0] = a0 * b0 + a2 * b1;
        out[1] = a1 * b0 + a3 * b1;
        out[2] = a0 * b2 + a2 * b3;
        out[3] = a1 * b2 + a3 * b3;
        out[4] = a0 * b4 + a2 * b5 + a4;
        out[5] = a1 * b4 + a3 * b5 + a5;
        return out;
    }
    /**
     * Rotates a mat2d by the given angle
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2d} out
     */
    function rotate$1(out, a, rad) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = a0 * c + a2 * s;
        out[1] = a1 * c + a3 * s;
        out[2] = a0 * -s + a2 * c;
        out[3] = a1 * -s + a3 * c;
        out[4] = a4;
        out[5] = a5;
        return out;
    }
    /**
     * Scales the mat2d by the dimensions in the given vec2
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to translate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat2d} out
     **/
    function scale$1(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var v0 = v[0], v1 = v[1];
        out[0] = a0 * v0;
        out[1] = a1 * v0;
        out[2] = a2 * v1;
        out[3] = a3 * v1;
        out[4] = a4;
        out[5] = a5;
        return out;
    }
    /**
     * Translates the mat2d by the dimensions in the given vec2
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to translate
     * @param {vec2} v the vec2 to translate the matrix by
     * @returns {mat2d} out
     **/
    function translate(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var v0 = v[0], v1 = v[1];
        out[0] = a0;
        out[1] = a1;
        out[2] = a2;
        out[3] = a3;
        out[4] = a0 * v0 + a2 * v1 + a4;
        out[5] = a1 * v0 + a3 * v1 + a5;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.rotate(dest, dest, rad);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2d} out
     */
    function fromRotation$1(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = -s;
        out[3] = c;
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.scale(dest, dest, vec);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat2d} out
     */
    function fromScaling$1(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = v[1];
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.translate(dest, dest, vec);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {vec2} v Translation vector
     * @returns {mat2d} out
     */
    function fromTranslation(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = v[0];
        out[5] = v[1];
        return out;
    }
    /**
     * Returns a string representation of a mat2d
     *
     * @param {mat2d} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$1(a) {
        return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
    }
    /**
     * Returns Frobenius norm of a mat2d
     *
     * @param {mat2d} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$1(a) {
        return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
    }
    /**
     * Adds two mat2d's
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function add$1(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function subtract$1(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat2d} out
     */
    function multiplyScalar$1(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        return out;
    }
    /**
     * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat2d} out the receiving vector
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat2d} out
     */
    function multiplyScalarAndAdd$1(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat2d} a The first matrix.
     * @param {mat2d} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$1(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat2d} a The first matrix.
     * @param {mat2d} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$2(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
    }
    /**
     * Alias for {@link mat2d.multiply}
     * @function
     */
    var mul$1 = multiply$1;
    /**
     * Alias for {@link mat2d.subtract}
     * @function
     */
    var sub$1 = subtract$1;
    glMatrix_1.mat2d = Object.freeze({
        create: create$1,
        clone: clone$1,
        copy: copy$1,
        identity: identity$1,
        fromValues: fromValues$1,
        set: set$1,
        invert: invert$1,
        determinant: determinant$1,
        multiply: multiply$1,
        rotate: rotate$1,
        scale: scale$1,
        translate: translate,
        fromRotation: fromRotation$1,
        fromScaling: fromScaling$1,
        fromTranslation: fromTranslation,
        str: str$1,
        frob: frob$1,
        add: add$1,
        subtract: subtract$1,
        multiplyScalar: multiplyScalar$1,
        multiplyScalarAndAdd: multiplyScalarAndAdd$1,
        exactEquals: exactEquals$1,
        equals: equals$2,
        mul: mul$1,
        sub: sub$1
    });
    /**
     * 3x3 Matrix
     * @module mat3
     */
    /**
     * Creates a new identity mat3
     *
     * @returns {mat3} a new 3x3 matrix
     */
    function create$2() {
        var out = new ARRAY_TYPE(9);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
        }
        out[0] = 1;
        out[4] = 1;
        out[8] = 1;
        return out;
    }
    /**
     * Copies the upper-left 3x3 values into the given mat3.
     *
     * @param {mat3} out the receiving 3x3 matrix
     * @param {mat4} a   the source 4x4 matrix
     * @returns {mat3} out
     */
    function fromMat4(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[4];
        out[4] = a[5];
        out[5] = a[6];
        out[6] = a[8];
        out[7] = a[9];
        out[8] = a[10];
        return out;
    }
    /**
     * Creates a new mat3 initialized with values from an existing matrix
     *
     * @param {mat3} a matrix to clone
     * @returns {mat3} a new 3x3 matrix
     */
    function clone$2(a) {
        var out = new ARRAY_TYPE(9);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Copy the values from one mat3 to another
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function copy$2(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Create a new mat3 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m10 Component in column 1, row 0 position (index 3)
     * @param {Number} m11 Component in column 1, row 1 position (index 4)
     * @param {Number} m12 Component in column 1, row 2 position (index 5)
     * @param {Number} m20 Component in column 2, row 0 position (index 6)
     * @param {Number} m21 Component in column 2, row 1 position (index 7)
     * @param {Number} m22 Component in column 2, row 2 position (index 8)
     * @returns {mat3} A new mat3
     */
    function fromValues$2(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        var out = new ARRAY_TYPE(9);
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m10;
        out[4] = m11;
        out[5] = m12;
        out[6] = m20;
        out[7] = m21;
        out[8] = m22;
        return out;
    }
    /**
     * Set the components of a mat3 to the given values
     *
     * @param {mat3} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m10 Component in column 1, row 0 position (index 3)
     * @param {Number} m11 Component in column 1, row 1 position (index 4)
     * @param {Number} m12 Component in column 1, row 2 position (index 5)
     * @param {Number} m20 Component in column 2, row 0 position (index 6)
     * @param {Number} m21 Component in column 2, row 1 position (index 7)
     * @param {Number} m22 Component in column 2, row 2 position (index 8)
     * @returns {mat3} out
     */
    function set$2(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m10;
        out[4] = m11;
        out[5] = m12;
        out[6] = m20;
        out[7] = m21;
        out[8] = m22;
        return out;
    }
    /**
     * Set a mat3 to the identity matrix
     *
     * @param {mat3} out the receiving matrix
     * @returns {mat3} out
     */
    function identity$2(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Transpose the values of a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function transpose$1(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
            var a01 = a[1], a02 = a[2], a12 = a[5];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a01;
            out[5] = a[7];
            out[6] = a02;
            out[7] = a12;
        }
        else {
            out[0] = a[0];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a[1];
            out[4] = a[4];
            out[5] = a[7];
            out[6] = a[2];
            out[7] = a[5];
            out[8] = a[8];
        }
        return out;
    }
    /**
     * Inverts a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function invert$2(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        var b01 = a22 * a11 - a12 * a21;
        var b11 = -a22 * a10 + a12 * a20;
        var b21 = a21 * a10 - a11 * a20; // Calculate the determinant
        var det = a00 * b01 + a01 * b11 + a02 * b21;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = b01 * det;
        out[1] = (-a22 * a01 + a02 * a21) * det;
        out[2] = (a12 * a01 - a02 * a11) * det;
        out[3] = b11 * det;
        out[4] = (a22 * a00 - a02 * a20) * det;
        out[5] = (-a12 * a00 + a02 * a10) * det;
        out[6] = b21 * det;
        out[7] = (-a21 * a00 + a01 * a20) * det;
        out[8] = (a11 * a00 - a01 * a10) * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function adjoint$1(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        out[0] = a11 * a22 - a12 * a21;
        out[1] = a02 * a21 - a01 * a22;
        out[2] = a01 * a12 - a02 * a11;
        out[3] = a12 * a20 - a10 * a22;
        out[4] = a00 * a22 - a02 * a20;
        out[5] = a02 * a10 - a00 * a12;
        out[6] = a10 * a21 - a11 * a20;
        out[7] = a01 * a20 - a00 * a21;
        out[8] = a00 * a11 - a01 * a10;
        return out;
    }
    /**
     * Calculates the determinant of a mat3
     *
     * @param {mat3} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$2(a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
    }
    /**
     * Multiplies two mat3's
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function multiply$2(out, a, b) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        var b00 = b[0], b01 = b[1], b02 = b[2];
        var b10 = b[3], b11 = b[4], b12 = b[5];
        var b20 = b[6], b21 = b[7], b22 = b[8];
        out[0] = b00 * a00 + b01 * a10 + b02 * a20;
        out[1] = b00 * a01 + b01 * a11 + b02 * a21;
        out[2] = b00 * a02 + b01 * a12 + b02 * a22;
        out[3] = b10 * a00 + b11 * a10 + b12 * a20;
        out[4] = b10 * a01 + b11 * a11 + b12 * a21;
        out[5] = b10 * a02 + b11 * a12 + b12 * a22;
        out[6] = b20 * a00 + b21 * a10 + b22 * a20;
        out[7] = b20 * a01 + b21 * a11 + b22 * a21;
        out[8] = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
    }
    /**
     * Translate a mat3 by the given vector
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to translate
     * @param {vec2} v vector to translate by
     * @returns {mat3} out
     */
    function translate$1(out, a, v) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a10;
        out[4] = a11;
        out[5] = a12;
        out[6] = x * a00 + y * a10 + a20;
        out[7] = x * a01 + y * a11 + a21;
        out[8] = x * a02 + y * a12 + a22;
        return out;
    }
    /**
     * Rotates a mat3 by the given angle
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat3} out
     */
    function rotate$2(out, a, rad) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c * a00 + s * a10;
        out[1] = c * a01 + s * a11;
        out[2] = c * a02 + s * a12;
        out[3] = c * a10 - s * a00;
        out[4] = c * a11 - s * a01;
        out[5] = c * a12 - s * a02;
        out[6] = a20;
        out[7] = a21;
        out[8] = a22;
        return out;
    }
    /**
     * Scales the mat3 by the dimensions in the given vec2
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to rotate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat3} out
     **/
    function scale$2(out, a, v) {
        var x = v[0], y = v[1];
        out[0] = x * a[0];
        out[1] = x * a[1];
        out[2] = x * a[2];
        out[3] = y * a[3];
        out[4] = y * a[4];
        out[5] = y * a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.translate(dest, dest, vec);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {vec2} v Translation vector
     * @returns {mat3} out
     */
    function fromTranslation$1(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = v[0];
        out[7] = v[1];
        out[8] = 1;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.rotate(dest, dest, rad);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat3} out
     */
    function fromRotation$2(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = 0;
        out[3] = -s;
        out[4] = c;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.scale(dest, dest, vec);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat3} out
     */
    function fromScaling$2(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = v[1];
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Copies the values from a mat2d into a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat2d} a the matrix to copy
     * @returns {mat3} out
     **/
    function fromMat2d(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = 0;
        out[3] = a[2];
        out[4] = a[3];
        out[5] = 0;
        out[6] = a[4];
        out[7] = a[5];
        out[8] = 1;
        return out;
    }
    /**
    * Calculates a 3x3 matrix from the given quaternion
    *
    * @param {mat3} out mat3 receiving operation result
    * @param {quat} q Quaternion to create matrix from
    *
    * @returns {mat3} out
    */
    function fromQuat(out, q) {
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - yy - zz;
        out[3] = yx - wz;
        out[6] = zx + wy;
        out[1] = yx + wz;
        out[4] = 1 - xx - zz;
        out[7] = zy - wx;
        out[2] = zx - wy;
        out[5] = zy + wx;
        out[8] = 1 - xx - yy;
        return out;
    }
    /**
    * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
    *
    * @param {mat3} out mat3 receiving operation result
    * @param {mat4} a Mat4 to derive the normal matrix from
    *
    * @returns {mat3} out
    */
    function normalFromMat4(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        return out;
    }
    /**
     * Generates a 2D projection matrix with the given bounds
     *
     * @param {mat3} out mat3 frustum matrix will be written into
     * @param {number} width Width of your gl context
     * @param {number} height Height of gl context
     * @returns {mat3} out
     */
    function projection(out, width, height) {
        out[0] = 2 / width;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = -2 / height;
        out[5] = 0;
        out[6] = -1;
        out[7] = 1;
        out[8] = 1;
        return out;
    }
    /**
     * Returns a string representation of a mat3
     *
     * @param {mat3} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$2(a) {
        return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
    }
    /**
     * Returns Frobenius norm of a mat3
     *
     * @param {mat3} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$2(a) {
        return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
    }
    /**
     * Adds two mat3's
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function add$2(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        out[8] = a[8] + b[8];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function subtract$2(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        out[6] = a[6] - b[6];
        out[7] = a[7] - b[7];
        out[8] = a[8] - b[8];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat3} out
     */
    function multiplyScalar$2(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        out[8] = a[8] * b;
        return out;
    }
    /**
     * Adds two mat3's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat3} out the receiving vector
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat3} out
     */
    function multiplyScalarAndAdd$2(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        out[6] = a[6] + b[6] * scale;
        out[7] = a[7] + b[7] * scale;
        out[8] = a[8] + b[8] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat3} a The first matrix.
     * @param {mat3} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$2(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat3} a The first matrix.
     * @param {mat3} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$3(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
    }
    /**
     * Alias for {@link mat3.multiply}
     * @function
     */
    var mul$2 = multiply$2;
    /**
     * Alias for {@link mat3.subtract}
     * @function
     */
    var sub$2 = subtract$2;
    glMatrix_1.mat3 = Object.freeze({
        create: create$2,
        fromMat4: fromMat4,
        clone: clone$2,
        copy: copy$2,
        fromValues: fromValues$2,
        set: set$2,
        identity: identity$2,
        transpose: transpose$1,
        invert: invert$2,
        adjoint: adjoint$1,
        determinant: determinant$2,
        multiply: multiply$2,
        translate: translate$1,
        rotate: rotate$2,
        scale: scale$2,
        fromTranslation: fromTranslation$1,
        fromRotation: fromRotation$2,
        fromScaling: fromScaling$2,
        fromMat2d: fromMat2d,
        fromQuat: fromQuat,
        normalFromMat4: normalFromMat4,
        projection: projection,
        str: str$2,
        frob: frob$2,
        add: add$2,
        subtract: subtract$2,
        multiplyScalar: multiplyScalar$2,
        multiplyScalarAndAdd: multiplyScalarAndAdd$2,
        exactEquals: exactEquals$2,
        equals: equals$3,
        mul: mul$2,
        sub: sub$2
    });
    /**
     * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
     * @module mat4
     */
    /**
     * Creates a new identity mat4
     *
     * @returns {mat4} a new 4x4 matrix
     */
    function create$3() {
        var out = new ARRAY_TYPE(16);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
        }
        out[0] = 1;
        out[5] = 1;
        out[10] = 1;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a new mat4 initialized with values from an existing matrix
     *
     * @param {mat4} a matrix to clone
     * @returns {mat4} a new 4x4 matrix
     */
    function clone$3(a) {
        var out = new ARRAY_TYPE(16);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Copy the values from one mat4 to another
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function copy$3(out, a) {
        out = out || new MatType(16);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Create a new mat4 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} A new mat4
     */
    function fromValues$3(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        var out = new ARRAY_TYPE(16);
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m03;
        out[4] = m10;
        out[5] = m11;
        out[6] = m12;
        out[7] = m13;
        out[8] = m20;
        out[9] = m21;
        out[10] = m22;
        out[11] = m23;
        out[12] = m30;
        out[13] = m31;
        out[14] = m32;
        out[15] = m33;
        return out;
    }
    /**
     * Set the components of a mat4 to the given values
     *
     * @param {mat4} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} out
     */
    function set$3(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m03;
        out[4] = m10;
        out[5] = m11;
        out[6] = m12;
        out[7] = m13;
        out[8] = m20;
        out[9] = m21;
        out[10] = m22;
        out[11] = m23;
        out[12] = m30;
        out[13] = m31;
        out[14] = m32;
        out[15] = m33;
        return out;
    }
    /**
     * Set a mat4 to the identity matrix
     *
     * @param {mat4} out the receiving matrix
     * @returns {mat4} out
     */
    function identity$3(out) {
        out = out || new MatType(16);
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Transpose the values of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function transpose$2(out, a) {
        out = out || new MatType(16);
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
            var a01 = a[1], a02 = a[2], a03 = a[3];
            var a12 = a[6], a13 = a[7];
            var a23 = a[11];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a01;
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a02;
            out[9] = a12;
            out[11] = a[14];
            out[12] = a03;
            out[13] = a13;
            out[14] = a23;
        }
        else {
            out[0] = a[0];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a[1];
            out[5] = a[5];
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a[2];
            out[9] = a[6];
            out[10] = a[10];
            out[11] = a[14];
            out[12] = a[3];
            out[13] = a[7];
            out[14] = a[11];
            out[15] = a[15];
        }
        return out;
    }
    /**
     * creates a matrix from translation, quaternion, scale
     * @param {Number[]} translation [x, y, z] translation
     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation
     * @param {Number[]} scale [x, y, z] scale
     * @param {Matrix4} [dst] optional matrix to store result
     * @return {Matrix4} dst or a new matrix if none provided
     */
    function compose(dst, translation, quaternion, scale) {
        dst = dst || new Float32Array(16);
        var x = quaternion[0];
        var y = quaternion[1];
        var z = quaternion[2];
        var w = quaternion[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = scale[0];
        var sy = scale[1];
        var sz = scale[2];
        dst[0] = (1 - (yy + zz)) * sx;
        dst[1] = (xy + wz) * sx;
        dst[2] = (xz - wy) * sx;
        dst[3] = 0;
        dst[4] = (xy - wz) * sy;
        dst[5] = (1 - (xx + zz)) * sy;
        dst[6] = (yz + wx) * sy;
        dst[7] = 0;
        dst[8] = (xz + wy) * sz;
        dst[9] = (yz - wx) * sz;
        dst[10] = (1 - (xx + yy)) * sz;
        dst[11] = 0;
        dst[12] = translation[0];
        dst[13] = translation[1];
        dst[14] = translation[2];
        dst[15] = 1;
        return dst;
    }
    function decompose(mat, translation, quaternion, scale) {
        var sx = length(mat.slice(0, 3));
        var sy = length(mat.slice(4, 7));
        var sz = length(mat.slice(8, 11));
        // if determinate is negative, we need to invert one scale
        var det = determinate(mat);
        if (det < 0) {
            sx = -sx;
        }
        translation[0] = mat[12];
        translation[1] = mat[13];
        translation[2] = mat[14];
        // scale the rotation part
        var matrix = glMatrix_1.mat4.create();
        glMatrix_1.mat4.copy(matrix, mat);
        var invSX = 1 / sx;
        var invSY = 1 / sy;
        var invSZ = 1 / sz;
        matrix[0] *= invSX;
        matrix[1] *= invSX;
        matrix[2] *= invSX;
        matrix[4] *= invSY;
        matrix[5] *= invSY;
        matrix[6] *= invSY;
        matrix[8] *= invSZ;
        matrix[9] *= invSZ;
        matrix[10] *= invSZ;
        quatFromRotationMatrix(quaternion, matrix);
        scale[0] = sx;
        scale[1] = sy;
        scale[2] = sz;
    }
    function determinate(m) {
        var m00 = m[0 * 4 + 0];
        var m01 = m[0 * 4 + 1];
        var m02 = m[0 * 4 + 2];
        var m03 = m[0 * 4 + 3];
        var m10 = m[1 * 4 + 0];
        var m11 = m[1 * 4 + 1];
        var m12 = m[1 * 4 + 2];
        var m13 = m[1 * 4 + 3];
        var m20 = m[2 * 4 + 0];
        var m21 = m[2 * 4 + 1];
        var m22 = m[2 * 4 + 2];
        var m23 = m[2 * 4 + 3];
        var m30 = m[3 * 4 + 0];
        var m31 = m[3 * 4 + 1];
        var m32 = m[3 * 4 + 2];
        var m33 = m[3 * 4 + 3];
        var tmp_0 = m22 * m33;
        var tmp_1 = m32 * m23;
        var tmp_2 = m12 * m33;
        var tmp_3 = m32 * m13;
        var tmp_4 = m12 * m23;
        var tmp_5 = m22 * m13;
        var tmp_6 = m02 * m33;
        var tmp_7 = m32 * m03;
        var tmp_8 = m02 * m23;
        var tmp_9 = m22 * m03;
        var tmp_10 = m02 * m13;
        var tmp_11 = m12 * m03;
        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);
        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);
    }
    function quatFromRotationMatrix(dst, m) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        var m11 = m[0];
        var m12 = m[4];
        var m13 = m[8];
        var m21 = m[1];
        var m22 = m[5];
        var m23 = m[9];
        var m31 = m[2];
        var m32 = m[6];
        var m33 = m[10];
        var trace = m11 + m22 + m33;
        if (trace > 0) {
            var s = 0.5 / Math.sqrt(trace + 1);
            dst[3] = 0.25 / s;
            dst[0] = (m32 - m23) * s;
            dst[1] = (m13 - m31) * s;
            dst[2] = (m21 - m12) * s;
        }
        else if (m11 > m22 && m11 > m33) {
            var s = 2 * Math.sqrt(1 + m11 - m22 - m33);
            dst[3] = (m32 - m23) / s;
            dst[0] = 0.25 * s;
            dst[1] = (m12 + m21) / s;
            dst[2] = (m13 + m31) / s;
        }
        else if (m22 > m33) {
            var s = 2 * Math.sqrt(1 + m22 - m11 - m33);
            dst[3] = (m13 - m31) / s;
            dst[0] = (m12 + m21) / s;
            dst[1] = 0.25 * s;
            dst[2] = (m23 + m32) / s;
        }
        else {
            var s = 2 * Math.sqrt(1 + m33 - m11 - m22);
            dst[3] = (m21 - m12) / s;
            dst[0] = (m13 + m31) / s;
            dst[1] = (m23 + m32) / s;
            dst[2] = 0.25 * s;
        }
    }
    /**
     * Inverts a mat4
     * 求一个矩阵的逆矩阵
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function invert$3(out, a) {
        out = out || new MatType(16);
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function adjoint$2(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
        out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
        out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
        out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
        out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
        out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
        out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
        out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
        out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
        out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
        out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
        out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
        out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
        out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
        out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
        out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
        return out;
    }
    /**
     * Calculates the determinant of a mat4
     *
     * @param {mat4} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$3(a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    }
    /**
     * Multiplies two mat4s
     * a * b  b左乘a
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     *      A               B
     *a00a10a20a30
       0  4  8  12     0  4  8  12
     * 1  5  9  13     1  5  9  13
     * 2  6  10 14     2  6  10 14
     * 3  7  11 15     3  7  11 15
     */
    function multiply$3(out, a, b) {
        out = out || new MatType(16);
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3]; //a矩阵第一列
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7]; //a矩阵第二列
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11]; //a矩阵第三列
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15]; //a矩阵第四列
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30; //OUT11 a矩阵第一行*b矩阵第一列
        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31; //OUT21 a矩阵第二行*b矩阵第一列
        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32; //OUT31 a矩阵第三行*b矩阵第一列
        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33; //OUT41 a矩阵第四行*b矩阵第一列
        b0 = b[4];
        b1 = b[5];
        b2 = b[6];
        b3 = b[7];
        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30; //OUT12 a矩阵第一行*b矩阵第二列
        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31; //OUT22 a矩阵第二行*b矩阵第二列
        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32; //OUT32 a矩阵第三行*b矩阵第二列
        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33; //OUT42 a矩阵第四行*b矩阵第二列
        b0 = b[8];
        b1 = b[9];
        b2 = b[10];
        b3 = b[11];
        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30; //OUT13 a矩阵第一行*b矩阵第三列
        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31; //OUT23 a矩阵第二行*b矩阵第三列
        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32; //OUT33 a矩阵第三行*b矩阵第三列
        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33; //OUT43 a矩阵第四行*b矩阵第三列
        b0 = b[12];
        b1 = b[13];
        b2 = b[14];
        b3 = b[15];
        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30; //OUT14 a矩阵第一行*b矩阵第四列
        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31; //OUT24 a矩阵第二行*b矩阵第四列
        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32; //OUT34 a矩阵第三行*b矩阵第四列
        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33; //OUT44 a矩阵第四行*b矩阵第四列
        return out;
    }
    /**
     * Translate a mat4 by the given vector
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to translate
     * @param {vec3} v vector to translate by
     * @returns {mat4} out
     */
    function translate$2(out, a, v) {
        out = out || new MatType(16);
        var x = v[0], y = v[1], z = v[2];
        var a00, a01, a02, a03;
        var a10, a11, a12, a13;
        var a20, a21, a22, a23;
        if (a === out) {
            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
        }
        else {
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a03;
            out[4] = a10;
            out[5] = a11;
            out[6] = a12;
            out[7] = a13;
            out[8] = a20;
            out[9] = a21;
            out[10] = a22;
            out[11] = a23;
            out[12] = a00 * x + a10 * y + a20 * z + a[12];
            out[13] = a01 * x + a11 * y + a21 * z + a[13];
            out[14] = a02 * x + a12 * y + a22 * z + a[14];
            out[15] = a03 * x + a13 * y + a23 * z + a[15];
        }
        return out;
    }
    /**
     * Makes a scale matrix
     * @param {number} sx x scale.
     * @param {number} sy y scale.
     * @param {number} sz z scale.
     * @param {Matrix4} [dst] optional matrix to store result
     * @return {Matrix4} dst or a new matrix if none provided
     * @memberOf module:webgl-3d-math
     */
    function scaling(dst, sx, sy, sz) {
        dst = dst || new MatType(16);
        dst[0] = sx;
        dst[1] = 0;
        dst[2] = 0;
        dst[3] = 0;
        dst[4] = 0;
        dst[5] = sy;
        dst[6] = 0;
        dst[7] = 0;
        dst[8] = 0;
        dst[9] = 0;
        dst[10] = sz;
        dst[11] = 0;
        dst[12] = 0;
        dst[13] = 0;
        dst[14] = 0;
        dst[15] = 1;
        return dst;
    }
    /**
     * Scales the mat4 by the dimensions in the given vec3 not using vectorization
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {vec3} v the vec3 to scale the matrix by
     * @returns {mat4} out
     **/
    function scale$3(out, a, v) {
        var x = v[0], y = v[1], z = v[2];
        out[0] = a[0] * x;
        out[1] = a[1] * x;
        out[2] = a[2] * x;
        out[3] = a[3] * x;
        out[4] = a[4] * y;
        out[5] = a[5] * y;
        out[6] = a[6] * y;
        out[7] = a[7] * y;
        out[8] = a[8] * z;
        out[9] = a[9] * z;
        out[10] = a[10] * z;
        out[11] = a[11] * z;
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Rotates a mat4 by the given angle around the given axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @param {vec3} axis the axis to rotate around
     * @returns {mat4} out
     */
    function rotate$3(out, a, rad, axis) {
        var x = axis[0], y = axis[1], z = axis[2];
        var len = Math.hypot(x, y, z);
        var s, c, t;
        var a00, a01, a02, a03;
        var a10, a11, a12, a13;
        var a20, a21, a22, a23;
        var b00, b01, b02;
        var b10, b11, b12;
        var b20, b21, b22;
        if (len < EPSILON) {
            return null;
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(rad);
        c = Math.cos(rad);
        t = 1 - c;
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11]; // Construct the elements of the rotation matrix
        b00 = x * x * t + c;
        b01 = y * x * t + z * s;
        b02 = z * x * t - y * s;
        b10 = x * y * t - z * s;
        b11 = y * y * t + c;
        b12 = z * y * t + x * s;
        b20 = x * z * t + y * s;
        b21 = y * z * t - x * s;
        b22 = z * z * t + c; // Perform rotation-specific matrix multiplication
        out[0] = a00 * b00 + a10 * b01 + a20 * b02;
        out[1] = a01 * b00 + a11 * b01 + a21 * b02;
        out[2] = a02 * b00 + a12 * b01 + a22 * b02;
        out[3] = a03 * b00 + a13 * b01 + a23 * b02;
        out[4] = a00 * b10 + a10 * b11 + a20 * b12;
        out[5] = a01 * b10 + a11 * b11 + a21 * b12;
        out[6] = a02 * b10 + a12 * b11 + a22 * b12;
        out[7] = a03 * b10 + a13 * b11 + a23 * b12;
        out[8] = a00 * b20 + a10 * b21 + a20 * b22;
        out[9] = a01 * b20 + a11 * b21 + a21 * b22;
        out[10] = a02 * b20 + a12 * b21 + a22 * b22;
        out[11] = a03 * b20 + a13 * b21 + a23 * b22;
        if (a !== out) {
            // If the source and destination differ, copy the unchanged last row
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        }
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the X axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateX(out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[4] = a10 * c + a20 * s;
        out[5] = a11 * c + a21 * s;
        out[6] = a12 * c + a22 * s;
        out[7] = a13 * c + a23 * s;
        out[8] = a20 * c - a10 * s;
        out[9] = a21 * c - a11 * s;
        out[10] = a22 * c - a12 * s;
        out[11] = a23 * c - a13 * s;
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the Y axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateY(out, a, rad) {
        out = out || new MatType(16);
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[0] = a00 * c - a20 * s;
        out[1] = a01 * c - a21 * s;
        out[2] = a02 * c - a22 * s;
        out[3] = a03 * c - a23 * s;
        out[8] = a00 * s + a20 * c;
        out[9] = a01 * s + a21 * c;
        out[10] = a02 * s + a22 * c;
        out[11] = a03 * s + a23 * c;
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the Z axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateZ(out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged last row
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[0] = a00 * c + a10 * s;
        out[1] = a01 * c + a11 * s;
        out[2] = a02 * c + a12 * s;
        out[3] = a03 * c + a13 * s;
        out[4] = a10 * c - a00 * s;
        out[5] = a11 * c - a01 * s;
        out[6] = a12 * c - a02 * s;
        out[7] = a13 * c - a03 * s;
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {vec3} v Translation vector
     * @returns {mat4} out
     */
    function fromTranslation$2(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.scale(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {vec3} v Scaling vector
     * @returns {mat4} out
     */
    function fromScaling$3(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = v[1];
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = v[2];
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a given angle around a given axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotate(dest, dest, rad, axis);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @param {vec3} axis the axis to rotate around
     * @returns {mat4} out
     */
    function fromRotation$3(out, rad, axis) {
        var x = axis[0], y = axis[1], z = axis[2];
        var len = Math.hypot(x, y, z);
        var s, c, t;
        if (len < EPSILON) {
            return null;
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(rad);
        c = Math.cos(rad);
        t = 1 - c; // Perform rotation-specific matrix multiplication
        out[0] = x * x * t + c;
        out[1] = y * x * t + z * s;
        out[2] = z * x * t - y * s;
        out[3] = 0;
        out[4] = x * y * t - z * s;
        out[5] = y * y * t + c;
        out[6] = z * y * t + x * s;
        out[7] = 0;
        out[8] = x * z * t + y * s;
        out[9] = y * z * t - x * s;
        out[10] = z * z * t + c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the X axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateX(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromXRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = c;
        out[6] = s;
        out[7] = 0;
        out[8] = 0;
        out[9] = -s;
        out[10] = c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the Y axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateY(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromYRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = c;
        out[1] = 0;
        out[2] = -s;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = s;
        out[9] = 0;
        out[10] = c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the Z axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateZ(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromZRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = c;
        out[1] = s;
        out[2] = 0;
        out[3] = 0;
        out[4] = -s;
        out[5] = c;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation and vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @returns {mat4} out
     */
    function fromRotationTranslation(out, q, v) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - (yy + zz);
        out[1] = xy + wz;
        out[2] = xz - wy;
        out[3] = 0;
        out[4] = xy - wz;
        out[5] = 1 - (xx + zz);
        out[6] = yz + wx;
        out[7] = 0;
        out[8] = xz + wy;
        out[9] = yz - wx;
        out[10] = 1 - (xx + yy);
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a new mat4 from a dual quat.
     *
     * @param {mat4} out Matrix
     * @param {quat2} a Dual Quaternion
     * @returns {mat4} mat4 receiving operation result
     */
    function fromQuat2(out, a) {
        var translation = new ARRAY_TYPE(3);
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
        var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense
        if (magnitude > 0) {
            translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
            translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
            translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
        }
        else {
            translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
            translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
            translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
        }
        fromRotationTranslation(out, a, translation);
        return out;
    }
    /**
     * Returns the translation vector component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslation,
     *  the returned vector will be the same as the translation vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive translation component
     * @param  {mat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */
    function getTranslation(out, mat) {
        out[0] = mat[12];
        out[1] = mat[13];
        out[2] = mat[14];
        return out;
    }
    /**
     * Returns the scaling factor component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslationScale
     *  with a normalized Quaternion paramter, the returned vector will be
     *  the same as the scaling vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive scaling factor component
     * @param  {mat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */
    function getScaling(out, mat) {
        var m11 = mat[0];
        var m12 = mat[1];
        var m13 = mat[2];
        var m21 = mat[4];
        var m22 = mat[5];
        var m23 = mat[6];
        var m31 = mat[8];
        var m32 = mat[9];
        var m33 = mat[10];
        out[0] = Math.hypot(m11, m12, m13);
        out[1] = Math.hypot(m21, m22, m23);
        out[2] = Math.hypot(m31, m32, m33);
        return out;
    }
    /**
     * Returns a quaternion representing the rotational component
     *  of a transformation matrix. If a matrix is built with
     *  fromRotationTranslation, the returned quaternion will be the
     *  same as the quaternion originally supplied.
     * @param {quat} out Quaternion to receive the rotation component
     * @param {mat4} mat Matrix to be decomposed (input)
     * @return {quat} out
     */
    function getRotation(out, mat) {
        var scaling = new ARRAY_TYPE(3);
        getScaling(scaling, mat);
        var is1 = 1 / scaling[0];
        var is2 = 1 / scaling[1];
        var is3 = 1 / scaling[2];
        var sm11 = mat[0] * is1;
        var sm12 = mat[1] * is2;
        var sm13 = mat[2] * is3;
        var sm21 = mat[4] * is1;
        var sm22 = mat[5] * is2;
        var sm23 = mat[6] * is3;
        var sm31 = mat[8] * is1;
        var sm32 = mat[9] * is2;
        var sm33 = mat[10] * is3;
        var trace = sm11 + sm22 + sm33;
        var S = 0;
        if (trace > 0) {
            S = Math.sqrt(trace + 1.0) * 2;
            out[3] = 0.25 * S;
            out[0] = (sm23 - sm32) / S;
            out[1] = (sm31 - sm13) / S;
            out[2] = (sm12 - sm21) / S;
        }
        else if (sm11 > sm22 && sm11 > sm33) {
            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
            out[3] = (sm23 - sm32) / S;
            out[0] = 0.25 * S;
            out[1] = (sm12 + sm21) / S;
            out[2] = (sm31 + sm13) / S;
        }
        else if (sm22 > sm33) {
            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
            out[3] = (sm31 - sm13) / S;
            out[0] = (sm12 + sm21) / S;
            out[1] = 0.25 * S;
            out[2] = (sm23 + sm32) / S;
        }
        else {
            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
            out[3] = (sm12 - sm21) / S;
            out[0] = (sm31 + sm13) / S;
            out[1] = (sm23 + sm32) / S;
            out[2] = 0.25 * S;
        }
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @param {vec3} s Scaling vector
     * @returns {mat4} out
     */
    function fromRotationTranslationScale(out, q, v, s) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s[0];
        var sy = s[1];
        var sz = s[2];
        out[0] = (1 - (yy + zz)) * sx;
        out[1] = (xy + wz) * sx;
        out[2] = (xz - wy) * sx;
        out[3] = 0;
        out[4] = (xy - wz) * sy;
        out[5] = (1 - (xx + zz)) * sy;
        out[6] = (yz + wx) * sy;
        out[7] = 0;
        out[8] = (xz + wy) * sz;
        out[9] = (yz - wx) * sz;
        out[10] = (1 - (xx + yy)) * sz;
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     mat4.translate(dest, origin);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *     mat4.translate(dest, negativeOrigin);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @param {vec3} s Scaling vector
     * @param {vec3} o The origin vector around which to scale and rotate
     * @returns {mat4} out
     */
    function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s[0];
        var sy = s[1];
        var sz = s[2];
        var ox = o[0];
        var oy = o[1];
        var oz = o[2];
        var out0 = (1 - (yy + zz)) * sx;
        var out1 = (xy + wz) * sx;
        var out2 = (xz - wy) * sx;
        var out4 = (xy - wz) * sy;
        var out5 = (1 - (xx + zz)) * sy;
        var out6 = (yz + wx) * sy;
        var out8 = (xz + wy) * sz;
        var out9 = (yz - wx) * sz;
        var out10 = (1 - (xx + yy)) * sz;
        out[0] = out0;
        out[1] = out1;
        out[2] = out2;
        out[3] = 0;
        out[4] = out4;
        out[5] = out5;
        out[6] = out6;
        out[7] = 0;
        out[8] = out8;
        out[9] = out9;
        out[10] = out10;
        out[11] = 0;
        out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
        out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
        out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
        out[15] = 1;
        return out;
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat} q Quaternion to create matrix from
     *
     * @returns {mat4} out
     */
    function fromQuat$1(out, q) {
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - yy - zz;
        out[1] = yx + wz;
        out[2] = zx - wy;
        out[3] = 0;
        out[4] = yx - wz;
        out[5] = 1 - xx - zz;
        out[6] = zy + wx;
        out[7] = 0;
        out[8] = zx + wy;
        out[9] = zy - wx;
        out[10] = 1 - xx - yy;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Generates a frustum matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Number} left Left bound of the frustum
     * @param {Number} right Right bound of the frustum
     * @param {Number} bottom Bottom bound of the frustum
     * @param {Number} top Top bound of the frustum
     * @param {Number} near Near bound of the frustum
     * @param {Number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function frustum(out, left, right, bottom, top, near, far) {
        var rl = 1 / (right - left);
        var tb = 1 / (top - bottom);
        var nf = 1 / (near - far);
        out[0] = near * 2 * rl;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = near * 2 * tb;
        out[6] = 0;
        out[7] = 0;
        out[8] = (right + left) * rl;
        out[9] = (top + bottom) * tb;
        out[10] = (far + near) * nf;
        out[11] = -1;
        out[12] = 0;
        out[13] = 0;
        out[14] = far * near * 2 * nf;
        out[15] = 0;
        return out;
    }
    /**
     * Generates a perspective projection matrix with the given bounds.
     * Passing null/undefined/no value for far will generate infinite projection matrix.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} fovy Vertical field of view in radians
     * @param {number} aspect Aspect ratio. typically viewport width/height
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum, can be null or Infinity
     * @returns {mat4} out
     */
    function perspective(out, fovy, aspect, near, far) {
        out = out || new MatType(16);
        var f = 1.0 / Math.tan(fovy / 2), nf;
        out[0] = f / aspect;
        out[1] = 0;
        out[2] = 0; //x轴
        out[3] = 0;
        out[4] = 0;
        out[5] = f; //y轴
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0; //z轴
        out[11] = -1;
        out[12] = 0;
        out[13] = 0;
        out[15] = 0;
        if (far != null && far !== Infinity) {
            nf = 1 / (near - far);
            out[10] = (far + near) * nf;
            out[14] = 2 * far * near * nf;
        }
        else {
            out[10] = -1;
            out[14] = -2 * near;
        }
        return out;
    }
    /**
     * Generates a perspective projection matrix with the given field of view.
     * This is primarily useful for generating projection matrices to be used
     * with the still experiemental WebVR API.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function perspectiveFromFieldOfView(out, fov, near, far) {
        var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
        var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
        var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
        var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
        var xScale = 2.0 / (leftTan + rightTan);
        var yScale = 2.0 / (upTan + downTan);
        out[0] = xScale;
        out[1] = 0.0;
        out[2] = 0.0;
        out[3] = 0.0;
        out[4] = 0.0;
        out[5] = yScale;
        out[6] = 0.0;
        out[7] = 0.0;
        out[8] = -((leftTan - rightTan) * xScale * 0.5);
        out[9] = (upTan - downTan) * yScale * 0.5;
        out[10] = far / (near - far);
        out[11] = -1.0;
        out[12] = 0.0;
        out[13] = 0.0;
        out[14] = far * near / (near - far);
        out[15] = 0.0;
        return out;
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} left Left bound of the frustum
     * @param {number} right Right bound of the frustum
     * @param {number} bottom Bottom bound of the frustum
     * @param {number} top Top bound of the frustum
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function ortho(out, left, right, bottom, top, near, far) {
        out = out || new MatType(16);
        var lr = 1 / (left - right);
        var bt = 1 / (bottom - top);
        var nf = 1 / (near - far);
        out[0] = -2 * lr;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = -2 * bt;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 2 * nf;
        out[11] = 0;
        out[12] = (left + right) * lr;
        out[13] = (top + bottom) * bt;
        out[14] = (far + near) * nf;
        out[15] = 1;
        return out;
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point, and up axis.
     * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {vec3} eye Position of the viewer
     * @param {vec3} center Point the viewer is looking at
     * @param {vec3} up vec3 pointing up
     * @returns {mat4} out
     */
    function lookAt(out, eye, center, up) {
        out = out || new MatType(16);
        var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
        var eyex = eye[0];
        var eyey = eye[1];
        var eyez = eye[2];
        var upx = up[0]; //0
        var upy = up[1]; //1
        var upz = up[2]; //0
        var centerx = center[0]; //0
        var centery = center[1]; //0
        var centerz = center[2]; //0
        if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
            return identity$3(out);
        }
        z0 = eyex - centerx;
        z1 = eyey - centery;
        z2 = eyez - centerz;
        //平方和的平方根
        len = 1 / Math.hypot(z0, z1, z2);
        z0 *= len;
        z1 *= len;
        z2 *= len;
        x0 = upy * z2 - upz * z1;
        x1 = upz * z0 - upx * z2;
        x2 = upx * z1 - upy * z0;
        len = Math.hypot(x0, x1, x2);
        if (!len) {
            x0 = 0;
            x1 = 0;
            x2 = 0;
        }
        else {
            len = 1 / len;
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        y0 = z1 * x2 - z2 * x1;
        y1 = z2 * x0 - z0 * x2;
        y2 = z0 * x1 - z1 * x0;
        len = Math.hypot(y0, y1, y2);
        if (!len) {
            y0 = 0;
            y1 = 0;
            y2 = 0;
        }
        else {
            len = 1 / len;
            y0 *= len;
            y1 *= len;
            y2 *= len;
        }
        out[0] = x0;
        out[1] = y0;
        out[2] = z0; //x轴
        out[3] = 0;
        out[4] = x1;
        out[5] = y1;
        out[6] = z1; //y轴
        out[7] = 0;
        out[8] = x2;
        out[9] = y2;
        out[10] = z2; //z轴
        out[11] = 0;
        out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
        out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
        out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
        out[15] = 1;
        return out;
    }
    /**
     * Creates a lookAt matrix.
     * This is a world matrix for a camera. In other words it will transform
     * from the origin to a place and orientation in the world. For a view
     * matrix take the inverse of this.
     * @param {Vector3} cameraPosition position of the camera
     * @param {Vector3} target position of the target
     * @param {Vector3} up direction
     * @param {Matrix4} [dst] optional matrix to store result
     * @return {Matrix4} dst or a new matrix if none provided
     * @memberOf module:webgl-3d-math
     */
    function lookAt2(dst, cameraPosition, target, up) {
        dst = dst || new MatType(16);
        var zAxis = [];
        var subR = [];
        //用相机的位置向量减去看向的目标向量生成一条指向相机位置的z轴向量
        normalize(zAxis, subtractVectors(subR, cameraPosition, target));
        var xAxis = [];
        var cross1 = [];
        normalize(xAxis, cross(cross1, up, zAxis));
        var yAxis = [];
        var cross2 = [];
        normalize(yAxis, cross(cross2, zAxis, xAxis));
        dst[0] = xAxis[0];
        dst[1] = xAxis[1];
        dst[2] = xAxis[2];
        dst[3] = 0;
        dst[4] = yAxis[0];
        dst[5] = yAxis[1];
        dst[6] = yAxis[2];
        dst[7] = 0;
        dst[8] = zAxis[0];
        dst[9] = zAxis[1];
        dst[10] = zAxis[2];
        dst[11] = 0;
        dst[12] = cameraPosition[0];
        dst[13] = cameraPosition[1];
        dst[14] = cameraPosition[2];
        dst[15] = 1;
        return dst;
    }
    /**
     * Generates a matrix that makes something look at something else.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {vec3} eye Position of the viewer
     * @param {vec3} center Point the viewer is looking at
     * @param {vec3} up vec3 pointing up
     * @returns {mat4} out
     */
    function targetTo(out, eye, target, up) {
        var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
        var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
        var len = z0 * z0 + z1 * z1 + z2 * z2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            z0 *= len;
            z1 *= len;
            z2 *= len;
        }
        var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
        len = x0 * x0 + x1 * x1 + x2 * x2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        out[0] = x0;
        out[1] = x1;
        out[2] = x2;
        out[3] = 0;
        out[4] = z1 * x2 - z2 * x1;
        out[5] = z2 * x0 - z0 * x2;
        out[6] = z0 * x1 - z1 * x0;
        out[7] = 0;
        out[8] = z0;
        out[9] = z1;
        out[10] = z2;
        out[11] = 0;
        out[12] = eyex;
        out[13] = eyey;
        out[14] = eyez;
        out[15] = 1;
        return out;
    }
    /**
     * Returns a string representation of a mat4
     *
     * @param {mat4} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$3(a) {
        return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
    }
    /**
     * Returns Frobenius norm of a mat4
     *
     * @param {mat4} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$3(a) {
        return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
    }
    /**
     * Adds two mat4's
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */
    function add$3(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        out[8] = a[8] + b[8];
        out[9] = a[9] + b[9];
        out[10] = a[10] + b[10];
        out[11] = a[11] + b[11];
        out[12] = a[12] + b[12];
        out[13] = a[13] + b[13];
        out[14] = a[14] + b[14];
        out[15] = a[15] + b[15];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */
    function subtract$3(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        out[6] = a[6] - b[6];
        out[7] = a[7] - b[7];
        out[8] = a[8] - b[8];
        out[9] = a[9] - b[9];
        out[10] = a[10] - b[10];
        out[11] = a[11] - b[11];
        out[12] = a[12] - b[12];
        out[13] = a[13] - b[13];
        out[14] = a[14] - b[14];
        out[15] = a[15] - b[15];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat4} out
     */
    function multiplyScalar$3(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        out[8] = a[8] * b;
        out[9] = a[9] * b;
        out[10] = a[10] * b;
        out[11] = a[11] * b;
        out[12] = a[12] * b;
        out[13] = a[13] * b;
        out[14] = a[14] * b;
        out[15] = a[15] * b;
        return out;
    }
    /**
     * Adds two mat4's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat4} out the receiving vector
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat4} out
     */
    function multiplyScalarAndAdd$3(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        out[6] = a[6] + b[6] * scale;
        out[7] = a[7] + b[7] * scale;
        out[8] = a[8] + b[8] * scale;
        out[9] = a[9] + b[9] * scale;
        out[10] = a[10] + b[10] * scale;
        out[11] = a[11] + b[11] * scale;
        out[12] = a[12] + b[12] * scale;
        out[13] = a[13] + b[13] * scale;
        out[14] = a[14] + b[14] * scale;
        out[15] = a[15] + b[15] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat4} a The first matrix.
     * @param {mat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$3(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat4} a The first matrix.
     * @param {mat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$4(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
        var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
        var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
        var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
        var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
    }
    /**
     * Alias for {@link mat4.multiply}
     * @function
     */
    var mul$3 = multiply$3;
    /**
     * Alias for {@link mat4.subtract}
     * @function
     */
    var sub$3 = subtract$3;
    glMatrix_1.mat4 = Object.freeze({
        create: create$3,
        clone: clone$3,
        copy: copy$3,
        addVectors: addVectors,
        subtractVectors: subtractVectors,
        scaleVector: scaleVector,
        compose: compose,
        decompose: decompose,
        fromValues: fromValues$3,
        set: set$3,
        identity: identity$3,
        transpose: transpose$2,
        invert: invert$3,
        adjoint: adjoint$2,
        determinant: determinant$3,
        multiply: multiply$3,
        translate: translate$2,
        scale: scale$3,
        scaling: scaling,
        rotate: rotate$3,
        rotateX: rotateX,
        rotateY: rotateY,
        rotateZ: rotateZ,
        fromTranslation: fromTranslation$2,
        transformDirection: transformDirection,
        transformPoint: transformPoint,
        translation: translation,
        fromScaling: fromScaling$3,
        fromRotation: fromRotation$3,
        fromXRotation: fromXRotation,
        fromYRotation: fromYRotation,
        fromZRotation: fromZRotation,
        fromRotationTranslation: fromRotationTranslation,
        fromQuat2: fromQuat2,
        getTranslation: getTranslation,
        getScaling: getScaling,
        getRotation: getRotation,
        fromRotationTranslationScale: fromRotationTranslationScale,
        fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
        fromQuat: fromQuat$1,
        frustum: frustum,
        perspective: perspective,
        perspectiveFromFieldOfView: perspectiveFromFieldOfView,
        ortho: ortho,
        lookAt: lookAt,
        lookAt2: lookAt2,
        targetTo: targetTo,
        str: str$3,
        frob: frob$3,
        add: add$3,
        subtract: subtract$3,
        multiplyScalar: multiplyScalar$3,
        multiplyScalarAndAdd: multiplyScalarAndAdd$3,
        exactEquals: exactEquals$3,
        equals: equals$4,
        mul: mul$3,
        sub: sub$3
    });
    /**
    * Makes a translation matrix
    * 将单位矩阵移动到指定位置
    * @param {number} tx x translation.
    * @param {number} ty y translation.
    * @param {number} tz z translation.
    * @param {Matrix4} [dst] optional matrix to store result
    * @return {Matrix4} dst or a new matrix if none provided
    * @memberOf module:webgl-3d-math
    */
    function translation(dst, tx, ty, tz) {
        dst = dst || new MatType(16);
        dst[0] = 1;
        dst[1] = 0;
        dst[2] = 0;
        dst[3] = 0;
        dst[4] = 0;
        dst[5] = 1;
        dst[6] = 0;
        dst[7] = 0;
        dst[8] = 0;
        dst[9] = 0;
        dst[10] = 1;
        dst[11] = 0;
        dst[12] = tx;
        dst[13] = ty;
        dst[14] = tz;
        dst[15] = 1;
        return dst;
    }
    /**
    * Takes a 4-by-4 matrix and a vector with 3 entries,
    * interprets the vector as a point, transforms that point by the matrix, and
    * returns the result as a vector with 3 entries.
    * @param {Matrix4} m The matrix.
    * @param {Vector3} v The point.
    * @param {Vector4} dst optional vector4 to store result
    * @return {Vector4} dst or new Vector4 if not provided
    * @memberOf module:webgl-3d-math
    */
    function transformPoint(dst, m, v) {
        dst = dst || new MatType(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];
        dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;
        dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;
        dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;
        return dst;
    }
    /**
     * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a
     * direction, transforms that direction by the matrix, and returns the result;
     * assumes the transformation of 3-dimensional space represented by the matrix
     * is parallel-preserving, i.e. any combination of rotation, scaling and
     * translation, but not a perspective distortion. Returns a vector with 3
     * entries.
     * @param {Matrix4} m The matrix.
     * @param {Vector3} v The direction.
     * @param {Vector4} dst optional vector4 to store result
     * @return {Vector4} dst or new Vector4 if not provided
     * @memberOf module:webgl-3d-math
     */
    function transformDirection(m, v, dst) {
        dst = dst || new MatType(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];
        dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];
        dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];
        return dst;
    }
    /**
     * 3 Dimensional Vector
     * @module vec3
     */
    /**
     * Creates a new, empty vec3
     *
     * @returns {vec3} a new 3D vector
     */
    function create$4() {
        var out = new ARRAY_TYPE(3);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec3 initialized with values from an existing vector
     *
     * @param {vec3} a vector to clone
     * @returns {vec3} a new 3D vector
     */
    function clone$4(a) {
        var out = new ARRAY_TYPE(3);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
    }
    /**
     * Calculates the length of a vec3
     *
     * @param {vec3} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        return Math.hypot(x, y, z);
    }
    /**
     * Creates a new vec3 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} a new 3D vector
     */
    function fromValues$4(x, y, z) {
        var out = new ARRAY_TYPE(3);
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
    }
    /**
     * Copy the values from one vec3 to another
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the source vector
     * @returns {vec3} out
     */
    function copy$4(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
    }
    /**
     * Set the components of a vec3 to the given values
     *
     * @param {vec3} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} out
     */
    function set$4(out, x, y, z) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
    }
    /**
     * Adds two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function add$4(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function subtract$4(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        return out;
    }
    /**
     * Multiplies two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function multiply$4(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        out[2] = a[2] * b[2];
        return out;
    }
    /**
     * Divides two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function divide(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        out[2] = a[2] / b[2];
        return out;
    }
    /**
     * Math.ceil the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to ceil
     * @returns {vec3} out
     */
    function ceil(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        return out;
    }
    /**
     * Math.floor the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to floor
     * @returns {vec3} out
     */
    function floor(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        return out;
    }
    /**
     * Returns the minimum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function min(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        out[2] = Math.min(a[2], b[2]);
        return out;
    }
    /**
     * Returns the maximum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function max(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        out[2] = Math.max(a[2], b[2]);
        return out;
    }
    /**
     * Math.round the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to round
     * @returns {vec3} out
     */
    function round(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        return out;
    }
    /**
     * Scales a vec3 by a scalar number
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec3} out
     */
    function scale$4(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        return out;
    }
    /**
     * Adds two vec3's after scaling the second operand by a scalar value
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec3} out
     */
    function scaleAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        return Math.hypot(x, y, z);
    }
    /**
     * Calculates the squared euclidian distance between two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        return x * x + y * y + z * z;
    }
    /**
     * Calculates the squared length of a vec3
     *
     * @param {vec3} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        return x * x + y * y + z * z;
    }
    /**
     * Negates the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to negate
     * @returns {vec3} out
     */
    function negate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to invert
     * @returns {vec3} out
     */
    function inverse(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        return out;
    }
    /**
     * Normalize a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to normalize
     * @returns {vec3} out
     */
    function normalize(out, a) {
        out = out || new Float32Array(3);
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var len = x * x + y * y + z * z;
        if (len > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len = 1 / Math.sqrt(len);
        }
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    /**
     * Computes the cross product of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function cross(out, a, b) {
        var ax = a[0], ay = a[1], az = a[2];
        var bx = b[0], by = b[1], bz = b[2];
        out[0] = ay * bz - az * by;
        out[1] = az * bx - ax * bz;
        out[2] = ax * by - ay * bx;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function lerp(out, a, b, t) {
        var ax = a[0];
        var ay = a[1];
        var az = a[2];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        out[2] = az + t * (b[2] - az);
        return out;
    }
    /**
     * Performs a hermite interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {vec3} c the third operand
     * @param {vec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function hermite(out, a, b, c, d, t) {
        var factorTimes2 = t * t;
        var factor1 = factorTimes2 * (2 * t - 3) + 1;
        var factor2 = factorTimes2 * (t - 2) + t;
        var factor3 = factorTimes2 * (t - 1);
        var factor4 = factorTimes2 * (3 - 2 * t);
        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
        return out;
    }
    /**
     * Performs a bezier interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {vec3} c the third operand
     * @param {vec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function bezier(out, a, b, c, d, t) {
        var inverseFactor = 1 - t;
        var inverseFactorTimesTwo = inverseFactor * inverseFactor;
        var factorTimes2 = t * t;
        var factor1 = inverseFactorTimesTwo * inverseFactor;
        var factor2 = 3 * t * inverseFactorTimesTwo;
        var factor3 = 3 * factorTimes2 * inverseFactor;
        var factor4 = factorTimes2 * t;
        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec3} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec3} out
     */
    function random(out, scale) {
        scale = scale || 1.0;
        var r = RANDOM() * 2.0 * Math.PI;
        var z = RANDOM() * 2.0 - 1.0;
        var zScale = Math.sqrt(1.0 - z * z) * scale;
        out[0] = Math.cos(r) * zScale;
        out[1] = Math.sin(r) * zScale;
        out[2] = z * scale;
        return out;
    }
    /**
     * Transforms the vec3 with a mat4.
     * 4th vector component is implicitly '1'
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec3} out
     */
    function transformMat4(out, a, m) {
        var x = a[0], y = a[1], z = a[2];
        var w = m[3] * x + m[7] * y + m[11] * z + m[15];
        w = w || 1.0;
        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
        return out;
    }
    /**
     * Transforms the vec3 with a mat3.
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {mat3} m the 3x3 matrix to transform with
     * @returns {vec3} out
     */
    function transformMat3(out, a, m) {
        var x = a[0], y = a[1], z = a[2];
        out[0] = x * m[0] + y * m[3] + z * m[6];
        out[1] = x * m[1] + y * m[4] + z * m[7];
        out[2] = x * m[2] + y * m[5] + z * m[8];
        return out;
    }
    /**
     * Transforms the vec3 with a quat
     * Can also be used for dual quaternions. (Multiply it with the real part)
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec3} out
     */
    function transformQuat(out, a, q) {
        // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
        var x = a[0], y = a[1], z = a[2]; // var qvec = [qx, qy, qz];
        // var uv = vec3.cross([], qvec, a);
        var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);
        var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);
        var w2 = qw * 2;
        uvx *= w2;
        uvy *= w2;
        uvz *= w2; // vec3.scale(uuv, uuv, 2);
        uuvx *= 2;
        uuvy *= 2;
        uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));
        out[0] = x + uvx + uuvx;
        out[1] = y + uvy + uuvy;
        out[2] = z + uvz + uuvz;
        return out;
    }
    /**
     * Rotate a 3D vector around the x-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateX$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[0];
        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Rotate a 3D vector around the y-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateY$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
        r[1] = p[1];
        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Rotate a 3D vector around the z-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateZ$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
        r[2] = p[2]; //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Get the angle between two 3D vectors
     * @param {vec3} a The first operand
     * @param {vec3} b The second operand
     * @returns {Number} The angle in radians
     */
    function angle(a, b) {
        var tempA = fromValues$4(a[0], a[1], a[2]);
        var tempB = fromValues$4(b[0], b[1], b[2]);
        normalize(tempA, tempA);
        normalize(tempB, tempB);
        var cosine = dot(tempA, tempB);
        if (cosine > 1.0) {
            return 0;
        }
        else if (cosine < -1.0) {
            return Math.PI;
        }
        else {
            return Math.acos(cosine);
        }
    }
    /**
     * Set the components of a vec3 to zero
     *
     * @param {vec3} out the receiving vector
     * @returns {vec3} out
     */
    function zero(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        out[2] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec3} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$4(a) {
        return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {vec3} a The first vector.
     * @param {vec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$4(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec3} a The first vector.
     * @param {vec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$5(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2];
        var b0 = b[0], b1 = b[1], b2 = b[2];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
    }
    /**
     * Alias for {@link vec3.subtract}
     * @function
     */
    var sub$4 = subtract$4;
    /**
     * Alias for {@link vec3.multiply}
     * @function
     */
    var mul$4 = multiply$4;
    /**
     * Alias for {@link vec3.divide}
     * @function
     */
    var div = divide;
    /**
     * Alias for {@link vec3.distance}
     * @function
     */
    var dist = distance;
    /**
     * Alias for {@link vec3.squaredDistance}
     * @function
     */
    var sqrDist = squaredDistance;
    /**
     * Alias for {@link vec3.length}
     * @function
     */
    var len = length;
    /**
     * Alias for {@link vec3.squaredLength}
     * @function
     */
    var sqrLen = squaredLength;
    /**
     * Perform some operation over an array of vec3s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach = function () {
        var vec = create$4();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 3;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                vec[2] = a[i + 2];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
                a[i + 2] = vec[2];
            }
            return a;
        };
    }();
    glMatrix_1.vec3 = Object.freeze({
        create: create$4,
        clone: clone$4,
        length: length,
        fromValues: fromValues$4,
        copy: copy$4,
        set: set$4,
        add: add$4,
        subtract: subtract$4,
        multiply: multiply$4,
        divide: divide,
        ceil: ceil,
        floor: floor,
        min: min,
        max: max,
        round: round,
        scale: scale$4,
        scaleAndAdd: scaleAndAdd,
        distance: distance,
        squaredDistance: squaredDistance,
        squaredLength: squaredLength,
        negate: negate,
        inverse: inverse,
        normalize: normalize,
        dot: dot,
        cross: cross,
        lerp: lerp,
        hermite: hermite,
        bezier: bezier,
        random: random,
        transformMat4: transformMat4,
        transformMat3: transformMat3,
        transformQuat: transformQuat,
        rotateX: rotateX$1,
        rotateY: rotateY$1,
        rotateZ: rotateZ$1,
        angle: angle,
        zero: zero,
        str: str$4,
        exactEquals: exactEquals$4,
        equals: equals$5,
        sub: sub$4,
        mul: mul$4,
        div: div,
        dist: dist,
        sqrDist: sqrDist,
        len: len,
        sqrLen: sqrLen,
        forEach: forEach
    });
    /**
     * 4 Dimensional Vector
     * @module vec4
     */
    /**
     * Creates a new, empty vec4
     *
     * @returns {vec4} a new 4D vector
     */
    function create$5() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec4 initialized with values from an existing vector
     *
     * @param {vec4} a vector to clone
     * @returns {vec4} a new 4D vector
     */
    function clone$5(a) {
        var out = new ARRAY_TYPE(4);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Creates a new vec4 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} a new 4D vector
     */
    function fromValues$5(x, y, z, w) {
        var out = new ARRAY_TYPE(4);
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    /**
     * Copy the values from one vec4 to another
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the source vector
     * @returns {vec4} out
     */
    function copy$5(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Set the components of a vec4 to the given values
     *
     * @param {vec4} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} out
     */
    function set$5(out, x, y, z, w) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    /**
     * Adds two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function add$5(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function subtract$5(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        return out;
    }
    /**
     * Multiplies two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function multiply$5(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        out[2] = a[2] * b[2];
        out[3] = a[3] * b[3];
        return out;
    }
    /**
     * Divides two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function divide$1(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        out[2] = a[2] / b[2];
        out[3] = a[3] / b[3];
        return out;
    }
    /**
     * Math.ceil the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to ceil
     * @returns {vec4} out
     */
    function ceil$1(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        out[3] = Math.ceil(a[3]);
        return out;
    }
    /**
     * Math.floor the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to floor
     * @returns {vec4} out
     */
    function floor$1(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        out[3] = Math.floor(a[3]);
        return out;
    }
    /**
     * Returns the minimum of two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function min$1(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        out[2] = Math.min(a[2], b[2]);
        out[3] = Math.min(a[3], b[3]);
        return out;
    }
    /**
     * Returns the maximum of two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function max$1(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        out[2] = Math.max(a[2], b[2]);
        out[3] = Math.max(a[3], b[3]);
        return out;
    }
    /**
     * Math.round the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to round
     * @returns {vec4} out
     */
    function round$1(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        out[3] = Math.round(a[3]);
        return out;
    }
    /**
     * Scales a vec4 by a scalar number
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec4} out
     */
    function scale$5(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        return out;
    }
    /**
     * Adds two vec4's after scaling the second operand by a scalar value
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec4} out
     */
    function scaleAndAdd$1(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance$1(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        var w = b[3] - a[3];
        return Math.hypot(x, y, z, w);
    }
    /**
     * Calculates the squared euclidian distance between two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance$1(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        var w = b[3] - a[3];
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Calculates the length of a vec4
     *
     * @param {vec4} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length$1(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        return Math.hypot(x, y, z, w);
    }
    /**
     * Calculates the squared length of a vec4
     *
     * @param {vec4} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength$1(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Negates the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to negate
     * @returns {vec4} out
     */
    function negate$1(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = -a[3];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to invert
     * @returns {vec4} out
     */
    function inverse$1(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        out[3] = 1.0 / a[3];
        return out;
    }
    /**
     * Normalize a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to normalize
     * @returns {vec4} out
     */
    function normalize$1(out, a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        var len = x * x + y * y + z * z + w * w;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
        }
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot$1(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    /**
     * Returns the cross-product of three vectors in a 4-dimensional space
     *
     * @param {vec4} result the receiving vector
     * @param {vec4} U the first vector
     * @param {vec4} V the second vector
     * @param {vec4} W the third vector
     * @returns {vec4} result
     */
    function cross$1(out, u, v, w) {
        var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
        var G = u[0];
        var H = u[1];
        var I = u[2];
        var J = u[3];
        out[0] = H * F - I * E + J * D;
        out[1] = -(G * F) + I * C - J * B;
        out[2] = G * E - H * C + J * A;
        out[3] = -(G * D) + H * B - I * A;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec4} out
     */
    function lerp$1(out, a, b, t) {
        var ax = a[0];
        var ay = a[1];
        var az = a[2];
        var aw = a[3];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        out[2] = az + t * (b[2] - az);
        out[3] = aw + t * (b[3] - aw);
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec4} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec4} out
     */
    function random$1(out, scale) {
        scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
        // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
        // http://projecteuclid.org/euclid.aoms/1177692644;
        var v1, v2, v3, v4;
        var s1, s2;
        do {
            v1 = RANDOM() * 2 - 1;
            v2 = RANDOM() * 2 - 1;
            s1 = v1 * v1 + v2 * v2;
        } while (s1 >= 1);
        do {
            v3 = RANDOM() * 2 - 1;
            v4 = RANDOM() * 2 - 1;
            s2 = v3 * v3 + v4 * v4;
        } while (s2 >= 1);
        var d = Math.sqrt((1 - s1) / s2);
        out[0] = scale * v1;
        out[1] = scale * v2;
        out[2] = scale * v3 * d;
        out[3] = scale * v4 * d;
        return out;
    }
    /**
     * Transforms the vec4 with a mat4.
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec4} out
     */
    function transformMat4$1(out, a, m) {
        var x = a[0], y = a[1], z = a[2], w = a[3];
        out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
        out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
        out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
        out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
        return out;
    }
    /**
     * Transforms the vec4 with a quat
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec4} out
     */
    function transformQuat$1(out, a, q) {
        var x = a[0], y = a[1], z = a[2];
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3]; // calculate quat * vec
        var ix = qw * x + qy * z - qz * y;
        var iy = qw * y + qz * x - qx * z;
        var iz = qw * z + qx * y - qy * x;
        var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat
        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        out[3] = a[3];
        return out;
    }
    /**
     * Set the components of a vec4 to zero
     *
     * @param {vec4} out the receiving vector
     * @returns {vec4} out
     */
    function zero$1(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        out[2] = 0.0;
        out[3] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec4} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$5(a) {
        return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {vec4} a The first vector.
     * @param {vec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$5(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec4} a The first vector.
     * @param {vec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$6(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Alias for {@link vec4.subtract}
     * @function
     */
    var sub$5 = subtract$5;
    /**
     * Alias for {@link vec4.multiply}
     * @function
     */
    var mul$5 = multiply$5;
    /**
     * Alias for {@link vec4.divide}
     * @function
     */
    var div$1 = divide$1;
    /**
     * Alias for {@link vec4.distance}
     * @function
     */
    var dist$1 = distance$1;
    /**
     * Alias for {@link vec4.squaredDistance}
     * @function
     */
    var sqrDist$1 = squaredDistance$1;
    /**
     * Alias for {@link vec4.length}
     * @function
     */
    var len$1 = length$1;
    /**
     * Alias for {@link vec4.squaredLength}
     * @function
     */
    var sqrLen$1 = squaredLength$1;
    /**
     * Perform some operation over an array of vec4s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach$1 = function () {
        var vec = create$5();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 4;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                vec[2] = a[i + 2];
                vec[3] = a[i + 3];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
                a[i + 2] = vec[2];
                a[i + 3] = vec[3];
            }
            return a;
        };
    }();
    glMatrix_1.vec4 = Object.freeze({
        create: create$5,
        clone: clone$5,
        fromValues: fromValues$5,
        copy: copy$5,
        set: set$5,
        add: add$5,
        subtract: subtract$5,
        multiply: multiply$5,
        divide: divide$1,
        ceil: ceil$1,
        floor: floor$1,
        min: min$1,
        max: max$1,
        round: round$1,
        scale: scale$5,
        scaleAndAdd: scaleAndAdd$1,
        distance: distance$1,
        squaredDistance: squaredDistance$1,
        length: length$1,
        squaredLength: squaredLength$1,
        negate: negate$1,
        inverse: inverse$1,
        normalize: normalize$1,
        dot: dot$1,
        cross: cross$1,
        lerp: lerp$1,
        random: random$1,
        transformMat4: transformMat4$1,
        transformQuat: transformQuat$1,
        zero: zero$1,
        str: str$5,
        exactEquals: exactEquals$5,
        equals: equals$6,
        sub: sub$5,
        mul: mul$5,
        div: div$1,
        dist: dist$1,
        sqrDist: sqrDist$1,
        len: len$1,
        sqrLen: sqrLen$1,
        forEach: forEach$1
    });
    /**
     * Quaternion
     * @module quat
     */
    /**
     * Creates a new identity quat
     *
     * @returns {quat} a new quaternion
     */
    function create$6() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
        }
        out[3] = 1;
        return out;
    }
    /**
     * Set a quat to the identity quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */
    function identity$4(out) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
    }
    /**
     * Sets a quat from the given angle and rotation axis,
     * then returns it.
     *
     * @param {quat} out the receiving quaternion
     * @param {vec3} axis the axis around which to rotate
     * @param {Number} rad the angle in radians
     * @returns {quat} out
     **/
    function setAxisAngle(out, axis, rad) {
        rad = rad * 0.5;
        var s = Math.sin(rad);
        out[0] = s * axis[0];
        out[1] = s * axis[1];
        out[2] = s * axis[2];
        out[3] = Math.cos(rad);
        return out;
    }
    /**
     * Gets the rotation axis and angle for a given
     *  quaternion. If a quaternion is created with
     *  setAxisAngle, this method will return the same
     *  values as providied in the original parameter list
     *  OR functionally equivalent values.
     * Example: The quaternion formed by axis [0, 0, 1] and
     *  angle -90 is the same as the quaternion formed by
     *  [0, 0, 1] and 270. This method favors the latter.
     * @param  {vec3} out_axis  Vector receiving the axis of rotation
     * @param  {quat} q     Quaternion to be decomposed
     * @return {Number}     Angle, in radians, of the rotation
     */
    function getAxisAngle(out_axis, q) {
        var rad = Math.acos(q[3]) * 2.0;
        var s = Math.sin(rad / 2.0);
        if (s > EPSILON) {
            out_axis[0] = q[0] / s;
            out_axis[1] = q[1] / s;
            out_axis[2] = q[2] / s;
        }
        else {
            // If s is zero, return any axis (no rotation - axis does not matter)
            out_axis[0] = 1;
            out_axis[1] = 0;
            out_axis[2] = 0;
        }
        return rad;
    }
    /**
     * Multiplies two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {quat} out
     */
    function multiply$6(out, a, b) {
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = b[0], by = b[1], bz = b[2], bw = b[3];
        out[0] = ax * bw + aw * bx + ay * bz - az * by;
        out[1] = ay * bw + aw * by + az * bx - ax * bz;
        out[2] = az * bw + aw * bz + ax * by - ay * bx;
        out[3] = aw * bw - ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the X axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateX$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw + aw * bx;
        out[1] = ay * bw + az * bx;
        out[2] = az * bw - ay * bx;
        out[3] = aw * bw - ax * bx;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Y axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateY$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var by = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw - az * by;
        out[1] = ay * bw + aw * by;
        out[2] = az * bw + ax * by;
        out[3] = aw * bw - ay * by;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Z axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateZ$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bz = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw + ay * bz;
        out[1] = ay * bw - ax * bz;
        out[2] = az * bw + aw * bz;
        out[3] = aw * bw - az * bz;
        return out;
    }
    /**
     * Calculates the W component of a quat from the X, Y, and Z components.
     * Assumes that quaternion is 1 unit in length.
     * Any existing W component will be ignored.
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate W component of
     * @returns {quat} out
     */
    function calculateW(out, a) {
        var x = a[0], y = a[1], z = a[2];
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
        return out;
    }
    /**
     * Performs a spherical linear interpolation between two quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */
    function slerp(out, a, b, t) {
        // benchmarks:
        //    http://jsperf.com/quaternion-slerp-implementations
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = b[0], by = b[1], bz = b[2], bw = b[3];
        var omega, cosom, sinom, scale0, scale1; // calc cosine
        cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)
        if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        } // calculate coefficients
        if (1.0 - cosom > EPSILON) {
            // standard case (slerp)
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        }
        else {
            // "from" and "to" quaternions are very close
            //  ... so we can do a linear interpolation
            scale0 = 1.0 - t;
            scale1 = t;
        } // calculate final values
        out[0] = scale0 * ax + scale1 * bx;
        out[1] = scale0 * ay + scale1 * by;
        out[2] = scale0 * az + scale1 * bz;
        out[3] = scale0 * aw + scale1 * bw;
        return out;
    }
    /**
     * Generates a random quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */
    function random$2(out) {
        // Implementation of http://planning.cs.uiuc.edu/node198.html
        // TODO: Calling random 3 times is probably not the fastest solution
        var u1 = RANDOM();
        var u2 = RANDOM();
        var u3 = RANDOM();
        var sqrt1MinusU1 = Math.sqrt(1 - u1);
        var sqrtU1 = Math.sqrt(u1);
        out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
        out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
        out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
        out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
        return out;
    }
    /**
     * Calculates the inverse of a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate inverse of
     * @returns {quat} out
     */
    function invert$4(out, a) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
        var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
        out[0] = -a0 * invDot;
        out[1] = -a1 * invDot;
        out[2] = -a2 * invDot;
        out[3] = a3 * invDot;
        return out;
    }
    /**
     * Calculates the conjugate of a quat
     * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate conjugate of
     * @returns {quat} out
     */
    function conjugate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     *
     * @param {quat} out the receiving quaternion
     * @param {mat3} m rotation matrix
     * @returns {quat} out
     * @function
     */
    function fromMat3(out, m) {
        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
        // article "Quaternion Calculus and Fast Animation".
        var fTrace = m[0] + m[4] + m[8];
        var fRoot;
        if (fTrace > 0.0) {
            // |w| > 1/2, may as well choose w > 1/2
            fRoot = Math.sqrt(fTrace + 1.0); // 2w
            out[3] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot; // 1/(4w)
            out[0] = (m[5] - m[7]) * fRoot;
            out[1] = (m[6] - m[2]) * fRoot;
            out[2] = (m[1] - m[3]) * fRoot;
        }
        else {
            // |w| <= 1/2
            var i = 0;
            if (m[4] > m[0])
                i = 1;
            if (m[8] > m[i * 3 + i])
                i = 2;
            var j = (i + 1) % 3;
            var k = (i + 2) % 3;
            fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
            out[i] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot;
            out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
            out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
            out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
        }
        return out;
    }
    /**
     * Creates a quaternion from the given euler angle x, y, z.
     *
     * @param {quat} out the receiving quaternion
     * @param {x} Angle to rotate around X axis in degrees.
     * @param {y} Angle to rotate around Y axis in degrees.
     * @param {z} Angle to rotate around Z axis in degrees.
     * @returns {quat} out
     * @function
     */
    function fromEuler(out, x, y, z) {
        var halfToRad = 0.5 * Math.PI / 180.0;
        x *= halfToRad;
        y *= halfToRad;
        z *= halfToRad;
        var sx = Math.sin(x);
        var cx = Math.cos(x);
        var sy = Math.sin(y);
        var cy = Math.cos(y);
        var sz = Math.sin(z);
        var cz = Math.cos(z);
        out[0] = sx * cy * cz - cx * sy * sz;
        out[1] = cx * sy * cz + sx * cy * sz;
        out[2] = cx * cy * sz - sx * sy * cz;
        out[3] = cx * cy * cz + sx * sy * sz;
        return out;
    }
    /**
     * Returns a string representation of a quatenion
     *
     * @param {quat} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$6(a) {
        return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {quat} a quaternion to clone
     * @returns {quat} a new quaternion
     * @function
     */
    var clone$6 = clone$5;
    /**
     * Creates a new quat initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} a new quaternion
     * @function
     */
    var fromValues$6 = fromValues$5;
    /**
     * Copy the values from one quat to another
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the source quaternion
     * @returns {quat} out
     * @function
     */
    var copy$6 = copy$5;
    /**
     * Set the components of a quat to the given values
     *
     * @param {quat} out the receiving quaternion
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} out
     * @function
     */
    var set$6 = set$5;
    /**
     * Adds two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {quat} out
     * @function
     */
    var add$6 = add$5;
    /**
     * Alias for {@link quat.multiply}
     * @function
     */
    var mul$6 = multiply$6;
    /**
     * Scales a quat by a scalar number
     *
     * @param {quat} out the receiving vector
     * @param {quat} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {quat} out
     * @function
     */
    var scale$6 = scale$5;
    /**
     * Calculates the dot product of two quat's
     *
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */
    var dot$2 = dot$1;
    /**
     * Performs a linear interpolation between two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     * @function
     */
    var lerp$2 = lerp$1;
    /**
     * Calculates the length of a quat
     *
     * @param {quat} a vector to calculate length of
     * @returns {Number} length of a
     */
    var length$2 = length$1;
    /**
     * Alias for {@link quat.length}
     * @function
     */
    var len$2 = length$2;
    /**
     * Calculates the squared length of a quat
     *
     * @param {quat} a vector to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */
    var squaredLength$2 = squaredLength$1;
    /**
     * Alias for {@link quat.squaredLength}
     * @function
     */
    var sqrLen$2 = squaredLength$2;
    /**
     * Normalize a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quaternion to normalize
     * @returns {quat} out
     * @function
     */
    var normalize$2 = normalize$1;
    /**
     * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {quat} a The first quaternion.
     * @param {quat} b The second quaternion.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    var exactEquals$6 = exactEquals$5;
    /**
     * Returns whether or not the quaternions have approximately the same elements in the same position.
     *
     * @param {quat} a The first vector.
     * @param {quat} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    var equals$7 = equals$6;
    /**
     * Sets a quaternion to represent the shortest rotation from one
     * vector to another.
     *
     * Both vectors are assumed to be unit length.
     *
     * @param {quat} out the receiving quaternion.
     * @param {vec3} a the initial vector
     * @param {vec3} b the destination vector
     * @returns {quat} out
     */
    var rotationTo = function () {
        var tmpvec3 = create$4();
        var xUnitVec3 = fromValues$4(1, 0, 0);
        var yUnitVec3 = fromValues$4(0, 1, 0);
        return function (out, a, b) {
            var dot$1 = dot(a, b);
            if (dot$1 < -0.999999) {
                cross(tmpvec3, xUnitVec3, a);
                if (len(tmpvec3) < 0.000001)
                    cross(tmpvec3, yUnitVec3, a);
                normalize(tmpvec3, tmpvec3);
                setAxisAngle(out, tmpvec3, Math.PI);
                return out;
            }
            else if (dot$1 > 0.999999) {
                out[0] = 0;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                return out;
            }
            else {
                cross(tmpvec3, a, b);
                out[0] = tmpvec3[0];
                out[1] = tmpvec3[1];
                out[2] = tmpvec3[2];
                out[3] = 1 + dot$1;
                return normalize$2(out, out);
            }
        };
    }();
    /**
     * Performs a spherical linear interpolation with two control points
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {quat} c the third operand
     * @param {quat} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */
    var sqlerp = function () {
        var temp1 = create$6();
        var temp2 = create$6();
        return function (out, a, b, c, d, t) {
            slerp(temp1, a, d, t);
            slerp(temp2, b, c, t);
            slerp(out, temp1, temp2, 2 * t * (1 - t));
            return out;
        };
    }();
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     *
     * @param {vec3} view  the vector representing the viewing direction
     * @param {vec3} right the vector representing the local "right" direction
     * @param {vec3} up    the vector representing the local "up" direction
     * @returns {quat} out
     */
    var setAxes = function () {
        var matr = create$2();
        return function (out, view, right, up) {
            matr[0] = right[0];
            matr[3] = right[1];
            matr[6] = right[2];
            matr[1] = up[0];
            matr[4] = up[1];
            matr[7] = up[2];
            matr[2] = -view[0];
            matr[5] = -view[1];
            matr[8] = -view[2];
            return normalize$2(out, fromMat3(out, matr));
        };
    }();
    glMatrix_1.quat = Object.freeze({
        create: create$6,
        identity: identity$4,
        setAxisAngle: setAxisAngle,
        getAxisAngle: getAxisAngle,
        multiply: multiply$6,
        rotateX: rotateX$2,
        rotateY: rotateY$2,
        rotateZ: rotateZ$2,
        calculateW: calculateW,
        slerp: slerp,
        random: random$2,
        invert: invert$4,
        conjugate: conjugate,
        fromMat3: fromMat3,
        fromEuler: fromEuler,
        str: str$6,
        clone: clone$6,
        fromValues: fromValues$6,
        copy: copy$6,
        set: set$6,
        add: add$6,
        mul: mul$6,
        scale: scale$6,
        dot: dot$2,
        lerp: lerp$2,
        length: length$2,
        len: len$2,
        squaredLength: squaredLength$2,
        sqrLen: sqrLen$2,
        normalize: normalize$2,
        exactEquals: exactEquals$6,
        equals: equals$7,
        rotationTo: rotationTo,
        sqlerp: sqlerp,
        setAxes: setAxes
    });
    /**
     * Dual Quaternion<br>
     * Format: [real, dual]<br>
     * Quaternion format: XYZW<br>
     * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
     * @module quat2
     */
    /**
     * Creates a new identity dual quat
     *
     * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
     */
    function create$7() {
        var dq = new ARRAY_TYPE(8);
        if (ARRAY_TYPE != Float32Array) {
            dq[0] = 0;
            dq[1] = 0;
            dq[2] = 0;
            dq[4] = 0;
            dq[5] = 0;
            dq[6] = 0;
            dq[7] = 0;
        }
        dq[3] = 1;
        return dq;
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {quat2} a dual quaternion to clone
     * @returns {quat2} new dual quaternion
     * @function
     */
    function clone$7(a) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = a[0];
        dq[1] = a[1];
        dq[2] = a[2];
        dq[3] = a[3];
        dq[4] = a[4];
        dq[5] = a[5];
        dq[6] = a[6];
        dq[7] = a[7];
        return dq;
    }
    /**
     * Creates a new dual quat initialized with the given values
     *
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component
     * @param {Number} y2 Y component
     * @param {Number} z2 Z component
     * @param {Number} w2 W component
     * @returns {quat2} new dual quaternion
     * @function
     */
    function fromValues$7(x1, y1, z1, w1, x2, y2, z2, w2) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = x1;
        dq[1] = y1;
        dq[2] = z1;
        dq[3] = w1;
        dq[4] = x2;
        dq[5] = y2;
        dq[6] = z2;
        dq[7] = w2;
        return dq;
    }
    /**
     * Creates a new dual quat from the given values (quat and translation)
     *
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component (translation)
     * @param {Number} y2 Y component (translation)
     * @param {Number} z2 Z component (translation)
     * @returns {quat2} new dual quaternion
     * @function
     */
    function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = x1;
        dq[1] = y1;
        dq[2] = z1;
        dq[3] = w1;
        var ax = x2 * 0.5, ay = y2 * 0.5, az = z2 * 0.5;
        dq[4] = ax * w1 + ay * z1 - az * y1;
        dq[5] = ay * w1 + az * x1 - ax * z1;
        dq[6] = az * w1 + ax * y1 - ay * x1;
        dq[7] = -ax * x1 - ay * y1 - az * z1;
        return dq;
    }
    /**
     * Creates a dual quat from a quaternion and a translation
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {quat} q a normalized quaternion
     * @param {vec3} t tranlation vector
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromRotationTranslation$1(out, q, t) {
        var ax = t[0] * 0.5, ay = t[1] * 0.5, az = t[2] * 0.5, bx = q[0], by = q[1], bz = q[2], bw = q[3];
        out[0] = bx;
        out[1] = by;
        out[2] = bz;
        out[3] = bw;
        out[4] = ax * bw + ay * bz - az * by;
        out[5] = ay * bw + az * bx - ax * bz;
        out[6] = az * bw + ax * by - ay * bx;
        out[7] = -ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Creates a dual quat from a translation
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {vec3} t translation vector
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromTranslation$3(out, t) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = t[0] * 0.5;
        out[5] = t[1] * 0.5;
        out[6] = t[2] * 0.5;
        out[7] = 0;
        return out;
    }
    /**
     * Creates a dual quat from a quaternion
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {quat} q the quaternion
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromRotation$4(out, q) {
        out[0] = q[0];
        out[1] = q[1];
        out[2] = q[2];
        out[3] = q[3];
        out[4] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        return out;
    }
    /**
     * Creates a new dual quat from a matrix (4x4)
     *
     * @param {quat2} out the dual quaternion
     * @param {mat4} a the matrix
     * @returns {quat2} dual quat receiving operation result
     * @function
     */
    function fromMat4$1(out, a) {
        //TODO Optimize this
        var outer = create$6();
        getRotation(outer, a);
        var t = new ARRAY_TYPE(3);
        getTranslation(t, a);
        fromRotationTranslation$1(out, outer, t);
        return out;
    }
    /**
     * Copy the values from one dual quat to another
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the source dual quaternion
     * @returns {quat2} out
     * @function
     */
    function copy$7(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        return out;
    }
    /**
     * Set a dual quat to the identity dual quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @returns {quat2} out
     */
    function identity$5(out) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        return out;
    }
    /**
     * Set the components of a dual quat to the given values
     *
     * @param {quat2} out the receiving quaternion
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component
     * @param {Number} y2 Y component
     * @param {Number} z2 Z component
     * @param {Number} w2 W component
     * @returns {quat2} out
     * @function
     */
    function set$7(out, x1, y1, z1, w1, x2, y2, z2, w2) {
        out[0] = x1;
        out[1] = y1;
        out[2] = z1;
        out[3] = w1;
        out[4] = x2;
        out[5] = y2;
        out[6] = z2;
        out[7] = w2;
        return out;
    }
    /**
     * Gets the real part of a dual quat
     * @param  {quat} out real part
     * @param  {quat2} a Dual Quaternion
     * @return {quat} real part
     */
    var getReal = copy$6;
    /**
     * Gets the dual part of a dual quat
     * @param  {quat} out dual part
     * @param  {quat2} a Dual Quaternion
     * @return {quat} dual part
     */
    function getDual(out, a) {
        out[0] = a[4];
        out[1] = a[5];
        out[2] = a[6];
        out[3] = a[7];
        return out;
    }
    /**
     * Set the real component of a dual quat to the given quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat} q a quaternion representing the real part
     * @returns {quat2} out
     * @function
     */
    var setReal = copy$6;
    /**
     * Set the dual component of a dual quat to the given quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat} q a quaternion representing the dual part
     * @returns {quat2} out
     * @function
     */
    function setDual(out, q) {
        out[4] = q[0];
        out[5] = q[1];
        out[6] = q[2];
        out[7] = q[3];
        return out;
    }
    /**
     * Gets the translation of a normalized dual quat
     * @param  {vec3} out translation
     * @param  {quat2} a Dual Quaternion to be decomposed
     * @return {vec3} translation
     */
    function getTranslation$1(out, a) {
        var ax = a[4], ay = a[5], az = a[6], aw = a[7], bx = -a[0], by = -a[1], bz = -a[2], bw = a[3];
        out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
        out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
        out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
        return out;
    }
    /**
     * Translates a dual quat by the given vector
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to translate
     * @param {vec3} v vector to translate by
     * @returns {quat2} out
     */
    function translate$3(out, a, v) {
        var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3], bx1 = v[0] * 0.5, by1 = v[1] * 0.5, bz1 = v[2] * 0.5, ax2 = a[4], ay2 = a[5], az2 = a[6], aw2 = a[7];
        out[0] = ax1;
        out[1] = ay1;
        out[2] = az1;
        out[3] = aw1;
        out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
        out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
        out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
        out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
        return out;
    }
    /**
     * Rotates a dual quat around the X axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateX$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateX$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat around the Y axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateY$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateY$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat around the Z axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateZ$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateZ$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat by a given quaternion (a * q)
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {quat} q quaternion to rotate by
     * @returns {quat2} out
     */
    function rotateByQuatAppend(out, a, q) {
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3], ax = a[0], ay = a[1], az = a[2], aw = a[3];
        out[0] = ax * qw + aw * qx + ay * qz - az * qy;
        out[1] = ay * qw + aw * qy + az * qx - ax * qz;
        out[2] = az * qw + aw * qz + ax * qy - ay * qx;
        out[3] = aw * qw - ax * qx - ay * qy - az * qz;
        ax = a[4];
        ay = a[5];
        az = a[6];
        aw = a[7];
        out[4] = ax * qw + aw * qx + ay * qz - az * qy;
        out[5] = ay * qw + aw * qy + az * qx - ax * qz;
        out[6] = az * qw + aw * qz + ax * qy - ay * qx;
        out[7] = aw * qw - ax * qx - ay * qy - az * qz;
        return out;
    }
    /**
     * Rotates a dual quat by a given quaternion (q * a)
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat} q quaternion to rotate by
     * @param {quat2} a the dual quaternion to rotate
     * @returns {quat2} out
     */
    function rotateByQuatPrepend(out, q, a) {
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3], bx = a[0], by = a[1], bz = a[2], bw = a[3];
        out[0] = qx * bw + qw * bx + qy * bz - qz * by;
        out[1] = qy * bw + qw * by + qz * bx - qx * bz;
        out[2] = qz * bw + qw * bz + qx * by - qy * bx;
        out[3] = qw * bw - qx * bx - qy * by - qz * bz;
        bx = a[4];
        by = a[5];
        bz = a[6];
        bw = a[7];
        out[4] = qx * bw + qw * bx + qy * bz - qz * by;
        out[5] = qy * bw + qw * by + qz * bx - qx * bz;
        out[6] = qz * bw + qw * bz + qx * by - qy * bx;
        out[7] = qw * bw - qx * bx - qy * by - qz * bz;
        return out;
    }
    /**
     * Rotates a dual quat around a given axis. Does the normalisation automatically
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {vec3} axis the axis to rotate around
     * @param {Number} rad how far the rotation should be
     * @returns {quat2} out
     */
    function rotateAroundAxis(out, a, axis, rad) {
        //Special case for rad = 0
        if (Math.abs(rad) < EPSILON) {
            return copy$7(out, a);
        }
        var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
        rad = rad * 0.5;
        var s = Math.sin(rad);
        var bx = s * axis[0] / axisLength;
        var by = s * axis[1] / axisLength;
        var bz = s * axis[2] / axisLength;
        var bw = Math.cos(rad);
        var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3];
        out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        var ax = a[4], ay = a[5], az = a[6], aw = a[7];
        out[4] = ax * bw + aw * bx + ay * bz - az * by;
        out[5] = ay * bw + aw * by + az * bx - ax * bz;
        out[6] = az * bw + aw * bz + ax * by - ay * bx;
        out[7] = aw * bw - ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Adds two dual quat's
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {quat2} out
     * @function
     */
    function add$7(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        return out;
    }
    /**
     * Multiplies two dual quat's
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {quat2} out
     */
    function multiply$7(out, a, b) {
        var ax0 = a[0], ay0 = a[1], az0 = a[2], aw0 = a[3], bx1 = b[4], by1 = b[5], bz1 = b[6], bw1 = b[7], ax1 = a[4], ay1 = a[5], az1 = a[6], aw1 = a[7], bx0 = b[0], by0 = b[1], bz0 = b[2], bw0 = b[3];
        out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
        out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
        out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
        out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
        out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
        out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
        out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
        out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
        return out;
    }
    /**
     * Alias for {@link quat2.multiply}
     * @function
     */
    var mul$7 = multiply$7;
    /**
     * Scales a dual quat by a scalar number
     *
     * @param {quat2} out the receiving dual quat
     * @param {quat2} a the dual quat to scale
     * @param {Number} b amount to scale the dual quat by
     * @returns {quat2} out
     * @function
     */
    function scale$7(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        return out;
    }
    /**
     * Calculates the dot product of two dual quat's (The dot product of the real parts)
     *
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */
    var dot$3 = dot$2;
    /**
     * Performs a linear interpolation between two dual quats's
     * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
     *
     * @param {quat2} out the receiving dual quat
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat2} out
     */
    function lerp$3(out, a, b, t) {
        var mt = 1 - t;
        if (dot$3(a, b) < 0)
            t = -t;
        out[0] = a[0] * mt + b[0] * t;
        out[1] = a[1] * mt + b[1] * t;
        out[2] = a[2] * mt + b[2] * t;
        out[3] = a[3] * mt + b[3] * t;
        out[4] = a[4] * mt + b[4] * t;
        out[5] = a[5] * mt + b[5] * t;
        out[6] = a[6] * mt + b[6] * t;
        out[7] = a[7] * mt + b[7] * t;
        return out;
    }
    /**
     * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a dual quat to calculate inverse of
     * @returns {quat2} out
     */
    function invert$5(out, a) {
        var sqlen = squaredLength$3(a);
        out[0] = -a[0] / sqlen;
        out[1] = -a[1] / sqlen;
        out[2] = -a[2] / sqlen;
        out[3] = a[3] / sqlen;
        out[4] = -a[4] / sqlen;
        out[5] = -a[5] / sqlen;
        out[6] = -a[6] / sqlen;
        out[7] = a[7] / sqlen;
        return out;
    }
    /**
     * Calculates the conjugate of a dual quat
     * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat2} a quat to calculate conjugate of
     * @returns {quat2} out
     */
    function conjugate$1(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a[3];
        out[4] = -a[4];
        out[5] = -a[5];
        out[6] = -a[6];
        out[7] = a[7];
        return out;
    }
    /**
     * Calculates the length of a dual quat
     *
     * @param {quat2} a dual quat to calculate length of
     * @returns {Number} length of a
     * @function
     */
    var length$3 = length$2;
    /**
     * Alias for {@link quat2.length}
     * @function
     */
    var len$3 = length$3;
    /**
     * Calculates the squared length of a dual quat
     *
     * @param {quat2} a dual quat to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */
    var squaredLength$3 = squaredLength$2;
    /**
     * Alias for {@link quat2.squaredLength}
     * @function
     */
    var sqrLen$3 = squaredLength$3;
    /**
     * Normalize a dual quat
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a dual quaternion to normalize
     * @returns {quat2} out
     * @function
     */
    function normalize$3(out, a) {
        var magnitude = squaredLength$3(a);
        if (magnitude > 0) {
            magnitude = Math.sqrt(magnitude);
            var a0 = a[0] / magnitude;
            var a1 = a[1] / magnitude;
            var a2 = a[2] / magnitude;
            var a3 = a[3] / magnitude;
            var b0 = a[4];
            var b1 = a[5];
            var b2 = a[6];
            var b3 = a[7];
            var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
            out[0] = a0;
            out[1] = a1;
            out[2] = a2;
            out[3] = a3;
            out[4] = (b0 - a0 * a_dot_b) / magnitude;
            out[5] = (b1 - a1 * a_dot_b) / magnitude;
            out[6] = (b2 - a2 * a_dot_b) / magnitude;
            out[7] = (b3 - a3 * a_dot_b) / magnitude;
        }
        return out;
    }
    /**
     * Returns a string representation of a dual quatenion
     *
     * @param {quat2} a dual quaternion to represent as a string
     * @returns {String} string representation of the dual quat
     */
    function str$7(a) {
        return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';
    }
    /**
     * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {quat2} a the first dual quaternion.
     * @param {quat2} b the second dual quaternion.
     * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
     */
    function exactEquals$7(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
    }
    /**
     * Returns whether or not the dual quaternions have approximately the same elements in the same position.
     *
     * @param {quat2} a the first dual quat.
     * @param {quat2} b the second dual quat.
     * @returns {Boolean} true if the dual quats are equal, false otherwise.
     */
    function equals$8(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));
    }
    glMatrix_1.quat2 = Object.freeze({
        create: create$7,
        clone: clone$7,
        fromValues: fromValues$7,
        fromRotationTranslationValues: fromRotationTranslationValues,
        fromRotationTranslation: fromRotationTranslation$1,
        fromTranslation: fromTranslation$3,
        fromRotation: fromRotation$4,
        fromMat4: fromMat4$1,
        copy: copy$7,
        identity: identity$5,
        set: set$7,
        getReal: getReal,
        getDual: getDual,
        setReal: setReal,
        setDual: setDual,
        getTranslation: getTranslation$1,
        translate: translate$3,
        rotateX: rotateX$3,
        rotateY: rotateY$3,
        rotateZ: rotateZ$3,
        rotateByQuatAppend: rotateByQuatAppend,
        rotateByQuatPrepend: rotateByQuatPrepend,
        rotateAroundAxis: rotateAroundAxis,
        add: add$7,
        multiply: multiply$7,
        mul: mul$7,
        scale: scale$7,
        dot: dot$3,
        lerp: lerp$3,
        invert: invert$5,
        conjugate: conjugate$1,
        length: length$3,
        len: len$3,
        squaredLength: squaredLength$3,
        sqrLen: sqrLen$3,
        normalize: normalize$3,
        str: str$7,
        exactEquals: exactEquals$7,
        equals: equals$8
    });
    /**
     * 2 Dimensional Vector
     * @module vec2
     */
    /**
     * Creates a new, empty vec2
     *
     * @returns {vec2} a new 2D vector
     */
    function create$8() {
        var out = new ARRAY_TYPE(2);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec2 initialized with values from an existing vector
     *
     * @param {vec2} a vector to clone
     * @returns {vec2} a new 2D vector
     */
    function clone$8(a) {
        var out = new ARRAY_TYPE(2);
        out[0] = a[0];
        out[1] = a[1];
        return out;
    }
    /**
     * Creates a new vec2 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} a new 2D vector
     */
    function fromValues$8(x, y) {
        var out = new ARRAY_TYPE(2);
        out[0] = x;
        out[1] = y;
        return out;
    }
    /**
     * Copy the values from one vec2 to another
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the source vector
     * @returns {vec2} out
     */
    function copy$8(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        return out;
    }
    /**
     * Set the components of a vec2 to the given values
     *
     * @param {vec2} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} out
     */
    function set$8(out, x, y) {
        out[0] = x;
        out[1] = y;
        return out;
    }
    /**
     * Adds two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function add$8(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function subtract$6(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        return out;
    }
    /**
     * Multiplies two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function multiply$8(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        return out;
    }
    /**
     * Divides two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function divide$2(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        return out;
    }
    /**
     * Math.ceil the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to ceil
     * @returns {vec2} out
     */
    function ceil$2(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        return out;
    }
    /**
     * Math.floor the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to floor
     * @returns {vec2} out
     */
    function floor$2(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        return out;
    }
    /**
     * Returns the minimum of two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function min$2(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        return out;
    }
    /**
     * Returns the maximum of two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function max$2(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        return out;
    }
    /**
     * Math.round the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to round
     * @returns {vec2} out
     */
    function round$2(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        return out;
    }
    /**
     * Scales a vec2 by a scalar number
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec2} out
     */
    function scale$8(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        return out;
    }
    /**
     * Adds two vec2's after scaling the second operand by a scalar value
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec2} out
     */
    function scaleAndAdd$2(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance$2(a, b) {
        var x = b[0] - a[0], y = b[1] - a[1];
        return Math.hypot(x, y);
    }
    /**
     * Calculates the squared euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance$2(a, b) {
        var x = b[0] - a[0], y = b[1] - a[1];
        return x * x + y * y;
    }
    /**
     * Calculates the length of a vec2
     *
     * @param {vec2} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length$4(a) {
        var x = a[0], y = a[1];
        return Math.hypot(x, y);
    }
    /**
     * Calculates the squared length of a vec2
     *
     * @param {vec2} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength$4(a) {
        var x = a[0], y = a[1];
        return x * x + y * y;
    }
    /**
     * Negates the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to negate
     * @returns {vec2} out
     */
    function negate$2(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to invert
     * @returns {vec2} out
     */
    function inverse$2(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        return out;
    }
    /**
     * Normalize a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to normalize
     * @returns {vec2} out
     */
    function normalize$4(out, a) {
        var x = a[0], y = a[1];
        var len = x * x + y * y;
        if (len > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len = 1 / Math.sqrt(len);
        }
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot$4(a, b) {
        return a[0] * b[0] + a[1] * b[1];
    }
    /**
     * Computes the cross product of two vec2's
     * Note that the cross product must by definition produce a 3D vector
     *
     * @param {vec3} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec3} out
     */
    function cross$2(out, a, b) {
        var z = a[0] * b[1] - a[1] * b[0];
        out[0] = out[1] = 0;
        out[2] = z;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec2} out
     */
    function lerp$4(out, a, b, t) {
        var ax = a[0], ay = a[1];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec2} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec2} out
     */
    function random$3(out, scale) {
        scale = scale || 1.0;
        var r = RANDOM() * 2.0 * Math.PI;
        out[0] = Math.cos(r) * scale;
        out[1] = Math.sin(r) * scale;
        return out;
    }
    /**
     * Transforms the vec2 with a mat2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat2} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat2(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[2] * y;
        out[1] = m[1] * x + m[3] * y;
        return out;
    }
    /**
     * Transforms the vec2 with a mat2d
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat2d} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat2d(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[2] * y + m[4];
        out[1] = m[1] * x + m[3] * y + m[5];
        return out;
    }
    /**
     * Transforms the vec2 with a mat3
     * 3rd vector component is implicitly '1'
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat3} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat3$1(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[3] * y + m[6];
        out[1] = m[1] * x + m[4] * y + m[7];
        return out;
    }
    /**
     * Transforms the vec2 with a mat4
     * 3rd vector component is implicitly '0'
     * 4th vector component is implicitly '1'
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat4$2(out, a, m) {
        var x = a[0];
        var y = a[1];
        out[0] = m[0] * x + m[4] * y + m[12];
        out[1] = m[1] * x + m[5] * y + m[13];
        return out;
    }
    /**
     * Rotate a 2D vector
     * @param {vec2} out The receiving vec2
     * @param {vec2} a The vec2 point to rotate
     * @param {vec2} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec2} out
     */
    function rotate$4(out, a, b, c) {
        //Translate point to the origin
        var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(c), cosC = Math.cos(c); //perform rotation and translate to correct position
        out[0] = p0 * cosC - p1 * sinC + b[0];
        out[1] = p0 * sinC + p1 * cosC + b[1];
        return out;
    }
    /**
     * Get the angle between two 2D vectors
     * @param {vec2} a The first operand
     * @param {vec2} b The second operand
     * @returns {Number} The angle in radians
     */
    function angle$1(a, b) {
        var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1];
        var len1 = x1 * x1 + y1 * y1;
        if (len1 > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len1 = 1 / Math.sqrt(len1);
        }
        var len2 = x2 * x2 + y2 * y2;
        if (len2 > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len2 = 1 / Math.sqrt(len2);
        }
        var cosine = (x1 * x2 + y1 * y2) * len1 * len2;
        if (cosine > 1.0) {
            return 0;
        }
        else if (cosine < -1.0) {
            return Math.PI;
        }
        else {
            return Math.acos(cosine);
        }
    }
    /**
     * Set the components of a vec2 to zero
     *
     * @param {vec2} out the receiving vector
     * @returns {vec2} out
     */
    function zero$2(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec2} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$8(a) {
        return 'vec2(' + a[0] + ', ' + a[1] + ')';
    }
    /**
     * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
     *
     * @param {vec2} a The first vector.
     * @param {vec2} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$8(a, b) {
        return a[0] === b[0] && a[1] === b[1];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec2} a The first vector.
     * @param {vec2} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$9(a, b) {
        var a0 = a[0], a1 = a[1];
        var b0 = b[0], b1 = b[1];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
    }
    /**
     * Alias for {@link vec2.length}
     * @function
     */
    var len$4 = length$4;
    /**
     * Alias for {@link vec2.subtract}
     * @function
     */
    var sub$6 = subtract$6;
    /**
     * Alias for {@link vec2.multiply}
     * @function
     */
    var mul$8 = multiply$8;
    /**
     * Alias for {@link vec2.divide}
     * @function
     */
    var div$2 = divide$2;
    /**
     * Alias for {@link vec2.distance}
     * @function
     */
    var dist$2 = distance$2;
    /**
     * Alias for {@link vec2.squaredDistance}
     * @function
     */
    var sqrDist$2 = squaredDistance$2;
    /**
     * Alias for {@link vec2.squaredLength}
     * @function
     */
    var sqrLen$4 = squaredLength$4;
    /**
     * Perform some operation over an array of vec2s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach$2 = function () {
        var vec = create$8();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 2;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
            }
            return a;
        };
    }();
    glMatrix_1.vec2 = Object.freeze({
        create: create$8,
        clone: clone$8,
        fromValues: fromValues$8,
        copy: copy$8,
        set: set$8,
        add: add$8,
        subtract: subtract$6,
        multiply: multiply$8,
        divide: divide$2,
        ceil: ceil$2,
        floor: floor$2,
        min: min$2,
        max: max$2,
        round: round$2,
        scale: scale$8,
        scaleAndAdd: scaleAndAdd$2,
        distance: distance$2,
        squaredDistance: squaredDistance$2,
        length: length$4,
        squaredLength: squaredLength$4,
        negate: negate$2,
        inverse: inverse$2,
        normalize: normalize$4,
        dot: dot$4,
        cross: cross$2,
        lerp: lerp$4,
        random: random$3,
        transformMat2: transformMat2,
        transformMat2d: transformMat2d,
        transformMat3: transformMat3$1,
        transformMat4: transformMat4$2,
        rotate: rotate$4,
        angle: angle$1,
        zero: zero$2,
        str: str$8,
        exactEquals: exactEquals$8,
        equals: equals$9,
        len: len$4,
        sub: sub$6,
        mul: mul$8,
        div: div$2,
        dist: dist$2,
        sqrDist: sqrDist$2,
        sqrLen: sqrLen$4,
        forEach: forEach$2
    });
    glMatrix_1.glMatrix = common;
    glMatrix_1.mat2 = glMatrix_1.mat2;
    glMatrix_1.mat2d = glMatrix_1.mat2d;
    glMatrix_1.mat3 = glMatrix_1.mat3;
    glMatrix_1.mat4 = glMatrix_1.mat4;
    glMatrix_1.quat = glMatrix_1.quat;
    glMatrix_1.quat2 = glMatrix_1.quat2;
    glMatrix_1.vec2 = glMatrix_1.vec2;
    glMatrix_1.vec3 = glMatrix_1.vec3;
    glMatrix_1.vec4 = glMatrix_1.vec4;
})(glMatrix = exports.glMatrix || (exports.glMatrix = {}));
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Device_1 = require("./Device");
var Scene2D_1 = require("./renderer/base/Scene2D");
var Scene3D_1 = require("./renderer/base/Scene3D");
var Stage_1 = require("./renderer/base/Stage");
var GameMainCamera_1 = require("./renderer/camera/GameMainCamera");
var RenderFlow = /** @class */ (function () {
    function RenderFlow() {
    }
    RenderFlow.prototype.startup = function () {
        this._3dScene = new Scene3D_1.default();
        this._3dScene.init();
        this._2dScene = new Scene2D_1.default();
        this._2dScene.init();
        Stage_1.G_Stage.addChild(GameMainCamera_1.default.instance.get2DCamera());
        Stage_1.G_Stage.addChild(GameMainCamera_1.default.instance.get3DCamera());
        Stage_1.G_Stage.addChild(this._3dScene);
        Stage_1.G_Stage.addChild(this._2dScene);
        Device_1.default.Instance.setViewPort(GameMainCamera_1.default.instance.get2DCamera().rect);
        this.loopScale();
    };
    RenderFlow.prototype.loopScale = function () {
        var loop = function (time) {
            Device_1.default.Instance.startDraw(time, Stage_1.G_Stage);
            requestAnimationFrame(loop);
        }.bind(this);
        loop(0);
    };
    return RenderFlow;
}());
exports.default = RenderFlow;
},{"./Device":3,"./renderer/base/Scene2D":23,"./renderer/base/Scene3D":24,"./renderer/base/Stage":26,"./renderer/camera/GameMainCamera":41}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var vertexshader3d = 'attribute vec4 a_position;' +
    'attribute vec4 a_color;' +
    'attribute mat4 a_Matrix;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec4 v_color;' +
    'void main() {' +
    'gl_Position =u_PMatrix*u_VMatrix*u_MMatrix* a_Matrix * a_position;' +
    'v_color = a_color;' +
    '}';
var fragmentshader3d = 'precision mediump float;' +
    'varying vec4 v_color;' +
    'void main() {' +
    'gl_FragColor = v_color;' +
    '}';
var InstantiateSprite = /** @class */ (function (_super) {
    __extends(InstantiateSprite, _super);
    function InstantiateSprite() {
        var _this = _super.call(this) || this;
        _this._glPrimitiveType = 5 /* TRIANGLE_STRIP */;
        return _this;
    }
    InstantiateSprite.prototype.onInit = function () {
        this.setContentSize(100, 200);
        this._vertStr = vertexshader3d;
        this._fragStr = fragmentshader3d;
        this.numInstances = 1;
        this._renderData._isDrawInstanced = true;
        this._renderData._drawInstancedVertNums = 4;
        this._renderData._drawInstancedNums = this.numInstances;
        this.produceRandomPosArray();
        // make a typed array with one view per matrix
        this.matrixData = new Float32Array(this.numInstances * 16);
        this.matrices = [];
        for (var i = 0; i < this.numInstances; ++i) {
            var byteOffsetToMatrix = i * 16 * 4; //每一位是4个字节 4行4列
            var numFloatsForView = 16;
            this.matrices.push(new Float32Array(this.matrixData.buffer, byteOffsetToMatrix, numFloatsForView));
        }
        this.createNodeCustomMatrixBuffer([], 4, this.matrixData.byteLength);
        var colorData = [];
        for (var j = 0; j < this.numInstances; j++) {
            var res = this.getRandowColor();
            colorData.push(res[0]);
            colorData.push(res[1]);
            colorData.push(res[2]);
            colorData.push(res[3]);
        }
        this.createNodeVertColorBuffer(colorData, 4);
    };
    InstantiateSprite.prototype.produceRandomPosArray = function () {
        this._posArray = [];
        for (var j = 0; j < this.numInstances; j++) {
            var temp1 = Math.random();
            var temp2 = Math.random();
            var temp3 = Math.random();
            this._posArray[j] = [];
            this._posArray[j] = [-0.5 * temp1 + j * 0.025, temp2, 0];
        }
    };
    InstantiateSprite.prototype.getRandowColor = function () {
        var ColorTest = [1, 0, 0, 1,
            0, 1, 0, 1,
            0, 0, 1, 1,
            1, 0, 1, 1,
            0, 1, 1, 1,
        ];
        var p = Math.floor(Math.random() * 10 / 2);
        if (p >= 5)
            p = 4;
        var data = ColorTest.slice(p * 4, p * 4 + 4);
        return data;
    };
    InstantiateSprite.prototype.onShader = function () {
        this._colorLoc = this._shader.getCustomAttributeLocation("a_color");
        this._matrixLoc = this._shader.getCustomAttributeLocation('a_Matrix');
    };
    InstantiateSprite.prototype.onDrawBefore = function (time) {
        var _this = this;
        time *= 0.001; // seconds
        // update all the matrices
        this.matrices.forEach(function (mat, ndx) {
            /**
             * 构造一个节点空间坐标系
             */
            _this._glMatrix.mat4.identity(mat);
            _this._glMatrix.mat4.translate(mat, mat, _this._posArray[ndx]);
            _this._glMatrix.mat4.rotateZ(mat, mat, time * (0.1 + 0.1 * ndx));
        });
        //更新缓冲区数据
        this.getBuffer(Sprite_1.SY.GLID_TYPE.MATRIX).updateSubData(this.matrixData);
        var gl = this.gl;
        for (var i = 0; i < 4; ++i) {
            var loc = this._matrixLoc + i;
            // this line says this attribute only changes for each 1 instance
            gl.vertexAttribDivisor(loc, 1);
        }
        // this line says this attribute only changes for each 1 instance
        gl.vertexAttribDivisor(this._colorLoc, 1);
    };
    InstantiateSprite.prototype.onDrawAfter = function () {
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        gl.vertexAttribDivisor(this._colorLoc, 0);
        for (var i = 0; i < 4; ++i) {
            var loc = this._matrixLoc + i;
            gl.vertexAttribDivisor(loc, 0);
        }
        gl.disableVertexAttribArray(this._colorLoc);
        gl.disableVertexAttribArray(this._matrixLoc);
    };
    return InstantiateSprite;
}(Sprite_1.SY.Sprite2D));
exports.default = InstantiateSprite;
},{"../base/Sprite":25}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = void 0;
var Sprite_1 = require("../base/Sprite");
var fontInfo = {
    letterHeight: 8,
    spaceWidth: 8,
    spacing: -1,
    textureWidth: 64,
    textureHeight: 40,
    glyphInfos: {
        'a': { x: 0, y: 0, width: 8, },
        'b': { x: 8, y: 0, width: 8, },
        'c': { x: 16, y: 0, width: 8, },
        'd': { x: 24, y: 0, width: 8, },
        'e': { x: 32, y: 0, width: 8, },
        'f': { x: 40, y: 0, width: 8, },
        'g': { x: 48, y: 0, width: 8, },
        'h': { x: 56, y: 0, width: 8, },
        'i': { x: 0, y: 8, width: 8, },
        'j': { x: 8, y: 8, width: 8, },
        'k': { x: 16, y: 8, width: 8, },
        'l': { x: 24, y: 8, width: 8, },
        'm': { x: 32, y: 8, width: 8, },
        'n': { x: 40, y: 8, width: 8, },
        'o': { x: 48, y: 8, width: 8, },
        'p': { x: 56, y: 8, width: 8, },
        'q': { x: 0, y: 16, width: 8, },
        'r': { x: 8, y: 16, width: 8, },
        's': { x: 16, y: 16, width: 8, },
        't': { x: 24, y: 16, width: 8, },
        'u': { x: 32, y: 16, width: 8, },
        'v': { x: 40, y: 16, width: 8, },
        'w': { x: 48, y: 16, width: 8, },
        'x': { x: 56, y: 16, width: 8, },
        'y': { x: 0, y: 24, width: 8, },
        'z': { x: 8, y: 24, width: 8, },
        '0': { x: 16, y: 24, width: 8, },
        '1': { x: 24, y: 24, width: 8, },
        '2': { x: 32, y: 24, width: 8, },
        '3': { x: 40, y: 24, width: 8, },
        '4': { x: 48, y: 24, width: 8, },
        '5': { x: 56, y: 24, width: 8, },
        '6': { x: 0, y: 32, width: 8, },
        '7': { x: 8, y: 32, width: 8, },
        '8': { x: 16, y: 32, width: 8, },
        '9': { x: 24, y: 32, width: 8, },
        '-': { x: 32, y: 32, width: 8, },
        '*': { x: 40, y: 32, width: 8, },
        '!': { x: 48, y: 32, width: 8, },
        '?': { x: 56, y: 32, width: 8, },
    },
};
var makeVerticesForString = function (fontInfo, s) {
    var len = s.length;
    var numVertices = len * 6;
    var positions = new Float32Array(numVertices * 2);
    var texcoords = new Float32Array(numVertices * 2);
    var offset = 0;
    var x = 0;
    var maxX = fontInfo.textureWidth;
    var maxY = fontInfo.textureHeight;
    for (var ii = 0; ii < len; ++ii) {
        var letter = s[ii];
        var glyphInfo = fontInfo.glyphInfos[letter];
        if (glyphInfo) {
            var x2 = x + glyphInfo.width;
            var u1 = glyphInfo.x / maxX;
            var v1 = 1.0 - (glyphInfo.y + fontInfo.letterHeight - 1) / maxY;
            var u2 = (glyphInfo.x + glyphInfo.width - 1) / maxX;
            var v2 = 1.0 - glyphInfo.y / maxY;
            // 6 vertices per letter
            positions[offset + 0] = x;
            positions[offset + 1] = 0;
            texcoords[offset + 0] = u1;
            texcoords[offset + 1] = v1;
            positions[offset + 2] = x2;
            positions[offset + 3] = 0;
            texcoords[offset + 2] = u2;
            texcoords[offset + 3] = v1;
            positions[offset + 4] = x;
            positions[offset + 5] = fontInfo.letterHeight;
            texcoords[offset + 4] = u1;
            texcoords[offset + 5] = v2;
            positions[offset + 6] = x;
            positions[offset + 7] = fontInfo.letterHeight;
            texcoords[offset + 6] = u1;
            texcoords[offset + 7] = v2;
            positions[offset + 8] = x2;
            positions[offset + 9] = 0;
            texcoords[offset + 8] = u2;
            texcoords[offset + 9] = v1;
            positions[offset + 10] = x2;
            positions[offset + 11] = fontInfo.letterHeight;
            texcoords[offset + 10] = u2;
            texcoords[offset + 11] = v2;
            x += glyphInfo.width + fontInfo.spacing;
            offset += 12;
        }
        else {
            // we don't have this character so just advance
            x += fontInfo.spaceWidth;
        }
    }
    // return ArrayBufferViews for the portion of the TypedArrays
    // that were actually used.
    return {
        arrays: {
            position: new Float32Array(positions.buffer, 0, offset),
            texcoord: new Float32Array(texcoords.buffer, 0, offset),
        },
        numVertices: offset / 2,
    };
};
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_VMatrix *u_MMatrix* vec4(a_position, 1.0);' +
    'vTextureCoordinates = vec2(a_uv.x,a_uv.y);' + //取反
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'vec4 texcolor = texture2D(u_texCoord, vTextureCoordinates);' +
    'if((texcolor.x+texcolor.y+texcolor.z)<0.1) discard;' +
    'gl_FragColor = texcolor;' +
    '}';
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label() {
        var _this = _super.call(this) || this;
        _this._realCharWidth = 0;
        _this._realCharHeight = 0;
        _this._content = "zm520";
        return _this;
    }
    Object.defineProperty(Label.prototype, "content", {
        set: function (str) {
            this._content = str;
            this.onInit();
        },
        enumerable: false,
        configurable: true
    });
    Label.prototype.handleFontInfo = function () {
        //默认在字符表中字符的宽高相等
        var hang = fontInfo.textureHeight / fontInfo.letterHeight;
        var lie = fontInfo.textureWidth / fontInfo.letterHeight;
        var totalChar = hang * lie;
        this._realCharHeight = fontInfo.letterHeight;
        this._realCharWidth = fontInfo.letterHeight;
    };
    Label.prototype.onInit = function () {
        if (!this._content)
            return;
        var data = makeVerticesForString(fontInfo, this._content);
        var arrPos = [];
        var arrUV = [];
        var posData = (data.arrays.position.toString()).split(',');
        var uvData = (data.arrays.texcoord.toString()).split(',');
        console.log(posData, this._content);
        for (var j = 0; j < posData.length; j++) {
            if (j % 2 == 0) {
                arrPos.push(parseFloat(posData[j]) / fontInfo.textureWidth);
            }
            else if (j % 2 == 1) {
                arrPos.push(parseFloat(posData[j]) / fontInfo.textureHeight);
            }
            arrUV.push(parseFloat(uvData[j]));
            if (j % 2 != 0) {
                arrPos.push(-0.1);
            }
        }
        var itemNums = arrPos.length / 3;
        this.createVertexsBuffer(arrPos, 3);
        this.createUVsBuffer(arrUV, 2);
        // 索引数据
        var floorVertexIndices = [];
        for (var j = 0; j < itemNums; j++) {
            floorVertexIndices.push(j);
        }
        this.createIndexsBuffer(floorVertexIndices);
        this._fragStr = fragBaseCode;
        this._vertStr = vertextBaseCode;
        this._glPrimitiveType = 4 /* TRIANGLES */;
    };
    return Label;
}(Sprite_1.SY.Sprite2D));
exports.Label = Label;
},{"../base/Sprite":25}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rectangle = void 0;
var Sprite_1 = require("../base/Sprite");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_VMatrix *u_MMatrix* vec4(a_position, 1.0);' +
    'vTextureCoordinates = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var Rectangle = /** @class */ (function (_super) {
    __extends(Rectangle, _super);
    function Rectangle() {
        return _super.call(this) || this;
    }
    Rectangle.prototype.onInit = function () {
        this.setContentSize(120, 240);
        this._vertStr = vertextBaseCode;
        this._fragStr = fragBaseCode;
    };
    return Rectangle;
}(Sprite_1.SY.Sprite2D));
exports.Rectangle = Rectangle;
},{"../base/Sprite":25}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderOfflineSprite = void 0;
var Sprite_1 = require("../base/Sprite");
var Device_1 = require("../../Device");
var GameMainCamera_1 = require("../camera/GameMainCamera");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_VMatrix *u_MMatrix* vec4(a_position, 1.0);' +
    'vTextureCoordinates =vec2(a_uv.x,a_uv.y);' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var RenderOfflineSprite = /** @class */ (function (_super) {
    __extends(RenderOfflineSprite, _super);
    function RenderOfflineSprite() {
        var _this = _super.call(this) || this;
        _this._renderData._isOffline = true;
        return _this;
    }
    RenderOfflineSprite.prototype.onInit = function () {
        this.setContentSize(Device_1.default.Instance.width / 4, Device_1.default.Instance.height / 4);
        this._vertStr = vertextBaseCode;
        this._fragStr = fragBaseCode;
    };
    RenderOfflineSprite.prototype.onSetTextureUrl = function () {
        GameMainCamera_1.default.instance.get2DCamera().targetTexture = this.texture;
    };
    return RenderOfflineSprite;
}(Sprite_1.SY.Sprite2D));
exports.RenderOfflineSprite = RenderOfflineSprite;
},{"../../Device":3,"../base/Sprite":25,"../camera/GameMainCamera":41}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var CubeData_1 = require("../data/CubeData");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_VMatrix *u_MMatrix* vec4(a_position, 1.0);' +
    'vTextureCoordinates = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var Cube = /** @class */ (function (_super) {
    __extends(Cube, _super);
    function Cube() {
        return _super.call(this) || this;
    }
    Cube.prototype.onInit = function () {
        var rd = CubeData_1.CubeData.getData();
        this.createVertexsBuffer(rd.vertex, rd.dF.vertex_item_size);
        this.createUVsBuffer(rd.uvData, rd.dF.uv_item_size);
        this.createIndexsBuffer(rd.indexs);
        this._vertStr = vertextBaseCode;
        this._fragStr = fragBaseCode;
        this._glPrimitiveType = this.gl.TRIANGLE_STRIP;
    };
    return Cube;
}(Sprite_1.SY.SpriteBase));
exports.default = Cube;
},{"../base/Sprite":25,"../data/CubeData":46}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_VMatrix *u_VMatrix* vec4(a_position, 1.0);' +
    'vTextureCoordinates = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var CustomTextureCube = /** @class */ (function (_super) {
    __extends(CustomTextureCube, _super);
    function CustomTextureCube() {
        return _super.call(this) || this;
    }
    CustomTextureCube.prototype.onInit = function () {
        var positions = [
            -1, -1, -1,
            -1, 1, -1,
            1, -1, -1,
            //背面是个矩形 竖着放 斜角切开
            -1, 1, -1,
            1, 1, -1,
            1, -1, -1,
            -1, -1, 1,
            1, -1, 1,
            -1, 1, 1,
            //前面是个矩形 竖着放 斜角切开
            -1, 1, 1,
            1, -1, 1,
            1, 1, 1,
            -1, 1, -1,
            -1, 1, 1,
            1, 1, -1,
            //上面是个矩形 平铺  斜角切开（/）
            -1, 1, 1,
            1, 1, 1,
            1, 1, -1,
            -1, -1, -1,
            1, -1, -1,
            -1, -1, 1,
            //下面是个矩形 平铺 斜角切开（/）
            -1, -1, 1,
            1, -1, -1,
            1, -1, 1,
            -1, -1, -1,
            -1, -1, 1,
            -1, 1, -1,
            //左面是个矩形 面朝左右 斜角切开
            -1, -1, 1,
            -1, 1, 1,
            -1, 1, -1,
            1, -1, -1,
            1, 1, -1,
            1, -1, 1,
            //右面是个矩形 面朝左右 斜角切开
            1, -1, 1,
            1, 1, -1,
            1, 1, 1,
        ];
        var uvs = [
            0, 0,
            0, 1,
            1, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 0,
            1, 0,
            0, 1,
            1, 1,
            0, 0,
            0, 1,
            1, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 0,
            1, 0,
            0, 1,
            1, 1,
            0, 0,
            0, 1,
            1, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 0,
            1, 0,
            0, 1,
            1, 1,
        ];
        this.createVertexsBuffer(positions, 3);
        this.createUVsBuffer(uvs, 2);
        this._glPrimitiveType = 4 /* TRIANGLES */;
        this._vertStr = vertextBaseCode;
        this._fragStr = fragBaseCode;
    };
    return CustomTextureCube;
}(Sprite_1.SY.SpriteBase));
exports.default = CustomTextureCube;
},{"../base/Sprite":25}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
/**
基本图形	参数	                                   描述
点	     gl.POINTS	                   一系列的点，绘制在 v0 ,v1,v2....
线段	 gl.LINES            	       一系列单独的线段，绘制在(v0, v1),(v2,v3)...，若点个数使奇数，则最后一个点被忽略
线条	 gl.LINE_STRIP	               一系列连接的线段，绘制在(v0,v1),(v1,v2)...最后一个点使一条线段的终点
回路线条 gl.LINE_LOOP	               一系列连接的线段，与gl.LINE_STRIP相比，最后一个点会与开始的点相连接(vn,v0),线段会闭合
三角形	 gl.TRIANGLES	               一系列单独的三角形，绘制在(v0, v1, v2),(v3, v4, v5)...，点个数若不是3的倍数，则剩下的被忽略
三角带	 gl.TRIANGLE_STRIP             一些列条带状的三角形，前三个点构成第一个三角形，从第二个点开始的三个点构成第二个三角形，以此类推…，(v0,v1,v2),(v2,v1,v3),(v2,v3,v4)...
三角扇	 gl.TRIANGLE_FAN	           一系列三角形组成的类似扇形的图形，前三个点构成第一个三角形，接下来的一个点和前一个三角形的最后一条边组成接下来的一个三角形，被绘制在(v0, v1, v2),(v0, v2, v3),(v0, v3, v4)...
 */
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_MMatrix *u_VMatrix* vec4(a_position, 1.0);' +
    'vTextureCoordinates = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var Ground = /** @class */ (function (_super) {
    __extends(Ground, _super);
    function Ground() {
        return _super.call(this) || this;
    }
    Ground.prototype.onInit = function () {
        // 顶点数据
        var floorVertexPosition = [
            // Plane in y=0
            5.0, 0.0, 5.0,
            5.0, 0.0, -5.0,
            -5.0, 0.0, -5.0,
            -5.0, 0.0, 5.0
        ]; //v3
        this.createVertexsBuffer(floorVertexPosition, 3);
        //uv 数据
        var floorVertexTextureCoordinates = [
            2.0, 0.0,
            2.0, 2.0,
            0.0, 2.0,
            0.0, 0.0
        ];
        this.createUVsBuffer(floorVertexTextureCoordinates, 2);
        // 索引数据
        // var floorVertexIndices = [0, 1, 2,3,0,2];
        // this._glPrimitiveType = glprimitive_type.TRIANGLE_STRIP;
        // this.createIndexsBuffer(floorVertexIndices);
        // this.testDrawPrimitive_TRIANGLE_STRIP();
        // this.testDrawPrimitive_TRIANGLE_FAN();
        this.testDrawPrimitive_TRIANGLE();
        this._vertStr = vertextBaseCode;
        this._fragStr = fragBaseCode;
    };
    Ground.prototype.testDrawPrimitive_TRIANGLE_STRIP = function () {
        var floorVertexIndices = [0, 1, 2, 3, 0, 2];
        this._glPrimitiveType = 5 /* TRIANGLE_STRIP */;
        this.createIndexsBuffer(floorVertexIndices);
    };
    Ground.prototype.testDrawPrimitive_TRIANGLE_FAN = function () {
        var floorVertexIndices = [0, 1, 2, 3];
        this._glPrimitiveType = 6 /* TRIANGLE_FAN */;
        this.createIndexsBuffer(floorVertexIndices);
    };
    Ground.prototype.testDrawPrimitive_TRIANGLE = function () {
        var floorVertexIndices = [0, 1, 2, 3, 0, 2];
        this._glPrimitiveType = 4 /* TRIANGLES */;
        this.createIndexsBuffer(floorVertexIndices);
    };
    return Ground;
}(Sprite_1.SY.SpriteBase));
exports.default = Ground;
},{"../base/Sprite":25}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var CubeData_1 = require("../data/CubeData");
var ShaderUseVariantType_1 = require("../shader/ShaderUseVariantType");
/**
 * 如果将三维物体的朝向和光的方向点乘， 结果为 1 则物体朝向和光照方向相同，为 -1 则物体朝向和光照方向相反
 * 所以应该是发现和光的反向相乘，再乘以光的颜色，就是光反射的颜色，
 */
var vertexshader3d = 'attribute vec4 a_position;' +
    'attribute vec3 a_normal;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'uniform mat4 u_MITMatrix;' + //模型的世界矩阵
    'varying vec2 v_uv;' +
    'varying vec3 v_normal;' +
    'void main() {' +
    // Multiply the position by the matrix.
    'gl_Position = u_PMatrix *u_VMatrix*u_MMatrix* a_position;' +
    // Pass the normal to the fragment shader
    'v_normal = mat3(u_MITMatrix)* a_normal;' +
    'v_uv = a_uv;' +
    '}';
var fragmentshader3d = 'precision mediump float;' +
    // Passed in from the vertex shader.
    'varying vec3 v_normal;' + //法线
    'uniform vec3 u_lightColorDir;' + //光的方向
    'uniform vec4 u_lightColor;' + //光照
    'uniform sampler2D u_texCoord;' + //纹理
    'varying vec2 v_uv;' +
    'void main() {' +
    'vec4 texColor = texture2D(u_texCoord, v_uv);' +
    // because v_normal is a varying it's interpolated
    // so it will not be a unit vector. Normalizing it
    // will make it a unit vector again
    'vec3 normal = normalize(v_normal);' +
    'float light = dot(normal, -u_lightColorDir);' + //算出光照强度
    'gl_FragColor = u_lightColor*texColor;' + //将光的颜色和纹理的颜色相乘 
    // Lets multiply just the color portion (not the alpha)
    // by the light
    'gl_FragColor.rgb *= light;' +
    '}';
/**
 * 光照立方体
 */
var LightCube = /** @class */ (function (_super) {
    __extends(LightCube, _super);
    function LightCube() {
        var _this = _super.call(this) || this;
        _this.name = "LightCube";
        return _this;
    }
    LightCube.prototype.onInit = function () {
        var rd = CubeData_1.CubeData.getData();
        this.createVertexsBuffer(rd.vertex, rd.dF.vertex_item_size);
        this.createUVsBuffer(rd.uvData, rd.dF.uv_item_size);
        this.createIndexsBuffer(rd.indexs);
        this.createNormalsBuffer(rd.normals, rd.dF.normal_item_size);
        this._vertStr = vertexshader3d;
        this._fragStr = fragmentshader3d;
        this._glPrimitiveType = this.gl.TRIANGLE_STRIP;
    };
    LightCube.prototype.onShader = function () {
        this._shader.pushShaderVariant(ShaderUseVariantType_1.ShaderUseVariantType.ModelInverseTransform);
        this._shader.pushShaderVariant(ShaderUseVariantType_1.ShaderUseVariantType.LightColor);
        this._shader.pushShaderVariant(ShaderUseVariantType_1.ShaderUseVariantType.LightDirection);
    };
    return LightCube;
}(Sprite_1.SY.SpriteBase));
exports.default = LightCube;
},{"../base/Sprite":25,"../data/CubeData":46,"../shader/ShaderUseVariantType":60}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Line = void 0;
var Sprite_1 = require("../base/Sprite");
var vert = "attribute vec4 a_position;\n        uniform mat4 u_MMatrix;\n        uniform mat4 u_VMatrix;\n        uniform mat4 u_PMatrix;\n        void main() {\n        gl_Position = u_PMatrix * u_VMatrix * u_MMatrix * a_position;\n        }";
var frag = "precision mediump float;\n        uniform vec4 u_color;\n            void main() {\n            gl_FragColor = u_color;  //\u7EBF\u7684\u989C\u8272    \n        }";
var Line = /** @class */ (function (_super) {
    __extends(Line, _super);
    function Line() {
        var _this = _super.call(this) || this;
        //画线
        _this._glPrimitiveType = 1 /* LINES */;
        return _this;
    }
    Line.prototype.onInit = function () {
        this._vertStr = vert;
        this._fragStr = frag;
        this.color = [1.0, 0, 0, 1.0];
    };
    return Line;
}(Sprite_1.SY.SpriteBaseLine));
exports.Line = Line;
},{"../base/Sprite":25}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var CubeData_1 = require("../data/CubeData");
var ShaderUseVariantType_1 = require("../shader/ShaderUseVariantType");
var vertextBaseCode = "attribute vec4 a_position;\nattribute vec4 a_normal;\nuniform mat4 u_PVMatrix;\nuniform mat4 u_MMatrix;\nvarying vec3 v_position;\nvarying vec3 v_normal;\n\nvoid main() {\n    v_position = (u_MMatrix * a_position).xyz;\n    v_normal = vec3(u_MMatrix * a_normal);\n    gl_Position = u_PVMatrix * u_MMatrix * a_position;\n}\n";
//基础的shader的片段着色器
var fragBaseCode = "precision highp float;\nvarying vec3 v_position;\nvarying vec3 v_normal;\nuniform samplerCube u_cubeCoord;\nuniform vec3 u_cameraWorldPosition;\n\nvoid main() {\n    vec3 normal = normalize(v_normal);\n    vec3 eyeToSurfaceDir = normalize(v_position - u_cameraWorldPosition);\n    vec3 direction = reflect(eyeToSurfaceDir,normal);\n    gl_FragColor = textureCube(u_cubeCoord, direction);\n}\n";
var MirrorCube = /** @class */ (function (_super) {
    __extends(MirrorCube, _super);
    function MirrorCube() {
        var _this = _super.call(this) || this;
        _this.defaultPath = [
            'res/skybox/2/right+x.png',
            'res/skybox/2/left-x.png',
            'res/skybox/2/up-y.png',
            'res/skybox/2/down+y.png',
            'res/skybox/2/back-z.png',
            'res/skybox/2/front+z.png'
        ];
        return _this;
    }
    MirrorCube.prototype.onInit = function () {
        var rd = CubeData_1.CubeData.getData();
        this.createVertexsBuffer(rd.vertex, rd.dF.vertex_item_size);
        this.createIndexsBuffer(rd.indexs);
        this.createNormalsBuffer(rd.normals, rd.dF.normal_item_size);
        this._vertStr = vertextBaseCode;
        this._fragStr = fragBaseCode;
        this._glPrimitiveType = this.gl.TRIANGLE_STRIP;
    };
    MirrorCube.prototype.onShader = function () {
        this._shader.pushShaderVariant(ShaderUseVariantType_1.ShaderUseVariantType.ProjectionView);
        this._shader.pushShaderVariant(ShaderUseVariantType_1.ShaderUseVariantType.Model);
        this._shader.pushShaderVariant(ShaderUseVariantType_1.ShaderUseVariantType.CameraWorldPosition);
        this._shader.pushShaderVariant(ShaderUseVariantType_1.ShaderUseVariantType.CUBE_COORD);
    };
    MirrorCube.prototype.setDefaultUrl = function () {
        this.spriteFrame = this.defaultPath;
    };
    return MirrorCube;
}(Sprite_1.SY.SpriteBase));
exports.default = MirrorCube;
},{"../base/Sprite":25,"../data/CubeData":46,"../shader/ShaderUseVariantType":60}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var CubeData_1 = require("../data/CubeData");
var ShaderUseVariantType_1 = require("../shader/ShaderUseVariantType");
var vertexshader3d = 'attribute vec4 a_position;' +
    'varying vec4 v_position;' +
    'void main() {' +
    'v_position = a_position;' +
    'gl_Position = a_position;' +
    'gl_Position.z = 1.0;' +
    '}';
var fragmentshader3d = 'precision mediump float;' +
    'uniform samplerCube u_skybox;' +
    'uniform mat4 u_PVInverseMatrix;' +
    'varying vec4 v_position;' +
    'void main() {' +
    'vec4 t = u_PVInverseMatrix * v_position;' +
    'vec3 pos = normalize(t.xyz / t.w);' +
    'vec4 color =  textureCube(u_skybox,pos);' +
    'gl_FragColor = color;' +
    '}';
var SkyBox = /** @class */ (function (_super) {
    __extends(SkyBox, _super);
    function SkyBox() {
        var _this = _super.call(this) || this;
        _this.defaultPath = [
            'res/skybox/2/right+x.png',
            'res/skybox/2/left-x.png',
            'res/skybox/2/up-y.png',
            'res/skybox/2/down+y.png',
            'res/skybox/2/back-z.png',
            'res/skybox/2/front+z.png'
        ];
        return _this;
    }
    SkyBox.prototype.onInit = function () {
        var rd = CubeData_1.CubeData.getData();
        this.createVertexsBuffer(rd.vertex, rd.dF.vertex_item_size);
        this.createIndexsBuffer(rd.indexs);
        this._vertStr = vertexshader3d;
        this._fragStr = fragmentshader3d;
        this._glPrimitiveType = this.gl.TRIANGLE_STRIP;
    };
    SkyBox.prototype.onShader = function () {
        this._shader.pushShaderVariant(ShaderUseVariantType_1.ShaderUseVariantType.SKYBOX);
    };
    SkyBox.prototype.setDefaultUrl = function () {
        this.spriteFrame = this.defaultPath;
    };
    return SkyBox;
}(Sprite_1.SY.SpriteBase));
exports.default = SkyBox;
},{"../base/Sprite":25,"../data/CubeData":46,"../shader/ShaderUseVariantType":60}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var vertextBaseCode = 'precision highp float;' +
    'attribute vec3 a_position;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec4 color;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_VMatrix *u_MMatrix* vec4(a_position, 1.0);' +
    'color=vec4(gl_Position.x,gl_Position.y,gl_Position.z,0.8);' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec4 color;' +
    'void main() {' +
    'gl_FragColor = color;' +
    '}';
var Sphere = /** @class */ (function (_super) {
    __extends(Sphere, _super);
    function Sphere() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Sphere.prototype.drawQiu02 = function (r, m) {
        var arr = new Array();
        var bufR = -r;
        var getMaxY = function (a, z, r) {
            var angle = 0;
            var addAng = 360 / a;
            var d = new Array();
            for (var i = 0; i < a; i++) {
                d.push(Math.sin(Math.PI / 180 * angle) * r, Math.cos(Math.PI / 180 * angle) * r, z);
                angle += addAng;
            }
            return d;
        };
        var addAng = 360 / m;
        var angle = 0;
        bufR = r;
        for (var i = 0; i < m / 2; i++) {
            if (i >= m / 4) {
                var z = Math.sin(Math.PI / 180 * angle) * -r;
            }
            else {
                var z = Math.sin(Math.PI / 180 * angle) * -r;
            }
            console.log(z);
            angle += addAng;
            var arr1 = getMaxY(m, z, bufR);
            if (i >= m / 4) {
                z = Math.sin(Math.PI / 180 * angle) * -r;
            }
            else {
                z = -Math.sin(Math.PI / 180 * angle) * -r;
            }
            bufR = Math.sqrt(r * r - r * Math.sin(Math.PI / 180 * angle) * r * Math.sin(Math.PI / 180 * angle));
            var arr2 = getMaxY(m, z, bufR);
            for (var q = 0; q < arr1.length; q += 3) {
                if (q == 0) {
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr1[arr1.length - 3], arr1[arr1.length - 2], arr1[arr1.length - 1]);
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr2[q + 3], arr2[q + 4], arr2[q + 5]);
                }
                else if (q == arr1.length - 3) {
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr1[q - 3], arr1[q - 2], arr1[q - 1]);
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr2[0], arr2[1], arr2[2]);
                }
                else {
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr1[q - 3], arr1[q - 2], arr1[q - 1]);
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr2[q + 3], arr2[q + 4], arr2[q + 5]);
                }
            }
        }
        return arr;
    };
    Sphere.prototype.onInit = function () {
        var data = this.drawQiu02(1, 18);
        this.createVertexsBuffer(data, 3);
        this._vertStr = vertextBaseCode;
        this._fragStr = fragBaseCode;
        this._glPrimitiveType = this.gl.LINE_STRIP;
    };
    Sphere.prototype.visit = function (time) {
        _super.prototype.visit.call(this, time);
    };
    return Sphere;
}(Sprite_1.SY.SpriteBase));
exports.default = Sphere;
},{"../base/Sprite":25}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_DrawEngine = void 0;
var GLEnums_1 = require("../gfx/GLEnums");
/**
 * 绘制发动机
 */
var DrawEngine = /** @class */ (function () {
    function DrawEngine() {
    }
    DrawEngine.prototype.init = function (gl) {
        this.gl = gl;
    };
    /**
     * @param mode  绘制类型
     * @param count 索引的数目
     * @param type  每个索引数据的类型 此处gl.UNSIGNED_SHORT 表示2个字节
     * @param offset 绘制的数据在索引缓冲数组中的起始地址
     */
    DrawEngine.prototype.drawElements = function (mode, count, type, offset) {
        var gl = this.gl;
        gl.drawElements(mode, count, type, offset);
    };
    /**
     * @param mode  绘制类型
     * @param first 绘制数据在顶点缓冲数组中的起始地址
     * @param count 一共有多少个顶点需要绘制
     */
    DrawEngine.prototype.drawArrays = function (mode, first, count) {
        var gl = this.gl;
        gl.drawArrays(mode, first, count);
    };
    /**
     *
     * @param mode 绘制类型
     * @param first 绘制数据在顶点缓冲数组中的起始地址
     * @param count 单个实例所包含的顶点数目
     * @param instanceCount 一共有多少个实例
     */
    DrawEngine.prototype.drawArraysInstanced = function (mode, first, count, instanceCount) {
        var gl = this.gl;
        gl.drawArraysInstanced(mode, first, // offset
        count, // num vertices per instance
        instanceCount);
    };
    /**
     *
     * @param mode  绘制类型
     * @param count 索引的数目
     * @param type  每个索引数据的类型 此处设置gl.UNSIGNED_SHORT，这个表示两个字节代表一个数据
     * @param offset 绘制数据在索引缓冲数组中的起始地址
     * @param instanceCount 一共有多少个实例
     */
    DrawEngine.prototype.drawElementsInstanced = function (mode, count, type, offset, instanceCount) {
        var gl = this.gl;
        gl.drawElementsInstanced(mode, count, type, offset, instanceCount);
    };
    DrawEngine.prototype.run = function (rd, view, proj, shader) {
        var gl = this.gl;
        rd.bindGPUBufferData(view, proj, shader);
        //绘制前
        rd._node ? rd._node.onDrawBefore(rd._time) : null;
        if (!rd._isDrawInstanced) {
            var indexglID = rd._indexGLID;
            indexglID != -1 ? (
            //绑定索引缓冲
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexglID),
                this.drawElements(rd._glPrimitiveType, rd._indexItemNums, gl.UNSIGNED_SHORT, 0)) : (this.drawArrays(rd._glPrimitiveType, 0, rd._vertItemNums));
        }
        else {
            var indexglID = rd._indexGLID;
            !indexglID == true ? this.drawArraysInstanced(rd._glPrimitiveType, 0, // offset
            rd._drawInstancedVertNums, // num vertices per instance
            rd._drawInstancedNums) : (
            //绑定索引缓冲
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexglID),
                this.drawElementsInstanced(rd._glPrimitiveType, rd._indexItemNums, gl.UNSIGNED_SHORT, 0, rd._drawInstancedNums));
        }
        //解除缓冲区对于目标纹理的绑定
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        rd._shader.disableVertexAttribArray();
        //绘制后
        rd._node ? rd._node.onDrawAfter(rd._time) : null;
    };
    /**
     * 获取shader中变量的位置
     * @param glID shader在显存中的地址
     * @param varName 变量名
     */
    DrawEngine.prototype.getAttribLocation = function (glID, varName) {
        return this.gl.getAttribLocation(glID, varName);
    };
    DrawEngine.prototype.useProgram = function (glID) {
        this.gl.useProgram(glID);
    };
    /**
     * 设置shader中Uniform变量的值
     * 在着色器中此值相当于const 不可以修改
     * 另外在顶点和片段着色器中如果同时声明一样，则都可以使用
     * @param loc shader中变量的位置
     * @param matrix 矩阵数据
     */
    DrawEngine.prototype.setUniformMatrix = function (loc, matrix) {
        this.gl.uniformMatrix4fv(loc, false, matrix);
    };
    /**
     * 设置shader中Uniform变量的值
     * 在着色器中此值相当于const 不可以修改
     * 另外在顶点和片段着色器中如果同时声明一样，则都可以使用
     * @param loc shader中变量的位置
     * @param matrix 矩阵数据
     */
    DrawEngine.prototype.setUniformFloatVec3 = function (loc, arr) {
        this.gl.uniform3fv(loc, arr);
    };
    /**
     * 设置shader中Uniform变量的值
     * 在着色器中此值相当于const 不可以修改
     * 另外在顶点和片段着色器中如果同时声明一样，则都可以使用
     * @param loc shader中变量的位置
     * @param matrix 矩阵数据
     */
    DrawEngine.prototype.setUniformFloatVec4 = function (loc, arr) {
        this.gl.uniform4fv(loc, arr);
    };
    /**
     * 此函数的作用是激活纹理单元
     * @param glID 纹理单元在显存的地址
     * @param loc shader中变量的位置
     * @param pos 具体要使用那块纹理
     */
    DrawEngine.prototype.active2DTexture = function (glID, loc, pos) {
        /**
         * activeTexture必须在bindTexture之前。如果没activeTexture就bindTexture，会默认绑定到0号纹理单元
       */
        var gl = this.gl;
        // 激活 指定 号纹理单元
        gl.activeTexture(gl[GLEnums_1.glTEXTURE_UNIT_VALID[pos]]);
        // 指定当前操作的贴图
        gl.bindTexture(gl.TEXTURE_2D, glID);
        //将贴图的纹理数据赋给shader中的变量
        gl.uniform1i(loc, pos);
    };
    /**
    * 此函数的作用是激活纹理单元
    * @param glID 纹理单元在显存的地址
    * @param loc shader中变量的位置
    * @param pos 具体要使用那块纹理
    */
    DrawEngine.prototype.activeCubeTexture = function (glID, loc, pos) {
        /**
         * activeTexture必须在bindTexture之前。如果没activeTexture就bindTexture，会默认绑定到0号纹理单元
       */
        var gl = this.gl;
        if (glID) {
            // 激活 指定 号纹理单元
            gl.activeTexture(gl[GLEnums_1.glTEXTURE_UNIT_VALID[pos]]);
            // 指定当前操作的贴图
            gl.bindTexture(gl.TEXTURE_CUBE_MAP, glID);
        }
        else {
            //默认使用上次的纹理单元
        }
        //将贴图的纹理数据赋给shader中的变量
        gl.uniform1i(loc, pos);
    };
    /**
     * 关闭shader当前位置的变量对于数组缓冲中数据的使用
     * @param loc
     */
    DrawEngine.prototype.disableVertexAttribArray = function (loc) {
        this.gl.disableVertexAttribArray(loc);
    };
    /**
    * 此函数的作用是要告诉GPU做下面三件事
    * 1：当前要操作的数组缓冲是那个，这个缓冲其实就是一个数组
    * 2：把这个数组缓冲复制给顶点着色器的那个变量
    * 3：在赋值的时候，取多少个数据为一个单元
    * 此处关于每个数据的类型默认设置为float,即一个数据有4个字节组成
    * @param glID    数组缓冲的显存地址
    * @param loc     shader中变量的位置
    * @param itemSize 一个单元的数据数目
    */
    DrawEngine.prototype.activeVertexAttribArray = function (glID, loc, itemSize) {
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, glID);
        this.enableVertexAttribArray(loc, itemSize, gl.FLOAT, false, 0, 0);
    };
    /**
     * 这是一个矩阵数组缓冲，它和普通数组缓冲略有区别
    * 此函数的作用是要告诉GPU做下面三件事
    * 1：当前要操作的数组缓冲是那个，这个缓冲其实就是一个数组
    * 2：把这个数组缓冲复制给顶点着色器的那个变量
    * 3：在赋值的时候，取多少个数据为一个单元
    * 此处关于每个数据的类型默认设置为float,即一个数据有4个字节组成
    * @param glID    数组缓冲的显存地址
    * @param loc     shader中变量的位置
    * @param itemSize 一个单元的数据数目
    */
    DrawEngine.prototype.activeMatrixVertexAttribArray = function (glID, loc, itemSize) {
        var gl = this.gl;
        gl.bindBuffer(gl.ARRAY_BUFFER, glID);
        var bytesPerMatrix = 4 * 16;
        // set all 4 attributes for matrix
        // 解析 
        // 每一个矩阵的大小是四行四列，矩阵中元素的类型是gl.FLOAT,即元素占用四个字节
        // 所以一个矩阵的占用字节数为4*4*4
        // 关于矩阵在shader中的位置计算，可以把矩阵想象成一个一维数组，元素类型是vec4
        // matrixLoc:表示矩阵的第1行在shader中的位置
        // matrixLoc+1:表示矩阵的第2行在shader中的位置
        // matrixLoc+2:表示矩阵的第3行在shader中的位置
        // matrixLoc+3:表示矩阵的第4行在shader中的位置    
        for (var i = 0; i < 4; ++i) {
            var locTemp = loc + i;
            // note the stride and offset
            var offset = i * 16; // 4 floats per row, 4 bytes per float
            this.enableVertexAttribArray(locTemp, itemSize, gl.FLOAT, false, bytesPerMatrix, offset);
        }
    };
    /**
     *
     * @param loc    shader中变量的位置
     * @param itemSize 一个单元包含几个数据
     * @param type    数据的类型
     * @param normalized 是否归一化
     * @param stride 管道字节数 默认为0表示数据是紧密存放的
     * @param offset 单元偏移，注意这个不是以字节为单位的，它是以单元为单位的
     */
    DrawEngine.prototype.enableVertexAttribArray = function (loc, itemSize, type, normalized, stride, offset) {
        if (normalized === void 0) { normalized = false; }
        if (stride === void 0) { stride = 0; }
        if (offset === void 0) { offset = 0; }
        var gl = this.gl;
        gl.enableVertexAttribArray(loc);
        gl.vertexAttribPointer(loc, itemSize, type, normalized, stride, offset);
    };
    return DrawEngine;
}());
exports.G_DrawEngine = new DrawEngine();
},{"../gfx/GLEnums":50}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = void 0;
var Ref_1 = require("../../../Ref");
var Matrix_1 = require("../../Matrix");
var Node = /** @class */ (function (_super) {
    __extends(Node, _super);
    function Node() {
        var _this = _super.call(this) || this;
        _this._x = 0;
        _this._y = 0;
        _this._z = 0;
        _this._scaleX = 1;
        _this._scaleY = 1;
        _this._scaleZ = 1;
        //x轴旋转的角度
        _this._rotateX = 0;
        //y轴旋转的角度
        _this._rotateY = 0;
        //z轴旋转的角度
        _this._rotateZ = 0;
        _this._updateModelMatrixFlag = false; //是否更新模型矩阵的一个标志
        _this.width = 0; //宽度
        _this.height = 0; //高度
        _this.anchorX = 0.5; //x轴锚点
        _this.anchorY = 0.5; //y轴锚点
        _this._glMatrix = Matrix_1.glMatrix; //矩阵操作api
        _this.initBaseNode();
        return _this;
    }
    Node.prototype.initBaseNode = function () {
        this.name = "defaultName";
        this._children = [];
        this._worldMatrix = this._glMatrix.mat4.identity(null);
        this._modelMatrix = this._glMatrix.mat4.identity(null);
        this._localMatrix = this._glMatrix.mat4.identity(null);
        this._updateModelMatrixFlag = true;
    };
    Object.defineProperty(Node.prototype, "x", {
        get: function () {
            return this._x;
        },
        set: function (dd) {
            if (this._x != dd) {
                this._updateModelMatrixFlag = true;
                this._x = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "y", {
        get: function () {
            return this._y;
        },
        set: function (dd) {
            if (this._y != dd) {
                this._updateModelMatrixFlag = true;
                this._y = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "z", {
        get: function () {
            return this._z;
        },
        set: function (dd) {
            if (this._z != dd) {
                this._updateModelMatrixFlag = true;
                this._z = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "scaleX", {
        get: function () {
            return this._scaleX;
        },
        set: function (dd) {
            if (this._scaleX != dd) {
                this._updateModelMatrixFlag = true;
                this._scaleX = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "scaleY", {
        get: function () {
            return this._scaleY;
        },
        set: function (dd) {
            if (this._scaleY != dd) {
                this._updateModelMatrixFlag = true;
                this._scaleY = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "scaleZ", {
        get: function () {
            return this._scaleZ;
        },
        set: function (dd) {
            if (this._scaleZ != dd) {
                this._updateModelMatrixFlag = true;
                this._scaleZ = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "rotateX", {
        get: function () {
            return this._rotateX;
        },
        set: function (dd) {
            if (this._rotateX != dd) {
                this._updateModelMatrixFlag = true;
                this._rotateX = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "rotateY", {
        get: function () {
            return this._rotateY;
        },
        set: function (dd) {
            if (this._rotateY != dd) {
                this._updateModelMatrixFlag = true;
                this._rotateY = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "rotateZ", {
        get: function () {
            return this._rotateZ;
        },
        set: function (dd) {
            if (this._rotateZ != dd) {
                this._updateModelMatrixFlag = true;
                this._rotateZ = dd;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: false,
        configurable: true
    });
    /**
     *
     * @param node
     */
    Node.prototype.addChild = function (node) {
        console.assert(node && node.parent == null, "添加节点失败", node);
        if (this._children.indexOf(node) >= 0) {
            console.log("该节点已经添加！！！！");
            return;
        }
        this._children.push(node);
        node._parent = this;
    };
    /**
     * 移除孩子节点
     * @param node
     */
    Node.prototype.removeChild = function (node) {
        var index = this._children.indexOf(node);
        if (index >= 0) {
            this._children.splice(index, 1);
            node._parent = null;
        }
    };
    //更新世界矩阵
    Node.prototype.updateWorldMatrix = function () {
        if (this._parent) {
            this.setFatherMatrix(this._parent.modelMatrix);
        }
        //更新当前节点的矩阵数据
        this.updateMatrixData();
    };
    //绘制之前
    Node.prototype.onDrawBefore = function (time) {
    };
    Node.prototype.onDrawAfter = function (time) {
    };
    //开启绘制
    Node.prototype.visit = function (time) {
        //更新世界节点
        this.updateWorldMatrix();
        //开始绘制
        this.collectRenderData(time);
        for (var j = 0; j < this._children.length; j++) {
            this._children[j].visit(time);
        }
    };
    Node.prototype.collectRenderData = function (time) {
    };
    /**
     *
     * @param mvMatrix 设置父节点矩阵
     */
    Node.prototype.setFatherMatrix = function (mvMatrix) {
        this._worldMatrix = this._glMatrix.mat4.clone(mvMatrix);
    };
    /**
    * 更新2D矩阵
    * 将此节点的数据更新到这个矩阵中
    *
    * 世界坐标变换要先缩放、后旋转、再平移的原因
    *
    * 缩放变换不改变坐标轴的走向，也不改变原点的位置，所以两个坐标系仍然重合。
      旋转变换改变坐标轴的走向，但不改变原点的位置，所以两个坐标系坐标轴不再处于相同走向。
      平移变换不改变坐标轴走向，但改变原点位置，两个坐标系原点不再重合
    */
    Node.prototype.updateMatrixData = function () {
        if (this._updateModelMatrixFlag) {
            //初始化模型矩阵
            this._glMatrix.mat4.identity(this._modelMatrix);
            this._glMatrix.mat4.identity(this._localMatrix);
            //先缩放
            this.scaleModelMatrix();
            //再旋转
            this.rotateModelMatrix();
            //最后平移
            this.translateModelMatrix();
            this._updateModelMatrixFlag = false;
        }
        //将本地矩阵拷贝过来
        this._glMatrix.mat4.copy(this._modelMatrix, this._localMatrix);
        this._glMatrix.mat4.multiply(this._modelMatrix, this._worldMatrix, this._modelMatrix);
    };
    //缩放模型矩阵
    Node.prototype.scaleModelMatrix = function () {
        this._glMatrix.mat4.scale(this._localMatrix, this._localMatrix, [this.scaleX, this.scaleY, this.scaleZ]);
    };
    //旋转模型矩阵
    Node.prototype.rotateModelMatrix = function () {
        this._glMatrix.mat4.rotateX(this._localMatrix, this._localMatrix, this.rotateX * (Math.PI / 180));
        this._glMatrix.mat4.rotateY(this._localMatrix, this._localMatrix, this.rotateY * (Math.PI / 180));
        this._glMatrix.mat4.rotateZ(this._localMatrix, this._localMatrix, this.rotateZ * (Math.PI / 180));
    };
    //平移模型矩阵
    Node.prototype.translateModelMatrix = function () {
        this._glMatrix.mat4.translate(this._localMatrix, this._localMatrix, [this.x, this.y, this.z]);
    };
    Object.defineProperty(Node.prototype, "modelMatrix", {
        /**
         * 模型世界矩阵
         */
        get: function () {
            return this._modelMatrix;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * 模型世界的逆矩阵
     */
    Node.prototype.getInversModelMatrix = function () {
        var invers = this._glMatrix.mat4.create();
        this._glMatrix.mat4.invert(invers, this._modelMatrix);
        return invers;
    };
    Node.prototype.setPosition = function (x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    };
    Node.prototype.setScale = function (x, y, z) {
        this.scaleX = x;
        this.scaleY = y;
        this.scaleZ = z;
    };
    /**
     *
     * @param x angle
     * @param y angle
     * @param z angle
     */
    Node.prototype.setRotation = function (x, y, z) {
        this.rotateX = x;
        this.rotateY = y;
        this.rotateZ = z;
    };
    Node.prototype.rotate = function (x, y, z) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (z === void 0) { z = 0; }
        this.rotateX = this._rotateX + x;
        this.rotateY = this._rotateY + y;
        this.rotateZ = this._rotateZ + z;
    };
    return Node;
}(Ref_1.default));
exports.Node = Node;
},{"../../../Ref":2,"../../Matrix":6}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = require("./Node");
/**
 * 场景的根节点
 */
var Scene = /** @class */ (function (_super) {
    __extends(Scene, _super);
    function Scene() {
        var _this = _super.call(this) || this;
        _this.name = "scene";
        return _this;
    }
    return Scene;
}(Node_1.Node));
exports.default = Scene;
},{"./Node":21}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rectangle_1 = require("../2d/Rectangle");
var Device_1 = require("../../Device");
var Label_1 = require("../2d/Label");
var RenderOfflineSprite_1 = require("../2d/RenderOfflineSprite");
var Scene_1 = require("./Scene");
var InstantiateSprite_1 = require("../2d/InstantiateSprite");
var Scene2D = /** @class */ (function (_super) {
    __extends(Scene2D, _super);
    function Scene2D() {
        return _super.call(this) || this;
    }
    Scene2D.prototype.init = function () {
        this._rectangle = new Rectangle_1.Rectangle();
        this._rectangle.setPosition(0.5, 0, 0);
        this._rectangle.spriteFrame = "res/tree.jpg";
        this.addChild(this._rectangle);
        // this._firstSprite = new FirstSprite();
        // this._firstSprite.setPosition(0,1,0);
        // this.addChild(this._firstSprite);
        this._instantiateSprite = new InstantiateSprite_1.default();
        this._instantiateSprite.setScale(0.5, 0.5, 0.5);
        this._instantiateSprite.setPosition(0.2, 0.2, 0);
        this.addChild(this._instantiateSprite);
        this._renderSprite = new RenderOfflineSprite_1.RenderOfflineSprite();
        this._renderSprite.setPosition(0.6, 0.8, 0);
        this._renderSprite.spriteFrame = {
            type: "RenderTexture",
            place: "color",
            width: Device_1.default.Instance.width,
            height: Device_1.default.Instance.height
        };
        this.addChild(this._renderSprite);
        this._label = new Label_1.Label();
        this._label.setPosition(0.0, 0.0, 0);
        this._label.spriteFrame = "res/8x8-font.png";
        this._label.content = "111";
        this.addChild(this._label);
    };
    return Scene2D;
}(Scene_1.default));
exports.default = Scene2D;
},{"../../Device":3,"../2d/InstantiateSprite":8,"../2d/Label":9,"../2d/Rectangle":10,"../2d/RenderOfflineSprite":11,"./Scene":22}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene_1 = require("./Scene");
var Ground_1 = require("../3d/Ground");
var Cube_1 = require("../3d/Cube");
var LightCube_1 = require("../3d/LightCube");
var SkyBox_1 = require("../3d/SkyBox");
var Node_1 = require("./Node");
var CustomTextureCube_1 = require("../3d/CustomTextureCube");
var CustomTextureData_1 = require("../data/CustomTextureData");
var Sphere_1 = require("../3d/Sphere");
var Spine_1 = require("./spine/Spine");
var MirrorCube_1 = require("../3d/MirrorCube");
var Line_1 = require("../3d/Line");
var Scene3D = /** @class */ (function (_super) {
    __extends(Scene3D, _super);
    function Scene3D() {
        return _super.call(this) || this;
    }
    Scene3D.prototype.init = function () {
        // let lightNode = new Node();
        // this.addChild(lightNode);
        // this._FLightPoint = new PointLightFCube();
        // this._FLightPoint.rotateX = 0;
        // this._FLightPoint.setPosition(-50, -75, -15);
        // lightNode.addChild(this._FLightPoint);
        // this._FLightPoint.Url = "res/models/char/F.json";
        // this._FLightSpot = new SpotLight();
        // this._FLightSpot.setPosition(0,-20,-100);
        // this.addChild(this._FLightSpot);
        // this._FLightSpot.Url = "res/models/char/F.json";
        // this._FLightThreeD = new ThreeDLight();
        // this._FLightThreeD.setPosition(0,20,-100);
        // this.addChild(this._FLightThreeD);
        // this._FLightThreeD.Url = "res/models/char/F.json";
        this._centerNode = new Node_1.Node();
        this._centerNode.setPosition(0, 1.1, 0);
        this.addChild(this._centerNode);
        this._linePositions = [];
        this._line = new Line_1.Line();
        this._linePositions.push(0, 0, 0, 1, 1, 1);
        this._line.updateLinePos(this._linePositions);
        this._centerNode.addChild(this._line);
        var spNode = new Node_1.Node();
        this._sphere = new Sphere_1.default();
        spNode.setPosition(0, 5, 0);
        spNode.addChild(this._sphere);
        this._centerNode.addChild(spNode);
        this._floorNode = new Ground_1.default();
        this._floorNode.spriteFrame = "res/ground.jpg";
        this.addChild(this._floorNode);
        this._spineNode = new Spine_1.default();
        this._spineNode.x = 0;
        this.addChild(this._spineNode);
        this._customTexture = new CustomTextureCube_1.default();
        this._customTexture.spriteFrame = CustomTextureData_1.default.getRandomData(3, 5, 15 /* RGB8 */);
        this._customTexture.setPosition(0, 3.1, 0);
        this._centerNode.addChild(this._customTexture);
        this._tableNode = new Cube_1.default();
        this._tableNode.spriteFrame = "res/wood.jpg";
        this._tableNode.setPosition(0, 1, 0);
        this._tableNode.setScale(2.0, 0.1, 2.0);
        this._centerNode.addChild(this._tableNode);
        this._cubeNode = new Cube_1.default();
        this._cubeNode.spriteFrame = "res/wicker.jpg";
        this._cubeNode.setPosition(0, 1.7, 0);
        this._cubeNode.setScale(0.5, 0.5, 0.5);
        this._centerNode.addChild(this._cubeNode);
        // 绘制 4 个腿
        for (var i = -1; i <= 1; i += 2) {
            for (var j = -1; j <= 1; j += 2) {
                var node = new Cube_1.default();
                node.setPosition(i * 19, -0.1, j * 19);
                node.setScale(0.1, 1.0, 0.1);
                node.spriteFrame = "res/wood.jpg";
                this._centerNode.addChild(node);
            }
        }
        this._lightCube = new LightCube_1.default();
        this._lightCube.spriteFrame = "res/wicker.jpg";
        this._lightCube.setPosition(-5, 2.7, 0);
        this._lightCube.setScale(0.5, 0.5, 0.5);
        this._centerNode.addChild(this._lightCube);
        this._skybox = new SkyBox_1.default();
        this._skybox.setDefaultUrl();
        this.addChild(this._skybox);
        var tempNode = new Node_1.Node();
        tempNode.setPosition(-10, -3.0, 0);
        this.addChild(tempNode);
        this._mirrorCube = new MirrorCube_1.default();
        this._mirrorCube.setDefaultUrl();
        tempNode.addChild(this._mirrorCube);
        this.setPosition(0, 0, 0);
        setTimeout(this.rotateCenterNode.bind(this), 20);
    };
    Scene3D.prototype.rotateCenterNode = function () {
        this._centerNode.rotate(0, 1, 0);
        this._mirrorCube.rotate(1, -1, -0.2);
        // this._FLightPoint.rotate(0,1,0);
        setTimeout(this.rotateCenterNode.bind(this), 20);
        // this._linePositions = [];
        this._linePositions.push(0, 0, 0, Math.random(), Math.random(), Math.random());
        // this._line.updateLinePos(this._linePositions);
    };
    Scene3D.prototype.readyRenderDraw = function () {
    };
    Scene3D.prototype.deleteGPUTexture = function () {
        var _this = this;
        setTimeout(function () {
            _this._floorNode.destroy();
            _this._cubeNode.destroy();
            _this._tableNode.destroy();
        }, 5000);
        setTimeout(function () {
            _this._floorNode.spriteFrame = "res/ground.jpg";
            _this._cubeNode.spriteFrame = "res/wicker.jpg";
            _this._tableNode.spriteFrame = "res/wood.jpg";
        }, 7000);
    };
    return Scene3D;
}(Scene_1.default));
exports.default = Scene3D;
},{"../3d/Cube":12,"../3d/CustomTextureCube":13,"../3d/Ground":14,"../3d/LightCube":15,"../3d/Line":16,"../3d/MirrorCube":17,"../3d/SkyBox":18,"../3d/Sphere":19,"../data/CustomTextureData":47,"./Node":21,"./Scene":22,"./spine/Spine":33}],25:[function(require,module,exports){
"use strict";
/**
 * 字节数组的使用
 * 整型：这个可以是一个字节Uint8Array,Int8Array,也可是双字节Uint16Array,Int16Array,
 * 也可是四字节Unit32Array,Int32Array
 * 浮点型：这个要四个字节，适用于float类型，例如Float32Array,当然也只有这一种类型
 * 双精度型：这个要八个字节，适用于double类型，例如Float64Array,当然也只有这一种类型
 *
 * 使用
 *  // From a length
var float32 = new Float32Array(2);
float32[0] = 42;
console.log(float32[0]); // 42
console.log(float32.length); // 2
console.log(float32.BYTES_PER_ELEMENT); // 4

// From an array
var arr = new Float32Array([21,31]);
console.log(arr[1]); // 31

// From another TypedArray
var x = new Float32Array([21, 31]);
var y = new Float32Array(x);
console.log(y[0]); // 21

// From an ArrayBuffer
// var buffer = new ArrayBuffer(16);
var buffer = new ArrayBuffer(16);
// buffer[0] = 10;
// buffer[1] = 20;
// buffer[2] = 30;
// buffer[3] = 40;
// buffer[4] = 50;
var z = new Float32Array(buffer, 0, 4);
console.log(z);
// z.forEach(function(value,index,arr){
//     console.log(value,index,arr);
// })

 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SY = void 0;
var Device_1 = require("../../Device");
var LoaderManager_1 = require("../../LoaderManager");
var RenderTexture_1 = require("./texture/RenderTexture");
var RenderData_1 = require("../data/RenderData");
var ShaderFactory_1 = require("../shader/ShaderFactory");
var Node_1 = require("./Node");
var Texture_1 = require("./texture/Texture");
var Texture2D_1 = require("./texture/Texture2D");
var TextureCube_1 = require("./texture/TextureCube");
var TextureCustom_1 = require("./texture/TextureCustom");
var BufferManager_1 = require("./buffer/BufferManager");
var enums_1 = require("../camera/enums");
var ShaderCenter_1 = require("../shader/ShaderCenter");
var ShaderUseVariantType_1 = require("../shader/ShaderUseVariantType");
/**
 * 显示节点
 * author:hzj
 */
var SY;
(function (SY) {
    var GLID_TYPE;
    (function (GLID_TYPE) {
        GLID_TYPE[GLID_TYPE["VERTEX"] = 1] = "VERTEX";
        GLID_TYPE[GLID_TYPE["INDEX"] = 2] = "INDEX";
        GLID_TYPE[GLID_TYPE["NORMAL"] = 3] = "NORMAL";
        GLID_TYPE[GLID_TYPE["UV"] = 4] = "UV";
        GLID_TYPE[GLID_TYPE["COLOR"] = 5] = "COLOR";
        GLID_TYPE[GLID_TYPE["MATRIX"] = 6] = "MATRIX";
        GLID_TYPE[GLID_TYPE["TEXTURE_2D"] = 7] = "TEXTURE_2D";
        GLID_TYPE[GLID_TYPE["TEXTURE_CUBE"] = 8] = "TEXTURE_CUBE"; //立方体纹理
    })(GLID_TYPE = SY.GLID_TYPE || (SY.GLID_TYPE = {}));
    var materialId = 0; //材质id
    /**
     * 这个渲染类可以用于基础研究
     * 数据生成 绑定
     */
    var SpriteBase = /** @class */ (function (_super) {
        __extends(SpriteBase, _super);
        function SpriteBase() {
            var _this = _super.call(this) || this;
            _this._cameraType = 0; //相机的类型(0表示透视1表示正交)
            _this._vertStr = "";
            _this._fragStr = "";
            _this._shaderUseVariantType = [];
            materialId++;
            _this._materialId = "materialId_" + materialId;
            _this.gl = Device_1.default.Instance.gl;
            _this._glPrimitiveType = 4 /* TRIANGLES */;
            _this._renderData = RenderData_1.RenderDataPool.get(RenderData_1.RenderDataType.Base);
            _this._color = [1.0, 1.0, 1.0, 1.0]; //默认颜色为白色
            _this.init();
            return _this;
        }
        SpriteBase.prototype.init = function () {
            this.onInit();
            this.setShader(this._vertStr, this._fragStr);
        };
        SpriteBase.prototype.onInit = function () {
        };
        SpriteBase.prototype.onShader = function () {
        };
        SpriteBase.prototype.setShader = function (vert, frag) {
            if (vert == "" || frag == "") {
                return;
            }
            this._shader = ShaderCenter_1.G_ShaderCenter.createShader(ShaderCenter_1.ShaderType.Custom, vert, frag);
            this.onShader();
        };
        //创建顶点缓冲
        /**
         *
         * @param vertexs
         * @param itemSize
         * @param preAllocateLen
         */
        SpriteBase.prototype.createVertexsBuffer = function (vertexs, itemSize, preAllocateLen) {
            if (preAllocateLen === void 0) { preAllocateLen = 0; }
            this._vertexsBuffer = BufferManager_1.G_BufferManager.createBuffer(GLID_TYPE.VERTEX, this._materialId, vertexs, itemSize, preAllocateLen);
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.Vertex);
            return this._vertexsBuffer;
        };
        //创建法线缓冲
        /**
         *
         * @param normals
         * @param itemSize
         * @param preAllocateLen
         */
        SpriteBase.prototype.createNormalsBuffer = function (normals, itemSize, preAllocateLen) {
            if (preAllocateLen === void 0) { preAllocateLen = 0; }
            this._normalsBuffer = BufferManager_1.G_BufferManager.createBuffer(GLID_TYPE.NORMAL, this._materialId, normals, itemSize, preAllocateLen);
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.Normal);
            return this._normalsBuffer;
        };
        //创建索引缓冲
        //索引缓冲的单位数据个数肯定为1
        /**
         *
         * @param indexs
         */
        SpriteBase.prototype.createIndexsBuffer = function (indexs, preAllocateLen) {
            if (preAllocateLen === void 0) { preAllocateLen = 0; }
            this._indexsBuffer = BufferManager_1.G_BufferManager.createBuffer(GLID_TYPE.INDEX, this._materialId, indexs, 1, preAllocateLen);
            return this._indexsBuffer;
        };
        //创建uv缓冲
        /**
         *
         * @param uvs
         * @param itemSize
         * @param preAllocateLen
         */
        SpriteBase.prototype.createUVsBuffer = function (uvs, itemSize, preAllocateLen) {
            if (preAllocateLen === void 0) { preAllocateLen = 0; }
            this._uvsBuffer = BufferManager_1.G_BufferManager.createBuffer(GLID_TYPE.UV, this._materialId, uvs, itemSize, preAllocateLen);
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.UVs);
            return this._uvsBuffer;
        };
        //创建节点自定义矩阵buffer
        /**
         *
         * @param matrix
         * @param itemSize
         * @param preAllocateLen
         */
        SpriteBase.prototype.createNodeCustomMatrixBuffer = function (matrix, itemSize, preAllocateLen) {
            if (preAllocateLen === void 0) { preAllocateLen = 0; }
            this._customMatrixBuffer = BufferManager_1.G_BufferManager.createBuffer(GLID_TYPE.MATRIX, this._materialId, matrix, itemSize, preAllocateLen);
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.NodeCustomMatrix);
            return this._customMatrixBuffer;
        };
        /**
         * @param color
         * @param itemSize
         * @param preAllocateLen
         */
        SpriteBase.prototype.createNodeVertColorBuffer = function (color, itemSize, preAllocateLen) {
            if (preAllocateLen === void 0) { preAllocateLen = 0; }
            this._nodeVertColorBuffer = BufferManager_1.G_BufferManager.createBuffer(GLID_TYPE.COLOR, this._materialId, color, itemSize, preAllocateLen);
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.NodeVertColor);
            return this._nodeVertColorBuffer;
        };
        Object.defineProperty(SpriteBase.prototype, "color", {
            /**
             * 设置节点颜色
             */
            set: function (color) {
                this._color[0] = color[0] != null ? color[0] : this._color[0];
                this._color[1] = color[1] != null ? color[1] : this._color[1];
                this._color[2] = color[2] != null ? color[2] : this._color[2];
                this._color[3] = color[3] != null ? color[3] : this._color[3];
                this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.Color);
            },
            enumerable: false,
            configurable: true
        });
        //创建一个纹理buffer
        SpriteBase.prototype.createTexture2DBuffer = function (url) {
            this._texture = new Texture2D_1.Texture2D();
            this._texture.url = url;
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD);
            return this._texture;
        };
        SpriteBase.prototype.createTextureCubeBuffer = function (arr) {
            this._texture = new TextureCube_1.default();
            this._texture.url = arr;
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD);
            return this._texture;
        };
        SpriteBase.prototype.createCustomTextureBuffer = function (data) {
            this._texture = new TextureCustom_1.default();
            this._texture.url = data;
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD);
            return this._texture;
        };
        /**
         * 创建一个渲染纹理
         * @param data {type,place,width,height}
         */
        SpriteBase.prototype.createRenderTextureBuffer = function (data) {
            this._texture = new RenderTexture_1.RenderTexture();
            this._texture.attach(data.place, data.width, data.height);
            this._shaderUseVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD);
            return this._texture;
        };
        Object.defineProperty(SpriteBase.prototype, "spriteFrame", {
            set: function (url) {
                //普通图片
                if (typeof url == "string") {
                    this.createTexture2DBuffer(url);
                }
                //天空盒
                else if (url instanceof Array && url.length == 6) {
                    this.createTextureCubeBuffer(url);
                }
                //自定义纹理
                else if (url instanceof Texture_1.TextureOpts) {
                    console.log("自定义纹理------", url);
                    this.createCustomTextureBuffer(url);
                }
                else if (url instanceof Object && url["type"] == "RenderTexture") {
                    this.createRenderTextureBuffer(url);
                }
                this.onSetTextureUrl();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 设置完纹理之后调用
         */
        SpriteBase.prototype.onSetTextureUrl = function () {
        };
        Object.defineProperty(SpriteBase.prototype, "Url", {
            set: function (url) {
                this._url = url;
                var datas = LoaderManager_1.default.instance.getRes(url);
                this.onLoadFinish(datas);
            },
            enumerable: false,
            configurable: true
        });
        SpriteBase.prototype.onLoadFinish = function (datas) {
        };
        SpriteBase.prototype.getGLID = function (type) {
            switch (type) {
                case GLID_TYPE.TEXTURE_2D: return this._texture ? this._texture._glID : -1;
                case GLID_TYPE.TEXTURE_CUBE: return this._texture ? this._texture._glID : -1;
                default:
                    var buffer = this.getBuffer(type);
                    return buffer ? buffer.glID : -1;
            }
        };
        SpriteBase.prototype.getBuffer = function (type) {
            switch (type) {
                case GLID_TYPE.INDEX: return this._indexsBuffer;
                case GLID_TYPE.UV: return this._uvsBuffer;
                case GLID_TYPE.NORMAL: return this._normalsBuffer;
                case GLID_TYPE.VERTEX: return this._vertexsBuffer;
                case GLID_TYPE.COLOR: return this._nodeVertColorBuffer;
                case GLID_TYPE.MATRIX: return this._customMatrixBuffer;
                default: return null; //未知
            }
        };
        SpriteBase.prototype.getBufferItemSize = function (type) {
            var buffer = this.getBuffer(type);
            return buffer ? buffer.itemSize : -1;
        };
        /**
         *
         * @param texture 纹理的GLID
         */
        SpriteBase.prototype.collectRenderData = function (time) {
            var _this = this;
            if (!this._shader) {
                return;
            }
            if (this._texture && this._texture.loaded == false) {
                return;
            }
            this._renderData._node = this;
            this._shaderUseVariantType.forEach(function (value, index) {
                _this._shader.pushShaderVariant(value);
            });
            this._renderData._cameraType = this._cameraType; //默认情况下是透视投影
            this._renderData._shader = this._shader;
            //顶点组
            this._renderData._vertGLID = this.getGLID(SY.GLID_TYPE.VERTEX);
            this._renderData._vertItemSize = this.getBufferItemSize(SY.GLID_TYPE.VERTEX);
            this._renderData._vertItemNums = this.getBuffer(SY.GLID_TYPE.VERTEX).itemNums;
            //索引组
            this._renderData._indexGLID = this.getGLID(SY.GLID_TYPE.INDEX);
            if (this._renderData._indexGLID != -1) {
                this._renderData._indexItemSize = this.getBuffer(SY.GLID_TYPE.INDEX).itemSize;
                this._renderData._indexItemNums = this.getBuffer(SY.GLID_TYPE.INDEX).itemNums;
            }
            //uv组
            this._renderData._uvGLID = this.getGLID(SY.GLID_TYPE.UV);
            this._renderData._uvItemSize = this.getBufferItemSize(SY.GLID_TYPE.UV);
            //法线组
            this._renderData._normalGLID = this.getGLID(SY.GLID_TYPE.NORMAL);
            this._renderData._normalItemSize = this.getBufferItemSize(SY.GLID_TYPE.NORMAL);
            //节点自定义顶点颜色组
            this._renderData._nodeVertColorGLID = this.getGLID(SY.GLID_TYPE.COLOR);
            if (this._renderData._nodeVertColorGLID != -1) {
                this._renderData._nodeVertColorItemSize = this.getBuffer(SY.GLID_TYPE.COLOR).itemSize;
                this._renderData._nodeVertColorItemNums = this.getBuffer(SY.GLID_TYPE.COLOR).itemNums;
            }
            this._renderData._nodeColor = this._color;
            //节点自定义矩阵组
            this._renderData._nodeCustomMatrixGLID = this.getGLID(SY.GLID_TYPE.MATRIX);
            if (this._renderData._nodeCustomMatrixGLID != -1) {
                this._renderData._nodeCustomMatrixItemSize = this.getBuffer(SY.GLID_TYPE.MATRIX).itemSize;
                this._renderData._nodeCustomMatrixItemNums = this.getBuffer(SY.GLID_TYPE.MATRIX).itemNums;
            }
            this._renderData._modelMatrix = this.modelMatrix;
            this._renderData._time = time;
            if (this._texture && this._texture._glID) {
                if (this._texture.isTexture2D)
                    this._renderData.push2DTexture(this.getGLID(SY.GLID_TYPE.TEXTURE_2D));
                else if (this._texture.isTextureCube)
                    this._renderData.pushCubeTexture(this.getGLID(SY.GLID_TYPE.TEXTURE_CUBE));
            }
            this._renderData._glPrimitiveType = this._glPrimitiveType;
            Device_1.default.Instance.collectData(this._renderData);
        };
        Object.defineProperty(SpriteBase.prototype, "texture", {
            get: function () {
                return this._texture;
            },
            enumerable: false,
            configurable: true
        });
        SpriteBase.prototype.destroy = function () {
            this._texture.destroy();
        };
        return SpriteBase;
    }(Node_1.Node));
    SY.SpriteBase = SpriteBase;
    var Sprite = /** @class */ (function (_super) {
        __extends(Sprite, _super);
        function Sprite() {
            var _this = _super.call(this) || this;
            _this._cameraType = 0; //相机的类型(0表示透视1表示正交)
            _this.init();
            return _this;
        }
        Sprite.prototype.init = function () {
            this._glPrimitiveType = 4 /* TRIANGLES */;
            this._renderData = RenderData_1.RenderDataPool.get(RenderData_1.RenderDataType.Normal);
            this.onInit();
        };
        Sprite.prototype.onInit = function () {
        };
        Object.defineProperty(Sprite.prototype, "Url", {
            set: function (url) {
                this._url = url;
                var datas = LoaderManager_1.default.instance.getRes(url);
                this.onLoadFinish(datas);
            },
            enumerable: false,
            configurable: true
        });
        Sprite.prototype.onLoadFinish = function (data) {
        };
        Sprite.prototype.collectRenderData = function (time) {
            this.updateRenderData();
            Device_1.default.Instance.collectData(this._renderData);
        };
        //更新渲染数据
        Sprite.prototype.updateRenderData = function () {
            this._renderData._shaderData = this._shaderData;
            this._renderData._uniformData = [];
            this._renderData._uniformData.push(this._uniformData);
            this._renderData._projKey = "u_projection"; //投影矩阵的key
            this._renderData._viewKey = "u_view"; //视口矩阵的key
            this._renderData._worldKey = "u_world"; //世界坐标系的key
            this._renderData._attrbufferData = this._attrData; //顶点着色器的顶点相关属性
            this._renderData._node = this; //渲染的节点
            this._renderData._glPrimitiveType = 4 /* TRIANGLES */; //三角形
        };
        //设置shader
        Sprite.prototype.setShader = function (vert, frag) {
            this._shaderData = ShaderFactory_1.G_ShaderFactory.createProgramInfo(vert, frag);
        };
        //更新unifoms变量
        Sprite.prototype.updateUniformsData = function (cameraData, lightData) {
        };
        /**
         * 此接口用于测试使用 日后删除
         */
        Sprite.prototype.testDraw = function () {
            ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(this._shaderData.attrSetters, this._attrData);
            ShaderFactory_1.G_ShaderFactory.setUniforms(this._shaderData.uniSetters, this._uniformData);
            ShaderFactory_1.G_ShaderFactory.drawBufferInfo(this._attrData, 4 /* TRIANGLES */);
        };
        return Sprite;
    }(Node_1.Node));
    SY.Sprite = Sprite;
    //动态
    var SpriteBaseLine = /** @class */ (function (_super) {
        __extends(SpriteBaseLine, _super);
        function SpriteBaseLine() {
            var _this = _super.call(this) || this;
            _this._glPrimitiveType = 1 /* LINES */;
            return _this;
        }
        SpriteBaseLine.prototype.updateLinePos = function (posArr) {
            if (!posArr || posArr.length < 3)
                return;
            if (!this._linePositions) {
                this._linePositions = posArr;
                this.createVertexsBuffer(this._linePositions, 3, 0);
            }
            else {
                this._linePositions = posArr;
                this.getBuffer(SY.GLID_TYPE.VERTEX).updateSubData(new Float32Array(this._linePositions));
            }
        };
        SpriteBaseLine.prototype.collectRenderData = function (time) {
            if (!this._linePositions || this._linePositions.length == 0)
                return;
            _super.prototype.collectRenderData.call(this, time);
        };
        return SpriteBaseLine;
    }(SY.SpriteBase));
    SY.SpriteBaseLine = SpriteBaseLine;
    //2d显示节点
    var Sprite2D = /** @class */ (function (_super) {
        __extends(Sprite2D, _super);
        function Sprite2D() {
            var _this = _super.call(this) || this;
            _this._lt = []; //左上
            _this._lb = []; //左下
            _this._rt = []; //右上
            _this._rb = []; //右下
            _this._cameraType = enums_1.default.PROJ_ORTHO;
            _this._glPrimitiveType = _this.gl.TRIANGLE_STRIP;
            return _this;
        }
        Sprite2D.prototype.updateUV = function () {
            //uv 数据
            var floorVertexTextureCoordinates = [
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0,
            ];
            this.createUVsBuffer(floorVertexTextureCoordinates, 2);
            // 索引数据
            var floorVertexIndices = [0, 1, 2, 3, 2, 0];
            this.createIndexsBuffer(floorVertexIndices);
        };
        /**
        *
        * @param width
        * @param height
        */
        Sprite2D.prototype.setContentSize = function (width, height) {
            this.width = width;
            this.height = height;
            var clipW = this.width / Device_1.default.Instance.width;
            var clipH = this.height / Device_1.default.Instance.height;
            var z = -1;
            //[-1,1] = >[0,1]
            var w = 2 * clipW;
            var h = 2 * clipH;
            this._lb = [];
            this._lb.push(-this.anchorX * w);
            this._lb.push(-this.anchorY * h);
            this._lb.push(z); //左下
            this._rb = [];
            this._rb.push(w - this.anchorX * w); //右下
            this._rb.push(-this.anchorY * h);
            this._rb.push(z);
            this._rt = [];
            this._rt.push(w - this.anchorX * w); //右上
            this._rt.push(h - this.anchorY * h);
            this._rt.push(z);
            this._lt = [];
            this._lt.push(-this.anchorX * w);
            this._lt.push(h - this.anchorY * h); //左上
            this._lt.push(z);
            var floorVertexPosition = [].concat(this._lb, this._rb, this._rt, this._lt);
            this.createVertexsBuffer(floorVertexPosition, 3);
            this.updateUV();
        };
        return Sprite2D;
    }(SY.SpriteBase));
    SY.Sprite2D = Sprite2D;
    /**
     * 实例化绘制
     */
    var SpriteInstance = /** @class */ (function (_super) {
        __extends(SpriteInstance, _super);
        function SpriteInstance() {
            var _this = _super.call(this) || this;
            _this._renderData._isDrawInstanced = true;
            return _this;
        }
        SpriteInstance.prototype.setData = function (data) {
            var nums = data.instanceNums; //多少个实例
            var vertNums = data.instanceVertNums; //单个实例含有多少个顶点
            var positions = data.positions; //顶点位置
            var uvs = data.uvs; //uv数据
        };
        return SpriteInstance;
    }(SY.Sprite2D));
    SY.SpriteInstance = SpriteInstance;
})(SY = exports.SY || (exports.SY = {}));
},{"../../Device":3,"../../LoaderManager":5,"../camera/enums":44,"../data/RenderData":49,"../shader/ShaderCenter":57,"../shader/ShaderFactory":59,"../shader/ShaderUseVariantType":60,"./Node":21,"./buffer/BufferManager":27,"./texture/RenderTexture":34,"./texture/Texture":35,"./texture/Texture2D":36,"./texture/TextureCube":37,"./texture/TextureCustom":38}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_Stage = void 0;
var Node_1 = require("./Node");
/**
 * 舞台
 */
var Stage = /** @class */ (function (_super) {
    __extends(Stage, _super);
    function Stage() {
        var _this = _super.call(this) || this;
        _this.name = "stage";
        return _this;
    }
    return Stage;
}(Node_1.Node));
exports.G_Stage = new Stage();
},{"./Node":21}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_BufferManager = exports.NodeVertColorBuffer = exports.NodeCustomMatrixBuffer = exports.NormalBuffer = exports.UVsBuffer = exports.IndexsBuffer = exports.VertexsBuffer = exports.glBaseBuffer = void 0;
var Sprite_1 = require("../Sprite");
/**
 * 该类主要用来生成顶点数据的buffer,顶点数据的种类如下：
 * 位置：pos 在shader中的变量类型是vec3 所以一个单元的数据个数是3，每个数据由若干字节存放，一般是float类型，那就是4个字节
 * uv:  vec2
 * 法线：vec3
 * 切线：vec3
 * 颜色:vec4,一个单元数据有4个数据，因为颜色一般是rgba 4个通道
 * 矩阵：matrix 在shader中的变量类型是mat4,但这种类型其实是一个结构体，其实它就是4个连续存放的vec4类型的变量，矩阵首地址就是第一个vec4变量的地址
 * 后边的地址，就是依次+1，注意我这里说的是在shader中的地址，所以对于矩阵数据，它的一个单元数据就是一个vec4类型的变量，他们它就有4个数据组成，每个数据的类型也一般都是
 * float类型，即4个字节
 * 索引：为了节省字节而产生的，他有单独的索引缓冲存放
 *
 */
/**
 * 顶点buffer:若干字节组成一个数据，若干数据组成一个单元，若干单元组成一个图形
 * 一般情况：存储顶点buffer的数组都是float类型，所以一个顶点的坐标便是4个字节，一个顶点有三个坐标（x,y,z）,所以就有三个数据组成一个顶点，一个顶点就代表一个单元
 * 所以我们将顶点数组发给GPU的时候，GPU需要知道一个顶点或者说一个顶点单元，有多少数据表示
 * 当我们绑定好当前的顶点缓冲，GPU就拿到了当前要操作的顶点缓冲，当GPU要绘制的时候，我们还需要告诉它从这个数组哪一个顶点单元开始绘制，一共要绘制多少个顶点单元，以及这些顶点
 * 单元是如何分布的，比如点分布，线分布，三角形分布
 *
 */
/**
 * 缓冲区中的数据就是一个二进制流，一般我们会按照字节处理，八个二进制为一个字节，又称字节流
 * 我们用字节流来表示数据，一个数据可以用若干个字节来表示
 * 一般用下面这几个数组来组织字节流
 * Int8Array：每个数据占1个字节
 * Uint8Array：每个数据占1个字节
 * Int16Array：每个数据占2个字节
 * Uint16Array：每个数据占2个字节
 * Float32Array：每个数据占4个字节
 *
 * 在使用bindBuffer()
gl.STREAM_DRAW：代码输入，用于绘制。设置一次，并且很少使用。
gl.STREAM_READ：接受OpenGL输出，用于绘制。设置一次，并且很少使用。
gl.STREAM_COPY：接受OpenGL输出，用于绘制或者用于拷贝至图片。设置一次，很少使用。
gl.STATIC_DRAW：代码输入，用于绘制或者拷贝至图片。设置一次，经常使用。
gl.STATIC_READ：接受OpenGL输出，用于绘制。设置一次，代码经常查询。
gl.STATIC_COPY：接受OpenGL输出，用于绘制或者用于拷贝至图片。设置一次，经常使用。
gl.DYNAMIC_DRAW：代码经常更新其内容，用于绘制或者用于拷贝至图片，使用频率高。
gl.DYNAMIC_READ：OpenGL输出经常更新其内容，代码经常查询。
gl.DYNAMIC_COPY：OpenGL输出经常更新其内容，用于绘制或者用于拷贝至图片，使用频率高。
 */
var glBaseBuffer = /** @class */ (function () {
    /**
     * 构造一个buffer对象
     * @param gl
     * @param data 顶点数据（pos,uv,normal,切线，节点颜色，节点矩阵）
     * @param itemSize 一个单元数据有多少个数据组成
     * @param arrbufferType 顶点缓冲的类型
     * @param itemBytes 存储每一个数据的字节数
     * @param preAllocateLen  预先分配的长度 一般默认为0 否则第一次只是在显存中分配内存 后边才会更新和赋值到这块内存区域
     */
    function glBaseBuffer(gl, data, itemSize, arrbufferType, itemBytes, preAllocateLen) {
        this._itemBytes = 2; //每个数据的存储字节数
        this._itemSize = 0; //在缓冲区中，一个单元有几个数据组成
        this._itemNums = 0; //在缓冲区中，一共含有多少个单元
        this._glID = gl.createBuffer();
        this._itemSize = itemSize;
        this.gl = gl;
        this._arrayBufferType = arrbufferType;
        this._itemBytes = itemBytes;
        // //默认使用以下数据
        this._usage = gl.STATIC_DRAW;
        this._curMapTotalBytes = 0;
        this._hasAllocateByteLen = 0;
        if (preAllocateLen == 0) {
            //走正常的分配逻辑
            this.uploadData2GPU(data);
        }
        else if (!data || data.length == 0) {
            //表示想要预先申请一段GPU内存来存当前的buffer 日后再更新这个buffer
            this._preAllocateLen = preAllocateLen;
            this.preAllocateBuffer();
        }
        else {
            console.log("无法创建，您传入的参数不合法！！！！！！");
        }
    }
    glBaseBuffer.prototype.useDynamicUsage = function () {
        this._usage = this.gl.DYNAMIC_DRAW;
    };
    Object.defineProperty(glBaseBuffer.prototype, "itemBytes", {
        //一个数据有几个字节组成
        get: function () {
            return this._itemBytes;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glBaseBuffer.prototype, "itemSize", {
        //一个单元有多少个数据
        get: function () {
            return this._itemSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glBaseBuffer.prototype, "itemNums", {
        //一共有多少个单元
        get: function () {
            return this._itemNums;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(glBaseBuffer.prototype, "glID", {
        get: function () {
            return this._glID;
        },
        enumerable: false,
        configurable: true
    });
    glBaseBuffer.prototype.uploadData2GPU = function (data) {
        this._curMapTotalBytes = data.length * this._itemBytes;
        this._itemNums = data.length / this._itemSize;
        this._sourceData = data;
        this.bufferSet();
        var Arr = this.getBytesArray();
        this.gl.bindBuffer(this._arrayBufferType, this._glID),
            this.gl.bufferData(this._arrayBufferType, new Arr(this._sourceData), this._usage);
    };
    glBaseBuffer.prototype.updateSubData = function (data) {
        this.gl.bindBuffer(this._arrayBufferType, this._glID);
        var curByteLen = data.byteLength;
        if (this._hasAllocateByteLen < curByteLen) {
            //说明当前显存中对于这块数据的存储内存不够用了，需要加
            this.gl.bufferData(this._arrayBufferType, curByteLen, this._usage);
        }
        this.gl.bufferSubData(this._arrayBufferType, 0, data);
        this._hasAllocateByteLen = curByteLen;
        this._itemNums = data.length / this._itemSize;
        this._curMapTotalBytes = data.length * this._itemBytes;
    };
    /**
     * 在GPU显存中预分配一块内存为该buffer
     */
    glBaseBuffer.prototype.preAllocateBuffer = function () {
        this._hasAllocateByteLen = this._preAllocateLen;
        this.gl.bindBuffer(this._arrayBufferType, this._glID);
        this.gl.bufferData(this._arrayBufferType, this._preAllocateLen, this._usage);
    };
    /**
     * 获取字节数组
     */
    glBaseBuffer.prototype.getBytesArray = function () {
        switch (this._itemBytes) {
            case 1: return Uint8Array;
            case 2: return Uint16Array;
            case 4: return Float32Array;
            case 8: return Float64Array;
        }
    };
    /**
   * @method destroy
   */
    glBaseBuffer.prototype.destroy = function () {
        if (this._glID === -1) {
            console.error('The buffer already destroyed');
            return;
        }
        this.gl.deleteBuffer(this._glID);
        this._glID = -1;
    };
    return glBaseBuffer;
}());
exports.glBaseBuffer = glBaseBuffer;
//顶点buffer
var VertexsBuffer = /** @class */ (function (_super) {
    __extends(VertexsBuffer, _super);
    function VertexsBuffer(gl, vertexs, itemSize, preAllocateLen) {
        return _super.call(this, gl, vertexs, itemSize, gl.ARRAY_BUFFER, 4, preAllocateLen) || this;
    }
    VertexsBuffer.prototype.bufferSet = function () {
        this.useDynamicUsage();
    };
    return VertexsBuffer;
}(glBaseBuffer));
exports.VertexsBuffer = VertexsBuffer;
//索引buffer
var IndexsBuffer = /** @class */ (function (_super) {
    __extends(IndexsBuffer, _super);
    function IndexsBuffer(gl, indexs, itemSize, preAllocateLen) {
        return _super.call(this, gl, indexs, itemSize, gl.ELEMENT_ARRAY_BUFFER, 2, preAllocateLen) || this;
    }
    IndexsBuffer.prototype.bufferSet = function () {
        this.useDynamicUsage();
    };
    return IndexsBuffer;
}(glBaseBuffer));
exports.IndexsBuffer = IndexsBuffer;
//uvbuffer
var UVsBuffer = /** @class */ (function (_super) {
    __extends(UVsBuffer, _super);
    function UVsBuffer(gl, uvs, itemSize, preAllocateLen) {
        return _super.call(this, gl, uvs, itemSize, gl.ARRAY_BUFFER, 4, preAllocateLen) || this;
    }
    UVsBuffer.prototype.bufferSet = function () {
        this.useDynamicUsage();
    };
    return UVsBuffer;
}(glBaseBuffer));
exports.UVsBuffer = UVsBuffer;
//法线buffer
var NormalBuffer = /** @class */ (function (_super) {
    __extends(NormalBuffer, _super);
    function NormalBuffer(gl, normals, itemSize, preAllocateLen) {
        return _super.call(this, gl, normals, itemSize, gl.ARRAY_BUFFER, 4, preAllocateLen) || this;
    }
    NormalBuffer.prototype.bufferSet = function () {
        this.useDynamicUsage();
    };
    return NormalBuffer;
}(glBaseBuffer));
exports.NormalBuffer = NormalBuffer;
//节点矩阵buffer
var NodeCustomMatrixBuffer = /** @class */ (function (_super) {
    __extends(NodeCustomMatrixBuffer, _super);
    function NodeCustomMatrixBuffer(gl, matrix, itemSize, preAllocateLen) {
        return _super.call(this, gl, matrix, itemSize, gl.ARRAY_BUFFER, 4, preAllocateLen) || this;
    }
    NodeCustomMatrixBuffer.prototype.bufferSet = function () {
        this.useDynamicUsage();
    };
    return NodeCustomMatrixBuffer;
}(glBaseBuffer));
exports.NodeCustomMatrixBuffer = NodeCustomMatrixBuffer;
//节点顶点颜色buffer
var NodeVertColorBuffer = /** @class */ (function (_super) {
    __extends(NodeVertColorBuffer, _super);
    function NodeVertColorBuffer(gl, color, itemSize, preAllocateLen) {
        return _super.call(this, gl, color, itemSize, gl.ARRAY_BUFFER, 4, preAllocateLen) || this;
    }
    NodeVertColorBuffer.prototype.bufferSet = function () {
        // this.useDynamicUsage();
    };
    return NodeVertColorBuffer;
}(glBaseBuffer));
exports.NodeVertColorBuffer = NodeVertColorBuffer;
/**
 * buffer 管理员
 */
var BufferManager = /** @class */ (function () {
    function BufferManager() {
        this._mapVertexBuffer = new Map();
        this._mapIndexBuffer = new Map();
        this._mapNormalBuffer = new Map();
        this._mapUVBuffer = new Map();
        this._mapNodeVertColorBuffer = new Map();
        this._mapNodeMatrixBuffer = new Map();
    }
    BufferManager.prototype.init = function (gl) {
        this._gl = gl;
    };
    /**
     *
     * @param type buffer类型
     * @param materialId 材质的id
     * @param data 顶点源数据
     * @param itemSize 一个单元的数据个数
     * @param preAllocateLen
     */
    BufferManager.prototype.createBuffer = function (type, materialId, data, itemSize, preAllocateLen) {
        if (materialId === void 0) { materialId = "default"; }
        switch (type) {
            case Sprite_1.SY.GLID_TYPE.VERTEX:
                return this.createVertex(materialId, data, itemSize, preAllocateLen);
            case Sprite_1.SY.GLID_TYPE.INDEX:
                return this.createIndex(materialId, data, itemSize, preAllocateLen);
            case Sprite_1.SY.GLID_TYPE.NORMAL:
                return this.createNormal(materialId, data, itemSize, preAllocateLen);
            case Sprite_1.SY.GLID_TYPE.UV:
                return this.createUV(materialId, data, itemSize, preAllocateLen);
            case Sprite_1.SY.GLID_TYPE.COLOR:
                return this.createVertColor(materialId, data, itemSize, preAllocateLen);
            case Sprite_1.SY.GLID_TYPE.MATRIX:
                return this.createMatrix(materialId, data, itemSize, preAllocateLen);
            default: break;
        }
    };
    BufferManager.prototype.getBuffer = function (type, materialId) {
        switch (type) {
            case Sprite_1.SY.GLID_TYPE.VERTEX:
                return this._mapVertexBuffer.get(materialId);
            case Sprite_1.SY.GLID_TYPE.INDEX:
                return this._mapIndexBuffer.get(materialId);
            case Sprite_1.SY.GLID_TYPE.NORMAL:
                return this._mapNormalBuffer.get(materialId);
            case Sprite_1.SY.GLID_TYPE.UV:
                return this._mapUVBuffer.get(materialId);
            case Sprite_1.SY.GLID_TYPE.COLOR:
                return this._mapNodeVertColorBuffer.get(materialId);
            case Sprite_1.SY.GLID_TYPE.MATRIX:
                return this._mapNodeMatrixBuffer.get(materialId);
            default:
                console.log("未知类型，请指明类型");
                break;
        }
    };
    BufferManager.prototype.createVertex = function (id, data, itemSize, preAllocateLen) {
        var buffer = new VertexsBuffer(this._gl, data, itemSize, preAllocateLen);
        this._mapVertexBuffer.set(id, buffer);
        return buffer;
    };
    BufferManager.prototype.createIndex = function (id, data, itemSize, preAllocateLen) {
        var buffer = new IndexsBuffer(this._gl, data, itemSize, preAllocateLen);
        this._mapIndexBuffer.set(id, buffer);
        return buffer;
    };
    BufferManager.prototype.createNormal = function (id, data, itemSize, preAllocateLen) {
        var buffer = new NormalBuffer(this._gl, data, itemSize, preAllocateLen);
        this._mapNormalBuffer.set(id, buffer);
        return buffer;
    };
    BufferManager.prototype.createUV = function (id, data, itemSize, preAllocateLen) {
        var buffer = new UVsBuffer(this._gl, data, itemSize, preAllocateLen);
        this._mapUVBuffer.set(id, buffer);
        return buffer;
    };
    BufferManager.prototype.createVertColor = function (id, data, itemSize, preAllocateLen) {
        var buffer = new NodeVertColorBuffer(this._gl, data, itemSize, preAllocateLen);
        this._mapNodeVertColorBuffer.set(id, buffer);
        return buffer;
    };
    BufferManager.prototype.createMatrix = function (id, data, itemSize, preAllocateLen) {
        var buffer = new NodeCustomMatrixBuffer(this._gl, data, itemSize, preAllocateLen);
        this._mapNodeMatrixBuffer.set(id, buffer);
        return buffer;
    };
    return BufferManager;
}());
exports.G_BufferManager = new BufferManager();
},{"../Sprite":25}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Skeleton_MeshRenderer = void 0;
var Device_1 = require("../../../Device");
var RenderData_1 = require("../../data/RenderData");
var ShaderFactory_1 = require("../../shader/ShaderFactory");
var meshVS = 'attribute vec4 a_POSITION;' +
    'attribute vec3 a_NORMAL;' +
    'uniform mat4 u_projection;' +
    'uniform mat4 u_view;' +
    'uniform mat4 u_world;' +
    'varying vec3 v_normal;' +
    'void main() {' +
    'gl_Position = u_projection * u_view * u_world * a_POSITION;' +
    'v_normal = mat3(u_world) * a_NORMAL;' +
    '}';
var fs = 'precision mediump float;' + //精度
    'varying vec3 v_normal;' + //法线
    'uniform vec4 u_diffuse;' + //漫反射
    'uniform sampler2D u_texCoord;' + //骨骼矩阵纹理
    'uniform vec3 u_lightDirection;' + //光的方向
    'varying vec2 a_uv;' +
    'void main () {' +
    'vec3 normal = normalize(v_normal);' +
    'float light = dot(u_lightDirection,normal) * .5 + .5;' +
    'vec4 color = texture2D(u_texCoord,normalize(a_uv)); ' +
    'gl_FragColor = color+vec4(u_diffuse.rgb * light, u_diffuse.a);' +
    '}';
//网格渲染
var Skeleton_MeshRenderer = /** @class */ (function () {
    function Skeleton_MeshRenderer(mesh, gl) {
        this.mesh = mesh;
        this.gl = gl;
        this.meshProgramInfo = ShaderFactory_1.G_ShaderFactory.createProgramInfo(meshVS, fs);
    }
    Skeleton_MeshRenderer.prototype.render = function (node, ext, sharedUniforms) {
        for (var _i = 0, _a = this.mesh.primitives; _i < _a.length; _i++) {
            var primitive = _a[_i];
            var renderData = RenderData_1.RenderDataPool.get(RenderData_1.RenderDataType.Spine);
            renderData._extraViewLeftMatrix = ext;
            renderData._projKey = "u_projection";
            renderData._viewKey = "u_view";
            renderData._shaderData = this.meshProgramInfo;
            renderData._attrbufferData = primitive.bufferInfo;
            renderData._uniformData.push({ u_world: node.worldMatrix });
            renderData._uniformData.push(primitive.material.uniforms);
            renderData._uniformData.push(sharedUniforms);
            Device_1.default.Instance.collectData(renderData);
        }
    };
    return Skeleton_MeshRenderer;
}());
exports.Skeleton_MeshRenderer = Skeleton_MeshRenderer;
},{"../../../Device":3,"../../data/RenderData":49,"../../shader/ShaderFactory":59}],29:[function(require,module,exports){
"use strict";
//transforms
Object.defineProperty(exports, "__esModule", { value: true });
exports.Skeleton_Node = exports.Skeleton_Transform = void 0;
var Matrix_1 = require("../../../Matrix");
//位置 旋转 缩放
var Skeleton_Transform = /** @class */ (function () {
    function Skeleton_Transform(position, rotation, scale) {
        if (position === void 0) { position = [0, 0, 0]; }
        if (rotation === void 0) { rotation = [0, 0, 0, 1]; }
        if (scale === void 0) { scale = [1, 1, 1]; }
        this.position = position;
        this.rotation = rotation;
        this.scale = scale;
    }
    Skeleton_Transform.prototype.getMatrix = function (dst) {
        dst = dst || new Float32Array(16);
        Matrix_1.glMatrix.mat4.compose(dst, this.position, this.rotation, this.scale);
        return dst;
    };
    return Skeleton_Transform;
}());
exports.Skeleton_Transform = Skeleton_Transform;
//节点
var Skeleton_Node = /** @class */ (function () {
    function Skeleton_Node(transform, name) {
        this.mesh_Drawables = [];
        this.skin_Drawables = [];
        this.name = name;
        this.transform = transform;
        this.parent = null;
        this.children = [];
        // this.localMatrix = m4.identity();
        // this.worldMatrix = m4.identity();
        this.localMatrix = Matrix_1.glMatrix.mat4.create();
        this.worldMatrix = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.identity(this.localMatrix);
        Matrix_1.glMatrix.mat4.identity(this.worldMatrix);
        this.mesh_Drawables = [];
        this.skin_Drawables = [];
    }
    Skeleton_Node.prototype.setParent = function (parent) {
        if (this.parent) {
            this.parent._removeChild(this);
            this.parent = null;
        }
        if (parent) {
            parent._addChild(this);
            this.parent = parent;
        }
    };
    Skeleton_Node.prototype.updateWorldMatrix = function (parentWorldMatrix) {
        var transform = this.transform;
        if (transform) {
            transform.getMatrix(this.localMatrix);
        }
        if (parentWorldMatrix) {
            // a matrix was passed in so do the math
            Matrix_1.glMatrix.mat4.multiply(this.worldMatrix, parentWorldMatrix, this.localMatrix);
        }
        else {
            // no matrix was passed in so just copy local to world
            Matrix_1.glMatrix.mat4.copy(this.localMatrix, this.worldMatrix);
        }
        // now process all the children
        var worldMatrix = this.worldMatrix;
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            child.updateWorldMatrix(worldMatrix);
        }
    };
    Skeleton_Node.prototype.traverse = function (fn) {
        fn(this);
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            child.traverse(fn);
        }
    };
    Skeleton_Node.prototype._addChild = function (child) {
        this.children.push(child);
    };
    Skeleton_Node.prototype._removeChild = function (child) {
        var ndx = this.children.indexOf(child);
        this.children.splice(ndx, 1);
    };
    return Skeleton_Node;
}());
exports.Skeleton_Node = Skeleton_Node;
},{"../../../Matrix":6}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Skeleton_Parse = void 0;
var LoaderManager_1 = require("../../../LoaderManager");
var Skeleton_MeshRenderer_1 = require("./Skeleton_MeshRenderer");
var Skeleton_Node_1 = require("./Skeleton_Node");
var Skeleton_Skin_1 = require("./Skeleton_Skin");
var Skeleton_SkinRenderer_1 = require("./Skeleton_SkinRenderer");
//骨骼解析器
var Skeleton_Parse = /** @class */ (function () {
    function Skeleton_Parse() {
    }
    //https://webglfundamentals.org/webgl/resources/models/killer_whale/whale.CYCLES.gltf
    /**
     * 骨骼文件解析
     * 变量accessors
     *     bufferView:存储的是bufferviews的索引
     *     componentType：元素的类型，具体可查看glTypeToTypedArrayMap
     *     count：元素的数量
     *     max:单位元素每一位元素的最大值
     *     min:单位元素每一位元素的最小值
     *     type：单位元素的数目，具体可查看accessorTypeToNumComponentsMap
     *变量bufferviews
           buffer:在buffer中的起始位置
           byteLength：bufferview的字节长度
           byteOffset:在buffer中的偏移位置
           target:目标缓冲
    *变量nodes
           节点，包含所有可是节点，比如相机，灯光，物体，骨骼等
           name：节点的名字
           rotation：节点的旋转
           scale：节点的缩放
           translation:节点的平移
           children：节点的孩子节点列表
     *变量skins
           inverseBindMatrices:存储的是accessors的索引
           joints:骨骼节点数组，存储的是nodes的索引

     根据上面的shader代码：我们需要下面这些数据
     顶点：
     法线：
     切线：
     权重：
     骨骼关节矩阵:
     */
    Skeleton_Parse.throwNoKey = function (key) {
        throw new Error("no key: " + key);
    };
    //27420
    //4  2285  3
    Skeleton_Parse.accessorTypeToNumComponents = function (type) {
        return this.accessorTypeToNumComponentsMap[type] || this.throwNoKey(type);
    };
    // Given a GL type return the TypedArray needed
    Skeleton_Parse.glTypeToTypedArray = function (type) {
        return this.glTypeToTypedArrayMap[type] || this.throwNoKey(type);
    };
    // given an accessor index return both the accessor and
    // a TypedArray for the correct portion of the buffer
    Skeleton_Parse.getAccessorTypedArrayAndStride = function (gl, gltf, accessorIndex) {
        //gltf.accessors是bufferView的数组
        var accessor = gltf.accessors[accessorIndex];
        //gltf.bufferViews存储了每个bufferview的在顶点数组中的存放位置以及大小
        var bufferView = gltf.bufferViews[accessor.bufferView];
        var TypedArray = this.glTypeToTypedArray(accessor.componentType); //Float32Array
        var buffer = gltf.buffers[bufferView.buffer];
        console.log(gltf.buffers);
        var array = new TypedArray(buffer, bufferView.byteOffset + (accessor.byteOffset || 0), accessor.count * this.accessorTypeToNumComponents(accessor.type));
        return {
            accessor: accessor,
            array: array,
            stride: bufferView.byteStride || 0,
        };
    };
    // Given an accessor index return a WebGLBuffer and a stride
    Skeleton_Parse.getAccessorAndWebGLBuffer = function (gl, gltf, accessorIndex, attribName) {
        if (attribName === void 0) { attribName = ""; }
        var accessor = gltf.accessors[accessorIndex];
        var bufferView = gltf.bufferViews[accessor.bufferView];
        if (!bufferView.webglBuffer) {
            var buffer = gl.createBuffer();
            var target = bufferView.target || gl.ARRAY_BUFFER;
            var arrayBuffer = gltf.buffers[bufferView.buffer];
            var data = new Uint8Array(arrayBuffer, bufferView.byteOffset, bufferView.byteLength);
            //绑定缓冲
            gl.bindBuffer(target, buffer);
            //上传数据
            gl.bufferData(target, data, gl.STATIC_DRAW);
            bufferView.webglBuffer = buffer;
            if (attribName == "JOINTS_0" || attribName == "WEIGHTS_0") {
                var pData = [];
                data.forEach(function (value, index, array) {
                    pData.push(value);
                });
            }
        }
        return {
            accessor: accessor,
            buffer: bufferView.webglBuffer,
            stride: bufferView.stride || 0,
        };
    };
    //解析骨骼动画数据
    Skeleton_Parse.parseGLTF = function (gl, gltfPath, bufferPath) {
        var _this = this;
        if (gltfPath === void 0) { gltfPath = "res/models/killer_whale/whale.CYCLES.gltf"; }
        if (bufferPath === void 0) { bufferPath = "res/models/killer_whale/whale.CYCLES.bin"; }
        var gltf = LoaderManager_1.default.instance.getRes(gltfPath);
        gltf.buffers = [LoaderManager_1.default.instance.getRes(bufferPath)];
        console.log(gltf);
        //缺省的材质
        var defaultMaterial = {
            uniforms: {
                u_diffuse: [0.5, 0, 0, 1],
            },
        };
        // setup meshes
        // 创建网格
        gltf.meshes.forEach(function (mesh) {
            mesh.primitives.forEach(function (primitive) {
                var attribs = {};
                var numElements;
                for (var _i = 0, _a = Object.entries(primitive.attributes); _i < _a.length; _i++) {
                    var _b = _a[_i], attribName = _b[0], index = _b[1];
                    var _c = _this.getAccessorAndWebGLBuffer(gl, gltf, index, attribName), accessor = _c.accessor, buffer = _c.buffer, stride = _c.stride;
                    numElements = accessor.count;
                    attribs["a_" + attribName] = {
                        buffer: buffer,
                        type: accessor.componentType,
                        numComponents: _this.accessorTypeToNumComponents(accessor.type),
                        stride: stride,
                        offset: accessor.byteOffset | 0,
                    };
                }
                var bufferInfo = {
                    attribs: attribs,
                    numElements: numElements,
                };
                if (primitive.indices !== undefined) {
                    var _d = _this.getAccessorAndWebGLBuffer(gl, gltf, primitive.indices), accessor = _d.accessor, buffer = _d.buffer;
                    bufferInfo.numElements = accessor.count;
                    bufferInfo.indices = buffer;
                    bufferInfo.elementType = accessor.componentType;
                }
                //设置缓冲信息
                primitive.bufferInfo = bufferInfo;
                // save the material info for this primitive
                primitive.material = gltf.materials && gltf.materials[primitive.material] || defaultMaterial;
            });
        });
        var skinNodes = [];
        var origNodes = gltf.nodes;
        gltf.nodes = gltf.nodes.map(function (n) {
            var name = n.name, skin = n.skin, mesh = n.mesh, translation = n.translation, rotation = n.rotation, scale = n.scale;
            var trs = new Skeleton_Node_1.Skeleton_Transform(translation, rotation, scale);
            var node = new Skeleton_Node_1.Skeleton_Node(trs, name);
            var realMesh = gltf.meshes[mesh];
            if (skin !== undefined) {
                skinNodes.push({ node: node, mesh: realMesh, skinNdx: skin });
            }
            else if (realMesh) {
                node.mesh_Drawables.push(new Skeleton_MeshRenderer_1.Skeleton_MeshRenderer(realMesh, gl));
            }
            return node;
        });
        // setup skins
        gltf.skins = gltf.skins.map(function (skin) {
            var joints = skin.joints.map(function (ndx) { return gltf.nodes[ndx]; });
            //96个元素 每个元素四个字节
            //一个矩阵4x4 16个元素 可以组成6个矩阵
            var array = _this.getAccessorTypedArrayAndStride(gl, gltf, skin.inverseBindMatrices).array;
            return new Skeleton_Skin_1.Skeleton_Skin(joints, array, gl);
        });
        // Add SkinRenderers to nodes with skins
        for (var _i = 0, skinNodes_1 = skinNodes; _i < skinNodes_1.length; _i++) {
            var _a = skinNodes_1[_i], node = _a.node, mesh = _a.mesh, skinNdx = _a.skinNdx;
            node.skin_Drawables.push(new Skeleton_SkinRenderer_1.Skeleton_SkinRenderer(mesh, gltf.skins[skinNdx], gl));
        }
        /**
     * 设置节点的父子关系
     * @param nodes 骨骼动画中的源节点数组
     * @param node 父节点
     * @param childIndices 骨骼动画中源节点索引
     */
        function addChildren(nodes, node, childIndices) {
            childIndices.forEach(function (childNdx) {
                var child = nodes[childNdx];
                child.setParent(node);
            });
        }
        // arrange nodes into graph
        // 在骨骼动画的配置中,nodes是一个包含所有节点的对象
        //遍历nodes,就是遍历所有节点
        gltf.nodes.forEach(function (node, ndx) {
            var children = origNodes[ndx].children;
            if (children) {
                addChildren(gltf.nodes, node, children);
            }
        });
        // setup scenes
        // 创建场景
        for (var _b = 0, _c = gltf.scenes; _b < _c.length; _b++) {
            var scene = _c[_b];
            scene.root = new Skeleton_Node_1.Skeleton_Node(new Skeleton_Node_1.Skeleton_Transform(), scene.name);
            addChildren(gltf.nodes, scene.root, scene.nodes);
        }
        return gltf;
    };
    //变量类型占用的元素个数
    Skeleton_Parse.accessorTypeToNumComponentsMap = {
        'SCALAR': 1,
        'VEC2': 2,
        'VEC3': 3,
        'VEC4': 4,
        'MAT2': 4,
        'MAT3': 9,
        'MAT4': 16,
    };
    //元素数组类型
    Skeleton_Parse.glTypeToTypedArrayMap = {
        '5120': Int8Array,
        '5121': Uint8Array,
        '5122': Int16Array,
        '5123': Uint16Array,
        '5124': Int32Array,
        '5125': Uint32Array,
        '5126': Float32Array,
    };
    return Skeleton_Parse;
}());
exports.Skeleton_Parse = Skeleton_Parse;
},{"../../../LoaderManager":5,"./Skeleton_MeshRenderer":28,"./Skeleton_Node":29,"./Skeleton_Skin":31,"./Skeleton_SkinRenderer":32}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Skeleton_Skin = void 0;
var Device_1 = require("../../../Device");
var Matrix_1 = require("../../../Matrix");
var Texture2D_1 = require("../texture/Texture2D");
var Skeleton_Skin = /** @class */ (function () {
    //inverseBindMatrixData Float32Array(96)
    function Skeleton_Skin(joints, inverseBindMatrixData, gl) {
        this.gl = gl;
        this.joints = joints;
        this.inverseBindMatrices = [];
        this.jointMatrices = [];
        this.jointData = new Float32Array(joints.length * 16);
        // create views for each joint and inverseBindMatrix
        for (var i = 0; i < joints.length; ++i) {
            this.inverseBindMatrices.push(new Float32Array(inverseBindMatrixData.buffer, inverseBindMatrixData.byteOffset + Float32Array.BYTES_PER_ELEMENT * 16 * i, 16));
            this.jointMatrices.push(new Float32Array(this.jointData.buffer, Float32Array.BYTES_PER_ELEMENT * 16 * i, 16));
        }
        // create a texture to hold the joint matrices
        this.jointTexture = this.gl.createTexture();
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.jointTexture);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
        if (Device_1.default.Instance.getContextType() == "webgl2") {
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA32F, 4, this.joints.length, 0, this.gl.RGBA, this.gl.FLOAT, this.jointData);
        }
        else {
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 4, this.joints.length, 0, this.gl.RGBA, this.gl.FLOAT, this.jointData);
        }
        this.gl.bindTexture(this.gl.TEXTURE_2D, null);
        this._texture = new Texture2D_1.Texture2D();
        this.createTexture2DBuffer("res/wicker.jpg");
    }
    //创建一个纹理buffer
    Skeleton_Skin.prototype.createTexture2DBuffer = function (url) {
        // (this._texture as TextureCustom).url = CustomTextureData.getRandomData(30,50, gltex_format.RGB8);
        this._texture.url = url;
        return this._texture;
    };
    Skeleton_Skin.prototype.update = function (node) {
        var globalWorldInverse = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.invert(globalWorldInverse, node.worldMatrix);
        // go through each joint and get its current worldMatrix
        // apply the inverse bind matrices and store the
        // entire result in the texture
        for (var j = 0; j < this.joints.length; ++j) {
            var joint = this.joints[j];
            var dst = this.jointMatrices[j];
            Matrix_1.glMatrix.mat4.multiply(dst, globalWorldInverse, joint.worldMatrix);
            Matrix_1.glMatrix.mat4.multiply(dst, dst, this.inverseBindMatrices[j]);
        }
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.jointTexture);
        if (Device_1.default.Instance.getContextType() == "webgl2") {
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA32F, 4, this.joints.length, 0, this.gl.RGBA, this.gl.FLOAT, this.jointData);
        }
        else {
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 4, this.joints.length, 0, this.gl.RGBA, this.gl.FLOAT, this.jointData);
        }
    };
    return Skeleton_Skin;
}());
exports.Skeleton_Skin = Skeleton_Skin;
},{"../../../Device":3,"../../../Matrix":6,"../texture/Texture2D":36}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Skeleton_SkinRenderer = void 0;
var Device_1 = require("../../../Device");
var RenderData_1 = require("../../data/RenderData");
var ShaderFactory_1 = require("../../shader/ShaderFactory");
var skinVS = 'attribute vec4 a_POSITION;' + //顶点位置
    'attribute vec3 a_NORMAL;' + //法线
    'attribute vec4 a_WEIGHTS_0;' + //权重
    'attribute vec4 a_JOINTS_0;' +
    'attribute vec2 a_TEXCOORD_0;' +
    'uniform mat4 u_projection;' + //投影
    'uniform mat4 u_view;' + //观察空间
    'uniform mat4 u_world;' + //世界空间
    'uniform sampler2D u_jointTexture;' + //骨骼矩阵纹理
    'uniform float u_numJoints;' + //[6,7,8,9,10,11]
    'varying vec3 v_normal;' +
    'varying vec2 a_uv;' +
    //获取骨骼矩阵
    //一共有6个骨骼矩阵
    //0 1 2 3 4 5
    //每个顶点受到4个骨骼矩阵的影响
    /**
    RGBA RGBA RGBA RGBA  --矩阵1  16
    RGBA RGBA RGBA RGBA  --矩阵2  16
    RGBA RGBA RGBA RGBA  --矩阵3  16
    RGBA RGBA RGBA RGBA  --矩阵4  16
    RGBA RGBA RGBA RGBA  --矩阵5  16
    RGBA RGBA RGBA RGBA  --矩阵6  16
     */
    'mat4 getBoneMatrix(float jointNdx) {' +
    'float v = (jointNdx + 0.5) / u_numJoints;' + //算出行
    'return mat4(' + //s      
    'texture2D(u_jointTexture, vec2(((0.5 + 0.0) / 4.), v)),' + //0.125 
    'texture2D(u_jointTexture, vec2(((0.5 + 1.0) / 4.), v)),' + //0.375 
    'texture2D(u_jointTexture, vec2(((0.5 + 2.0) / 4.), v)),' + //0.625 
    'texture2D(u_jointTexture, vec2(((0.5 + 3.0) / 4.), v)));' + //0.875 
    '}' +
    'void main() {' +
    'mat4 skinMatrix =   getBoneMatrix(a_JOINTS_0[0]) * a_WEIGHTS_0[0] +' +
    'getBoneMatrix(a_JOINTS_0[1]) * a_WEIGHTS_0[1] +' +
    'getBoneMatrix(a_JOINTS_0[2]) * a_WEIGHTS_0[2] +' +
    'getBoneMatrix(a_JOINTS_0[3]) * a_WEIGHTS_0[3];' +
    'mat4 world = u_world * skinMatrix;' +
    'gl_Position = u_projection * u_view * world * a_POSITION;' +
    'v_normal = mat3(world) * a_NORMAL;' +
    'a_uv = a_TEXCOORD_0;' +
    '}';
var fs = 'precision mediump float;' + //精度
    'varying vec3 v_normal;' + //法线
    'uniform vec4 u_diffuse;' + //漫反射
    'uniform sampler2D u_texCoord;' + //骨骼矩阵纹理
    'uniform vec3 u_lightDirection;' + //光的方向
    'varying vec2 a_uv;' +
    'void main () {' +
    'vec3 normal = normalize(v_normal);' +
    'float light = dot(u_lightDirection,normal) * .5 + .5;' +
    'vec4 color = texture2D(u_texCoord,normalize(a_uv)); ' +
    'gl_FragColor = color+vec4(u_diffuse.rgb * light, u_diffuse.a);' +
    '}';
//皮肤渲染
var Skeleton_SkinRenderer = /** @class */ (function () {
    function Skeleton_SkinRenderer(mesh, skin, gl) {
        this.mesh = mesh;
        this.skin = skin;
        this.gl = gl;
        this.skinProgramInfo = ShaderFactory_1.G_ShaderFactory.createProgramInfo(skinVS, fs);
    }
    Skeleton_SkinRenderer.prototype.render = function (node, extViewLeftMatrix, sharedUniforms) {
        this.skin.update(node);
        for (var _i = 0, _a = this.mesh.primitives; _i < _a.length; _i++) {
            var primitive = _a[_i];
            var renderData = RenderData_1.RenderDataPool.get(RenderData_1.RenderDataType.Spine);
            renderData._shaderData = this.skinProgramInfo;
            renderData._uniformData.push({
                u_world: node.worldMatrix,
                u_texCoord: this.skin._texture._glID,
                u_jointTexture: this.skin.jointTexture,
                u_numJoints: this.skin.joints.length,
            });
            renderData._extraViewLeftMatrix = extViewLeftMatrix;
            renderData._projKey = "u_projection";
            renderData._viewKey = "u_view";
            renderData._uniformData.push(primitive.material.uniforms);
            renderData._uniformData.push(sharedUniforms);
            renderData._attrbufferData = primitive.bufferInfo;
            Device_1.default.Instance.collectData(renderData);
        }
    };
    return Skeleton_SkinRenderer;
}());
exports.Skeleton_SkinRenderer = Skeleton_SkinRenderer;
},{"../../../Device":3,"../../data/RenderData":49,"../../shader/ShaderFactory":59}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../Sprite");
var Skeleton_Parse_1 = require("./Skeleton_Parse");
//骨骼节点
var Spine = /** @class */ (function (_super) {
    __extends(Spine, _super);
    function Spine() {
        var _this = _super.call(this) || this;
        _this.origMatrices = new Map();
        _this._cameraType = 0;
        _this.gltf = Skeleton_Parse_1.Skeleton_Parse.parseGLTF(_this.gl);
        return _this;
    }
    Spine.prototype.onInit = function () {
        this.localFunc();
    };
    Spine.prototype.animSkin = function (skin, a) {
        for (var i = 0; i < skin.joints.length; ++i) {
            var joint = skin.joints[i];
            // if there is no matrix saved for this joint
            if (!this.origMatrices.has(joint)) {
                // save a matrix for joint
                this.origMatrices.set(joint, joint.transform.getMatrix());
            }
            // get the original matrix
            var origMatrix = this.origMatrices.get(joint);
            // rotate it
            var m = this._glMatrix.mat4.create();
            this._glMatrix.mat4.rotateX(m, origMatrix, a);
            // decompose it back into position, rotation, scale
            // into the joint
            this._glMatrix.mat4.decompose(m, joint.transform.position, joint.transform.rotation, joint.transform.scale);
        }
    };
    Spine.prototype.localFunc = function () {
        var cameraPosition = [5, 0, -5];
        var target = [0, 0, -10];
        // for debugging .. see article
        // const cameraPosition = [5, 0, 5];
        // const target = [0, 0, 0];
        var up = [0, 1, 0];
        // Compute the camera's matrix using look at.
        this.spineMatrix = this._glMatrix.mat4.create();
        this._glMatrix.mat4.lookAt2(this.spineMatrix, cameraPosition, target, up);
        this._glMatrix.mat4.mul(this.modelMatrix, this.modelMatrix, this.spineMatrix);
    };
    Spine.prototype.renderDrawables = function (node) {
        var msMatrix = this._glMatrix.mat4.multiply(null, this.modelMatrix, this.spineMatrix);
        //渲染网格
        for (var _i = 0, _a = node.mesh_Drawables; _i < _a.length; _i++) {
            var drawable = _a[_i];
            drawable.render(node, msMatrix, this.sharedUniforms);
        }
        //渲染皮肤
        for (var _b = 0, _c = node.skin_Drawables; _b < _c.length; _b++) {
            var drawable = _c[_b];
            drawable.render(node, msMatrix, this.sharedUniforms);
        }
    };
    Spine.prototype.collectRenderData = function (time) {
        time *= 0.001; // convert to seconds
        this.animSkin(this.gltf.skins[0], Math.sin(time) * .5);
        var lightDirection = this._glMatrix.vec3.create();
        this._glMatrix.vec3.normalize(lightDirection, [-1, 3, 5]);
        this.sharedUniforms = {
            u_lightDirection: lightDirection,
        };
        for (var _i = 0, _a = this.gltf.scenes; _i < _a.length; _i++) {
            var scene = _a[_i];
            // updatte all world matices in the scene.
            scene.root.updateWorldMatrix();
            // walk the scene and render all renderables
            scene.root.traverse(this.renderDrawables.bind(this));
        }
    };
    return Spine;
}(Sprite_1.SY.SpriteBase));
exports.default = Spine;
},{"../Sprite":25,"./Skeleton_Parse":30}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderTexture = void 0;
var GLEnums_1 = require("../../gfx/GLEnums");
var Texture2D_1 = require("./Texture2D");
/**
 * !#en The depth buffer and stencil buffer format for RenderTexture.
 * !#zh RenderTexture 的深度缓冲以及模板缓冲格式。
 * @enum RenderTexture.DepthStencilFormat
 */
var DepthStencilFormat = {
    /**
     * !#en 24 bit depth buffer and 8 bit stencil buffer
     * !#zh 24 位深度缓冲和 8 位模板缓冲
     * @property RB_FMT_D24S8
     * @readonly
     * @type {number}
     */
    RB_FMT_D24S8: GLEnums_1.glrender_buffer_format.D24S8,
    /**
     * !#en Only 8 bit stencil buffer
     * !#zh 只申请 8 位模板缓冲
     * @property RB_FMT_S8
     * @readonly
     * @type {number}
     */
    RB_FMT_S8: GLEnums_1.glrender_buffer_format.S8,
    /**
     * !#en Only 16 bit depth buffer
     * !#zh 只申请 16 位深度缓冲
     * @property RB_FMT_D16
     * @readonly
     * @type {number}
     */
    RB_FMT_D16: GLEnums_1.glrender_buffer_format.D16
};
/**
 * Render textures are textures that can be rendered to.
 * @class RenderTexture
 * @extends Texture2D
 */
var RenderTexture = /** @class */ (function (_super) {
    __extends(RenderTexture, _super);
    function RenderTexture() {
        var _this = _super.call(this) || this;
        _this.initFrameBuffer();
        return _this;
    }
    //初始化帧缓存
    RenderTexture.prototype.initFrameBuffer = function () {
        var gl = this._gl;
        //创建帧缓冲
        this._frameBuffer = gl.createFramebuffer();
        //创建渲染缓冲区
        this._renderBuffer = gl.createRenderbuffer();
    };
    Object.defineProperty(RenderTexture.prototype, "frameBuffer", {
        get: function () {
            return this._frameBuffer;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RenderTexture.prototype, "depthTexture", {
        get: function () {
            return this._depthTexture;
        },
        enumerable: false,
        configurable: true
    });
    RenderTexture.prototype.attach = function (place, width, height) {
        if (place == "color") {
            this.renderTextureToColor(width, height);
        }
        else if (place == "depth") {
            var isWebgl2 = this._gl instanceof WebGL2RenderingContext ? true : false;
            isWebgl2 ? this.renderTextureToDepthWebgl2(width, height) : this.renderTextureToDepthWebgl1(width, height);
        }
        this.checkAndUnbind();
        this.loaded = true;
    };
    RenderTexture.prototype.checkAndUnbind = function () {
        var gl = this._gl;
        // 检测帧缓冲区对象的配置状态是否成功
        var e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (gl.FRAMEBUFFER_COMPLETE !== e) {
            console.log('Frame buffer object is incomplete: ' + e.toString());
            return;
        }
        else {
            console.log("创建帧缓存成功----------");
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    };
    /**
     * 渲染纹理到颜色附件
     * @param dtWidth
     * @param dtHeight
     */
    RenderTexture.prototype.renderTextureToColor = function (dtWidth, dtHeight) {
        var gl = this._gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
        gl.bindRenderbuffer(gl.RENDERBUFFER, this._renderBuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, dtWidth, dtHeight);
        //创建纹理
        gl.bindTexture(gl.TEXTURE_2D, this._glID);
        // Y 轴取反
        this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, false);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
        //设置纹理格式，作为帧缓冲的颜色附件
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, dtWidth, dtHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        //设置上面创建纹理作为颜色附件
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glID, 0);
        //设置渲染缓冲对象作为深度附件
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._renderBuffer);
    };
    RenderTexture.prototype.renderTextureToDepthWebgl1 = function (dtWidth, dtHeight) {
        var gl = this._gl;
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
        //深度纹理附件
        this._depthTexture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this._depthTexture);
        gl.texImage2D(gl.TEXTURE_2D, // target
        0, // mip level
        gl.DEPTH_COMPONENT, // internal format
        dtWidth, // width
        dtHeight, // height
        0, // border
        gl.DEPTH_COMPONENT, // format
        gl.UNSIGNED_INT, // type  //通道数是4 每一位大小是1个字节
        null); // data
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, // target
        gl.DEPTH_ATTACHMENT, // attachment point 将指定的纹理绑定到帧缓冲的深度附件中
        gl.TEXTURE_2D, // texture target
        this._depthTexture, // texture
        0); // mip level
        //颜色纹理附件
        // create a color texture of the same size as the depth texture
        // see article why this is needed_
        gl.bindTexture(gl.TEXTURE_2D, this._glID);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, dtWidth, dtHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        // attach it to the framebuffer
        //将颜色纹理附件附加到帧缓存
        gl.framebufferTexture2D(gl.FRAMEBUFFER, // target
        gl.COLOR_ATTACHMENT0, // attachment point 将指定的纹理绑定到帧缓冲的颜色附件中
        gl.TEXTURE_2D, // texture target
        this._glID, // texture
        0); // mip level
    };
    RenderTexture.prototype.renderTextureToDepthWebgl2 = function (dtWidth, dtHeight) {
        var gl = (this._gl);
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
        //创建渲染缓冲并绑定以及初始化存储
        gl.bindRenderbuffer(gl.RENDERBUFFER, this._renderBuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT24, dtWidth, dtHeight);
        //颜色纹理附件
        // create a color texture of the same size as the depth texture
        // see article why this is needed_
        this._depthTexture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this._depthTexture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, dtWidth, dtHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        // attach it to the framebuffer
        //将颜色纹理附件附加到帧缓存
        gl.framebufferTexture2D(gl.FRAMEBUFFER, // target
        gl.COLOR_ATTACHMENT0, // attachment point 将指定的纹理绑定到帧缓冲的颜色附件中
        gl.TEXTURE_2D, // texture target
        this._depthTexture, // texture
        0); // mip level
        //设置渲染缓冲对象作为深度附件
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._renderBuffer);
    };
    RenderTexture.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this._frameBuffer) {
            this._gl.deleteFramebuffer(this._frameBuffer);
            this._frameBuffer = null;
        }
    };
    RenderTexture.prototype._resetUnderlyingMipmaps = function () {
    };
    return RenderTexture;
}(Texture2D_1.Texture2D));
exports.RenderTexture = RenderTexture;
},{"../../gfx/GLEnums":50,"./Texture2D":36}],35:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture = exports.TextureOpts = void 0;
var Device_1 = require("../../../Device");
var GLEnums_1 = require("../../gfx/GLEnums");
/**
 * 创建一个纹理的一些设置参数
 */
var TextureOpts = /** @class */ (function () {
    function TextureOpts() {
        this.alignment = 1;
        this.unpackFlipY = true; //webgl坐标系左下角 UI坐标系左上角
        this.level = 0;
        this.border = 0;
        this.width = 1; //纹理的宽度
        this.height = 1; //纹理的高度
        this.genMipmaps = false; //是否开启mipmap技术
        this.compressed = false; //纹理是否是压缩的
        this.anisotropy = 1; //设置纹理所有方向的最大值
        this.minFilter = GLEnums_1.gltex_filter.LINEAR; //纹理缩小过滤模式
        this.magFilter = GLEnums_1.gltex_filter.LINEAR; //纹理放大过滤模式
        this.mipFilter = GLEnums_1.gltex_filter.LINEAR_MIPMAP_LINEAR; //设置纹理缩小过滤的模式为特殊的线性过滤GL_LINEAR_MIPMAP_NEAREST
        this.wrapS = 33648 /* MIRROR */; //设置s方向上的贴图模式为镜像对称重复
        this.wrapT = 33648 /* MIRROR */; //设置t方向上的贴图模式为镜像对称重复
        this.configFormat = 16 /* RGBA8 */; //纹理的配置格式
    }
    Object.defineProperty(TextureOpts.prototype, "configFormat", {
        get: function () {
            return this._configFormat;
        },
        set: function (format) {
            this._configFormat = format;
            var infor = GLEnums_1.glTextureFmtInfor(format);
            this._pixelType = infor.pixelType;
            this._format = infor.format;
            this._internalFormat = infor.internalFormat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureOpts.prototype, "format", {
        get: function () {
            return this._format;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureOpts.prototype, "internalFormat", {
        get: function () {
            return this._internalFormat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureOpts.prototype, "pixelType", {
        get: function () {
            return this._pixelType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextureOpts.prototype, "data", {
        get: function () {
            return this._data;
        },
        set: function (d) {
            this._data = d;
        },
        enumerable: false,
        configurable: true
    });
    //参数的有效性
    //一般使用前 调用一下
    TextureOpts.prototype.checkValid = function () {
        if (this.genMipmaps && this.isPow2(this.width) == false || this.isPow2(this.height) == false) {
            console.warn('WebGL1 doesn\'t support all wrap modes with NPOT textures');
            this.genMipmaps = false;
        }
        if (!this.isValidMag(this.magFilter)) {
            this.magFilter = GLEnums_1.gltex_filter.NEAREST;
        }
        if (!this.isValidMin(this.minFilter)) {
            this.minFilter = GLEnums_1.gltex_filter.NEAREST;
        }
    };
    TextureOpts.prototype.isValidMag = function (mag) {
        return TextureOpts._validMagData.indexOf(mag) >= 0;
    };
    TextureOpts.prototype.isValidMin = function (min) {
        if (this.genMipmaps) {
            //表示当前数据可能要生成多远渐进纹理
            return TextureOpts._validMinData.indexOf(min) >= 0;
        }
        else {
            //如果没有可能生成多远渐进纹理，那么缩小的取值算法必须和放大一样
            return this.isValidMag(min);
        }
    };
    //判断当前数是不是2的幂
    TextureOpts.prototype.isPow2 = function (v) {
        return !(v & (v - 1)) && (!!v);
    };
    TextureOpts._validMagData = [GLEnums_1.gltex_filter.LINEAR, GLEnums_1.gltex_filter.NEAREST];
    TextureOpts._validMinData = [GLEnums_1.gltex_filter.LINEAR, GLEnums_1.gltex_filter.NEAREST,
        GLEnums_1.gltex_filter.LINEAR_MIPMAP_LINEAR,
        GLEnums_1.gltex_filter.LINEAR_MIPMAP_NEAREST,
        GLEnums_1.gltex_filter.NEAREST_MIPMAP_LINEAR,
        GLEnums_1.gltex_filter.NEAREST_MIPMAP_NEAREST];
    return TextureOpts;
}());
exports.TextureOpts = TextureOpts;
var _nullWebGLTexture = null;
var _textureID = 0;
var Texture = /** @class */ (function () {
    function Texture() {
        this.loaded = false; //是否加载到内存
        this._bites = 0; //纹理在GPU端所占的内存
        this._gl = Device_1.default.Instance.gl;
        this._target = -1;
        this._id = _textureID++;
        this._glID = this._gl.createTexture();
        this._bites = 0;
        this.loaded = false;
    }
    Object.defineProperty(Texture.prototype, "isTexture2D", {
        /**
         * 是否是2d纹理图片
         */
        get: function () {
            return this._target == this._gl.TEXTURE_2D;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Texture.prototype, "isTextureCube", {
        /**
         * 是否是立方体纹理
         */
        get: function () {
            return this._target == this._gl.TEXTURE_CUBE_MAP;
        },
        enumerable: false,
        configurable: true
    });
    Texture.prototype.updateOptions = function (options) {
        this._width = options.width;
        this._height = options.height;
        this._genMipmaps = options.genMipmaps;
        this._anisotropy = options.anisotropy;
        this._minFilter = options.minFilter;
        this._magFilter = options.magFilter;
        this._mipFilter = options.mipFilter;
        this._wrapS = options.wrapS;
        this._wrapT = options.wrapT;
        this._border = options.border;
        this._level = options.level;
        this._data = options.data;
        this._format = options.format;
        this._internalFormat = options.format;
        this._pixelType = options.pixelType;
        this._alignment = options.alignment;
        this._unpackFlipY = options.unpackFlipY;
        // wrapR available in webgl2
        // this._wrapR = enums.WRAP_REPEAT;
        this._cformat = options.configFormat;
        this._cformat = options.configFormat;
        this._compressed =
            (this._cformat >= 0 /* RGB_DXT1 */ && this._cformat <= 8 /* RGBA_PVRTC_4BPPV1 */) ||
                (this._cformat >= 28 /* RGB_ETC2 */ && this._cformat <= 29 /* RGBA_ETC2 */);
        this.updateNormalBytes();
    };
    Texture.prototype.upload = function () {
        this.uploadTextureToGPU();
    };
    /**
     * 设置GPU中纹理操作
     */
    Texture.prototype.setTextureOperator = function () {
        var gl = this._gl;
        this._gl.pixelStorei(gl.UNPACK_ALIGNMENT, this._alignment);
        // Y 轴取反
        this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, this._unpackFlipY);
        if (this._genMipmaps) {
            // 生成 MipMap 映射
            // 首先要调用此方法
            // 要在texImage2D 后调用，否则会报错error:GL_INVALID_OPERATION  gl.generateMipmap(this._target)
            //如果开启此技术对于256*256这个贴图 它的内存占用会比原来多出三分之一
            //256*256 p(gpu内存) = (width * height * 4 /1024)*(4/3) =342
            //能够使用这个技术的图片的宽高必须是2的幂
            //此技术开启以后，会生成以下级别的图片，256*256这个是0级
            //级别：128*128（1）,64*64（1）,32*32（1）,16*16（1）,8*8（1）,4*4（1）,2*2（1）,1*1（1）
            //实时渲染时，根据采样密度选择其中的某一级纹理，以此避免运行时的大量计算
            //生成多远渐进纹理
            console.log("生成多远渐进纹理");
            gl.generateMipmap(this._target);
        }
        /**
         * MIN_FILTER 和 MAG_FILTER
         * -------------对于纹理的放大
         * 一个纹理是由离散的数据组成的，比如一个 2x2 的纹理是由 4 个像素组成的，使用 (0,0)、(0, 1) 等四个坐标去纹理上取样，自然可以取到对应的像素颜色；
         * 但是，如果使用非整数坐标到这个纹理上去取色。比如，当这个纹理被「拉近」之后，在屏幕上占据了 4x4 一共 16 个像素，
         * 那么就会使用 (0.33,0) 之类的坐标去取值，如何根据离散的 4 个像素颜色去计算 (0.33,0) 处的颜色，就取决于参数 MAG_FILTER
         * MAG_FILTER（放大） 有两个可选项，NEAREST 和 LINEAR。
         * 顾名思义，NEAREST 就是去取距离当前坐标最近的那个像素的颜色，而 LINEAR 则会根据距离当前坐标最近的 4 个点去内插计算出一个数值
         * NEAREST：速度快，但图片被放的比较大的时候,图片的颗粒感会比较明显
         * LINEAR： 速度慢点，但图片会显示的更顺滑一点
         * -------------对于纹理的缩小
         * MIN_FILTER（缩小） 有以下 6 个可选配置项：
         * NEAREST
         * LINEAR
         * NEAREST_MIPMAP_NEAREST
         * NEAREST_MIPMAP_LINEAR
         * LINEAR_MIPMAP_NEAREST
         * LINEAR_MIPMAP_LINEAR
         * 前两个配置项和 MAG_FILTER 的含义和作用是完全一样的。
         * 但问题是，当纹理被缩小时，原纹理中并不是每一个像素周围都会落上采样点，这就导致了某些像素，完全没有参与纹理的计算，新纹理丢失了一些信息。
         * 假设一种极端的情况，就是一个纹理彻底缩小为了一个点，那么这个点的值应当是纹理上所有像素颜色的平均值，这才比较合理。
         * 但是 NEAREST 只会从纹理中取一个点，而 LINEAR 也只是从纹理中取了四个点计算了一下而已。这时候，就该用上 MIPMAP 了
         *
         * 为了在纹理缩小也获得比较好的效果，需要按照采样密度，选择一定数量（通常大于 LINEAR 的 4 个，极端情况下为原纹理上所有像素）的像素进行计算。
         * 实时进行计算的开销是很大的，所有有一种称为 MIPMAP（金字塔）的技术。
         * 在纹理创建之初，就为纹理创建好 MIPMAP，比如对 512x512 的纹理，依次建立 256x256（称为 1 级 Mipmap）、128x128（称为 2 级 Mipmap） 乃至 2x2、1x1 的纹理。
         * 实时渲染时，根据采样密度选择其中的某一级纹理，以此避免运行时的大量计算
         */
        // set the filtering so we don't need mips and it's not filtered
        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, this._minFilter);
        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, this._magFilter);
        gl.texParameteri(this._target, gl.TEXTURE_WRAP_S, this._wrapS);
        gl.texParameteri(this._target, gl.TEXTURE_WRAP_T, this._wrapT);
    };
    /**
     * 上传纹理到显存中
     */
    Texture.prototype.uploadTextureToGPU = function () {
        this._gl.bindTexture(this._target, this._glID);
        this._gl.texImage2D(this._target, this._level, this._internalFormat, this._width, this._height, this._border, this._format, this._pixelType, this._data);
        this.setTextureOperator();
        this._gl.bindTexture(this._target, null);
    };
    //ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas;
    Texture.prototype.uploadImageDataToGPU = function () {
        this._gl.texImage2D(this._target, 0, this._format, this._internalFormat, this._pixelType, this._data);
    };
    //ArrayBuffer||null
    Texture.prototype.uploadArrayBufferDataToGPU = function () {
        this._gl.texImage2D(this._target, this._level, this._internalFormat, this._width, this._height, this._border, this._format, this._pixelType, this._data);
    };
    //更新字节数
    Texture.prototype.updateNormalBytes = function () {
        if (this._compressed == false) {
            this._bites = (this._width * this._height * GLEnums_1.glTextureChanelTotalBytes(this._cformat)) / 1024;
            // 开启了mipmap而造成的纹理内存增大的字节数
            this._bites = this._genMipmaps ? this._bites * (4 / 3) : this._bites;
        }
    };
    /**
     * @method destroy
     */
    Texture.prototype.destroy = function () {
        if (this._glID === _nullWebGLTexture) {
            console.error('The texture already destroyed');
            return;
        }
        this._gl.deleteTexture(this._glID);
        this._glID = _nullWebGLTexture;
    };
    return Texture;
}());
exports.Texture = Texture;
},{"../../../Device":3,"../../gfx/GLEnums":50}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture2D = void 0;
var LoaderManager_1 = require("../../../LoaderManager");
var GLEnums_1 = require("../../gfx/GLEnums");
var Texture_1 = require("./Texture");
/*

//gl.texImage2D将 pixels 指定给绑定的纹理对象
// WebGL1:
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);
void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);

// WebGL2:
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);

参数值解析
internalformat        type            通道数 通道字节数
RGBA         	 UNSIGNED_BYTE	        4	    4
RGB	             UNSIGNED_BYTE	        3	    3
RGBA             UNSIGNED_SHORT_4_4_4_4	4	    2
RGBA         	 UNSIGNED_SHORT_5_5_5_1	4	    2
RGB	             UNSIGNED_SHORT_5_6_5   3	    2
LUMINANCE_ALPHA	 UNSIGNED_BYTE       	2	    2
LUMINANCE   	 UNSIGNED_BYTE      	1	    1
ALPHA       	 UNSIGNED_BYTE       	1	    1
注意internalformat的值必须和format值保持一致


//gl.texParameteri设置纹理参数
gl.texParameteri(target, pname, param) ，将param的值赋给绑定到目标的纹理对象的pname参数上。
参数：
target: gl.TEXTURE_2D 或 gl.TEXTURE_CUBE_MAP
pname: 可指定4个纹理参数

放大（gl.TEXTURE_MAP_FILTER）:当纹理的绘制范围比纹理本身更大时，如何获取纹理颜色。比如，将16*16的纹理图像映射到32*32像素的空间时，纹理的尺寸变为原始的两倍。默认值为gl.LINEAR。
缩小（gl.TEXTURE_MIN_FILTER）: 当纹理的绘制返回比纹理本身更小时，如何获取纹素颜色。比如，将32*32的纹理图像映射到16*16像素空间里，纹理的尺寸就只有原始的一般。默认值为gl.NEAREST_MIPMAP_LINEAR。
水平填充（gl.TEXTURE_WRAP_S）: 表示如何对纹理图像左侧或右侧区域进行填充。默认值为gl.REPEAT。
垂直填充（gl.TEXTURE_WRAP_T）: 表示如何对纹理图像上方和下方的区域进行填充。默认值为gl.REPEAT。
param: 纹理参数的值

可赋给 gl.TEXTURE_MAP_FILTER 和 gl.TEXTURE_MIN_FILTER 参数的值

gl.NEAREST: 使用原纹理上距离映射后像素中心最近的那个像素的颜色值，作为新像素的值。

gl.LINEAR: 使用距离新像素中心最近的四个像素的颜色值的加权平均，作为新像素的值（和gl.NEAREST相比，该方法图像质量更好，但也会有较大的开销。）

可赋给 gl.TEXTURE_WRAP_S 和 gl.TEXTURE_WRAP_T 的常量：

gl.REPEAT: 平铺式的重复纹理


gl.MIRRORED_REPEAT: 镜像对称的重复纹理

gl.CLAMP_TO_EDGE: 使用纹理图像边缘值
*/
var Texture2D = /** @class */ (function (_super) {
    __extends(Texture2D, _super);
    function Texture2D() {
        var _this = _super.call(this) || this;
        _this._target = _this._gl.TEXTURE_2D;
        return _this;
    }
    Object.defineProperty(Texture2D.prototype, "url", {
        set: function (soucePath) {
            this._url = soucePath;
            LoaderManager_1.default.instance.load(this._url, null, this.onLoadFinish.bind(this));
        },
        enumerable: false,
        configurable: true
    });
    Texture2D.prototype.onLoadFinish = function (image) {
        var options = new Texture_1.TextureOpts();
        options.data = image;
        options.width = image.width;
        options.height = image.height;
        options.unpackFlipY = true;
        options.magFilter = GLEnums_1.gltex_filter.LINEAR;
        options.minFilter = GLEnums_1.gltex_filter.LINEAR_MIPMAP_LINEAR;
        options.checkValid();
        this.updateOptions(options);
        this.upload();
        this.loaded = true;
    };
    Texture2D.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    return Texture2D;
}(Texture_1.Texture));
exports.Texture2D = Texture2D;
},{"../../../LoaderManager":5,"../../gfx/GLEnums":50,"./Texture":35}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Texture_1 = require("./Texture");
var GLEnums_1 = require("../../gfx/GLEnums");
/**
 * 立方体纹理
 */
var TextureCube = /** @class */ (function (_super) {
    __extends(TextureCube, _super);
    function TextureCube() {
        var _this = _super.call(this) || this;
        _this._target = _this._gl.TEXTURE_CUBE_MAP;
        return _this;
    }
    Object.defineProperty(TextureCube.prototype, "url", {
        /**
         * @param path
         * 0:right
         * 1:left
         * 2:up
         * 3:down
         * 4:back
         * 5:front
         */
        set: function (path) {
            this.faceInfos = [
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_X,
                    url: path[0],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
                    url: path[1],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
                    url: path[2],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
                    url: path[3],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
                    url: path[4],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,
                    url: path[5],
                },
            ];
            this.loadFaceInfor();
        },
        enumerable: false,
        configurable: true
    });
    //加载各个面信息
    TextureCube.prototype.loadFaceInfor = function () {
        var _this = this;
        var gl = this._gl;
        var texture = this._glID;
        gl.bindTexture(this._target, texture);
        var loadedCount = 0;
        this.faceInfos.forEach(function (faceInfo) {
            var target = faceInfo.target, url = faceInfo.url;
            // Upload the canvas to the cubemap face.
            var level = 0;
            var internalFormat = gl.RGBA;
            var format = gl.RGBA;
            var type = gl.UNSIGNED_BYTE;
            var width = 512;
            var height = 512;
            // setup each face so it's immediately renderable
            gl.texImage2D(target, level, format, width, height, 0, internalFormat, type, null);
            // Asynchronously load an image
            var image = new Image();
            image.src = url;
            image.addEventListener('load', function () {
                console.log("加载图片成功啦---");
                // Now that the image has loaded make copy it to the texture.
                gl.bindTexture(this._target, texture);
                // Y 轴取反
                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
                gl.texImage2D(target, level, format, internalFormat, type, image);
                loadedCount++;
                if (loadedCount == 6)
                    this.loaded = true;
                //   gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
            }.bind(_this));
        });
        gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
        //放大
        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, GLEnums_1.gltex_filter.LINEAR);
        //缩小
        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, GLEnums_1.gltex_filter.LINEAR);
        //水平方向
        gl.texParameteri(this._target, gl.TEXTURE_WRAP_S, 33648 /* MIRROR */);
        //垂直方向
        gl.texParameteri(this._target, gl.TEXTURE_WRAP_T, 33648 /* MIRROR */);
    };
    return TextureCube;
}(Texture_1.Texture));
exports.default = TextureCube;
},{"../../gfx/GLEnums":50,"./Texture":35}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Texture_1 = require("./Texture");
/**
 * 自定义纹理
 */
var TextureCustom = /** @class */ (function (_super) {
    __extends(TextureCustom, _super);
    function TextureCustom() {
        var _this = _super.call(this) || this;
        _this._target = _this._gl.TEXTURE_2D;
        return _this;
    }
    Object.defineProperty(TextureCustom.prototype, "url", {
        set: function (urlData) {
            this.updateOptions(urlData);
            this.loaded = true;
            this.upload();
        },
        enumerable: false,
        configurable: true
    });
    return TextureCustom;
}(Texture_1.Texture));
exports.default = TextureCustom;
},{"./Texture":35}],39:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("./enums");
var Node_1 = require("../base/Node");
var Matrix_1 = require("../../Matrix");
var CameraData_1 = require("../data/CameraData");
/**
 *
 * 【0  4  8   12】
 * 【1  5  9   13】
 * 【2  6  10  14】
 * 【3  7  11  15】
 *
 * 基础理解1：
 * 摄像机会造一个模型矩阵和一个透视矩阵
 * 模型矩阵VM
 *
 * 平移----------------------------------------------------
 * 只有（12，13，14，15）参与运算
 *  out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
 *    (4x4)          (4x1)
 *   x  y  z  w
 * 【1  0  0  0】    【x1】                 【x1】                 【1  0  0  x1】
 * 【0  1  0  0】    【y1】                 【y1】trnslate         【0  1  0  y1】
 * 【0  0  1  0】--->【z1】-->两个矩阵相乘-->【z1】------------->   【0  0  1  z1】
 * 【0  0  0  1】    【1 】                 【1 】  self build     【0  0  0  1 】
 *
 * 缩放---------------------------------------------------------
 *  out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;

    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;

    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
 * 【1  0  0  0】    【x2】                 【x2】                 【x2  0   0   x1】
 * 【0  1  0  0】    【y2】                 【y2】scale            【0   y2  0   y1】
 * 【0  0  1  0】--->【z2】-->两个矩阵相乘-->【z2】------------->   【0   0   z2  z1】
 * 【0  0  0  1】    【1 】                 【1 】  self build     【0   0   0    1】
 *
 * 旋转-------------------------------------------------------------
 *
 * 这是一个非常干净的模型矩阵，任何一个向量乘以这个矩阵都等于它自身
 * 相机的位置pos 【x1,y1,z1】
 * 相机的缩放scal【x2,y2,z2】
 * 相机的平移tras【x3,y3,z3】
 * 假设相机放在世界坐标系的正中心【0,0,0】[1,1,1][0,0,0]
 *
 * 场景会从相机哪里继承这个矩阵VM
 * 场景也继承节点Node 他也有这个位置 缩放 平移的变化
 */
/**
 * 坐标系：
 * 笛卡尔坐标系：X轴为水平方向，Y轴为垂直方向
 * 视口坐标:左下角为(0,0),右上角为（1,1)
 * 屏幕坐标:屏幕的左下角为(0,0),但右上角为(screen.width,screen.height)，screen.width表示屏幕宽度，screen.height表示屏幕高度
 * UI坐标系:这个坐标系与屏幕坐标系相似，左下角为（0，0）点，右上角为（Screen.width，Screen.height）
 * uv坐标系：左下角为【0，0】，右上角为【1,1】
 * 齐次裁切坐标:屏幕正中心为原点（0,0），坐标范围是【-1,1】
 *
 * 左手坐标系：大拇指向上（+y）,食指向前（+z）,中指向右（+x）
 * 右手坐标系：大拇指向上（+y）,食指向前（+z）,中指向左（+x）
 * 右手坐标系(作图方便)：大拇指向右（+x）,食指向上（+y）,中指向自己（+z）
 *
 * 一:opengl和webgl都属于右手坐标系
 * 二：设备坐标系属于左手坐标系
 * 三：unity属于左手坐标系
 * 四：Direct3D使用的是左手坐标系
 */
/**
 * !#en Values for Camera.clearFlags, determining what to clear when rendering a Camera.
 * !#zh 摄像机清除标记位，决定摄像机渲染时会清除哪些状态
 * @enum Camera.ClearFlags
 */
var ClearFlags;
(function (ClearFlags) {
    /**
    * !#en
    * Clear the background color.
    * !#zh
    * 清除背景颜色
    * @property COLOR
    */
    ClearFlags[ClearFlags["COLOR"] = 1] = "COLOR";
    /**
     * !#en
     * Clear the depth buffer.
     * !#zh
     * 清除深度缓冲区
     * @property DEPTH
     */
    ClearFlags[ClearFlags["DEPTH"] = 2] = "DEPTH";
    /**
     * !#en
     * Clear the stencil.
     * !#zh
     * 清除模板缓冲区
     * @property STENCIL
     */
    ClearFlags[ClearFlags["STENCIL"] = 4] = "STENCIL";
})(ClearFlags || (ClearFlags = {}));
var StageFlags;
(function (StageFlags) {
    StageFlags[StageFlags["OPAQUE"] = 1] = "OPAQUE";
    StageFlags[StageFlags["TRANSPARENT"] = 2] = "TRANSPARENT";
})(StageFlags || (StageFlags = {}));
var Camera = /** @class */ (function (_super) {
    __extends(Camera, _super);
    /**
     *
     * @param fovy    //相机张开的角度
     * @param aspect //宽高横纵比
     * @param near   //最近能看到的距离
     * @param far    //最远能看到的距离
     * @param type   //相机的类型
     */
    function Camera(fovy, aspect, near, far, type) {
        var _this = _super.call(this) || this;
        /**
         * 清除标志
         * 在GPU的一次绘制过程中，会在在帧缓冲区产生三个附件
         * 颜色缓冲附件:存储RGB
         * 深度附件:存储深度z值
         * 模板缓冲附件：存储模板值，用于测试，比如我们只绘制某一些具有特定模板值的像素
         * 我们将像素信息绘制到屏幕，都是依靠这三个附件的，
         * 绘制结束后，我们需要及时清理
         */
        _this._clearFlags = enums_1.default.CLEAR_COLOR | enums_1.default.CLEAR_DEPTH;
        /**
         * 清理屏幕时使用的颜色
         * 当我们把帧缓冲的附件置空的时候，那么就会出现黑屏，原因是GPU从帧缓冲取不到颜色数据用于渲染
         * 这个时候需要我们指定一种颜色来更换帧缓冲的颜色附件中的像素信息
         */
        _this._clearColor = [];
        // ortho properties
        /**
         * 下面这个值将会影响齐次裁切空间的高度的范围大小
         * 【-_orthoHeight,_orthoHeight】
         * 非常重要，相当于视口的宽和屏幕宽的比例
         * 这个一般用于2D渲染
         * 屏幕空间--》齐次裁切空间--》屏幕空间
         */
        _this._orthoHeight = 1;
        /**
         * 下面这个值将会影响齐次裁切空间的宽度的范围大小
         * 【-_orthoWidth,_orthoWidth】
         * 非常重要，相当于视口的高和屏幕高的比例
         */
        _this._orthoWidth = 1;
        // priority. the smaller one will be rendered first
        //当场景有多个相机时，决定那个相机先渲染
        _this._priority = 0;
        /**
         * 视口与屏幕的对齐设置
         * 笛卡尔坐标系
         * x:表示视口的x轴方向的起始位置
         * y:表示视口的y轴方向的起始位置
         * w:表示视口的宽度和屏幕的宽度的比值
         * h:表示视口的高度和屏幕的高度的比值
         */
        _this._rect = {
            x: 0, y: 0, w: 1, h: 1
        };
        _this._type = enums_1.default.PROJ_PERSPECTIVE;
        _this.Fovy = fovy;
        _this.Aspect = aspect;
        _this.Near = near;
        _this.Far = far;
        //创建透视矩阵
        _this._projectionMatrix = _this._glMatrix.mat4.create();
        _this._type = type;
        _this._holderMatrix = Matrix_1.glMatrix.mat4.identity(null);
        _this._cameraData = new CameraData_1.CameraData();
        return _this;
    }
    Object.defineProperty(Camera.prototype, "Fovy", {
        /**
         * 弧度
         */
        get: function () {
            return this._fovy;
        },
        /**
         * 弧度
         */
        set: function (fov) {
            if (fov != this._fovy) {
                this._updateFlag = true;
                this._fovy = fov;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Aspect", {
        get: function () {
            return this._aspect;
        },
        set: function (aspect) {
            if (aspect != this._aspect) {
                this._updateFlag = true;
                this._aspect = aspect;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Near", {
        get: function () {
            return this._near;
        },
        set: function (near) {
            if (near != this._near) {
                this._updateFlag = true;
                this._near = near;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Far", {
        get: function () {
            return this._far;
        },
        set: function (far) {
            if (far != this._far) {
                this._updateFlag = true;
                this._far = far;
            }
        },
        enumerable: false,
        configurable: true
    });
    Camera.prototype.setRect = function (x, y, w, h) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (w === void 0) { w = 1; }
        if (h === void 0) { h = 1; }
        this._rect.x = x;
        this._rect.y = y;
        this._rect.w = w;
        this._rect.h = h;
    };
    Object.defineProperty(Camera.prototype, "rect", {
        //获取视口
        get: function () {
            return this._rect;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * 透视矩阵
     */
    Camera.prototype.getProjectionMatrix = function () {
        return this._projectionMatrix;
    };
    /**
     * Get the clearing flags of the camera
     * @returns {number} camera clearing flags
     */
    Camera.prototype.getClearFlags = function () {
        return this._clearFlags;
    };
    /**
     * Set the clearing flags of the camera
     * @param {number} flags camera clearing flags
     */
    Camera.prototype.setClearFlags = function (flags) {
        this._clearFlags = flags;
    };
    /**
     * 更新投影矩阵
     */
    Camera.prototype.updateProjectMatrix = function () {
        if (!this._updateFlag) {
            //不需要更新
            return;
        }
        this._updateFlag = false;
        if (this._type == enums_1.default.PROJ_PERSPECTIVE) {
            this._glMatrix.mat4.perspective(this._projectionMatrix, this._fovy, this._aspect, this._near, this._far);
        }
        else {
            var x = this._orthoWidth;
            var y = this._orthoHeight;
            /**
             * 下面将会构造一个正交投影矩阵
             * 可以把齐次裁切坐标的位置想象成屏幕正中心
             * x的范围是【-x,x】
             * y的范围是【-y,y】
             * 这个将会映射到屏幕坐标系上，而屏幕坐标的范围是【0,1】
             * 这里就会存在映射关系
             * 对于2d，在我们的逻辑中，通常是把物体放在屏幕坐标系下，我们只关心这个屏幕坐标系下的坐标
             * 但其实齐次裁切坐标它的正中心确是视口的中心，并非左下角，所以这里边的映射就需要注意
             * 最后：
             * 1可以提供给用户，就让他去使用屏幕坐标系，只是最后上传渲染数据的时候，我们把它映射到齐次裁切空间下
             * 屏幕--》齐次裁切
             * 【0,1】->【-x,x】
             * 【0,1】->【-y,y】
             * 2渲染完成以后，我们再把它从齐次裁切空间映射到屏幕坐标系
             * 齐次裁切 --》屏幕
             * 【-x,x】->【0,1】
             * 【-y,y】->【0,1】
             */
            this._glMatrix.mat4.ortho(this._projectionMatrix, -x, x, -y, y, this._near, this._far);
        }
    };
    Camera.prototype.translateModelMatrix = function () {
        Matrix_1.glMatrix.mat4.identity(this._holderMatrix);
        //最后平移
        Matrix_1.glMatrix.mat4.translate(this._holderMatrix, this._holderMatrix, [this.x, this.y, this.z]);
        //
        Matrix_1.glMatrix.mat4.multiply(this._localMatrix, this._holderMatrix, this._localMatrix);
    };
    Camera.prototype.visit = function (time) {
        this.updateProjectMatrix();
        _super.prototype.visit.call(this, time);
    };
    /**
     * 此函数务必调用
     * @param eye  相机的位置
     * @param center 相机看向的位置
     * @param up
     * 按照我设定的默认参数，
     * 看向原点，此处的原点指的是屏幕的中心，
     * 相机正着摆放，可以把自己的头当做摄像机
     * eye.z>=0,正面看屏幕的中心
     * eye.z<0,背面看屏幕的中心
     */
    Camera.prototype.lookAt = function (eye, center, up) {
        if (center === void 0) { center = [0, 0, 0]; }
        if (up === void 0) { up = [0, 1, 0]; }
        // //摄像机的位置
        this._glMatrix.mat4.lookAt2(this.modelMatrix, eye, center, up);
    };
    Object.defineProperty(Camera.prototype, "targetTexture", {
        get: function () {
            return this._targetTexture;
        },
        /**
         * !#en
         * Destination render texture.
         * Usually cameras render directly to screen, but for some effects it is useful to make a camera render into a texture.
         * !#zh
         * 摄像机渲染的目标 RenderTexture。
         * 一般摄像机会直接渲染到屏幕上，但是有一些效果可以使用摄像机渲染到 RenderTexture 上再对 RenderTexture 进行处理来实现。
         * @property {RenderTexture} targetTexture
         */
        set: function (targetTexture) {
            this._targetTexture = targetTexture;
            this._updateTargetTexture();
        },
        enumerable: false,
        configurable: true
    });
    Camera.prototype._updateTargetTexture = function () {
        var texture = this._targetTexture;
        this.setFrameBuffer(texture ? texture.frameBuffer : null);
    };
    /**
    * Get the framebuffer of the camera
    * @returns {FrameBuffer} camera framebuffer
    */
    Camera.prototype.getFramebuffer = function () {
        return this._framebuffer;
    };
    /**
     * Set the framebuffer of the camera
     * @param {FrameBuffer} framebuffer camera framebuffer
     */
    Camera.prototype.setFrameBuffer = function (framebuffer) {
        this._framebuffer = framebuffer;
    };
    Camera.prototype.getCameraData = function () {
        this._cameraData.modelMat = this.modelMatrix;
        this._cameraData.projectMat = this._projectionMatrix;
        this._cameraData.position = [this.x, this.y, this.z];
        return this._cameraData;
    };
    return Camera;
}(Node_1.Node));
exports.default = Camera;
},{"../../Matrix":6,"../base/Node":21,"../data/CameraData":45,"./enums":44}],40:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_CameraModel = exports.CameraModel = void 0;
var Device_1 = require("../../Device");
var Graphic_1 = require("../../Graphic/Graphic");
var Matrix_1 = require("../../Matrix");
var UiSetting_1 = require("../../ui/UiSetting");
var MathUtils_1 = require("../../utils/MathUtils");
var Primitives_1 = require("../shader/Primitives");
var ShaderFactory_1 = require("../shader/ShaderFactory");
var baseVertexShader = 'attribute vec4 a_position;' +
    'attribute vec4 a_color;' +
    'uniform mat4 u_worldViewProjection;' +
    'uniform mat4 u_exampleWorldViewProjection;' +
    'varying vec4 v_color;' +
    'varying vec4 v_position;' +
    'void main() {' +
    'gl_Position = u_worldViewProjection * a_position;' +
    'v_position = u_exampleWorldViewProjection * a_position;' +
    'v_position = v_position / v_position.w;' +
    'v_color = a_color;' +
    '}';
var colorFragmentShader = 'precision mediump float;' +
    'varying vec4 v_color;' +
    'varying vec4 v_position;' +
    'uniform vec4 u_color;' +
    'void main() {' +
    'bool blend = (v_position.x < -1.0 || v_position.x > 1.0 ||' +
    'v_position.y < -1.0 || v_position.y > 1.0 ||' +
    'v_position.z < -1.0 || v_position.z > 1.0);' +
    'vec4 blendColor = blend ? vec4(0.35, 0.35, 0.35, 1.0) : vec4(1, 1, 1, 1);' +
    'gl_FragColor = v_color * u_color * blendColor;' +
    '}';
var CameraModel = /** @class */ (function () {
    function CameraModel() {
        this._isInit = false;
        // uniforms.
        this.sharedUniforms = {};
        this._frustumCubeUniforms = {
            u_color: [1, 1, 1, 0.4],
            u_worldViewProjection: new Float32Array(16),
            u_exampleWorldViewProjection: new Float32Array(16),
        };
        this.solidcolorvertexshader = 'attribute vec4 a_position;' +
            'uniform mat4 u_matrix;' +
            'void main() {' +
            'gl_Position = u_matrix * a_position;' +
            '}';
        this.solidcolorfragmentshader = 'precision mediump float;' +
            'uniform vec4 u_color;' +
            'void main() {' +
            'gl_FragColor = u_color;' +
            '}';
        this._sceneCameraPosition = [-70, 10, 10];
        this._isInit = false;
    }
    CameraModel.prototype.init = function (gl) {
        if (this._isInit) {
            return;
        }
        this._isInit = true;
        this.gl = gl;
        this._programInfor = ShaderFactory_1.G_ShaderFactory.createProgramInfo(this.solidcolorvertexshader, this.solidcolorfragmentshader);
        this._frustumCube = ShaderFactory_1.G_ShaderFactory.createProgramInfo(baseVertexShader, colorFragmentShader);
        this._modelBuffer = this.createCameraBufferInfo();
        this._clipSpaceBuffer = this.createClipspaceCubeBufferInfo();
        this._graphic = new Graphic_1.Graphic(this.gl); //绘制线
        this._worldTemp = Matrix_1.glMatrix.mat4.identity(null);
        this._worldTemp1 = Matrix_1.glMatrix.mat4.identity(null);
        this._worldTemp2 = Matrix_1.glMatrix.mat4.identity(null);
        this._loacalInvertProj = Matrix_1.glMatrix.mat4.identity(null);
        this._pvTemp1 = Matrix_1.glMatrix.mat4.identity(null);
        this._viewMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._sceneCameraMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._sceneCameraProjectMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._originPos = [0, 0, 0];
        var faceColors = [
            [1, 0, 0, 1,],
            [0, 1, 0, 1,],
            [1, 1, 0, 1,],
            [0, 0, 1, 1,],
            [1, 0, 1, 1,],
            [0, 1, 1, 1,],
        ];
        var colorVerts = [];
        for (var f = 0; f < 6; ++f) {
            for (var v = 0; v < 4; ++v) {
                colorVerts.push.apply(colorVerts, faceColors[f]);
            }
        }
        var cubeArrays = Primitives_1.syPrimitives.createCubeVertices(2);
        delete cubeArrays.normal;
        delete cubeArrays.texcoord;
        cubeArrays.color = colorVerts;
        this._cubeBufferInfo = ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(cubeArrays);
        //场景摄像机
        this.setSceneCamera();
        //UI
        UiSetting_1.G_UISetting.render();
    };
    CameraModel.prototype.createClipspaceCubeBufferInfo = function () {
        // first let's add a cube. It goes from 1 to 3
        // because cameras look down -Z so we want
        // the camera to start at Z = 0. We'll put a
        // a cone in front of this cube opening
        // toward -Z
        var positions = [
            -1, -1, -1,
            1, -1, -1,
            -1, 1, -1,
            1, 1, -1,
            -1, -1, 1,
            1, -1, 1,
            -1, 1, 1,
            1, 1, 1,
            0, 0, -1,
            0, 0, 1 //前节点 9
        ];
        var indices = [
            0, 1, 1, 3, 3, 2, 2, 0,
            4, 5, 5, 7, 7, 6, 6, 4,
            0, 4, 1, 5, 3, 7, 2, 6,
            8, 9, 9, 8
        ];
        return ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays({
            position: positions,
            indices: indices,
        });
    };
    // create geometry for a camera
    CameraModel.prototype.createCameraBufferInfo = function (scale) {
        if (scale === void 0) { scale = 1; }
        // first let's add a cube. It goes from 1 to 3
        // because cameras look down -Z so we want
        // the camera to start at Z = 0.
        // We'll put a cone in front of this cube opening
        // toward -Z
        var positions = [
            -1, -1, 1,
            1, -1, 1,
            -1, 1, 1,
            1, 1, 1,
            -1, -1, 3,
            1, -1, 3,
            -1, 1, 3,
            1, 1, 3,
            0, 0, 1,
        ];
        var indices = [
            0, 1, 1, 3, 3, 2, 2, 0,
            4, 5, 5, 7, 7, 6, 6, 4,
            0, 4, 1, 5, 3, 7, 2, 6,
        ];
        // add cone segments
        var numSegments = 6;
        var coneBaseIndex = positions.length / 3;
        var coneTipIndex = coneBaseIndex - 1;
        for (var i = 0; i < numSegments; ++i) {
            var u = i / numSegments;
            var angle = u * Math.PI * 2;
            var x = Math.cos(angle);
            var y = Math.sin(angle);
            positions.push(x, y, 0);
            // line from tip to edge
            indices.push(coneTipIndex, coneBaseIndex + i);
            // line from point on edge to next point on edge
            indices.push(coneBaseIndex + i, coneBaseIndex + (i + 1) % numSegments);
        }
        positions.forEach(function (v, ndx) {
            positions[ndx] *= scale;
        });
        return ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays({
            position: positions,
            indices: indices,
        });
    };
    /**
    * 这个函数的目的就是用一个相机去看目标相机
    * 目标相机有两个东西要绘制 一个是相机模型 一个是齐次裁切空间
    * @param targetProjMatrix 目标摄像机的投影矩阵
    * @param targetCameraMatrix 目标摄像机的相机矩阵
    */
    CameraModel.prototype.draw = function (targetProjMatrix, targetCameraMatrix) {
        this.init(Device_1.default.Instance.gl);
        /**
         * 本地相机的投影矩阵和节点矩阵
         */
        var projMatrix = this._sceneCameraProjectMatrix;
        var cameraMatrix = this._sceneCameraMatrix;
        var gl = this.gl;
        // draw object to represent first camera
        // Make a view matrix from the camera matrix.
        Matrix_1.glMatrix.mat4.invert(this._viewMatrix, cameraMatrix);
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp1, projMatrix, this._viewMatrix); //投影矩阵X视口矩阵
        // use the first's camera's matrix as the matrix to position
        // the camera's representative in the scene
        //可以这么理解，第一台摄像机上的点乘以它得相机矩阵，可以将位置转换到世界坐标系下
        //通过世界坐标系这个枢纽，再将点转换到其他的视口坐标系下，进行投影
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp1, this._worldTemp1, targetCameraMatrix); //投影矩阵xs视口矩阵x第一个摄像机的相机矩阵
        gl.useProgram(this._programInfor.spGlID);
        // ------ Draw the Camera Representation --------绘制相机模型
        // Setup all the needed attributes.
        ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(this._programInfor.attrSetters, this._modelBuffer);
        // Set the uniforms
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, {
            u_matrix: this._worldTemp1,
            u_color: [1, 0, 0, 1],
        });
        ShaderFactory_1.G_ShaderFactory.drawBufferInfo(this._modelBuffer, gl.LINES);
        // ----- Draw the frustum ------- 绘制齐次裁切空间坐标系
        //一个正方体乘以这个矩阵的逆矩阵可以变成一个棱台
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp1, this._worldTemp1, Matrix_1.glMatrix.mat4.invert(null, targetProjMatrix));
        // Setup all the needed attributes.
        ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(this._programInfor.attrSetters, this._clipSpaceBuffer);
        // Set the uniforms
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, {
            u_matrix: this._worldTemp1,
            u_color: [0, 1, 0, 1],
        });
        ShaderFactory_1.G_ShaderFactory.drawBufferInfo(this._clipSpaceBuffer, gl.LINES);
        //原点
        Matrix_1.glMatrix.mat4.identity(this._worldTemp2);
        //转换到相机坐标系下
        //你可以理解为相机中的点乘以相机坐标系可以转换到世界坐标系
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp2, this._worldTemp2, targetCameraMatrix); //投影矩阵xs视口矩阵x第一个摄像机的相机矩阵
        //绘制相机的节点坐标系
        this._graphic.drawLine(projMatrix, cameraMatrix, this._worldTemp2);
        //绘制世界坐标系
        this._graphic.drawLine(projMatrix, cameraMatrix);
        this._graphic.drawPoint(projMatrix, cameraMatrix, this._worldTemp2);
        this._graphic.drawPoint(projMatrix, cameraMatrix);
        //绘制棱台
        // this.drawFrustumCube(projMatrix, cameraMatrix, targetProjMatrix, targetCameraMatrix);
    };
    // Draw Frustum Cube behind
    CameraModel.prototype.drawFrustumCube = function (projMatrix, cameraMatrix, targetProjMatrix, targetCameraMatrix) {
        //绘制齐次裁切空间 六个面
        Matrix_1.glMatrix.mat4.invert(this._viewMatrix, cameraMatrix);
        Matrix_1.glMatrix.mat4.multiply(this._pvTemp1, projMatrix, this._viewMatrix);
        Matrix_1.glMatrix.mat4.multiply(this._pvTemp1, this._pvTemp1, targetCameraMatrix);
        Matrix_1.glMatrix.mat4.invert(this._loacalInvertProj, targetProjMatrix);
        var gl = this.gl;
        Device_1.default.Instance.cullFace(false);
        gl.useProgram(this._frustumCube.spGlID);
        ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(this._frustumCube.attrSetters, this._cubeBufferInfo);
        Matrix_1.glMatrix.mat4.translation(this._worldTemp, this._originPos[0], this._originPos[1], this._originPos[2]);
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp, this._loacalInvertProj, this._worldTemp);
        Matrix_1.glMatrix.mat4.multiply(this._frustumCubeUniforms.u_worldViewProjection, this._pvTemp1, this._worldTemp); //pvm
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._frustumCube.uniSetters, this.sharedUniforms);
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._frustumCube.uniSetters, this._frustumCubeUniforms);
        ShaderFactory_1.G_ShaderFactory.drawBufferInfo(this._cubeBufferInfo);
        Device_1.default.Instance.closeCullFace();
    };
    CameraModel.prototype.setSceneCameraPosition = function (pos) {
        this._sceneCameraPosition = pos;
        this.setSceneCamera();
    };
    CameraModel.prototype.setSceneCamera = function () {
        var gl = this.gl;
        var effectiveWidth = gl.canvas.width / 2;
        var aspect = effectiveWidth / gl.canvas.height;
        var near = 1;
        var far = 2000;
        Matrix_1.glMatrix.mat4.perspective(this._sceneCameraProjectMatrix, MathUtils_1.MathUtils.degToRad(60), aspect, near, far);
        // Compute the camera's matrix using look at.
        var cameraPosition2 = this._sceneCameraPosition;
        var target2 = [0, 0, 0];
        var up2 = [0, 1, 0];
        Matrix_1.glMatrix.mat4.lookAt2(this._sceneCameraMatrix, cameraPosition2, target2, up2);
    };
    CameraModel.prototype.getSceneCameraMatrix = function () {
        return this._sceneCameraMatrix;
    };
    CameraModel.prototype.getSceneProjectMatrix = function () {
        return this._sceneCameraProjectMatrix;
    };
    return CameraModel;
}());
exports.CameraModel = CameraModel;
exports.G_CameraModel = new CameraModel();
},{"../../Device":3,"../../Graphic/Graphic":4,"../../Matrix":6,"../../ui/UiSetting":61,"../../utils/MathUtils":62,"../shader/Primitives":55,"../shader/ShaderFactory":59}],41:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Device_1 = require("../../Device");
var UiSetting_1 = require("../../ui/UiSetting");
var enums_1 = require("./enums");
var OrthoCamera_1 = require("./OrthoCamera");
var PerspectiveCamera_1 = require("./PerspectiveCamera");
/**
 * 游戏主相机
 */
var GameMainCamera = /** @class */ (function () {
    function GameMainCamera() {
    }
    Object.defineProperty(GameMainCamera, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new GameMainCamera();
                this._instance.init();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    GameMainCamera.prototype.init = function () {
        this.gl = Device_1.default.Instance.gl;
        //初始化2D相机
        this._2dCamera = new OrthoCamera_1.default(this.gl.canvas.width / this.gl.canvas.height, 60, 0.1, 1000);
        // this._2dCamera.lookAt([0, 0, 0]);
        //初始化3D相机
        this._3dCamera = new PerspectiveCamera_1.default(this.gl.canvas.width / this.gl.canvas.height, 60, 0.1, 50);
        UiSetting_1.G_UISetting.pushRenderCallBack(this.renderCallBack.bind(this));
    };
    GameMainCamera.prototype.updateCameraData = function (type, aspect, angle, near, far) {
        if (angle === void 0) { angle = 60; }
        if (near === void 0) { near = 0.1; }
        if (far === void 0) { far = 50; }
        this._cameraType = type;
        if (type == enums_1.default.PROJ_PERSPECTIVE) {
            this._3dCamera.Fovy = angle * Math.PI / 180;
            this._3dCamera.Aspect = aspect;
            this._3dCamera.Near = near;
            this._3dCamera.Far = far;
            return this._3dCamera;
        }
        else if (type == enums_1.default.PROJ_ORTHO) {
            this._2dCamera.Fovy = angle * Math.PI / 180;
            this._2dCamera.Aspect = aspect;
            this._2dCamera.Near = near;
            this._2dCamera.Far = far;
            return this._2dCamera;
        }
    };
    GameMainCamera.prototype.getCamera = function (type) {
        return type == enums_1.default.PROJ_PERSPECTIVE ? this._3dCamera : this._2dCamera;
    };
    GameMainCamera.prototype.get3DCamera = function () {
        return this._3dCamera;
    };
    GameMainCamera.prototype.get2DCamera = function () {
        return this._2dCamera;
    };
    GameMainCamera.prototype.renderCallBack = function (settings) {
        var gl = Device_1.default.Instance.gl;
        this.updateCameraData(enums_1.default.PROJ_PERSPECTIVE, gl.canvas.width / gl.canvas.height, settings.cam3DFieldOfView, settings.cam3DNear, settings.cam3DFar);
        this._3dCamera.setPosition(settings.cam3DPosX, settings.cam3DPosY, settings.cam3DPosZ);
        this._3dCamera.setRotation(settings.cam3DRotX, settings.cam3DRotY, settings.cam3DRotZ);
        this._2dCamera.setPosition(settings.cam2DPosX, settings.cam2DPosY, settings.cam2DPosZ);
        this._2dCamera.setRotation(settings.cam2DRotX, settings.cam2DRotY, settings.cam2DRotZ);
    };
    return GameMainCamera;
}());
exports.default = GameMainCamera;
},{"../../Device":3,"../../ui/UiSetting":61,"./OrthoCamera":42,"./PerspectiveCamera":43,"./enums":44}],42:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Camera_1 = require("./Camera");
var enums_1 = require("./enums");
var OrthoCamera = /** @class */ (function (_super) {
    __extends(OrthoCamera, _super);
    function OrthoCamera(fovy, aspect, near, far) {
        return _super.call(this, fovy, aspect, near, far, enums_1.default.PROJ_ORTHO) || this;
    }
    return OrthoCamera;
}(Camera_1.default));
exports.default = OrthoCamera;
},{"./Camera":39,"./enums":44}],43:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Camera_1 = require("./Camera");
var enums_1 = require("./enums");
var PerspectiveCamera = /** @class */ (function (_super) {
    __extends(PerspectiveCamera, _super);
    function PerspectiveCamera(fovy, aspect, near, far) {
        var _this = _super.call(this, fovy, aspect, near, far, enums_1.default.PROJ_PERSPECTIVE) || this;
        _this.test();
        return _this;
    }
    PerspectiveCamera.prototype.test = function () {
        this.setRect(0, 0, 1, 1);
    };
    /**
     * @param time in seconds
     */
    PerspectiveCamera.prototype.updateLookAt = function (time) {
        // convert to seconds
        time *= 0.001;
        // camera going in circle 2 units from origin looking at origin
        var m4 = this._glMatrix.mat4;
        var cameraPosition = [Math.cos(time * 0.1), 0, Math.sin(time * 0.1)];
        var target = [0, 0, 0];
        var up = [0, 1, 0];
        // Compute the camera's matrix using look at.
        var cameraMatrix = m4.create();
        m4.lookAt(cameraMatrix, cameraPosition, target, up);
        // Make a view matrix from the camera matrix.
        var viewMatrix = m4.create();
        m4.invert(viewMatrix, cameraMatrix);
        // We only care about direciton so remove the translation
        viewMatrix[12] = 0;
        viewMatrix[13] = 0;
        viewMatrix[14] = 0;
        var viewDirectionProjectionMatrix = m4.create();
        m4.multiply(viewDirectionProjectionMatrix, this._projectionMatrix, viewMatrix);
        var viewDirectionProjectionInverseMatrix = m4.create();
        m4.invert(viewDirectionProjectionInverseMatrix, viewDirectionProjectionMatrix);
        return viewDirectionProjectionInverseMatrix;
    };
    return PerspectiveCamera;
}(Camera_1.default));
exports.default = PerspectiveCamera;
},{"./Camera":39,"./enums":44}],44:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    // projection
    PROJ_PERSPECTIVE: 0,
    PROJ_ORTHO: 1,
    // lights
    LIGHT_DIRECTIONAL: 0,
    LIGHT_POINT: 1,
    LIGHT_SPOT: 2,
    LIGHT_AMBIENT: 3,
    // shadows
    SHADOW_NONE: 0,
    SHADOW_HARD: 1,
    SHADOW_SOFT: 2,
    // parameter type
    // PARAM_INT:             typeMap.int,
    // PARAM_INT2:            typeMap.ivec2,
    // PARAM_INT3:            typeMap.ivec3,
    // PARAM_INT4:            typeMap.ivec4,
    // PARAM_FLOAT:           typeMap.float,
    // PARAM_FLOAT2:          typeMap.vec2,
    // PARAM_FLOAT3:          typeMap.vec3,
    // PARAM_FLOAT4:          typeMap.vec4,
    // PARAM_MAT2:            typeMap.mat2,
    // PARAM_MAT3:            typeMap.mat3,
    // PARAM_MAT4:            typeMap.mat4,
    // PARAM_TEXTURE_2D:      typeMap.sampler2D,
    // PARAM_TEXTURE_CUBE:    typeMap.samplerCube,
    // clear flags
    CLEAR_COLOR: 1,
    CLEAR_DEPTH: 2,
    CLEAR_STENCIL: 4,
    CLEAR_SKYBOX: 8,
    //
    BUFFER_VIEW_INT8: 0,
    BUFFER_VIEW_UINT8: 1,
    BUFFER_VIEW_INT16: 2,
    BUFFER_VIEW_UINT16: 3,
    BUFFER_VIEW_INT32: 4,
    BUFFER_VIEW_UINT32: 5,
    BUFFER_VIEW_FLOAT32: 6,
};
},{}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraData = void 0;
var Matrix_1 = require("../../Matrix");
/**
 * 相机数据
 */
var CameraData = /** @class */ (function () {
    function CameraData() {
        this._viewProjectionMat = Matrix_1.glMatrix.mat4.identity(null);
        this._viewMat = Matrix_1.glMatrix.mat4.identity(null);
        this.reset();
    }
    CameraData.prototype.reset = function () {
        this.position = [];
        this.projectMat = null;
        this.modelMat = null;
        this._isNeedUpdate = false;
    };
    Object.defineProperty(CameraData.prototype, "projectMat", {
        get: function () {
            return this._projectMat;
        },
        set: function (proj) {
            this._projectMat = proj;
            this._isNeedUpdate = true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CameraData.prototype, "modelMat", {
        get: function () {
            return this._modelMat;
        },
        set: function (model) {
            this._modelMat = model;
            this._isNeedUpdate = true;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * 更新高铁站
     */
    CameraData.prototype.updateMat = function () {
        if (this._isNeedUpdate) {
            Matrix_1.glMatrix.mat4.invert(this._viewMat, this._modelMat);
            Matrix_1.glMatrix.mat4.multiply(this._viewProjectionMat, this._projectMat, this._viewMat);
            this._isNeedUpdate = false;
        }
    };
    Object.defineProperty(CameraData.prototype, "viewProjectionMat", {
        /**
         * 视图投影矩阵
         */
        get: function () {
            this.updateMat();
            return this._viewProjectionMat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CameraData.prototype, "viewMat", {
        /**
         * 视图矩阵
         */
        get: function () {
            this.updateMat();
            return this._viewMat;
        },
        enumerable: false,
        configurable: true
    });
    return CameraData;
}());
exports.CameraData = CameraData;
},{"../../Matrix":6}],46:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubeData = exports.CubeFaceData = exports.CubeFace = void 0;
//立方体的面
var CubeFace;
(function (CubeFace) {
    CubeFace[CubeFace["FRONT"] = 0] = "FRONT";
    CubeFace[CubeFace["BACK"] = 1] = "BACK";
    CubeFace[CubeFace["LEFT"] = 2] = "LEFT";
    CubeFace[CubeFace["RIGHT"] = 3] = "RIGHT";
    CubeFace[CubeFace["UP"] = 4] = "UP";
    CubeFace[CubeFace["DOWN"] = 5] = "DOWN";
})(CubeFace = exports.CubeFace || (exports.CubeFace = {}));
//立方体的面的数据
var CubeFaceData = /** @class */ (function () {
    function CubeFaceData(face, vArr, uvArr, indexArr, normals) {
        this.face = CubeFace.FRONT;
        this.normals = [];
        this.uv = [];
        this.vertex = [];
        this.indexs = [];
        this.vertex_item_size = 0;
        this.vertex_item_nums = 4;
        this.normal_item_size = 0;
        this.normal_item_nums = 4;
        this.uv_item_size = 0;
        this.uv_item_nums = 4;
        this.indexs_item_size = 0;
        this.indexs_item_nums = 1;
        this.face = face;
        this.vertex = vArr;
        this.vertex_item_size = vArr.length / this.vertex_item_nums;
        this.uv = uvArr;
        this.uv_item_size = uvArr.length / this.uv_item_nums;
        this.indexs = indexArr;
        this.indexs_item_size = indexArr.length / this.indexs_item_nums;
        this.normals = normals;
        this.normal_item_size = normals.length / this.normal_item_nums;
    }
    Object.defineProperty(CubeFaceData.prototype, "Face", {
        get: function () {
            return this.face;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CubeFaceData.prototype, "Vertex", {
        //默认情况 一个面有四个点
        get: function () {
            return this.vertex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CubeFaceData.prototype, "UV", {
        get: function () {
            return this.uv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CubeFaceData.prototype, "Indexs", {
        get: function () {
            return this.indexs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CubeFaceData.prototype, "Normals", {
        get: function () {
            return this.normals;
        },
        enumerable: false,
        configurable: true
    });
    return CubeFaceData;
}());
exports.CubeFaceData = CubeFaceData;
/**
 -1, -1, -1,     //左下后
-1, -1, 1,      //左下前      //左面下后三角形
-1, 1, -1,      //左上后
                    //左面是个矩形 面朝左右 斜角切开
-1, -1, 1,      //左下前
-1, 1, 1,       //左上前      //左面上前三角形
-1, 1, -1,      //左上后

1, -1, -1,      //右下后
1, 1, -1,       //右上后      //右面下后三角形
1, -1, 1,       //右下前
                    //右面是个矩形 面朝左右 斜角切开
1, -1, 1,       //右下前
1, 1, -1,       //右上后      //右面上前三角形
1, 1, 1,        //右上前
 */
var CubeData = /** @class */ (function () {
    function CubeData() {
    }
    CubeData.getFaceData = function (face) {
        var cFData = function (key) {
            return new CubeFaceData(face, CubeData.verPos.slice(3 * 4 * key, 3 * 4 * (key + 1)), CubeData.texUV.slice(2 * 4 * key, 2 * 4 * (key + 1)), CubeData.verIndex.slice(1 * 6 * key, 1 * 6 * (key + 1)), CubeData.normals.slice(3 * 4 * key, 3 * 4 * (key + 1)));
        };
        switch (face) {
            case CubeFace.FRONT:
                return cFData(CubeFace.FRONT);
            case CubeFace.BACK:
                return cFData(CubeFace.BACK);
            case CubeFace.LEFT:
                return cFData(CubeFace.LEFT);
            case CubeFace.RIGHT:
                return cFData(CubeFace.RIGHT);
            case CubeFace.UP:
                return cFData(CubeFace.UP);
            case CubeFace.DOWN:
                return cFData(CubeFace.DOWN);
        }
    };
    CubeData.getData = function () {
        var faceFrontData = CubeData.getFaceData(CubeFace.FRONT);
        var faceBackData = CubeData.getFaceData(CubeFace.BACK);
        var faceLeftData = CubeData.getFaceData(CubeFace.LEFT);
        var faceRightData = CubeData.getFaceData(CubeFace.RIGHT);
        var faceUpData = CubeData.getFaceData(CubeFace.UP);
        var faceDownData = CubeData.getFaceData(CubeFace.DOWN);
        var concatData = function (key) {
            return [].concat(faceFrontData[key], faceBackData[key], faceLeftData[key], faceRightData[key], faceUpData[key], faceDownData[key]);
        };
        var vertex = concatData("Vertex");
        var uvData = concatData("UV");
        var indexs = concatData("Indexs");
        var normals = concatData("Normals");
        return {
            vertex: vertex,
            uvData: uvData,
            indexs: indexs,
            normals: normals,
            dF: faceFrontData
        };
    };
    CubeData.getData2 = function () {
        var faceFrontData = CubeData.getFaceData(CubeFace.FRONT);
        var faceBackData = CubeData.getFaceData(CubeFace.BACK);
        var faceLeftData = CubeData.getFaceData(CubeFace.LEFT);
        var faceRightData = CubeData.getFaceData(CubeFace.RIGHT);
        var faceUpData = CubeData.getFaceData(CubeFace.UP);
        var faceDownData = CubeData.getFaceData(CubeFace.DOWN);
        var concatData = function (key) {
            return [].concat(faceRightData[key], faceLeftData[key], faceUpData[key], faceDownData[key], faceBackData[key], faceFrontData[key]);
        };
        var vertex = concatData("Vertex");
        var uvData = concatData("UV");
        var indexs = concatData("Indexs");
        var normals = concatData("Normals");
        return {
            vertex: vertex,
            uvData: uvData,
            indexs: indexs,
            normals: normals,
            dF: faceFrontData
        };
    };
    // 顶点数据
    CubeData.verPos = [
        // Front face
        1.0, 1.0, 1.0,
        -1.0, 1.0, 1.0,
        -1.0, -1.0, 1.0,
        1.0, -1.0, 1.0,
        // Back face
        1.0, 1.0, -1.0,
        -1.0, 1.0, -1.0,
        -1.0, -1.0, -1.0,
        1.0, -1.0, -1.0,
        // Left face
        -1.0, 1.0, 1.0,
        -1.0, 1.0, -1.0,
        -1.0, -1.0, -1.0,
        -1.0, -1.0, 1.0,
        // Right face
        1.0, 1.0, 1.0,
        1.0, -1.0, 1.0,
        1.0, -1.0, -1.0,
        1.0, 1.0, -1.0,
        // Top face
        1.0, 1.0, 1.0,
        1.0, 1.0, -1.0,
        -1.0, 1.0, -1.0,
        -1.0, 1.0, 1.0,
        // Bottom face
        1.0, -1.0, 1.0,
        1.0, -1.0, -1.0,
        -1.0, -1.0, -1.0,
        -1.0, -1.0, 1.0,
    ];
    // uv 数据
    CubeData.texUV = [
        //Front face
        0.0, 0.0,
        1.0, 0.0,
        1.0, 1.0,
        0.0, 1.0,
        // Back face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
        // Left face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
        // Right face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
        // Top face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
        // Bottom face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
    ];
    // 索引数据
    CubeData.verIndex = [
        0, 1, 2, 0, 3, 2,
        4, 5, 6, 4, 7, 6,
        8, 9, 10, 8, 11, 10,
        12, 13, 14, 12, 15, 14,
        16, 17, 18, 16, 19, 18,
        20, 21, 22, 20, 23, 22,
    ];
    CubeData.normals = [
        // front face
        0, 0, 1,
        0, 0, 1,
        0, 0, 1,
        0, 0, 1,
        // back face
        0, 0, -1,
        0, 0, -1,
        0, 0, -1,
        0, 0, -1,
        // left face
        -1, 0, 0,
        -1, 0, 0,
        -1, 0, 0,
        -1, 0, 0,
        // right face
        1, 0, 0,
        1, 0, 0,
        1, 0, 0,
        1, 0, 0,
        // top face
        0, 1, 0,
        0, 1, 0,
        0, 1, 0,
        0, 1, 0,
        // bottom face
        0, -1, 0,
        0, -1, 0,
        0, -1, 0,
        0, -1, 0
    ];
    return CubeData;
}());
exports.CubeData = CubeData;
},{}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Texture_1 = require("../base/texture/Texture");
var GLEnums_1 = require("../gfx/GLEnums");
var CustomTextureData = /** @class */ (function () {
    function CustomTextureData() {
    }
    CustomTextureData.getRandomData = function (width, height, format) {
        var chanels = GLEnums_1.glTextureTotalChanels(format);
        var urlData = new Texture_1.TextureOpts();
        urlData.level = 0;
        urlData.width = width;
        urlData.height = height;
        urlData.configFormat = format;
        var getRandomColor = function () {
            var ret = [];
            for (var i_1 = 1; i_1 <= chanels; i_1++) {
                ret.push(Math.random() * 256);
            }
            return ret;
        };
        var retData = [];
        for (var j = 1; j <= height; j++) {
            var curColor = getRandomColor();
            for (var i = 1; i <= width; i++) {
                retData = [].concat(retData, curColor);
            }
        }
        urlData.data = new Uint8Array(retData);
        return urlData;
    };
    /**
     * 自定义棋盘纹理
     * @param width
     * @param height
     */
    CustomTextureData.getBoardData = function (width, height) {
        var cformat = 10 /* L8 */;
        var urlData = new Texture_1.TextureOpts();
        urlData.configFormat = cformat;
        urlData.width = width;
        urlData.height = height;
        urlData.magFilter = GLEnums_1.gltex_filter.NEAREST;
        urlData.minFilter = GLEnums_1.gltex_filter.NEAREST_MIPMAP_NEAREST;
        urlData.genMipmaps = true;
        urlData.data = new Uint8Array([
            0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC,
            0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF,
            0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC,
            0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF,
            0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC,
            0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF,
            0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC,
            0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF, 0xCC, 0xFF,
        ]);
        return urlData;
    };
    return CustomTextureData;
}());
exports.default = CustomTextureData;
},{"../base/texture/Texture":35,"../gfx/GLEnums":50}],48:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightData = void 0;
/**
 * 光照数据
 */
var LightData = /** @class */ (function () {
    function LightData() {
        this._posX = 0;
        this._posY = 0;
        this._posZ = 0;
        this._dirX = 0;
        this._dirY = 0;
        this._dirZ = 0;
        this._colR = 0;
        this._colG = 0;
        this._colB = 0;
        this._colA = 1.0; //透明通道
        this._targetX = 3.5; //看向哪里
        this._targetY = 0; //看向哪里
        this._targetZ = 3.5; //看向哪里
        this._fieldOfView = 120; //光张开的视角
        this._bias = 0.005;
        this._projWidth = 10;
        this._projHeight = 10;
        this._perspective = false; //是否为透视
        this.reset();
    }
    LightData.prototype.reset = function () {
        this.position = [0, 0, 0];
        this.direction = [8, 5, -10];
        this.color = [0.1, 0.1, 0.1, 1.0];
        this._specularShininess = 140;
        this._specularColor = [1, 0.2, 0.2, 1.0];
    };
    LightData.prototype.setData = function (pos, dir, color) {
        this.position = pos;
        this.direction = dir;
        this.color = color;
    };
    Object.defineProperty(LightData.prototype, "perspective", {
        get: function () {
            return this._perspective;
        },
        set: function (p) {
            this._perspective = p;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LightData.prototype, "projWidth", {
        get: function () { return this._projWidth; },
        set: function (p) { this._projWidth = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "projHeight", {
        get: function () { return this._projHeight; },
        set: function (p) { this._projHeight = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "bias", {
        get: function () { return this._bias; },
        set: function (p) { this._bias = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "fieldOfView", {
        get: function () { return this._fieldOfView; },
        set: function (p) { this._fieldOfView = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "targetX", {
        get: function () { return this._targetX; },
        set: function (p) { this._targetX = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "targetY", {
        get: function () { return this._targetY; },
        set: function (p) { this._targetY = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "targetZ", {
        get: function () { return this._targetZ; },
        set: function (p) { this._targetZ = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "posX", {
        get: function () { return this._posX; },
        set: function (p) { this._posX = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "posY", {
        get: function () { return this._posY; },
        set: function (p) { this._posY = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "posZ", {
        get: function () { return this._posZ; },
        set: function (p) { this._posZ = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "dirX", {
        get: function () { return this._dirX; },
        set: function (p) { this._dirX = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "dirY", {
        get: function () { return this._dirY; },
        set: function (p) { this._dirY = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "dirZ", {
        get: function () { return this._dirZ; },
        set: function (p) { this._dirZ = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "colR", {
        get: function () { return this._colR; },
        set: function (p) { this._colR = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "colG", {
        get: function () { return this._colG; },
        set: function (p) { this._colG = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "colB", {
        get: function () { return this._colB; },
        set: function (p) { this._colB = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "colA", {
        get: function () { return this._colA; },
        set: function (p) { this._colA = p; },
        enumerable: false,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(LightData.prototype, "targetPosition", {
        /**
         * 光看向的位置
         */
        get: function () {
            return [this._targetX, this._targetY, this._targetZ];
        },
        set: function (p) {
            this.targetX = p[0] ? p[0] : this._targetX;
            this.targetY = p[1] ? p[1] : this._targetY;
            this.targetZ = p[2] ? p[2] : this._targetZ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LightData.prototype, "position", {
        get: function () {
            return [this._posX, this._posY, this._posZ];
        },
        set: function (p) {
            this.posX = p[0] ? p[0] : this._posX;
            this.posY = p[1] ? p[1] : this._posY;
            this.posZ = p[2] ? p[2] : this._posZ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LightData.prototype, "direction", {
        get: function () {
            return [this._dirX, this._dirX, this._dirZ];
        },
        set: function (p) {
            this.dirX = p[0] ? p[0] : this._dirX;
            this.dirY = p[1] ? p[1] : this._dirY;
            this.dirZ = p[2] ? p[2] : this._dirZ;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LightData.prototype, "color", {
        get: function () {
            return [this._colR, this._colG, this._colB, this._colA];
        },
        set: function (p) {
            this.colR = p[0] ? p[0] : this._colR;
            this.colG = p[1] ? p[1] : this._colG;
            this.colB = p[2] ? p[2] : this._colB;
            this.colA = p[3] ? p[3] : this._colA;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LightData.prototype, "specularColor", {
        get: function () {
            return this._specularColor;
        },
        set: function (p) {
            this._specularColor = p;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LightData.prototype, "specularShininess", {
        get: function () {
            return this._specularShininess;
        },
        enumerable: false,
        configurable: true
    });
    return LightData;
}());
exports.LightData = LightData;
},{}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderDataPool = exports.SpineRenderData = exports.NormalRenderData = exports.RenderData = exports.RenderDataType = void 0;
var Matrix_1 = require("../../Matrix");
var ShaderUseVariantType_1 = require("../shader/ShaderUseVariantType");
var renderDataId = 0;
var RenderDataType;
(function (RenderDataType) {
    RenderDataType[RenderDataType["Base"] = 1] = "Base";
    RenderDataType[RenderDataType["Normal"] = 2] = "Normal";
    RenderDataType[RenderDataType["Spine"] = 3] = "Spine";
})(RenderDataType = exports.RenderDataType || (exports.RenderDataType = {}));
/**
 * 定义渲染数据
 */
var RenderData = /** @class */ (function () {
    function RenderData() {
        this._isOffline = false; //是否是离线渲染
        this._isDrawInstanced = false; //是否是实例化绘制
        this._drawInstancedNums = 0; //实例的数目
        this._drawInstancedVertNums = 0; //每个实例的顶点数目
        this._isUse = false; //使用状态
        this.id = renderDataId++;
        this._type = RenderDataType.Base;
        this._temp_model_view_matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp_model_inverse_matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp_model_inverse_transform_matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp_model_transform_matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp001_matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp002_matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp003_matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp004_matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._isOffline = false;
        this.reset();
    }
    RenderData.prototype.reset = function () {
        this._cameraType = 0; //默认情况下是透视投影
        this._cameraPosition = [];
        this._shader = null;
        this._vertGLID = null;
        this._vertItemSize = -1;
        this._indexGLID = null;
        this._indexItemSize = -1;
        this._uvGLID = null;
        this._uvItemSize = -1;
        this._normalGLID = null;
        this._normalItemSize = -1;
        this._lightColor = [];
        this._lightDirection = [];
        this._lightPosition = [];
        this._texture2DGLIDArray = [];
        this._textureCubeGLIDArray = [];
        this._nodeCustomMatrix = null;
        this._modelMatrix = null;
        this._time = 0;
        this._glPrimitiveType = 6 /* TRIANGLE_FAN */;
        this._isUse = false;
    };
    RenderData.prototype.push2DTexture = function (texture) {
        if (this._texture2DGLIDArray.indexOf(texture) < 0) {
            this._texture2DGLIDArray.push(texture);
        }
    };
    RenderData.prototype.pushCubeTexture = function (texture) {
        if (this._textureCubeGLIDArray.indexOf(texture) < 0) {
            this._textureCubeGLIDArray.push(texture);
        }
    };
    /**
     * 设置矩阵
     * @param view
     * @param proj
     */
    RenderData.prototype.updateShaderVariant = function (view, proj, _shader) {
        var _this = this;
        var useVariantType = _shader.useVariantType;
        useVariantType.forEach(function (value) {
            switch (value) {
                case ShaderUseVariantType_1.ShaderUseVariantType.Vertex:
                    _shader.setUseVertexAttribPointerForVertex(_this._vertGLID, _this._vertItemSize);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.Normal:
                    _shader.setUseVertexAttriPointerForNormal(_this._normalGLID, _this._normalItemSize);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.UVs:
                    _shader.setUseVertexAttribPointerForUV(_this._uvGLID, _this._uvItemSize);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD:
                    _shader.setUseTexture(_this._texture2DGLIDArray[0], 0);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD1:
                    _shader.setUseTexture(_this._texture2DGLIDArray[1], 1);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD2:
                    _shader.setUseTexture(_this._texture2DGLIDArray[2], 2);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD3:
                    _shader.setUseTexture(_this._texture2DGLIDArray[3], 3);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD4:
                    _shader.setUseTexture(_this._texture2DGLIDArray[4], 4);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD5:
                    _shader.setUseTexture(_this._texture2DGLIDArray[5], 5);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD6:
                    _shader.setUseTexture(_this._texture2DGLIDArray[6], 6);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD7:
                    _shader.setUseTexture(_this._texture2DGLIDArray[7], 7);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.TEX_COORD8:
                    _shader.setUseTexture(_this._texture2DGLIDArray[8], 8);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.CUBE_COORD:
                    //立方体纹理数据
                    //-****-------------
                    _shader.setUseCubeTexture(_this._textureCubeGLIDArray[0]);
                    break;
                //天空盒
                case ShaderUseVariantType_1.ShaderUseVariantType.SKYBOX:
                    _shader.setUseSkyBox(_this._textureCubeGLIDArray[0]);
                    Matrix_1.glMatrix.mat4.copy(_this._temp001_matrix, view);
                    _this._temp001_matrix[12] = 0;
                    _this._temp001_matrix[13] = 0;
                    _this._temp001_matrix[14] = 0;
                    Matrix_1.glMatrix.mat4.multiply(_this._temp002_matrix, proj, _this._temp001_matrix);
                    Matrix_1.glMatrix.mat4.invert(_this._temp001_matrix, _this._temp002_matrix);
                    _shader.setUseProjectionViewInverseMatrix(_this._temp001_matrix);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.Projection:
                    _shader.setUseProjectionMatrix(proj);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.Model:
                    _shader.setUseModelWorldMatrix(_this._modelMatrix);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.View:
                    _shader.setUseViewMatrix(view);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.ViewModel:
                    Matrix_1.glMatrix.mat4.mul(_this._temp_model_view_matrix, view, _this._modelMatrix);
                    _shader.setUseModelViewMatrix(_this._temp_model_view_matrix);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.ModelInverseTransform:
                    Matrix_1.glMatrix.mat4.invert(_this._temp_model_inverse_matrix, _this._modelMatrix);
                    Matrix_1.glMatrix.mat4.transpose(_this._temp_model_inverse_transform_matrix, _this._temp_model_inverse_matrix);
                    _shader.setUseModelInverseTransformWorldMatrix(_this._temp_model_inverse_transform_matrix);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.ProjectionViewModelInverse:
                    Matrix_1.glMatrix.mat4.multiply(_this._temp001_matrix, view, _this._modelMatrix);
                    Matrix_1.glMatrix.mat4.multiply(_this._temp002_matrix, proj, _this._temp001_matrix);
                    Matrix_1.glMatrix.mat4.invert(_this._temp003_matrix, _this._temp002_matrix);
                    _shader.setUseProjectViewModelInverseMatrix(_this._temp003_matrix);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.ProjectionView:
                    Matrix_1.glMatrix.mat4.multiply(_this._temp001_matrix, proj, view);
                    _shader.setUseProjectionViewMatrix(_this._temp001_matrix);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.ProjectionViewInverse:
                    Matrix_1.glMatrix.mat4.multiply(_this._temp001_matrix, proj, view);
                    Matrix_1.glMatrix.mat4.invert(_this._temp002_matrix, _this._temp001_matrix);
                    _shader.setUseProjectionViewInverseMatrix(_this._temp002_matrix);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.CameraWorldPosition:
                    _shader.setUseCameraWorldPosition(_this._cameraPosition);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.LightWorldPosition:
                    _shader.setUseLightWorldPosition(_this._lightPosition);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.LightColor:
                    _shader.setUseLightColor(_this._lightColor);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.LightDirection:
                    _shader.setUseLightDirection(_this._lightDirection);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.Color:
                    _shader.setUseNodeColor(_this._nodeColor);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.NodeVertColor:
                    _shader.setUseNodeVertColor(_this._nodeVertColorGLID, _this._nodeVertColorItemSize);
                    break;
                case ShaderUseVariantType_1.ShaderUseVariantType.NodeCustomMatrix:
                    _shader.setUseNodeCustomMatrix(_this._nodeCustomMatrixGLID, _this._nodeCustomMatrixItemSize);
                    break;
                default:
                    console.log("目前还没有处理这个矩阵类型");
            }
        });
    };
    /**
     *
     * @param view
     * @param proj
     */
    RenderData.prototype.bindGPUBufferData = function (view, proj, shader) {
        //激活shader
        shader.active();
        this.updateShaderVariant(view, proj, shader);
    };
    return RenderData;
}());
exports.RenderData = RenderData;
var NormalRenderData = /** @class */ (function (_super) {
    __extends(NormalRenderData, _super);
    function NormalRenderData() {
        var _this = _super.call(this) || this;
        _this._extraViewLeftMatrix = Matrix_1.glMatrix.mat4.identity(null);
        _this._tempMatrix1 = Matrix_1.glMatrix.mat4.identity(null);
        _this._type = RenderDataType.Normal;
        return _this;
    }
    NormalRenderData.prototype.reset = function () {
        _super.prototype.reset.call(this);
        this._uniformData = [];
        this._shaderData = null;
        this._attrbufferData = null;
        this._projKey = "";
        this._viewKey = "";
        this._glPrimitiveType = 4 /* TRIANGLES */;
        Matrix_1.glMatrix.mat4.identity(this._extraViewLeftMatrix);
        Matrix_1.glMatrix.mat4.identity(this._tempMatrix1);
    };
    return NormalRenderData;
}(RenderData));
exports.NormalRenderData = NormalRenderData;
var SpineRenderData = /** @class */ (function (_super) {
    __extends(SpineRenderData, _super);
    function SpineRenderData() {
        var _this = _super.call(this) || this;
        _this._type = RenderDataType.Spine;
        return _this;
    }
    return SpineRenderData;
}(NormalRenderData));
exports.SpineRenderData = SpineRenderData;
/**
 * 渲染数据缓存池
 */
var RenderDataPool = /** @class */ (function () {
    function RenderDataPool() {
    }
    RenderDataPool.get = function (type) {
        var pool = RenderDataPool._pool;
        var retItem;
        for (var j = 0; j < pool.length; j++) {
            var item = pool[j];
            if (item._type == type && item._isUse == false) {
                retItem = item;
                break;
            }
        }
        switch (type) {
            case RenderDataType.Base:
                retItem = new RenderData();
                pool.push(retItem);
                break;
            case RenderDataType.Normal:
                retItem = new NormalRenderData();
                pool.push(retItem);
                break;
            case RenderDataType.Spine:
                retItem = new SpineRenderData();
                pool.push(retItem);
                break;
        }
        retItem._isUse = true;
        return retItem;
    };
    RenderDataPool.return = function (retData) {
        if (retData instanceof Array) {
            var arr = retData;
            for (var j = 0; j < arr.length; j++) {
                arr[j].reset();
            }
        }
        else {
            retData.reset();
        }
    };
    RenderDataPool._pool = [];
    return RenderDataPool;
}());
exports.RenderDataPool = RenderDataPool;
},{"../../Matrix":6,"../shader/ShaderUseVariantType":60}],50:[function(require,module,exports){
"use strict";
//texture 取值
Object.defineProperty(exports, "__esModule", { value: true });
exports.glTextureChanelTotalBytes = exports.glTextureTotalChanels = exports.glTextureFmtInfor = exports.glFilter = exports.glblend = exports.glblend_func = exports.glbuffer_usage = exports.glindex_buffer_format = exports.gldepth_stencil_func = exports.glstencil_operation = exports.glcull = exports.glrender_buffer_format = exports.glTEXTURE_UNIT_VALID = exports.gltex_filter = void 0;
// texture filter
exports.gltex_filter = {
    NEAREST: 9728,
    LINEAR: 9729,
    //下面是针对缩小的是采用mipmap技术
    NEAREST_MIPMAP_NEAREST: 9984,
    LINEAR_MIPMAP_NEAREST: 9985,
    NEAREST_MIPMAP_LINEAR: 9986,
    LINEAR_MIPMAP_LINEAR: 9987,
};
var _filterGL = [
    [exports.gltex_filter.NEAREST, exports.gltex_filter.NEAREST_MIPMAP_NEAREST, exports.gltex_filter.NEAREST_MIPMAP_LINEAR],
    [exports.gltex_filter.LINEAR, exports.gltex_filter.LINEAR_MIPMAP_NEAREST, exports.gltex_filter.LINEAR_MIPMAP_LINEAR],
];
var _textureFmtGL = [
    // RGB_DXT1: 0
    { format: 6407 /* RGB */, internalFormat: 33776 /* RGB_S3TC_DXT1_EXT */, pixelType: null },
    // RGBA_DXT1: 1
    { format: 6408 /* RGBA */, internalFormat: 33777 /* RGBA_S3TC_DXT1_EXT */, pixelType: null },
    // RGBA_DXT3: 2
    { format: 6408 /* RGBA */, internalFormat: 33778 /* RGBA_S3TC_DXT3_EXT */, pixelType: null },
    // RGBA_DXT5: 3
    { format: 6408 /* RGBA */, internalFormat: 33779 /* RGBA_S3TC_DXT5_EXT */, pixelType: null },
    // RGB_ETC1: 4
    { format: 6407 /* RGB */, internalFormat: 36196 /* RGB_ETC1_WEBGL */, pixelType: null },
    // RGB_PVRTC_2BPPV1: 5
    { format: 6407 /* RGB */, internalFormat: 35841 /* RGB_PVRTC_2BPPV1_IMG */, pixelType: null },
    // RGBA_PVRTC_2BPPV1: 6
    { format: 6408 /* RGBA */, internalFormat: 35843 /* RGBA_PVRTC_2BPPV1_IMG */, pixelType: null },
    // RGB_PVRTC_4BPPV1: 7
    { format: 6407 /* RGB */, internalFormat: 35840 /* RGB_PVRTC_4BPPV1_IMG */, pixelType: null },
    // RGBA_PVRTC_4BPPV1: 8
    { format: 6408 /* RGBA */, internalFormat: 35842 /* RGBA_PVRTC_4BPPV1_IMG */, pixelType: null },
    // A8: 9
    { format: 6406 /* ALPHA */, internalFormat: 6406 /* ALPHA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // L8: 10
    { format: 6409 /* LUMINANCE */, internalFormat: 6409 /* LUMINANCE */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // L8_A8: 11
    { format: 6410 /* LUMINANCE_ALPHA */, internalFormat: 6410 /* LUMINANCE_ALPHA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // R5_G6_B5: 12
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 33635 /* UNSIGNED_SHORT_5_6_5 */ },
    // R5_G5_B5_A1: 13
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 32820 /* UNSIGNED_SHORT_5_5_5_1 */ },
    // R4_G4_B4_A4: 14
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 32819 /* UNSIGNED_SHORT_4_4_4_4 */ },
    // RGB8: 15
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // RGBA8: 16
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // RGB16F: 17
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 36193 /* HALF_FLOAT_OES */ },
    // RGBA16F: 18
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 36193 /* HALF_FLOAT_OES */ },
    // RGB32F: 19
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 5126 /* FLOAT */ },
    // RGBA32F: 20
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 5126 /* FLOAT */ },
    // R32F: 21
    { format: null, internalFormat: null, pixelType: null },
    // _111110F: 22
    { format: null, internalFormat: null, pixelType: null },
    // SRGB: 23
    { format: null, internalFormat: null, pixelType: null },
    // SRGBA: 24
    { format: null, internalFormat: null, pixelType: null },
    // D16: 25
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5123 /* UNSIGNED_SHORT */ },
    // D32: 26
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5125 /* UNSIGNED_INT */ },
    // D24S8: 27
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5125 /* UNSIGNED_INT */ },
    // RGB_ETC2: 28
    { format: 6407 /* RGB */, internalFormat: 37492 /* RGB8_ETC2 */, pixelType: null },
    // RGBA_ETC2: 29
    { format: 6408 /* RGBA */, internalFormat: 37496 /* RGBA8_ETC2_EAC */, pixelType: null },
];
/**
 * webgl有效的纹理单元
 * 经过测试最大的纹理单元数目是32个
 */
exports.glTEXTURE_UNIT_VALID = [
    "TEXTURE0", "TEXTURE1", "TEXTURE2", "TEXTURE3", "TEXTURE4", "TEXTURE5", "TEXTURE6", "TEXTURE7",
    "TEXTURE8", "TEXTURE9", "TEXTURE10", "TEXTURE11", "TEXTURE12", "TEXTURE13", "TEXTURE14", "TEXTURE15",
    "TEXTURE16", "TEXTURE17", "TEXTURE18", "TEXTURE19", "TEXTURE20", "TEXTURE21", "TEXTURE22", "TEXTURE23",
    "TEXTURE24", "TEXTURE25", "TEXTURE26", "TEXTURE27", "TEXTURE28", "TEXTURE29", "TEXTURE30", "TEXTURE31",
];
// render-buffer format
exports.glrender_buffer_format = {
    RGBA4: 32854,
    RGB5_A1: 32855,
    RGB565: 36194,
    D16: 33189,
    S8: 36168,
    D24S8: 34041,
};
// cull
exports.glcull = {
    NONE: 0,
    FRONT: 1028,
    BACK: 1029,
    FRONT_AND_BACK: 1032,
};
// stencil operation
exports.glstencil_operation = {
    DISABLE: 0,
    ENABLE: 1,
    INHERIT: 2,
    OP_KEEP: 7680,
    OP_ZERO: 0,
    OP_REPLACE: 7681,
    OP_INCR: 7682,
    OP_INCR_WRAP: 34055,
    OP_DECR: 7683,
    OP_DECR_WRAP: 34056,
    OP_INVERT: 5386,
};
// depth and stencil function
// 简写"ds"
exports.gldepth_stencil_func = {
    NEVER: 512,
    LESS: 513,
    EQUAL: 514,
    LEQUAL: 515,
    GREATER: 516,
    NOTEQUAL: 517,
    GEQUAL: 518,
    ALWAYS: 519,
};
// index buffer format
exports.glindex_buffer_format = {
    INDEX_FMT_UINT8: 5121,
    INDEX_FMT_UINT16: 5123,
    INDEX_FMT_UINT32: 5125,
};
// buffer usage
exports.glbuffer_usage = {
    USAGE_STATIC: 35044,
    USAGE_DYNAMIC: 35048,
    USAGE_STREAM: 35040,
};
// blend-func
exports.glblend_func = {
    ADD: 32774,
    SUBTRACT: 32778,
    REVERSE_SUBTRACT: 32779,
};
// blend
exports.glblend = {
    ZERO: 0,
    ONE: 1,
    SRC_COLOR: 768,
    ONE_MINUS_SRC_COLOR: 769,
    DST_COLOR: 774,
    ONE_MINUS_DST_COLOR: 775,
    SRC_ALPHA: 770,
    ONE_MINUS_SRC_ALPHA: 771,
    DST_ALPHA: 772,
    ONE_MINUS_DST_ALPHA: 773,
    CONSTANT_COLOR: 32769,
    ONE_MINUS_CONSTANT_COLOR: 32770,
    CONSTANT_ALPHA: 32771,
    ONE_MINUS_CONSTANT_ALPHA: 32772,
    SRC_ALPHA_SATURATE: 776,
};
/**
 * @method glFilter
 * @param {WebGLContext} gl
 * @param {FILTER_*} filter
 * @param {FILTER_*} mipFilter
 */
function glFilter(gl, filter, mipFilter) {
    if (mipFilter === void 0) { mipFilter = -1; }
    var result = _filterGL[filter][mipFilter + 1];
    if (result === undefined) {
        console.warn("Unknown FILTER: " + filter);
        return mipFilter === -1 ? exports.gltex_filter.LINEAR : exports.gltex_filter.LINEAR_MIPMAP_LINEAR;
    }
    return result;
}
exports.glFilter = glFilter;
/**
 * @method glTextureFmt
 * @param {gltex_config_format} fmt
 * @return {format,internalFormat,pixelType} result
 */
function glTextureFmtInfor(fmt) {
    var result = _textureFmtGL[fmt];
    if (result === undefined) {
        console.warn("Unknown TEXTURE_FMT: " + fmt);
        return _textureFmtGL[16 /* RGBA8 */];
    }
    return result;
}
exports.glTextureFmtInfor = glTextureFmtInfor;
/*
format                type            通道数 通道总字节数
RGBA         	 UNSIGNED_BYTE	        4	    4
RGB	             UNSIGNED_BYTE	        3	    3
RGBA             UNSIGNED_SHORT_4_4_4_4	4	    2
RGBA         	 UNSIGNED_SHORT_5_5_5_1	4	    2
RGB	             UNSIGNED_SHORT_5_6_5   3	    2
LUMINANCE_ALPHA	 UNSIGNED_BYTE       	2	    2
LUMINANCE   	 UNSIGNED_BYTE      	1	    1
ALPHA       	 UNSIGNED_BYTE       	1	    1
*/
var glformat_type_bytes = {};
glformat_type_bytes[6408 /* RGBA */] = {};
glformat_type_bytes[6407 /* RGB */] = {};
glformat_type_bytes[6410 /* LUMINANCE_ALPHA */] = {};
glformat_type_bytes[6409 /* LUMINANCE */] = {};
glformat_type_bytes[6406 /* ALPHA */] = {};
glformat_type_bytes[6408 /* RGBA */][5121 /* UNSIGNED_BYTE */] = 4;
glformat_type_bytes[6407 /* RGB */][5121 /* UNSIGNED_BYTE */] = 3;
glformat_type_bytes[6408 /* RGBA */][32819 /* UNSIGNED_SHORT_4_4_4_4 */] = 2;
glformat_type_bytes[6408 /* RGBA */][32820 /* UNSIGNED_SHORT_5_5_5_1 */] = 2;
glformat_type_bytes[6407 /* RGB */][33635 /* UNSIGNED_SHORT_5_6_5 */] = 2;
glformat_type_bytes[6410 /* LUMINANCE_ALPHA */][5121 /* UNSIGNED_BYTE */] = 2;
glformat_type_bytes[6409 /* LUMINANCE */][5121 /* UNSIGNED_BYTE */] = 1;
glformat_type_bytes[6406 /* ALPHA */][5121 /* UNSIGNED_BYTE */] = 1;
var glformat_type_chanels = {};
glformat_type_chanels[6408 /* RGBA */] = {};
glformat_type_chanels[6407 /* RGB */] = {};
glformat_type_chanels[6410 /* LUMINANCE_ALPHA */] = {};
glformat_type_chanels[6409 /* LUMINANCE */] = {};
glformat_type_chanels[6406 /* ALPHA */] = {};
glformat_type_chanels[6408 /* RGBA */][5121 /* UNSIGNED_BYTE */] = 4;
glformat_type_chanels[6407 /* RGB */][5121 /* UNSIGNED_BYTE */] = 3;
glformat_type_chanels[6408 /* RGBA */][32819 /* UNSIGNED_SHORT_4_4_4_4 */] = 4;
glformat_type_chanels[6408 /* RGBA */][32820 /* UNSIGNED_SHORT_5_5_5_1 */] = 4;
glformat_type_chanels[6407 /* RGB */][33635 /* UNSIGNED_SHORT_5_6_5 */] = 3;
glformat_type_chanels[6410 /* LUMINANCE_ALPHA */][5121 /* UNSIGNED_BYTE */] = 2;
glformat_type_chanels[6409 /* LUMINANCE */][5121 /* UNSIGNED_BYTE */] = 1;
glformat_type_chanels[6406 /* ALPHA */][5121 /* UNSIGNED_BYTE */] = 1;
/**
 * 获取纹理的通道数
 * @method glTextureChanelTotalBytes
 * @param {gltex_format} fmt
 */
function glTextureTotalChanels(fmt) {
    var result = glTextureFmtInfor(fmt);
    var re = glformat_type_chanels[result.format][result.pixelType];
    if (!re) {
        console.warn("glTextureTotalChanels 报错,", result);
        re = 0;
    }
    return re;
}
exports.glTextureTotalChanels = glTextureTotalChanels;
/**
 * 获取纹理的通道字节数
 * @method glTextureChanelTotalBytes
 * @param {gltex_format} fmt
 */
function glTextureChanelTotalBytes(fmt) {
    var result = glTextureFmtInfor(fmt);
    var re = glformat_type_bytes[result.format][result.pixelType];
    if (!re) {
        console.warn("glTextureChanelTotalBytes 报错,", result);
        re = 0;
    }
    return re;
}
exports.glTextureChanelTotalBytes = glTextureChanelTotalBytes;
},{}],51:[function(require,module,exports){
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.glEnums = exports.glErrors = void 0;
exports.glErrors = (_a = {},
    _a[1] = { error: "failed to compile shader: ERROR: 0:1 : No prceision specified for (float)",
        reason: "没有在片元着色器中指定float的精度" },
    _a[2] = { error: "类型不匹配", reason: "编程的时候，如果浮点数刚好是0、1等整数值，要注意书写为0.0,1.0，\
    不能省略点，如果直接写0、1等形式，系统会识别为整型数，进行运算的过程中，如果把数据类型搞错可能会报错" },
    _a[3] = { error: "WebGL: INVALID_OPERATION: texImage2D: ArrayBufferView not big enough for request",
        reason: "我们传入的纹理数据和纹理格式不匹配，纹理数据有宽高,纹理格式会决定每一个像素取几个纹理数据" },
    _a);
/**
 * enums
 */
exports.glEnums = {
    // buffer usage
    USAGE_STATIC: 35044,
    USAGE_DYNAMIC: 35048,
    USAGE_STREAM: 35040,
    // index buffer format
    INDEX_FMT_UINT8: 5121,
    INDEX_FMT_UINT16: 5123,
    INDEX_FMT_UINT32: 5125,
    // vertex attribute type
    ATTR_TYPE_INT8: 5120,
    ATTR_TYPE_UINT8: 5121,
    ATTR_TYPE_INT16: 5122,
    ATTR_TYPE_UINT16: 5123,
    ATTR_TYPE_INT32: 5124,
    ATTR_TYPE_UINT32: 5125,
    ATTR_TYPE_FLOAT32: 5126,
    // texture filter
    FILTER_NEAREST: 0,
    FILTER_LINEAR: 1,
    // texture wrap mode
    WRAP_REPEAT: 10497,
    WRAP_CLAMP: 33071,
    WRAP_MIRROR: 33648,
    // texture format
    // compress formats
    TEXTURE_FMT_RGB_DXT1: 0,
    TEXTURE_FMT_RGBA_DXT1: 1,
    TEXTURE_FMT_RGBA_DXT3: 2,
    TEXTURE_FMT_RGBA_DXT5: 3,
    TEXTURE_FMT_RGB_ETC1: 4,
    TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
    TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
    TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
    TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
    // normal formats
    TEXTURE_FMT_A8: 9,
    TEXTURE_FMT_L8: 10,
    TEXTURE_FMT_L8_A8: 11,
    TEXTURE_FMT_R5_G6_B5: 12,
    TEXTURE_FMT_R5_G5_B5_A1: 13,
    TEXTURE_FMT_R4_G4_B4_A4: 14,
    TEXTURE_FMT_RGB8: 15,
    TEXTURE_FMT_RGBA8: 16,
    TEXTURE_FMT_RGB16F: 17,
    TEXTURE_FMT_RGBA16F: 18,
    TEXTURE_FMT_RGB32F: 19,
    TEXTURE_FMT_RGBA32F: 20,
    TEXTURE_FMT_R32F: 21,
    TEXTURE_FMT_111110F: 22,
    TEXTURE_FMT_SRGB: 23,
    TEXTURE_FMT_SRGBA: 24,
    // depth formats
    TEXTURE_FMT_D16: 25,
    TEXTURE_FMT_D32: 26,
    TEXTURE_FMT_D24S8: 27,
    // etc2 format
    TEXTURE_FMT_RGB_ETC2: 28,
    TEXTURE_FMT_RGBA_ETC2: 29,
    // depth and stencil function
    DS_FUNC_NEVER: 512,
    DS_FUNC_LESS: 513,
    DS_FUNC_EQUAL: 514,
    DS_FUNC_LEQUAL: 515,
    DS_FUNC_GREATER: 516,
    DS_FUNC_NOTEQUAL: 517,
    DS_FUNC_GEQUAL: 518,
    DS_FUNC_ALWAYS: 519,
    // render-buffer format
    RB_FMT_RGBA4: 32854,
    RB_FMT_RGB5_A1: 32855,
    RB_FMT_RGB565: 36194,
    RB_FMT_D16: 33189,
    RB_FMT_S8: 36168,
    RB_FMT_D24S8: 34041,
    // blend-equation
    BLEND_FUNC_ADD: 32774,
    BLEND_FUNC_SUBTRACT: 32778,
    BLEND_FUNC_REVERSE_SUBTRACT: 32779,
    // blend
    BLEND_ZERO: 0,
    BLEND_ONE: 1,
    BLEND_SRC_COLOR: 768,
    BLEND_ONE_MINUS_SRC_COLOR: 769,
    BLEND_DST_COLOR: 774,
    BLEND_ONE_MINUS_DST_COLOR: 775,
    BLEND_SRC_ALPHA: 770,
    BLEND_ONE_MINUS_SRC_ALPHA: 771,
    BLEND_DST_ALPHA: 772,
    BLEND_ONE_MINUS_DST_ALPHA: 773,
    BLEND_CONSTANT_COLOR: 32769,
    BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
    BLEND_CONSTANT_ALPHA: 32771,
    BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
    BLEND_SRC_ALPHA_SATURATE: 776,
    // stencil operation
    STENCIL_DISABLE: 0,
    STENCIL_ENABLE: 1,
    STENCIL_INHERIT: 2,
    STENCIL_OP_KEEP: 7680,
    STENCIL_OP_ZERO: 0,
    STENCIL_OP_REPLACE: 7681,
    STENCIL_OP_INCR: 7682,
    STENCIL_OP_INCR_WRAP: 34055,
    STENCIL_OP_DECR: 7683,
    STENCIL_OP_DECR_WRAP: 34056,
    STENCIL_OP_INVERT: 5386,
    // cull
    CULL_NONE: 0,
    CULL_FRONT: 1028,
    CULL_BACK: 1029,
    CULL_FRONT_AND_BACK: 1032,
    // primitive type
    PT_POINTS: 0,
    PT_LINES: 1,
    PT_LINE_LOOP: 2,
    PT_LINE_STRIP: 3,
    PT_TRIANGLES: 4,
    PT_TRIANGLE_STRIP: 5,
    PT_TRIANGLE_FAN: 6,
};
var GLapi;
(function (GLapi) {
    //本地opegl上下文
    var gl;
    //此函数务必调用
    function bindGL(glT) {
        gl = glT;
        GLapi.glTEXTURE_MAG_FILTER = gl.TEXTURE_MAG_FILTER;
        GLapi.glTEXTURE_MIN_FILTER = gl.TEXTURE_MIN_FILTER;
    }
    GLapi.bindGL = bindGL;
    /**
 * @method attrTypeBytes
 * @param {ATTR_TYPE_*} attrType
 */
    function attrTypeBytes(attrType) {
        if (attrType === exports.glEnums.ATTR_TYPE_INT8) {
            return 1;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT8) {
            return 1;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_INT16) {
            return 2;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT16) {
            return 2;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_INT32) {
            return 4;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT32) {
            return 4;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_FLOAT32) {
            return 4;
        }
        console.warn("Unknown ATTR_TYPE: " + attrType);
        return 0;
    }
    GLapi.attrTypeBytes = attrTypeBytes;
    /**
     * 将buffer绑定到目标缓冲区
     * @param target
     * GLenum指定结合点（目标）。可能的值：
        gl.ARRAY_BUFFER：包含顶点属性的缓冲区，例如顶点坐标，纹理坐标数据或顶点颜色数据。
        gl.ELEMENT_ARRAY_BUFFER：用于元素索引的缓冲区。
        使用WebGL 2上下文时，还可以使用以下值：
        gl.COPY_READ_BUFFER：用于从一个缓冲区对象复制到另一个缓冲区对象的缓冲区。
        gl.COPY_WRITE_BUFFER：用于从一个缓冲区对象复制到另一个缓冲区对象的缓冲区。
        gl.TRANSFORM_FEEDBACK_BUFFER：用于变换反馈操作的缓冲区。
        gl.UNIFORM_BUFFER：用于存储统一块的缓冲区。
        gl.PIXEL_PACK_BUFFER：用于像素传输操作的缓冲区。
        gl.PIXEL_UNPACK_BUFFER：用于像素传输操作的缓冲区。
     * @param buffer
     */
    function bindBuffer(target, buffer) {
        gl.bindBuffer(target, buffer);
    }
    GLapi.bindBuffer = bindBuffer;
    /**
     * @param mode
     * 枚举类型 指定要渲染的图元类型。可以是以下类型:
        gl.POINTS: 画单独的点。
        gl.LINE_STRIP: 画一条直线到下一个顶点。
        gl.LINE_LOOP: 绘制一条直线到下一个顶点，并将最后一个顶点返回到第一个顶点.
        gl.LINES: 在一对顶点之间画一条线.
        gl.TRIANGLE_STRIP
        gl.TRIANGLE_FAN
        gl.TRIANGLES: 为一组三个顶点绘制一个三角形.
     * @param count
        整数型 指定要渲染的元素数量
     * @param type
        枚举类型 指定元素数组缓冲区中的值的类型。可能的值是:
        gl.UNSIGNED_BYTE
        gl.UNSIGNED_SHORT
        当使用 OES_element_index_uint 扩展时:
        gl.UNSIGNED_INT
     * @param offset
         字节单位 指定元素数组缓冲区中的偏移量。必须是给定类型大小的有效倍数
        @returns
        none
        @error
        如果 mode 不是正确值,  gl.INVALID_ENUM 将会抛出错误异常.
        如果offset 不是给定类型大小的有效倍数, gl.INVALID_OPERATION 将会抛出错误异常.
        如果 count 是负的,  gl.INVALID_VALUE 将会抛出错误异常.
     */
    function drawElements(mode, count, type, offset) {
        gl.drawElements(mode, count, type, offset);
    }
    GLapi.drawElements = drawElements;
    /**
     *
     * @param mode
     * GLenum 类型，指定绘制图元的方式，可能值如下。
        gl.POINTS: 绘制一系列点。
        gl.LINE_STRIP: 绘制一个线条。即，绘制一系列线段，上一点连接下一点。
        gl.LINE_LOOP: 绘制一个线圈。即，绘制一系列线段，上一点连接下一点，并且最后一点与第一个点相连。
        gl.LINES: 绘制一系列单独线段。每两个点作为端点，线段之间不连接。
        gl.TRIANGLE_STRIP：绘制一个三角带。
        gl.TRIANGLE_FAN：绘制一个三角扇。
        gl.TRIANGLES: 绘制一系列三角形。每三个点作为顶点
     * @param first
        GLint 类型 ，指定从哪个点开始绘制
     * @param count
        GLsizei 类型，指定绘制需要使用到多少个点
     @returns
     none
     @error
        如果 mode 不是一个可接受值，将会抛出 gl.INVALID_ENUM 异常。
        如果 first 或者 count 是负值，会抛出 gl.INVALID_VALUE 异常。
        如果 gl.CURRENT_PROGRAM 为 null，会抛出 gl.INVALID_OPERATION 异常
     */
    function drawArrays(mode, first, count) {
        gl.drawArrays(mode, first, count);
    }
    GLapi.drawArrays = drawArrays;
    /*
        // WebGL1:
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);
    // WebGL2:
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);
    */
    /**
     *
     * @param target
     *    GLenum 指定纹理的绑定对象.可能的值:
             gl.TEXTURE_2D: 二维纹理贴图.
             gl.TEXTURE_CUBE_MAP_POSITIVE_X:立方体映射纹理的正X面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_X: 立方体映射纹理的负X面。
             gl.TEXTURE_CUBE_MAP_POSITIVE_Y: 立方体映射纹理的正Y面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_Y: 立方体映射纹理的负Y面。
             gl.TEXTURE_CUBE_MAP_POSITIVE_Z: 立方体映射纹理的正Z面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_Z: 立方体映射纹理的负Z面。
     * @param level
     *  GLint 指定详细级别. 0级是基本图像等级，n级是第n个金字塔简化级.
     * @param internalformat
     * @param width
     *  GLsizei 指定纹理的宽度
     * @param height
     * GLsizei 指定纹理的高度
     * @param border
     * GLint 指定纹理的边框宽度。必须为 0
     * @param format
     *  GLenum 指定texel数据格式。在 WebGL 1中，它必须与 internalformat 相同（查看上面). 在WebGL 2中, 这张表中列出了这些组合
     * @param type
     * GLenum 指定texel数据的数据类型。可能的值:
         gl.UNSIGNED_BYTE:  gl.RGBA每个通道8位
         gl.UNSIGNED_SHORT_5_6_5: 5 bits红, 6 bits绿, 5 bits蓝
         gl.UNSIGNED_SHORT_4_4_4_4: 4 bits红, 4 bits绿, 4 bits蓝, 4 alpha bits.
         gl.UNSIGNED_SHORT_5_5_5_1: 5 bits红, 5 bits绿, 5 bits蓝, 1 alpha bit.
         当使用 WEBGL_depth_texture 扩展:
         gl.UNSIGNED_SHORT
         gl.UNSIGNED_INT
         ext.UNSIGNED_INT_24_8_WEBGL (constant provided by the extension)
         当使用 OES_texture_float扩展 :
         gl.FLOAT
         当使用 OES_texture_half_float 扩展:
         ext.HALF_FLOAT_OES (constant provided by the extension)
         当使用 WebGL 2 context,下面的值也是可用的:
         gl.BYTE
         gl.UNSIGNED_SHORT
         gl.SHORT
         gl.UNSIGNED_INT
         gl.INT
         gl.HALF_FLOAT
         gl.FLOAT
         gl.UNSIGNED_INT_2_10_10_10_REV
         gl.UNSIGNED_INT_10F_11F_11F_REV
         gl.UNSIGNED_INT_5_9_9_9_REV
         gl.UNSIGNED_INT_24_8
         gl.FLOAT_32_UNSIGNED_INT_24_8_REV (pixels must be null)
     * @param pixels
     * 下列对象之一可以用作纹理的像素源:
         ArrayBufferView,
         Uint8Array  如果 type 是 gl.UNSIGNED_BYTE则必须使用
         Uint16Array 如果 type 是 gl.UNSIGNED_SHORT_5_6_5, gl.UNSIGNED_SHORT_4_4_4_4, gl.UNSIGNED_SHORT_5_5_5_1, gl.UNSIGNED_SHORT 或ext.HALF_FLOAT_OES则必须使用
         Uint32Array 如果type 是 gl.UNSIGNED_INT 或ext.UNSIGNED_INT_24_8_WEBGL则必须使用
     */
    function texImage2D(target, level, internalformat, width, height, border, format, type, pixels) {
        gl.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    }
    GLapi.texImage2D = texImage2D;
    /**
     * 图像预处理函数
     * 规定了图像如何从内存中读出，又或者如何从显存读入内存
     * @param pname
     *  Glenum 类型 ，表示处理的方式。关于该参数可选值，请见下面表格
     * @param param
     *  GLint  类型，表示 pname 处理方式的参数。关于该参数可选值，请见下面表格
     * 支持的平台webgl 1.0,opengl es 2.0
     * pname                                   default            param          des
     * gl.PACK_ALIGNMENT                         4             1, 2, 4, 8       将像素数据打包到内存中（从显存将数据发往内存）
     * gl.UNPACK_ALIGNMENT                       4             1, 2, 4, 8       从内存中解包像素数据(接完以后发往显存)
     * gl.UNPACK_FLIP_Y_WEBGL                    false         true,false       如果为true，则把图片上下对称翻转坐标轴(图片本身不变)
     * gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL         false         true, false      将alpha通道乘以其他颜色通道
     * gl.UNPACK_COLORSPACE_CONVERSION_WEBGL  (gl.BROWSER_DEFAULT_WEBGL) (gl.BROWSER_DEFAULT_WEBGL, gl.NONE) 默认颜色空间转换或无颜色空间转换
     *
     */
    function pixelStorei(pname, param) {
        gl.pixelStorei(pname, param);
    }
    GLapi.pixelStorei = pixelStorei;
    function texParameterf(target, pname, param) {
        gl.texParameterf(target, pname, param);
    }
    GLapi.texParameterf = texParameterf;
    /**
     * 设置纹理过滤的属性
     * 当图片进行一些变换诸如放大缩小等，如何从纹理中取数据
     * @param target
     * GLenum 指定绑定点(目标)。可能的值：
                gl.TEXTURE_2D: 二维纹理.
                gl.TEXTURE_CUBE_MAP: 立方体纹理.
                当使用 WebGL 2 context 时,还可以使用以下值
                gl.TEXTURE_3D: 三维贴图.
                gl.TEXTURE_2D_ARRAY: 二维数组贴图.
     * @param pname
     * @param param
     *
     *  gl.TEXTURE_MAG_FILTER	纹理放大滤波器	gl.LINEAR (默认值), gl.NEAREST.
        gl.TEXTURE_MIN_FILTER	纹理缩小滤波器	gl.LINEAR, gl.NEAREST, gl.NEAREST_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR (默认值), gl.LINEAR_MIPMAP_LINEAR.
        gl.TEXTURE_WRAP_S	纹理坐标水平填充 s	gl.REPEAT (默认值),gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        gl.TEXTURE_WRAP_T	纹理坐标垂直填充 t	gl.REPEAT (默认值),gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        Additionally available when using the EXT_texture_filter_anisotropic extension
        ext.TEXTURE_MAX_ANISOTROPY_EXT	纹理最大向异性	 GLfloat 值.
        Additionally available when using a WebGL 2 context
        gl.TEXTURE_BASE_LEVEL	纹理映射等级	任何整型值.
        gl.TEXTURE_COMPARE_FUNC	纹理对比函数	gl.LEQUAL (默认值), gl.GEQUAL, gl.LESS, gl.GREATER, gl.EQUAL, gl.NOTEQUAL, gl.ALWAYS, gl.NEVER.
        gl.TEXTURE_COMPARE_MODE	纹理对比模式	gl.NONE (默认值), gl.COMPARE_REF_TO_TEXTURE.
        gl.TEXTURE_MAX_LEVEL	最大纹理映射数组等级	任何整型值.
        gl.TEXTURE_MAX_LOD	纹理最大细节层次值	任何整型值.
        gl.TEXTURE_MIN_LOD	纹理最小细节层次值	任何浮点型值.
        gl.TEXTURE_WRAP_R	纹理坐标r包装功能	gl.REPEAT (默认值), gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        @error
        INVALID_ENUM target不是合法的值。
        INVALID_OPRATION 当前目标上没有绑定纹理对象
     */
    function texParameteri(target, pname, param) {
        gl.texParameteri(target, pname, param);
    }
    GLapi.texParameteri = texParameteri;
    /**
     * 获取shader中attribute下对应的属性位置
     * @param program shader的glID
     * @param name 属性的名字
     * @returns
     * 表明属性位置的下标 GLint 数字，如果找不到该属性则返回-1
     */
    function getAttribLocation(program, name) {
        return gl.getAttribLocation(program, name);
    }
    GLapi.getAttribLocation = getAttribLocation;
    /**
     * 激活顶点属性
     * @param index
     * 类型为GLuint 的索引，指向要激活的顶点属性。如果您只知道属性的名称，不知道索引，
     * 您可以使用以下方法来获取索引getAttribLocation()
     *
     * 特别说明
     * 在WebGL中，作用于顶点的数据会先储存在attributes。
     * 这些数据仅对JavaScript代码和顶点着色器可用。
     * 属性由索引号引用到GPU维护的属性列表中。在不同的平台或GPU上，某些顶点属性索引可能具有预定义的值。
     * 创建属性时，WebGL层会分配其他属性。
       无论怎样，都需要你使用enableVertexAttribArray()方法，来激活每一个属性以便使用，不被激活的属性是不会被使用的。
       一旦激活，以下其他方法就可以获取到属性的值了，
       包括vertexAttribPointer()，vertexAttrib*()，和 getVertexAttrib()
       @error
       您可以使用getError()方法，来检查使用enableVertexAttribArray()时发生的错误。
       WebGLRenderingContext.INVALID_VALUE 非法的 index 。
       一般是 index 大于或等于了顶点属性列表允许的最大值。该值可以通过 WebGLRenderingContext.MAX_VERTEX_ATTRIBS获取
     */
    function enableVertexAttribArray(index) {
        gl.enableVertexAttribArray(index);
    }
    GLapi.enableVertexAttribArray = enableVertexAttribArray;
    /**
     * 方法在给定的索引位置关闭通用顶点属性数组
     * @param index
     * shader 变量的位置
     */
    function disableVertexAttribArray(index) {
        gl.disableVertexAttribArray(index);
    }
    GLapi.disableVertexAttribArray = disableVertexAttribArray;
    /**
     * 告诉显卡从当前绑定的缓冲区（bindBuffer()指定的缓冲区）中读取顶点数据。
       WebGL API 的WebGLRenderingContext.vertexAttribPointer()方法绑定当前缓冲区范围到gl.ARRAY_BUFFER,
       成为当前顶点缓冲区对象的通用顶点属性并指定它的布局(缓冲区对象中的偏移量)
     * @param index
       指定要修改的顶点属性的索引 其实就是某个attribute变量在shader中的位置
     * @param size
       指定每个顶点属性的组成数量，必须是1，2，3或4
     * @param type
        指定数组中每个元素的数据类型可能是：
            gl.BYTE: signed 8-bit integer, with values in [-128, 127]
            有符号的8位整数，范围[-128, 127]
            gl.SHORT: signed 16-bit integer, with values in [-32768, 32767]
            有符号的16位整数，范围[-32768, 32767]
            gl.UNSIGNED_BYTE: unsigned 8-bit integer, with values in [0, 255]
            无符号的8位整数，范围[0, 255]
            gl.UNSIGNED_SHORT: unsigned 16-bit integer, with values in [0, 65535]
            无符号的16位整数，范围[0, 65535]
            gl.FLOAT: 32-bit IEEE floating point number
            32位IEEE标准的浮点数
            When using a WebGL 2 context, the following values are available additionally:
            使用WebGL2版本的还可以使用以下值：
            gl.HALF_FLOAT: 16-bit IEEE floating point number
            16位IEEE标准的浮点数
     * @param normalized
        当转换为浮点数时是否应该将整数数值归一化到特定的范围。
            For types gl.BYTE and gl.SHORT, normalizes the values to [-1, 1] if true.
            对于类型gl.BYTE和gl.SHORT，如果是true则将值归一化为[-1, 1]
            For types gl.UNSIGNED_BYTE and gl.UNSIGNED_SHORT, normalizes the values to [0, 1] if true.
            对于类型gl.UNSIGNED_BYTE和gl.UNSIGNED_SHORT，如果是true则将值归一化为[0, 1]
            For types gl.FLOAT and gl.HALF_FLOAT, this parameter has no effect.
            对于类型gl.FLOAT和gl.HALF_FLOAT，此参数无效
     * @param stride
        一个GLsizei，以字节为单位指定连续顶点属性开始之间的偏移量(即数组中一行长度)。
        不能大于255。如果stride为0，则假定该属性是紧密打包的，即不交错属性，
        每个属性在一个单独的块中，下一个顶点的属性紧跟当前顶点之后
     * @param offset
         GLintptr指定顶点属性数组中第一部分的字节偏移量。必须是类型的字节长度的倍数

        @error
        A gl.INVALID_VALUE error is thrown if offset is negative.
        如果偏移量为负，则抛出gl.INVALID_VALUE错误。
        A gl.INVALID_OPERATION error is thrown if stride and offset are not multiples of the size of the data type.
        如果stride和offset不是数据类型大小的倍数，则抛出gl.INVALID_OPERATION错误。
        A gl.INVALID_OPERATION error is thrown if no WebGLBuffer is bound to the ARRAY_BUFFER target.
        如果没有将WebGLBuffer绑定到ARRAY_BUFFER目标，则抛出gl.INVALID_OPERATION错误。
        When using a WebGL 2 context
        a gl.INVALID_OPERATION error is thrown if this vertex attribute is defined as a integer in the vertex shader (e.g. uvec4 or ivec4, instead of vec4).
     */
    function vertexAttribPointer(index, size, type, normalized, stride, offset) {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
    GLapi.vertexAttribPointer = vertexAttribPointer;
    /**
     * 设置缓冲区大小
     * @param target
     * @param size
     * GLsizeiptr 设定Buffer对象的数据存储区大小
     * @param usage
     */
    function bufferDataLength(target, size, usage) {
        gl.bufferData(target, size, usage);
    }
    GLapi.bufferDataLength = bufferDataLength;
    function bufferData(target, srcData, usage) {
        gl.bufferData(target, srcData, usage);
    }
    GLapi.bufferData = bufferData;
    function bufferSubData(target, offset, srcData) {
        gl.bufferSubData(target, offset, srcData);
    }
    GLapi.bufferSubData = bufferSubData;
    /**
     *
     * @param target
     * GLenum 指定Buffer绑定点（目标）。可取以下值：
        gl.ARRAY_BUFFER: 包含顶点属性的Buffer，如顶点坐标，纹理坐标数据或顶点颜色数据。
        gl.ELEMENT_ARRAY_BUFFER: 用于元素索引的Buffer。
        当使用 WebGL 2 context 时，可以使用以下值：
        gl.COPY_READ_BUFFER: 从一个Buffer对象复制到另一个Buffer对象。
        gl.COPY_WRITE_BUFFER: 从一个Buffer对象复制到另一个Buffer对象。
        gl.TRANSFORM_FEEDBACK_BUFFER: 用于转换反馈操作的Buffer。
        gl.UNIFORM_BUFFER: 用于存储统一块的Buffer。
        gl.PIXEL_PACK_BUFFER: 用于像素转换操作的Buffer。
        gl.PIXEL_UNPACK_BUFFER: 用于像素转换操作的Buffer
     * @param srcData
        一个ArrayBuffer，SharedArrayBuffer 或者 ArrayBufferView 类型的数组对象，将被复制到Buffer的数据存储区。
         如果为null，数据存储区仍会被创建，但是不会进行初始化和定义
     * @param usage
         GLenum 指定数据存储区的使用方法。可取以下值：
            gl.STATIC_DRAW: 缓冲区的内容可能经常使用，而不会经常更改。内容被写入缓冲区，但不被读取。
            gl.DYNAMIC_DRAW: 缓冲区的内容可能经常被使用，并且经常更改。内容被写入缓冲区，但不被读取。
            gl.STREAM_DRAW: 缓冲区的内容可能不会经常使用。内容被写入缓冲区，但不被读取。
            当使用 WebGL 2 context 时，可以使用以下值：
            gl.STATIC_READ: 缓冲区的内容可能经常使用，而不会经常更改。内容从缓冲区读取，但不写入。
            gl.DYNAMIC_READ: 缓冲区的内容可能经常使用，并且经常更改。内容从缓冲区读取，但不写入。
            gl.STREAM_READ: 缓冲区的内容可能不会经常使用。内容从缓冲区读取，但不写入。
            gl.STATIC_COPY: 缓冲区的内容可能经常使用，而不会经常更改。用户不会从缓冲区读取内容，也不写入。
            gl.DYNAMIC_COPY: 缓冲区的内容可能经常使用，并且经常更改。用户不会从缓冲区读取内容，也不写入。
            gl.STREAM_COPY: 缓冲区的内容可能不会经常使用。用户不会从缓冲区读取内容，也不写入
     * @param srcOffset
           GLuint 指定读取缓冲时的初始元素索引偏移量
     * @param length
            GLuint 默认为0
        @error
            如果无法创建size指定大小的数据存储区，则会抛出gl.OUT_OF_MEMORY异常。
            如果size是负值，则会抛出gl.INVALID_VALUE异常。
            如果target或usage不属于枚举值之列，则会抛出gl.INVALID_ENUM异常
     */
    function bufferDataForWebgl2(target, srcData, usage, srcOffset, length) {
        //gl.bufferData(target, srcData, usage, srcOffset, length)
    }
    GLapi.bufferDataForWebgl2 = bufferDataForWebgl2;
})(GLapi || (GLapi = {}));
},{}],52:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GLEnums_1 = require("./GLEnums");
var GLapi_1 = require("./GLapi");
var _default = {
    // blend
    blend: false,
    blendSep: false,
    blendColor: 0xffffffff,
    blendEq: GLEnums_1.glblend_func.ADD,
    blendAlphaEq: GLEnums_1.glblend_func.ADD,
    blendSrc: GLEnums_1.glblend.ONE,
    blendDst: GLEnums_1.glblend.ZERO,
    blendSrcAlpha: GLEnums_1.glblend.ONE,
    blendDstAlpha: GLEnums_1.glblend.ZERO,
    // depth
    depthTest: false,
    depthWrite: false,
    depthFunc: GLapi_1.glEnums.DS_FUNC_LESS,
    // stencil
    stencilTest: false,
    stencilSep: false,
    stencilFuncFront: GLapi_1.glEnums.DS_FUNC_ALWAYS,
    stencilRefFront: 0,
    stencilMaskFront: 0xff,
    stencilFailOpFront: GLapi_1.glEnums.STENCIL_OP_KEEP,
    stencilZFailOpFront: GLapi_1.glEnums.STENCIL_OP_KEEP,
    stencilZPassOpFront: GLapi_1.glEnums.STENCIL_OP_KEEP,
    stencilWriteMaskFront: 0xff,
    stencilFuncBack: GLapi_1.glEnums.DS_FUNC_ALWAYS,
    stencilRefBack: 0,
    stencilMaskBack: 0xff,
    stencilFailOpBack: GLapi_1.glEnums.STENCIL_OP_KEEP,
    stencilZFailOpBack: GLapi_1.glEnums.STENCIL_OP_KEEP,
    stencilZPassOpBack: GLapi_1.glEnums.STENCIL_OP_KEEP,
    stencilWriteMaskBack: 0xff,
    //Scissor
    ScissorTest: false,
    // cull-mode
    cullMode: GLapi_1.glEnums.CULL_BACK,
    // primitive-type
    primitiveType: GLapi_1.glEnums.PT_TRIANGLES,
    // bindings
    maxStream: -1,
    vertexBuffers: [],
    vertexBufferOffsets: [],
    indexBuffer: null,
    maxTextureSlot: -1,
    textureUnits: [],
    program: null,
    viewPort: null
};
var State = /** @class */ (function () {
    function State(device) {
        this.set(_default);
    }
    State.prototype.isSameViewPort = function (x, y, width, height) {
        if (!this.viewPort) {
            return false;
        }
        if (this.viewPort.x == x && this.viewPort.y == y && this.viewPort.width == width && this.viewPort.height == height) {
            return true;
        }
        return false;
    };
    State.prototype.setViewPort = function (x, y, width, height) {
        this.viewPort = {};
        this.viewPort.x = x;
        this.viewPort.y = y;
        this.viewPort.width = width;
        this.viewPort.height = height;
    };
    State.prototype.getViewPort = function () {
        return this.viewPort;
    };
    State.initDefault = function (device) {
        // _default.vertexBuffers = new Array(device._caps.maxVertexStreams);
        // _default.vertexBufferOffsets = new Array(device._caps.maxVertexStreams);
        // _default.textureUnits = new Array(device._caps.maxTextureUnits);
    };
    State.prototype.reset = function () {
        this.set(_default);
    };
    State.prototype.set = function (cpy) {
        // blending
        this.blend = cpy.blend;
        this.blendSep = cpy.blendSep;
        this.blendColor = cpy.blendColor;
        this.blendEq = cpy.blendEq;
        this.blendAlphaEq = cpy.blendAlphaEq;
        this.blendSrc = cpy.blendSrc;
        this.blendDst = cpy.blendDst;
        this.blendSrcAlpha = cpy.blendSrcAlpha;
        this.blendDstAlpha = cpy.blendDstAlpha;
        // depth
        this.depthTest = cpy.depthTest;
        this.depthWrite = cpy.depthWrite;
        this.depthFunc = cpy.depthFunc;
        // stencil
        this.stencilTest = cpy.stencilTest;
        this.stencilSep = cpy.stencilSep;
        this.stencilFuncFront = cpy.stencilFuncFront;
        this.stencilRefFront = cpy.stencilRefFront;
        this.stencilMaskFront = cpy.stencilMaskFront;
        this.stencilFailOpFront = cpy.stencilFailOpFront;
        this.stencilZFailOpFront = cpy.stencilZFailOpFront;
        this.stencilZPassOpFront = cpy.stencilZPassOpFront;
        this.stencilWriteMaskFront = cpy.stencilWriteMaskFront;
        this.stencilFuncBack = cpy.stencilFuncBack;
        this.stencilRefBack = cpy.stencilRefBack;
        this.stencilMaskBack = cpy.stencilMaskBack;
        this.stencilFailOpBack = cpy.stencilFailOpBack;
        this.stencilZFailOpBack = cpy.stencilZFailOpBack;
        this.stencilZPassOpBack = cpy.stencilZPassOpBack;
        this.stencilWriteMaskBack = cpy.stencilWriteMaskBack;
        this.ScissorTest = cpy.ScissorTest;
        // cull-mode
        this.cullMode = cpy.cullMode;
        // primitive-type
        this.primitiveType = cpy.primitiveType;
        // // buffer bindings
        // this.maxStream = cpy.maxStream;
        // for (let i = 0; i < cpy.vertexBuffers.length; ++i) {
        //     this.vertexBuffers[i] = cpy.vertexBuffers[i];
        // }
        // for (let i = 0; i < cpy.vertexBufferOffsets.length; ++i) {
        //     this.vertexBufferOffsets[i] = cpy.vertexBufferOffsets[i];
        // }
        // this.indexBuffer = cpy.indexBuffer;
        // // texture bindings
        // this.maxTextureSlot = cpy.maxTextureSlot;
        // for (let i = 0; i < cpy.textureUnits.length; ++i) {
        //     this.textureUnits[i] = cpy.textureUnits[i];
        // }
        this.program = cpy.program;
        this.viewPort = cpy.viewPort;
    };
    return State;
}());
exports.default = State;
},{"./GLEnums":50,"./GLapi":51}],53:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_LightCenter = void 0;
var Matrix_1 = require("../../Matrix");
var UiSetting_1 = require("../../ui/UiSetting");
var MathUtils_1 = require("../../utils/MathUtils");
var LightData_1 = require("../data/LightData");
var LightCenter = /** @class */ (function () {
    function LightCenter() {
        this._lightData = new LightData_1.LightData();
    }
    LightCenter.prototype.init = function () {
        this._cameraMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._projectMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._lightReverseDir = new Float32Array(3);
        UiSetting_1.G_UISetting.pushRenderCallBack(this.render.bind(this));
    };
    Object.defineProperty(LightCenter.prototype, "lightData", {
        get: function () {
            return this._lightData;
        },
        enumerable: false,
        configurable: true
    });
    LightCenter.prototype.setData = function (pos, dir, color) {
        this._lightData.setData(pos, dir, color);
    };
    LightCenter.prototype.reset = function () {
        this._lightData.reset();
    };
    LightCenter.prototype.render = function (setting) {
        this._lightData.posX = setting.lightPosX;
        this._lightData.posY = setting.lightPosY;
        this._lightData.posZ = setting.lightPosZ;
        this._lightData.colR = setting.lightColorR;
        this._lightData.colG = setting.lightColorG;
        this._lightData.colB = setting.lightColorB;
        this._lightData.colA = setting.lightColorA;
        this._lightData.dirX = setting.lightDirX;
        this._lightData.dirY = setting.lightDirY;
        this._lightData.dirZ = setting.lightDirZ;
        this._lightData.targetX = setting.lightTargetX;
        this._lightData.targetY = setting.lightTargetY;
        this._lightData.targetZ = setting.lightTargetZ;
        this._lightData.projHeight = setting.lightProjHeight;
        this._lightData.projWidth = setting.lightProjWidth;
        this._lightData.fieldOfView = setting.lightFieldOfView;
        this._lightData.bias = setting.lightBias;
    };
    /**
     * 获取光照摄像机数据
     */
    LightCenter.prototype.updateLightCameraData = function () {
        // first draw from the POV of the light
        /**
         * lightWorldMatrix是光照摄像机的视野坐标系
         * x  y  z  p
         * 0  4  8  12
         * 1  5  9  13
         * 2  6  10 14 这个其实是光照方向
         * 3  7  11 15
         *
         * 1  0  0  0
         * 0  1  0  0
         * 0  0  1  0 这个其实是光照方向
         * 0  0  0  1
         */
        Matrix_1.glMatrix.mat4.lookAt2(this._cameraMatrix, [this._lightData.posX, this._lightData.posY, this._lightData.posZ], // position
        [this._lightData.targetX, this._lightData.targetY, this._lightData.targetZ], // target
        [0, 1, 0]);
        Matrix_1.glMatrix.vec3.normalize(this._lightReverseDir, this._cameraMatrix.slice(8, 11));
        this._lightData.perspective ? Matrix_1.glMatrix.mat4.perspective(this._projectMatrix, MathUtils_1.MathUtils.degToRad(this._lightData.fieldOfView), this._lightData.projWidth / this._lightData.projHeight, 0.5, // near
        1000) // far
            : Matrix_1.glMatrix.mat4.ortho(this._projectMatrix, -this._lightData.projWidth / 2, // left
            this._lightData.projWidth / 2, // right
            -this._lightData.projHeight / 2, // bottom
            this._lightData.projHeight / 2, // top
            0.5, // near
            1000); // far
        return {
            mat: this._cameraMatrix,
            reverseDir: this._lightReverseDir,
            project: this._projectMatrix,
            pos: [this._lightData.posX, this._lightData.posY, this._lightData.posZ]
        };
    };
    return LightCenter;
}());
exports.G_LightCenter = new LightCenter();
},{"../../Matrix":6,"../../ui/UiSetting":61,"../../utils/MathUtils":62,"../data/LightData":48}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_LightModel = void 0;
var Device_1 = require("../../Device");
var Matrix_1 = require("../../Matrix");
var ShaderFactory_1 = require("../shader/ShaderFactory");
var vertBase = "attribute vec4 a_position;\nuniform mat4 u_projection;\nuniform mat4 u_view;\nuniform mat4 u_world;\nvoid main() {\ngl_Position = u_projection * u_view * u_world * a_position;\n}";
var fragBase = "precision mediump float;\n\n//\u5206\u89E3\u4FDD\u5B58\u6DF1\u5EA6\u503C\n// vec4 pack (float depth) {\n//     // \u4F7F\u7528rgba 4\u5B57\u8282\u517132\u4F4D\u6765\u5B58\u50A8z\u503C,1\u4E2A\u5B57\u8282\u7CBE\u5EA6\u4E3A1/256\n//     const vec4 bitShift = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\n//     const vec4 bitMask = vec4(1.0/256.0, 1.0/256.0, 1.0/256.0, 0.0);\n//     // gl_FragCoord:\u7247\u5143\u7684\u5750\u6807,fract():\u8FD4\u56DE\u6570\u503C\u7684\u5C0F\u6570\u90E8\u5206\n//     vec4 rgbaDepth = fract(depth * bitShift); //\u8BA1\u7B97\u6BCF\u4E2A\u70B9\u7684z\u503C \n//     rgbaDepth -= rgbaDepth.rgba * bitMask; // Cut off the value which do not fit in 8 bits\n//     return rgbaDepth;\n// }\n\nvoid main() {\ngl_FragColor = vec4(gl_FragCoord.z,0.0,0.0,1.0);  //\u5C06\u6DF1\u5EA6\u503C\u5B58\u5728\u5E27\u7F13\u51B2\u7684\u989C\u8272\u7F13\u51B2\u4E2D \u5982\u679C\u5E27\u7F13\u51B2\u548C\u7A97\u53E3\u7ED1\u5B9A \u90A3\u4E48\u5C31\u663E\u793A\u51FA\u6765 \u5982\u679C\u5E27\u7F13\u51B2\u548C\u7EB9\u7406\u7ED1\u5B9A\u5C31\u5B58\u50A8\u5728\u7EB9\u7406\u4E2D\n}";
var LightModel = /** @class */ (function () {
    function LightModel() {
    }
    LightModel.prototype.init = function () {
        this._colorProgramInfo = ShaderFactory_1.G_ShaderFactory.createProgramInfo(vertBase, fragBase);
        this.gl = Device_1.default.Instance.gl;
        this._cubeLinesBufferInfo = ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays({
            position: [
                -1, -1, -1,
                1, -1, -1,
                -1, 1, -1,
                1, 1, -1,
                -1, -1, 1,
                1, -1, 1,
                -1, 1, 1,
                1, 1, 1,
            ],
            indices: [
                0, 1,
                1, 3,
                3, 2,
                2, 0,
                4, 5,
                5, 7,
                7, 6,
                6, 4,
                0, 4,
                1, 5,
                3, 7,
                2, 6,
            ],
        });
    };
    /**
 * 绘制光源
 * @param projectionMatrix
 * @param cameraMatrix
 * @param worldMatrix
 */
    LightModel.prototype.drawFrustum = function (projectionMatrix, cameraMatrix, worldMatrix) {
        var gl = this.gl;
        var viewMatrix = Matrix_1.glMatrix.mat4.invert(null, cameraMatrix);
        gl.useProgram(this._colorProgramInfo.spGlID);
        // Setup all the needed attributes.
        ShaderFactory_1.G_ShaderFactory.setBuffersAndAttributes(this._colorProgramInfo.attrSetters, this._cubeLinesBufferInfo);
        // scale the cube in Z so it's really long
        // to represent the texture is being projected to
        // infinity
        // Set the uniforms we just computed
        ShaderFactory_1.G_ShaderFactory.setUniforms(this._colorProgramInfo.uniSetters, {
            u_view: viewMatrix,
            u_projection: projectionMatrix,
            u_world: worldMatrix,
        });
        // calls gl.drawArrays or gl.drawElements
        ShaderFactory_1.G_ShaderFactory.drawBufferInfo(this._cubeLinesBufferInfo, gl.LINES);
    };
    return LightModel;
}());
exports.G_LightModel = new LightModel();
},{"../../Device":3,"../../Matrix":6,"../shader/ShaderFactory":59}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syPrimitives = void 0;
var Matrix_1 = require("../../Matrix");
var ShaderFactory_1 = require("./ShaderFactory");
/**
 * 绘制中心
 */
var syPrimitives;
(function (syPrimitives) {
    function applyFuncToV3Array(array, matrix, fn) {
        var len = array.length;
        var tmp = new Float32Array(3);
        for (var ii = 0; ii < len; ii += 3) {
            fn(tmp, matrix, [array[ii], array[ii + 1], array[ii + 2]]);
            array[ii] = tmp[0];
            array[ii + 1] = tmp[1];
            array[ii + 2] = tmp[2];
        }
    }
    function transformNormal(dst, mi, v) {
        dst = dst || new Float32Array(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
        dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
        dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];
        return dst;
    }
    /**
     * Reorients directions by the given matrix..
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientDirections(array, matrix) {
        applyFuncToV3Array(array, matrix, Matrix_1.glMatrix.mat4.transformDirection);
        return array;
    }
    /**
     * Reorients normals by the inverse-transpose of the given
     * matrix..
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientNormals(array, matrix) {
        var invertM = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.invert(invertM, matrix);
        applyFuncToV3Array(array, invertM, transformNormal);
        return array;
    }
    /**
     * Reorients positions by the given matrix. In other words, it
     * multiplies each vertex by the given matrix.
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientPositions(array, matrix) {
        applyFuncToV3Array(array, matrix, Matrix_1.glMatrix.mat4.transformPoint);
        return array;
    }
    /**
     * Reorients arrays by the given matrix. Assumes arrays have
     * names that contains 'pos' could be reoriented as positions,
     * 'binorm' or 'tan' as directions, and 'norm' as normals.
     *
     * @param {Object.<string, (number[]|TypedArray)>} arrays The vertices to reorient
     * @param {Matrix} matrix matrix to reorient by.
     * @return {Object.<string, (number[]|TypedArray)>} same arrays that were passed in.
     * @memberOf module:primitives
     */
    function reorientVertices(arrays, matrix) {
        Object.keys(arrays).forEach(function (name) {
            var array = arrays[name];
            if (name.indexOf('pos') >= 0) {
                reorientPositions(array, matrix);
            }
            else if (name.indexOf('tan') >= 0 || name.indexOf('binorm') >= 0) {
                reorientDirections(array, matrix);
            }
            else if (name.indexOf('norm') >= 0) {
                reorientNormals(array, matrix);
            }
        });
        return arrays;
    }
    /**
     * creates a random integer between 0 and range - 1 inclusive.
     * @param {number} range
     * @return {number} random value between 0 and range - 1 inclusive.
     */
    function randInt(range) {
        return Math.random() * range | 0;
    }
    /**
     * Creates XZ plane vertices.
     * The created plane has position, normal and uv streams.
     *
     * @param {number} [width] Width of the plane. Default = 1
     * @param {number} [depth] Depth of the plane. Default = 1
     * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
     * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
     * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {
        width = width || 1;
        depth = depth || 1;
        subdivisionsWidth = subdivisionsWidth || 1;
        subdivisionsDepth = subdivisionsDepth || 1;
        matrix = matrix || Matrix_1.glMatrix.mat4.identity(null);
        var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);
        var positions = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texcoords = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        for (var z = 0; z <= subdivisionsDepth; z++) {
            for (var x = 0; x <= subdivisionsWidth; x++) {
                var u = x / subdivisionsWidth;
                var v = z / subdivisionsDepth;
                positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);
                normals.push(0, 1, 0);
                texcoords.push(u, v);
            }
        }
        var numVertsAcross = subdivisionsWidth + 1;
        var indices = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);
        for (var z = 0; z < subdivisionsDepth; z++) {
            for (var x = 0; x < subdivisionsWidth; x++) {
                // Make triangle 1 of quad.
                indices.push((z + 0) * numVertsAcross + x, (z + 1) * numVertsAcross + x, (z + 0) * numVertsAcross + x + 1);
                // Make triangle 2 of quad.
                indices.push((z + 1) * numVertsAcross + x, (z + 1) * numVertsAcross + x + 1, (z + 0) * numVertsAcross + x + 1);
            }
        }
        var arrays = reorientVertices({
            position: positions,
            normal: normals,
            texcoord: texcoords,
            indices: indices,
        }, matrix);
        return arrays;
    }
    syPrimitives.createPlaneVertices = createPlaneVertices;
    /**
     * Creates sphere vertices.
     * The created sphere has position, normal and uv streams.
     * @param {number} radius radius of the sphere.
     * @param {number} subdivisionsAxis number of steps around the sphere.
     * @param {number} subdivisionsHeight number of vertically on the sphere.
     * @param {number} [opt_startLatitudeInRadians] where to start the
     *     top of the sphere. Default = 0.
     * @param {number} [opt_endLatitudeInRadians] Where to end the
     *     bottom of the sphere. Default = Math.PI.
     * @param {number} [opt_startLongitudeInRadians] where to start
     *     wrapping the sphere. Default = 0.
     * @param {number} [opt_endLongitudeInRadians] where to end
     *     wrapping the sphere. Default = 2 * Math.PI.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {
        if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {
            throw Error('subdivisionAxis and subdivisionHeight must be > 0');
        }
        opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;
        opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;
        opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;
        opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);
        var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;
        var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;
        // We are going to generate our sphere by iterating through its
        // spherical coordinates and generating 2 triangles for each quad on a
        // ring of the sphere.
        var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);
        var positions = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texCoords = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        // Generate the individual vertices in our vertex buffer.
        for (var y = 0; y <= subdivisionsHeight; y++) {
            for (var x = 0; x <= subdivisionsAxis; x++) {
                // Generate a vertex based on its spherical coordinates
                var u = x / subdivisionsAxis;
                var v = y / subdivisionsHeight;
                var theta = longRange * u;
                var phi = latRange * v;
                var sinTheta = Math.sin(theta);
                var cosTheta = Math.cos(theta);
                var sinPhi = Math.sin(phi);
                var cosPhi = Math.cos(phi);
                var ux = cosTheta * sinPhi;
                var uy = cosPhi;
                var uz = sinTheta * sinPhi;
                positions.push(radius * ux, radius * uy, radius * uz);
                normals.push(ux, uy, uz);
                texCoords.push(1 - u, v);
            }
        }
        var numVertsAround = subdivisionsAxis + 1;
        var indices = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);
        for (var x = 0; x < subdivisionsAxis; x++) {
            for (var y = 0; y < subdivisionsHeight; y++) {
                // Make triangle 1 of quad.
                indices.push((y + 0) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x);
                // Make triangle 2 of quad.
                indices.push((y + 1) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x + 1);
            }
        }
        return {
            position: positions,
            normal: normals,
            texcoord: texCoords,
            indices: indices,
        };
    }
    syPrimitives.createSphereVertices = createSphereVertices;
    /**
    * Array of the indices of corners of each face of a cube.
    * @type {Array.<number[]>}
    */
    var CUBE_FACE_INDICES = [
        [3, 7, 5, 1],
        [6, 2, 0, 4],
        [6, 7, 3, 2],
        [0, 1, 5, 4],
        [7, 6, 4, 5],
        [2, 3, 1, 0],
    ];
    /**
     * Creates the vertices and indices for a cube. The
     * cube will be created around the origin. (-size / 2, size / 2)
     *
     * @param {number} size Width, height and depth of the cube.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createCubeVertices(size) {
        var k = size / 2;
        var cornerVertices = [
            [-k, -k, -k],
            [+k, -k, -k],
            [-k, +k, -k],
            [+k, +k, -k],
            [-k, -k, +k],
            [+k, -k, +k],
            [-k, +k, +k],
            [+k, +k, +k],
        ];
        var faceNormals = [
            [+1, +0, +0],
            [-1, +0, +0],
            [+0, +1, +0],
            [+0, -1, +0],
            [+0, +0, +1],
            [+0, +0, -1],
        ];
        var uvCoords = [
            [1, 0],
            [0, 0],
            [0, 1],
            [1, 1],
        ];
        var numVertices = 6 * 4;
        var positions = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texCoords = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        var indices = ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, 6 * 2, Uint16Array);
        for (var f = 0; f < 6; ++f) {
            var faceIndices = CUBE_FACE_INDICES[f];
            for (var v = 0; v < 4; ++v) {
                var position = cornerVertices[faceIndices[v]];
                var normal = faceNormals[f];
                var uv = uvCoords[v];
                // Each face needs all four vertices because the normals and texture
                // coordinates are not all the same.
                positions.push(position);
                normals.push(normal);
                texCoords.push(uv);
            }
            // Two triangles make a square face.
            var offset = 4 * f;
            indices.push(offset + 0, offset + 1, offset + 2);
            indices.push(offset + 0, offset + 2, offset + 3);
        }
        return {
            position: positions,
            normal: normals,
            texcoord: texCoords,
            indices: indices,
        };
    }
    syPrimitives.createCubeVertices = createCubeVertices;
    /**
    * Expands RLE data
    * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z
    * @param {number[]} [padding] value to add each entry with.
    * @return {number[]} the expanded rleData
    */
    function expandRLEData(rleData, padding) {
        padding = padding || [];
        var data = [];
        for (var ii = 0; ii < rleData.length; ii += 4) {
            var runLength = rleData[ii];
            var element = rleData.slice(ii + 1, ii + 4);
            element.push.apply(element, padding);
            for (var jj = 0; jj < runLength; ++jj) {
                data.push.apply(data, element);
            }
        }
        return data;
    }
    syPrimitives.expandRLEData = expandRLEData;
    /**
    * Creates 3D 'F' vertices.
    * An 'F' is useful because you can easily tell which way it is oriented.
    * The created 'F' has position, normal and uv streams.
    *
    * @return {Object.<string, TypedArray>} The
    *         created plane vertices.
    * @memberOf module:primitives
    */
    function create3DFVertices() {
        var positions = [
            // left column front
            0, 0, 0,
            0, 150, 0,
            30, 0, 0,
            0, 150, 0,
            30, 150, 0,
            30, 0, 0,
            // top rung front
            30, 0, 0,
            30, 30, 0,
            100, 0, 0,
            30, 30, 0,
            100, 30, 0,
            100, 0, 0,
            // middle rung front
            30, 60, 0,
            30, 90, 0,
            67, 60, 0,
            30, 90, 0,
            67, 90, 0,
            67, 60, 0,
            // left column back
            0, 0, 30,
            30, 0, 30,
            0, 150, 30,
            0, 150, 30,
            30, 0, 30,
            30, 150, 30,
            // top rung back
            30, 0, 30,
            100, 0, 30,
            30, 30, 30,
            30, 30, 30,
            100, 0, 30,
            100, 30, 30,
            // middle rung back
            30, 60, 30,
            67, 60, 30,
            30, 90, 30,
            30, 90, 30,
            67, 60, 30,
            67, 90, 30,
            // top
            0, 0, 0,
            100, 0, 0,
            100, 0, 30,
            0, 0, 0,
            100, 0, 30,
            0, 0, 30,
            // top rung right
            100, 0, 0,
            100, 30, 0,
            100, 30, 30,
            100, 0, 0,
            100, 30, 30,
            100, 0, 30,
            // under top rung
            30, 30, 0,
            30, 30, 30,
            100, 30, 30,
            30, 30, 0,
            100, 30, 30,
            100, 30, 0,
            // between top rung and middle
            30, 30, 0,
            30, 60, 30,
            30, 30, 30,
            30, 30, 0,
            30, 60, 0,
            30, 60, 30,
            // top of middle rung
            30, 60, 0,
            67, 60, 30,
            30, 60, 30,
            30, 60, 0,
            67, 60, 0,
            67, 60, 30,
            // right of middle rung
            67, 60, 0,
            67, 90, 30,
            67, 60, 30,
            67, 60, 0,
            67, 90, 0,
            67, 90, 30,
            // bottom of middle rung.
            30, 90, 0,
            30, 90, 30,
            67, 90, 30,
            30, 90, 0,
            67, 90, 30,
            67, 90, 0,
            // right of bottom
            30, 90, 0,
            30, 150, 30,
            30, 90, 30,
            30, 90, 0,
            30, 150, 0,
            30, 150, 30,
            // bottom
            0, 150, 0,
            0, 150, 30,
            30, 150, 30,
            0, 150, 0,
            30, 150, 30,
            30, 150, 0,
            // left side
            0, 0, 0,
            0, 0, 30,
            0, 150, 30,
            0, 0, 0,
            0, 150, 30,
            0, 150, 0,
        ];
        var texcoords = [
            // left column front
            0.22, 0.19,
            0.22, 0.79,
            0.34, 0.19,
            0.22, 0.79,
            0.34, 0.79,
            0.34, 0.19,
            // top rung front
            0.34, 0.19,
            0.34, 0.31,
            0.62, 0.19,
            0.34, 0.31,
            0.62, 0.31,
            0.62, 0.19,
            // middle rung front
            0.34, 0.43,
            0.34, 0.55,
            0.49, 0.43,
            0.34, 0.55,
            0.49, 0.55,
            0.49, 0.43,
            // left column back
            0, 0,
            1, 0,
            0, 1,
            0, 1,
            1, 0,
            1, 1,
            // top rung back
            0, 0,
            1, 0,
            0, 1,
            0, 1,
            1, 0,
            1, 1,
            // middle rung back
            0, 0,
            1, 0,
            0, 1,
            0, 1,
            1, 0,
            1, 1,
            // top
            0, 0,
            1, 0,
            1, 1,
            0, 0,
            1, 1,
            0, 1,
            // top rung right
            0, 0,
            1, 0,
            1, 1,
            0, 0,
            1, 1,
            0, 1,
            // under top rung
            0, 0,
            0, 1,
            1, 1,
            0, 0,
            1, 1,
            1, 0,
            // between top rung and middle
            0, 0,
            1, 1,
            0, 1,
            0, 0,
            1, 0,
            1, 1,
            // top of middle rung
            0, 0,
            1, 1,
            0, 1,
            0, 0,
            1, 0,
            1, 1,
            // right of middle rung
            0, 0,
            1, 1,
            0, 1,
            0, 0,
            1, 0,
            1, 1,
            // bottom of middle rung.
            0, 0,
            0, 1,
            1, 1,
            0, 0,
            1, 1,
            1, 0,
            // right of bottom
            0, 0,
            1, 1,
            0, 1,
            0, 0,
            1, 0,
            1, 1,
            // bottom
            0, 0,
            0, 1,
            1, 1,
            0, 0,
            1, 1,
            1, 0,
            // left side
            0, 0,
            0, 1,
            1, 1,
            0, 0,
            1, 1,
            1, 0,
        ];
        var normals = expandRLEData([
            // left column front
            // top rung front
            // middle rung front
            18, 0, 0, 1,
            // left column back
            // top rung back
            // middle rung back
            18, 0, 0, -1,
            // top
            6, 0, 1, 0,
            // top rung right
            6, 1, 0, 0,
            // under top rung
            6, 0, -1, 0,
            // between top rung and middle
            6, 1, 0, 0,
            // top of middle rung
            6, 0, 1, 0,
            // right of middle rung
            6, 1, 0, 0,
            // bottom of middle rung.
            6, 0, -1, 0,
            // right of bottom
            6, 1, 0, 0,
            // bottom
            6, 0, -1, 0,
            // left side
            6, -1, 0, 0,
        ]);
        var colors = expandRLEData([
            // left column front
            // top rung front
            // middle rung front
            18, 200, 70, 120,
            // left column back
            // top rung back
            // middle rung back
            18, 80, 70, 200,
            // top
            6, 70, 200, 210,
            // top rung right
            6, 200, 200, 70,
            // under top rung
            6, 210, 100, 70,
            // between top rung and middle
            6, 210, 160, 70,
            // top of middle rung
            6, 70, 180, 210,
            // right of middle rung
            6, 100, 70, 210,
            // bottom of middle rung.
            6, 76, 210, 100,
            // right of bottom
            6, 140, 210, 80,
            // bottom
            6, 90, 130, 110,
            // left side
            6, 160, 160, 220,
        ], [255]);
        var numVerts = positions.length / 3;
        var arrays = {
            position: ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVerts),
            texcoord: ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(2, numVerts),
            normal: ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVerts),
            color: ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(4, numVerts, Uint8Array),
            indices: ShaderFactory_1.G_ShaderFactory.createAugmentedTypedArray(3, numVerts / 3, Uint16Array),
        };
        arrays.position.push(positions);
        arrays.texcoord.push(texcoords);
        arrays.normal.push(normals);
        arrays.color.push(colors);
        for (var ii = 0; ii < numVerts; ++ii) {
            arrays.indices.push(ii);
        }
        return arrays;
    }
    syPrimitives.create3DFVertices = create3DFVertices;
    /**
     * creates a function that calls fn to create vertices and then
     * creates a bufferInfo object for them
     */
    function createBufferInfoFunc(fn) {
        return function () {
            var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));
            return ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
        };
    }
    function createSphereBufferInfo(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {
        var arrays = createSphereVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createSphereBufferInfo = createSphereBufferInfo;
    function createPlaneBufferInfo(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {
        var arrays = createPlaneVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createPlaneBufferInfo = createPlaneBufferInfo;
    function createCubeBufferInfo(size) {
        var arrays = createCubeVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createCubeBufferInfo = createCubeBufferInfo;
    function create3DFBufferInfo() {
        var arrays = create3DFVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return ShaderFactory_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.create3DFBufferInfo = create3DFBufferInfo;
    /**
     * return {
    create3DFBufferInfo: createBufferInfoFunc(create3DFVertices),
    create3DFBuffer: createBufferFunc(create3DFVertices),
    create3DFVertices,
    create3DFWithVertexColorsBufferInfo: createFlattenedFunc(create3DFVertices),
    createCubeBufferInfo: createBufferInfoFunc(createCubeVertices),
    createCubeBuffers: createBufferFunc(createCubeVertices),
    createCubeVertices,
    createCubeWithVertexColorsBufferInfo: createFlattenedFunc(createCubeVertices),
    createPlaneBufferInfo: createBufferInfoFunc(createPlaneVertices),
    createPlaneBuffers: createBufferFunc(createPlaneVertices),
    createPlaneVertices,
    createPlaneWithVertexColorsBufferInfo: createFlattenedFunc(createPlaneVertices),
    createXYQuadBufferInfo: createBufferInfoFunc(createXYQuadVertices),
    createXYQuadBuffers: createBufferFunc(createXYQuadVertices),
    createXYQuadVertices,
    createXYQuadWithVertexColorsBufferInfo: createFlattenedFunc(createXYQuadVertices),
    createSphereBufferInfo: createBufferInfoFunc(createSphereVertices),
    createSphereBuffers: createBufferFunc(createSphereVertices),
    createSphereVertices,
    createSphereWithVertexColorsBufferInfo: createFlattenedFunc(createSphereVertices),
    createTruncatedConeBufferInfo: createBufferInfoFunc(createTruncatedConeVertices),
    createTruncatedConeBuffers: createBufferFunc(createTruncatedConeVertices),
    createTruncatedConeVertices,
    createTruncatedConeWithVertexColorsBufferInfo: createFlattenedFunc(createTruncatedConeVertices),
    deindexVertices,
    flattenNormals,
    makeRandomVertexColors,
    reorientDirections,
    reorientNormals,
    reorientPositions,
    reorientVertices,
  };
     */
})(syPrimitives = exports.syPrimitives || (exports.syPrimitives = {}));
},{"../../Matrix":6,"./ShaderFactory":59}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shader = exports.BufferAttribsData = exports.ShaderData = void 0;
var DrawEngine_1 = require("../base/DrawEngine");
var ShaderUseVariantType_1 = require("./ShaderUseVariantType");
var ShaderData = /** @class */ (function () {
    function ShaderData(spGLID, index) {
        this._textureUnit = 0;
        this._index = -1;
        this._spGLID = spGLID;
        this._textureUnit = 0;
        this._index = index;
    }
    Object.defineProperty(ShaderData.prototype, "spGlID", {
        get: function () {
            return this._spGLID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "textureUnit", {
        get: function () {
            return this._textureUnit;
        },
        enumerable: false,
        configurable: true
    });
    ShaderData.prototype.addTextureUnit = function () {
        var before = this._textureUnit;
        this._textureUnit++;
        return before;
    };
    Object.defineProperty(ShaderData.prototype, "uniSetters", {
        get: function () {
            return this._uniformSetters;
        },
        set: function (set) {
            this._uniformSetters = set;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "attrSetters", {
        get: function () {
            return this._attribSetters;
        },
        set: function (set) {
            this._attribSetters = set;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "Index", {
        get: function () {
            return this._index;
        },
        enumerable: false,
        configurable: true
    });
    return ShaderData;
}());
exports.ShaderData = ShaderData;
var BufferAttribsData = /** @class */ (function () {
    function BufferAttribsData(attribs, numElements, indices) {
        this.attribs = attribs;
        this.numElements = numElements;
        this.indices = indices;
    }
    return BufferAttribsData;
}());
exports.BufferAttribsData = BufferAttribsData;
var Shader = /** @class */ (function () {
    function Shader(gl, glID, name) {
        this._useVariantType = [];
        this._gl = gl;
        this._spGLID = glID;
        this.name = name;
        this._useVariantType = [];
        this._useVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.Projection);
        this._useVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.Model);
        this._useVariantType.push(ShaderUseVariantType_1.ShaderUseVariantType.View);
        this.onCreateShader();
    }
    Shader.prototype.onCreateShader = function () {
        var _glID = this._spGLID;
        var gl = this._gl;
        this.a_position_loc = gl.getAttribLocation(_glID, "a_position" /* POSITION */);
        this.a_normal_loc = gl.getAttribLocation(_glID, "a_normal" /* NORMAL */);
        this.a_uv_loc = gl.getAttribLocation(_glID, "a_uv" /* UV */);
        this.a_tangent_loc = gl.getAttribLocation(_glID, "a_tangent" /* TANGENT */);
        this.a_vert_color_loc = gl.getAttribLocation(_glID, "a_color" /* COLOR */);
        this.a_node_matrix_loc = gl.getAttribLocation(_glID, "a_Matrix" /* NODE_Matrix */);
        this.u_color_loc = gl.getUniformLocation(_glID, "u_color" /* UNIFORM_COLOR */);
        this.u_light_color_loc = gl.getUniformLocation(_glID, "u_lightColor" /* LIGHT_COLOR */);
        this.u_light_color_dir_loc = gl.getUniformLocation(_glID, "u_lightColorDir" /* LIGHT_COLOR_DIR */);
        this.u_MVMatrix_loc = gl.getUniformLocation(_glID, "u_MVMatrix" /* MVMatrix */);
        this.u_PMatrix_loc = gl.getUniformLocation(_glID, "u_PMatrix" /* PMatrix */);
        this.u_texCoord_loc = gl.getUniformLocation(_glID, "u_texCoord" /* TEX_COORD */);
        this.u_texCoord1_loc = gl.getUniformLocation(_glID, "u_texCoord1" /* TEX_COORD1 */);
        this.u_texCoord2_loc = gl.getUniformLocation(_glID, "u_texCoord2" /* TEX_COORD2 */);
        this.u_texCoord3_loc = gl.getUniformLocation(_glID, "u_texCoord3" /* TEX_COORD3 */);
        this.u_texCoord4_loc = gl.getUniformLocation(_glID, "u_texCoord4" /* TEX_COORD4 */);
        this.u_texCoord5_loc = gl.getUniformLocation(_glID, "u_texCoord5" /* TEX_COORD5 */);
        this.u_texCoord6_loc = gl.getUniformLocation(_glID, "u_texCoord6" /* TEX_COORD6 */);
        this.u_texCoord7_loc = gl.getUniformLocation(_glID, "u_texCoord7" /* TEX_COORD7 */);
        this.u_texCoord8_loc = gl.getUniformLocation(_glID, "u_texCoord8" /* TEX_COORD8 */);
        this.u_cubeCoord_loc = gl.getUniformLocation(_glID, "u_cubeCoord" /* CUBE_COORD */);
        this.u_skybox_loc = gl.getUniformLocation(_glID, "u_skybox" /* SKYBOX */);
        this.u_pvm_matrix_loc = gl.getUniformLocation(_glID, "u_PVMMatrix" /* PVM_MATRIX */);
        this.u_pvm_matrix_inverse_loc = gl.getUniformLocation(_glID, "u_PVMInverseMatrix" /* PVM_MATRIX_INVERSE */);
        this.u_MMatrix_loc = gl.getUniformLocation(_glID, "u_MMatrix" /* MMatrix */);
        this.u_VMatrix_loc = gl.getUniformLocation(_glID, "u_VMatrix" /* VMatrix */);
        this.u_MIMatrix_loc = gl.getUniformLocation(_glID, "u_MIMatrix" /* MIMatrix */);
        this.u_MTMatrix_loc = gl.getUniformLocation(_glID, "u_MTMatrix" /* MTMatrix */);
        this.u_MITMatrix_loc = gl.getUniformLocation(_glID, "u_MITMatrix" /* MITMatrix */);
        this.u_pv_matrix_loc = gl.getUniformLocation(_glID, "u_PVMatrix" /* PVMatrix */);
        this.u_pv_matrix_inverse_loc = gl.getUniformLocation(_glID, "u_PVInverseMatrix" /* PVMatrix_INVERSE */);
        this.u_camera_world_position_loc = gl.getUniformLocation(_glID, "u_cameraWorldPosition" /* CameraWorldPosition */);
        this.u_light_world_position_loc = gl.getUniformLocation(_glID, "u_lightWorldPosition" /* LightWorldPosition */);
    };
    Shader.prototype.pushShaderVariant = function (type) {
        if (type >= ShaderUseVariantType_1.ShaderUseVariantType.UndefinedMax || type <= ShaderUseVariantType_1.ShaderUseVariantType.UndefinedMin) {
            // console.log("这个类型的矩阵是不合法的！！！！", type);
            return;
        }
        if (this._useVariantType.indexOf(type) >= 0) {
            // console.log("这个类型的矩阵已经有了！！！！", type);
            return;
        }
        this._useVariantType.push(type);
    };
    Object.defineProperty(Shader.prototype, "useVariantType", {
        get: function () {
            return this._useVariantType;
        },
        enumerable: false,
        configurable: true
    });
    Shader.prototype.getCustomAttributeLocation = function (varName) {
        return DrawEngine_1.G_DrawEngine.getAttribLocation(this._spGLID, varName);
    };
    Shader.prototype.getGLID = function () {
        return this._spGLID;
    };
    /**
     * 检查shader中变量的位置是否有效
     * @param loc
     */
    Shader.prototype.checklocValid = function (loc, tagName) {
        return !(loc == null || loc < 0);
    };
    //激活shader
    Shader.prototype.active = function () {
        DrawEngine_1.G_DrawEngine.useProgram(this._spGLID);
    };
    /**
     *
     * @param color 设置使用光的颜色
     */
    Shader.prototype.setUseLightColor = function (color) {
        if (this.checklocValid(this.u_light_color_loc, "u_light_color_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformFloatVec4(this.u_light_color_loc, color);
        }
    };
    /**
     * 设置光照的方向
     * @param direction
     */
    Shader.prototype.setUseLightDirection = function (direction) {
        if (this.checklocValid(this.u_light_color_dir_loc, "u_light_color_dir_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformFloatVec3(this.u_light_color_dir_loc, direction);
        }
    };
    /**
   * 设置使用节点自定义颜色
   * @param color
   */
    Shader.prototype.setUseNodeColor = function (color) {
        if (this.checklocValid(this.u_color_loc, "u_color_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformFloatVec4(this.u_color_loc, color);
        }
    };
    /**
     * 设置使用节点自定义颜色
     * @param color
     */
    Shader.prototype.setUseNodeVertColor = function (glID, itemSize) {
        if (this.checklocValid(this.a_vert_color_loc, "a_vert_color_loc")) {
            DrawEngine_1.G_DrawEngine.activeVertexAttribArray(glID, this.a_vert_color_loc, itemSize);
        }
    };
    /**
     * 设置使用节点自定义矩阵
     * @param glID
     * @param itemSize
     */
    Shader.prototype.setUseNodeCustomMatrix = function (glID, itemSize) {
        if (this.checklocValid(this.a_node_matrix_loc, "a_node_matrix_loc")) {
            DrawEngine_1.G_DrawEngine.activeMatrixVertexAttribArray(glID, this.a_node_matrix_loc, itemSize);
        }
    };
    /**
     * 设置使用相机的世界位置
     * @param pos
     */
    Shader.prototype.setUseCameraWorldPosition = function (pos) {
        if (this.checklocValid(this.u_camera_world_position_loc, "u_camera_world_position_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformFloatVec3(this.u_camera_world_position_loc, pos);
        }
    };
    /**
     * 设置使用光的世界位置
     * @param pos
     */
    Shader.prototype.setUseLightWorldPosition = function (pos) {
        if (this.checklocValid(this.u_light_world_position_loc, "u_light_world_position_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformFloatVec3(this.u_light_world_position_loc, pos);
        }
    };
    //设置使用的纹理
    //注意如果此处不重新设置使用的纹理，那么会默认使用上一次绘制时的纹理
    Shader.prototype.setUseTexture = function (glID, pos) {
        if (pos === void 0) { pos = 0; }
        var loc = (pos == 0) ? "u_texCoord_loc" : "u_texCoord" + pos + "_loc";
        if (this.checklocValid(this[loc], loc)) {
            DrawEngine_1.G_DrawEngine.active2DTexture(glID, this[loc], pos);
        }
    };
    Shader.prototype.setUseSkyBox = function (glID) {
        if (this.checklocValid(this.u_skybox_loc, "u_skybox_loc")) {
            var gl = this._gl;
            gl.enable(gl.CULL_FACE);
            gl.enable(gl.DEPTH_TEST);
            gl.depthFunc(gl.LEQUAL);
            DrawEngine_1.G_DrawEngine.activeCubeTexture(glID, this.u_skybox_loc, 0);
        }
    };
    Shader.prototype.setUseCubeTexture = function (glID) {
        if (this.checklocValid(this.u_cubeCoord_loc, "u_cubeCoord_loc")) {
            DrawEngine_1.G_DrawEngine.activeCubeTexture(glID, this.u_cubeCoord_loc, 0);
        }
    };
    //设置使用投影视口模型矩阵
    Shader.prototype.setUseProjectViewModelMatrix = function (pvmMatrix) {
        if (this.checklocValid(this.u_pvm_matrix_loc, "u_pvm_matrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_pvm_matrix_loc, pvmMatrix);
        }
    };
    Shader.prototype.setUseProjectionViewMatrix = function (mat) {
        if (this.checklocValid(this.u_pv_matrix_loc, "u_pv_matrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_pv_matrix_loc, mat);
        }
    };
    Shader.prototype.setUseProjectionViewInverseMatrix = function (mat) {
        if (this.checklocValid(this.u_pv_matrix_inverse_loc, "u_pv_matrix_inverse_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_pv_matrix_inverse_loc, mat);
        }
    };
    //设置使用投影视口模型矩阵的逆矩阵
    Shader.prototype.setUseProjectViewModelInverseMatrix = function (matrix) {
        if (this.checklocValid(this.u_pvm_matrix_inverse_loc, "u_pvm_matrix_inverse_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_pvm_matrix_inverse_loc, matrix);
        }
    };
    //设置视口矩阵
    Shader.prototype.setUseViewMatrix = function (vMatrix) {
        if (this.checklocValid(this.u_VMatrix_loc, "u_VMatrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_VMatrix_loc, vMatrix);
        }
    };
    //设置模型视口矩阵
    Shader.prototype.setUseModelViewMatrix = function (mvMatrix) {
        if (this.checklocValid(this.u_MVMatrix_loc, "u_MVMatrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_MVMatrix_loc, mvMatrix);
        }
    };
    //设置透视投影矩阵
    Shader.prototype.setUseProjectionMatrix = function (projMatrix) {
        if (this.checklocValid(this.u_PMatrix_loc, "u_PMatrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_PMatrix_loc, projMatrix);
        }
    };
    //设置模型世界矩阵
    Shader.prototype.setUseModelWorldMatrix = function (wMatrix) {
        if (this.checklocValid(this.u_MMatrix_loc, "u_MMatrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_MMatrix_loc, wMatrix);
        }
    };
    //设置模型世界矩阵的逆矩阵
    Shader.prototype.setUseModelWorldInverseMatrix = function (wiMatrix) {
        if (this.checklocValid(this.u_MIMatrix_loc, "u_MIMatrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_MIMatrix_loc, wiMatrix);
        }
    };
    //设置模型世界矩阵的转置矩阵
    Shader.prototype.setUseModelTransformWorldMatrix = function (wtMatrix) {
        if (this.checklocValid(this.u_MTMatrix_loc, "u_MTMatrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_MTMatrix_loc, wtMatrix);
        }
    };
    //设置模型世界矩阵的逆矩阵的转置矩阵
    Shader.prototype.setUseModelInverseTransformWorldMatrix = function (witMatrix) {
        if (this.checklocValid(this.u_MITMatrix_loc, "u_MITMatrix_loc")) {
            DrawEngine_1.G_DrawEngine.setUniformMatrix(this.u_MITMatrix_loc, witMatrix);
        }
    };
    //设置顶点值
    Shader.prototype.setUseVertexAttribPointerForVertex = function (glID, itemSize) {
        if (this.checklocValid(this.a_position_loc, "a_position_loc")) {
            DrawEngine_1.G_DrawEngine.activeVertexAttribArray(glID, this.a_position_loc, itemSize);
        }
    };
    //设置法线值
    Shader.prototype.setUseVertexAttriPointerForNormal = function (glID, itemSize) {
        if (this.checklocValid(this.a_normal_loc, "a_normal_loc")) {
            DrawEngine_1.G_DrawEngine.activeVertexAttribArray(glID, this.a_normal_loc, itemSize);
        }
    };
    //设置uv值
    Shader.prototype.setUseVertexAttribPointerForUV = function (glID, itemSize) {
        if (this.checklocValid(this.a_uv_loc, "a_uv_loc")) {
            DrawEngine_1.G_DrawEngine.activeVertexAttribArray(glID, this.a_uv_loc, itemSize);
        }
    };
    Shader.prototype.disableVertexAttribArray = function () {
        if (this.checklocValid(this.a_position_loc, "a_position_loc")) { // 设定为数组类型的变量数据
            DrawEngine_1.G_DrawEngine.disableVertexAttribArray(this.a_position_loc);
        }
        if (this.checklocValid(this.a_uv_loc, "a_uv_loc")) {
            DrawEngine_1.G_DrawEngine.disableVertexAttribArray(this.a_uv_loc);
        }
        if (this.checklocValid(this.a_normal_loc, "a_normal_loc")) {
            DrawEngine_1.G_DrawEngine.disableVertexAttribArray(this.a_normal_loc);
        }
        if (this.checklocValid(this.a_tangent_loc, "a_tangent_loc")) {
            DrawEngine_1.G_DrawEngine.disableVertexAttribArray(this.a_tangent_loc);
        }
        if (this.checklocValid(this.a_node_matrix_loc, "a_node_matrix_loc")) {
            DrawEngine_1.G_DrawEngine.disableVertexAttribArray(this.a_node_matrix_loc);
        }
        if (this.checklocValid(this.a_vert_color_loc, "a_vert_color_loc")) {
            DrawEngine_1.G_DrawEngine.disableVertexAttribArray(this.a_vert_color_loc);
        }
    };
    return Shader;
}());
exports.Shader = Shader;
},{"../base/DrawEngine":20,"./ShaderUseVariantType":60}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_ShaderCenter = exports.ShaderType = void 0;
var Device_1 = require("../../Device");
var Shader_1 = require("./Shader");
var ShaderCode_1 = require("./ShaderCode");
var ShaderFactory_1 = require("./ShaderFactory");
var ShaderType;
(function (ShaderType) {
    ShaderType[ShaderType["Custom"] = 1] = "Custom";
    ShaderType[ShaderType["Line"] = 2] = "Line";
    ShaderType[ShaderType["Sprite"] = 3] = "Sprite";
    ShaderType[ShaderType["Label"] = 4] = "Label";
    ShaderType[ShaderType["Spine"] = 5] = "Spine";
    ShaderType[ShaderType["ShadowMap"] = 6] = "ShadowMap";
})(ShaderType = exports.ShaderType || (exports.ShaderType = {}));
var ShaderCenter = /** @class */ (function () {
    function ShaderCenter() {
        this._shaderMap = new Map();
        this._shaderCount = 0;
    }
    ShaderCenter.prototype.createShaderName = function (type) {
        switch (type) {
            case ShaderType.Custom:
                this._shaderCount++;
                return "custom" + this._shaderCount;
            case ShaderType.Label:
                return "label";
            case ShaderType.Line:
                return "line";
            case ShaderType.Sprite:
                return "sprite";
            case ShaderType.Spine:
                return "spine";
            case ShaderType.ShadowMap:
                return "shadowMap";
            default: console.log("您输入的shader类型非法,", type);
        }
    };
    ShaderCenter.prototype.init = function () {
        this.createShader(ShaderType.ShadowMap, ShaderCode_1.ShaderCode.shadowMap.vert, ShaderCode_1.ShaderCode.shadowMap.frag);
        this.createShader(ShaderType.Line, ShaderCode_1.ShaderCode.line.vert, ShaderCode_1.ShaderCode.line.frag);
    };
    ShaderCenter.prototype.createShader = function (type, vert, frag) {
        var glID = ShaderFactory_1.G_ShaderFactory.createShader(vert, frag);
        var name = this.createShaderName(type);
        this._shaderMap.set(name, glID);
        return new Shader_1.Shader(Device_1.default.Instance.gl, glID, name);
    };
    ShaderCenter.prototype.getCustomShader = function (name) {
        return this._shaderMap.get(name);
    };
    ShaderCenter.prototype.getShader = function (type) {
        var name = "";
        switch (type) {
            case ShaderType.Label:
                name = "label";
                break;
            case ShaderType.Sprite:
                name = "sprite";
                break;
            case ShaderType.Spine:
                name = "spine";
                break;
            case ShaderType.Line:
                name = "line";
                break;
            case ShaderType.ShadowMap:
                name = "shadowMap";
                break;
            default: console.log("您输入的shader类型非法,", type);
        }
        if (name != "")
            return this._shaderMap.get(name);
    };
    return ShaderCenter;
}());
exports.G_ShaderCenter = new ShaderCenter();
},{"../../Device":3,"./Shader":56,"./ShaderCode":58,"./ShaderFactory":59}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShaderCode = void 0;
var ShaderCode;
(function (ShaderCode) {
    ShaderCode.shadowMap = {
        vert: "attribute vec4 a_position;\n        uniform mat4 u_projection;\n        uniform mat4 u_view;\n        uniform mat4 u_world;\n        void main() {\n        gl_Position = u_projection * u_view * u_world * a_position;\n        }",
        frag: "precision mediump float;\n    //\u5206\u89E3\u4FDD\u5B58\u6DF1\u5EA6\u503C\n    vec4 pack (float depth) {\n        // \u4F7F\u7528rgba 4\u5B57\u8282\u517132\u4F4D\u6765\u5B58\u50A8z\u503C,1\u4E2A\u5B57\u8282\u7CBE\u5EA6\u4E3A1/256\n        const vec4 bitShift = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\n        const vec4 bitMask = vec4(1.0/256.0, 1.0/256.0, 1.0/256.0, 0.0);\n        // gl_FragCoord:\u7247\u5143\u7684\u5750\u6807,fract():\u8FD4\u56DE\u6570\u503C\u7684\u5C0F\u6570\u90E8\u5206\n        vec4 rgbaDepth = fract(depth * bitShift); //\u8BA1\u7B97\u6BCF\u4E2A\u70B9\u7684z\u503C \n        rgbaDepth -= rgbaDepth.rgba * bitMask; // Cut off the value which do not fit in 8 bits\n        return rgbaDepth;\n    }\n    void main() {\n    gl_FragColor =  vec4(gl_FragCoord.z,0.0,0.0,1.0);  //\u5C06\u6DF1\u5EA6\u503C\u5B58\u5728\u5E27\u7F13\u51B2\u7684\u989C\u8272\u7F13\u51B2\u4E2D \u5982\u679C\u5E27\u7F13\u51B2\u548C\u7A97\u53E3\u7ED1\u5B9A \u90A3\u4E48\u5C31\u663E\u793A\u51FA\u6765 \u5982\u679C\u5E27\u7F13\u51B2\u548C\u7EB9\u7406\u7ED1\u5B9A\u5C31\u5B58\u50A8\u5728\u7EB9\u7406\u4E2D\n    }"
    };
    ShaderCode.line = {
        vert: "attribute vec4 a_position;\n        uniform mat4 u_projection;\n        uniform mat4 u_view;\n        uniform mat4 u_world;\n        void main() {\n        gl_Position = u_projection * u_view * u_world * a_position;\n        }",
        frag: "precision mediump float;\n        uniform vec4 u_color;\n    void main() {\n    gl_FragColor =  u_color;  //\u7EBF\u7684\u989C\u8272\n    }"
    };
})(ShaderCode = exports.ShaderCode || (exports.ShaderCode = {}));
},{}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_ShaderFactory = void 0;
var Shader_1 = require("./Shader");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec3 a_normal;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_PMatrix;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'varying vec3 v_normal;' +
    'varying vec2 v_uv;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_VMatrix*u_MMatrix * vec4(a_position, 1.0);' +
    'v_uv = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 v_uv;' +
    'uniform samplerCube u_skybox;' +
    'uniform sampler2D u_texCoord;' +
    'uniform mat4 u_PVMInverseMatrix;' +
    'uniform vec4 u_color;' +
    'uniform vec4 u_color_dir;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, v_uv);' +
    '}';
var ShaderType;
(function (ShaderType) {
    ShaderType[ShaderType["VERTEX"] = 1] = "VERTEX";
    ShaderType[ShaderType["FRAGMENT"] = 2] = "FRAGMENT";
})(ShaderType || (ShaderType = {}));
/**
 * shader工厂
 */
var ShaderFactory = /** @class */ (function () {
    function ShaderFactory() {
        this.texcoordRE = /coord|texture/i;
        this.colorRE = /color|colour/i;
        /**
         * tries to get the number of elements from a set of arrays.
         */
        this.positionKeys = ['position', 'positions', 'a_position'];
    }
    ShaderFactory.prototype.init = function (gl) {
        this._gl = gl;
        this._shaderData = [];
    };
    /**
     * 获取一个shaderData
     * @param index
     */
    ShaderFactory.prototype.getShareDataByIndex = function (index) {
        var ret;
        this._shaderData.forEach(function (value, index) {
            if (value.Index == index) {
                ret = value;
            }
        });
        return ret;
    };
    /**
     * 获取一个shaderData
     * @param glID
     */
    ShaderFactory.prototype.getShareDataByGlID = function (glID) {
        var ret;
        this._shaderData.forEach(function (value, index) {
            if (value.spGlID == glID) {
                ret = value;
            }
        });
        return ret;
    };
    /**
     * 生成一个shaderData
     * @param GLID
     * @param textureUnit
     * @param USet
     * @param ASet
     */
    ShaderFactory.prototype.createShaderData = function (GLID) {
        var ret = this.getShareDataByGlID(GLID);
        if (ret == null) {
            var index = this._shaderData.length;
            var res = new Shader_1.ShaderData(GLID, index);
            this._shaderData.push(res);
            return res;
        }
        return ret;
    };
    /**
    *
    * @param shaderType shader的类型 1代表顶点着色器 2代表像素着色器
    * @param shaderSource shader的源码
    */
    ShaderFactory.prototype.loadShader = function (shaderType, shaderSource) {
        // 创建着色器
        var shader;
        if (shaderType == ShaderType.FRAGMENT) {
            shader = this._gl.createShader(this._gl.FRAGMENT_SHADER);
        }
        else if (shaderType == ShaderType.VERTEX) {
            shader = this._gl.createShader(this._gl.VERTEX_SHADER);
        }
        else {
            return null;
        }
        // 编译着色器
        this._gl.shaderSource(shader, shaderSource);
        this._gl.compileShader(shader);
        // 判断编译是否成功
        if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS)) {
            alert(this._gl.getShaderInfoLog(shader));
            return null;
        }
        return shader;
    };
    /**
     *
     * @param vertextCode 顶点shader
     * @param fragCode 片段shader
     */
    ShaderFactory.prototype.createShader = function (vertextCode, fragCode) {
        if (vertextCode === void 0) { vertextCode = vertextBaseCode; }
        if (fragCode === void 0) { fragCode = fragBaseCode; }
        // 从 DOM 上创建对应的着色器
        var vertexShader = this.loadShader(ShaderType.VERTEX, vertextCode);
        var fragmentShader = this.loadShader(ShaderType.FRAGMENT, fragCode);
        // 创建程序并连接着色器
        var shaderGLID = this._gl.createProgram();
        this._gl.attachShader(shaderGLID, vertexShader);
        this._gl.attachShader(shaderGLID, fragmentShader);
        this._gl.linkProgram(shaderGLID);
        // 连接失败的检测
        if (!this._gl.getProgramParameter(shaderGLID, this._gl.LINK_STATUS)) {
            alert("Failed to setup shaders");
        }
        return shaderGLID;
    };
    ShaderFactory.prototype.onCreateShader = function () {
    };
    ShaderFactory.prototype.destroyShder = function (shaderProgram) {
    };
    ShaderFactory.prototype.createAttribSetter = function (index) {
        var gl = this._gl;
        return function (b) {
            if (b.value) {
                gl.disableVertexAttribArray(index);
                switch (b.value.length) {
                    case 4:
                        gl.vertexAttrib4fv(index, b.value);
                        break;
                    case 3:
                        gl.vertexAttrib3fv(index, b.value);
                        break;
                    case 2:
                        gl.vertexAttrib2fv(index, b.value);
                        break;
                    case 1:
                        gl.vertexAttrib1fv(index, b.value);
                        break;
                    default:
                        throw new Error('the length of a float constant value must be between 1 and 4!');
                }
            }
            else {
                gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);
                gl.enableVertexAttribArray(index);
                gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);
            }
        };
    };
    ShaderFactory.prototype.createAttributeSetters = function (shaderData) {
        var gl = this._gl;
        var program = shaderData.spGlID;
        var attribSetters = {};
        var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        for (var ii = 0; ii < numAttribs; ++ii) {
            var attribInfo = gl.getActiveAttrib(program, ii);
            if (!attribInfo) {
                break;
            }
            var index = gl.getAttribLocation(program, attribInfo.name);
            attribSetters[attribInfo.name] = this.createAttribSetter(index);
        }
        return attribSetters;
    };
    /**
   * Returns the corresponding bind point for a given sampler type
   */
    ShaderFactory.prototype.getBindPointForSamplerType = function (gl, type) {
        if (type === gl.SAMPLER_2D)
            return gl.TEXTURE_2D; // eslint-disable-line
        if (type === gl.SAMPLER_CUBE)
            return gl.TEXTURE_CUBE_MAP; // eslint-disable-line
        return undefined;
    };
    /**
       * Creates a setter for a uniform of the given program with it's
       * location embedded in the setter.
       * @param {WebGLProgram} program
       * @param {WebGLUniformInfo} uniformInfo
       * @returns {function} the created setter.
       */
    ShaderFactory.prototype.createUniformSetter = function (uniformInfo, shaderData) {
        var gl = this._gl;
        var program = shaderData.spGlID;
        var location = gl.getUniformLocation(program, uniformInfo.name);
        var type = uniformInfo.type;
        // Check if this uniform is an array
        var isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');
        if (type === gl.FLOAT && isArray) {
            return function (v) {
                gl.uniform1fv(location, v);
            };
        }
        if (type === gl.FLOAT) {
            return function (v) {
                gl.uniform1f(location, v);
            };
        }
        if (type === gl.FLOAT_VEC2) {
            return function (v) {
                gl.uniform2fv(location, v);
            };
        }
        if (type === gl.FLOAT_VEC3) {
            return function (v) {
                gl.uniform3fv(location, v);
            };
        }
        if (type === gl.FLOAT_VEC4) {
            return function (v) {
                gl.uniform4fv(location, v);
            };
        }
        if (type === gl.INT && isArray) {
            return function (v) {
                gl.uniform1iv(location, v);
            };
        }
        if (type === gl.INT) {
            return function (v) {
                gl.uniform1i(location, v);
            };
        }
        if (type === gl.INT_VEC2) {
            return function (v) {
                gl.uniform2iv(location, v);
            };
        }
        if (type === gl.INT_VEC3) {
            return function (v) {
                gl.uniform3iv(location, v);
            };
        }
        if (type === gl.INT_VEC4) {
            return function (v) {
                gl.uniform4iv(location, v);
            };
        }
        if (type === gl.BOOL) {
            return function (v) {
                gl.uniform1iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC2) {
            return function (v) {
                gl.uniform2iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC3) {
            return function (v) {
                gl.uniform3iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC4) {
            return function (v) {
                gl.uniform4iv(location, v);
            };
        }
        if (type === gl.FLOAT_MAT2) {
            return function (v) {
                gl.uniformMatrix2fv(location, false, v);
            };
        }
        if (type === gl.FLOAT_MAT3) {
            return function (v) {
                gl.uniformMatrix3fv(location, false, v);
            };
        }
        if (type === gl.FLOAT_MAT4) {
            return function (v) {
                gl.uniformMatrix4fv(location, false, v);
            };
        }
        if ((type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) && isArray) {
            var units = [];
            for (var ii = 0; ii < uniformInfo.size; ++ii) {
                units.push(shaderData.addTextureUnit());
            }
            return function (bindPoint, units) {
                return function (textures) {
                    gl.uniform1iv(location, units);
                    textures.forEach(function (texture, index) {
                        gl.activeTexture(gl.TEXTURE0 + units[index]);
                        gl.bindTexture(bindPoint, texture);
                    });
                };
            }(this.getBindPointForSamplerType(gl, type), units);
        }
        if (type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) {
            return function (bindPoint, unit) {
                return function (texture) {
                    gl.uniform1i(location, unit);
                    gl.activeTexture(gl.TEXTURE0 + unit);
                    gl.bindTexture(bindPoint, texture);
                };
            }(this.getBindPointForSamplerType(gl, type), shaderData.addTextureUnit());
        }
        throw ('unknown type: 0x' + type.toString(16)); // we should never get here.
    };
    /**
     * uniform变量设置器
     */
    ShaderFactory.prototype.createUniformSetters = function (shaderData) {
        var program = shaderData.spGlID;
        var gl = this._gl;
        var uniformSetters = {};
        var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for (var ii = 0; ii < numUniforms; ++ii) {
            var uniformInfo = gl.getActiveUniform(program, ii);
            if (!uniformInfo) {
                break;
            }
            var name_1 = uniformInfo.name;
            // remove the array suffix.
            if (name_1.substr(-3) === '[0]') {
                name_1 = name_1.substr(0, name_1.length - 3);
            }
            var setter = this.createUniformSetter(uniformInfo, shaderData);
            uniformSetters[name_1] = setter;
        }
        return uniformSetters;
    };
    /**
     * 创建一个shader
     * @param vs
     * @param fs
     */
    ShaderFactory.prototype.createProgramInfo = function (vs, fs) {
        var glID = this.createShader(vs, fs);
        var shaderData = this.createShaderData(glID);
        var uniformSetters = this.createUniformSetters(shaderData);
        var attribSetters = this.createAttributeSetters(shaderData);
        shaderData.uniSetters = uniformSetters;
        shaderData.attrSetters = attribSetters;
        return shaderData;
    };
    ShaderFactory.prototype.getShaderProgram = function (index) {
        return this.getShareDataByIndex(index).spGlID;
    };
    //设置attribute变量
    ShaderFactory.prototype.setBuffersAndAttributes = function (attribSetters, buffers) {
        var gl = this._gl;
        var attribs = buffers.attribs;
        var setters = attribSetters;
        Object.keys(attribs).forEach(function (name) {
            var setter = setters[name];
            if (setter) {
                setter(attribs[name]);
            }
            else {
                // console.log("error  绑定attribute变量失败-----",name);
            }
        });
        if (buffers.indices) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);
        }
    };
    //设置uniform变量
    ShaderFactory.prototype.setUniforms = function (uniformSetters) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var setters = uniformSetters;
        var _loop_1 = function (uniforms) {
            Object.keys(uniforms).forEach(function (name) {
                var setter = setters[name];
                if (setter) {
                    setter(uniforms[name]);
                }
                else {
                    // console.log("error  绑定uniform变量失败------",name);
                }
            });
        };
        for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
            var uniforms = values_1[_a];
            _loop_1(uniforms);
        }
    };
    //启动顶点着色器绘制
    ShaderFactory.prototype.drawBufferInfo = function (bufferInfo, primitiveType, count, offset) {
        var gl = this._gl;
        var indices = bufferInfo.indices;
        primitiveType = primitiveType === undefined ? gl.TRIANGLES : primitiveType;
        var numElements = count === undefined ? bufferInfo.numElements : count;
        offset = offset === undefined ? 0 : offset;
        if (indices) {
            gl.drawElements(primitiveType, numElements, gl.UNSIGNED_SHORT, offset);
        }
        else {
            gl.drawArrays(primitiveType, offset, numElements);
        }
    };
    //ext---------------------------------------------------------------------------------
    // Add `push` to a typed array. It just keeps a 'cursor'
    // and allows use to `push` values into the array so we
    // don't have to manually compute offsets
    ShaderFactory.prototype.augmentTypedArray = function (typedArray, numComponents) {
        var cursor = 0;
        typedArray.push = function () {
            for (var ii = 0; ii < arguments.length; ++ii) {
                var value = arguments[ii];
                if (value instanceof Array || (value.buffer && value.buffer instanceof ArrayBuffer)) {
                    for (var jj = 0; jj < value.length; ++jj) {
                        typedArray[cursor++] = value[jj];
                    }
                }
                else {
                    typedArray[cursor++] = value;
                }
            }
        };
        typedArray.reset = function (opt_index) {
            cursor = opt_index || 0;
        };
        typedArray.numComponents = numComponents;
        Object.defineProperty(typedArray, 'numElements', {
            get: function () {
                return this.length / this.numComponents | 0;
            },
        });
        return typedArray;
    };
    /**
    * creates a typed array with a `push` function attached
    * so that you can easily *push* values.
    *
    * `push` can take multiple arguments. If an argument is an array each element
    * of the array will be added to the typed array.
    *
    * Example:
    *
    *     let array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values
    *     array.push(1, 2, 3);
    *     array.push([4, 5, 6]);
    *     // array now contains [1, 2, 3, 4, 5, 6]
    *
    * Also has `numComponents` and `numElements` properties.
    *
    * @param {number} numComponents number of components
    * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.
    * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.
    * @return {ArrayBuffer} A typed array.
    * @memberOf module:webgl-utils
    */
    ShaderFactory.prototype.createAugmentedTypedArray = function (numComponents, numElements, opt_type) {
        var Type = opt_type || Float32Array;
        return this.augmentTypedArray(new Type(numComponents * numElements), numComponents);
    };
    ShaderFactory.prototype.getArray = function (array) {
        return array.length ? array : array.data;
    };
    ShaderFactory.prototype.guessNumComponentsFromName = function (name, length) {
        var numComponents;
        if (this.texcoordRE.test(name)) {
            numComponents = 2;
        }
        else if (this.colorRE.test(name)) {
            numComponents = 4;
        }
        else {
            numComponents = 3; // position, normals, indices ...
        }
        if (length % numComponents > 0) {
            throw new Error("Can not guess numComponents for attribute '" + name + "'. Tried " + numComponents + " but " + length + " values is not evenly divisible by " + numComponents + ". You should specify it.");
        }
        return numComponents;
    };
    ShaderFactory.prototype.getNumComponents = function (array, arrayName) {
        return array.numComponents || array.size || this.guessNumComponentsFromName(arrayName, this.getArray(array).length);
    };
    ShaderFactory.prototype.getNumElementsFromNonIndexedArrays = function (arrays) {
        var key;
        for (var _i = 0, _a = this.positionKeys; _i < _a.length; _i++) {
            var k = _a[_i];
            if (k in arrays) {
                key = k;
                break;
            }
        }
        key = key || Object.keys(arrays)[0];
        var array = arrays[key];
        var length = this.getArray(array).length;
        var numComponents = this.getNumComponents(array, key);
        var numElements = length / numComponents;
        if (length % numComponents > 0) {
            throw new Error("numComponents " + numComponents + " not correct for length " + length);
        }
        return numElements;
    };
    ShaderFactory.prototype.getGLTypeForTypedArray = function (gl, typedArray) {
        if (typedArray instanceof Int8Array) {
            return gl.BYTE;
        } // eslint-disable-line
        if (typedArray instanceof Uint8Array) {
            return gl.UNSIGNED_BYTE;
        } // eslint-disable-line
        if (typedArray instanceof Int16Array) {
            return gl.SHORT;
        } // eslint-disable-line
        if (typedArray instanceof Uint16Array) {
            return gl.UNSIGNED_SHORT;
        } // eslint-disable-line
        if (typedArray instanceof Int32Array) {
            return gl.INT;
        } // eslint-disable-line
        if (typedArray instanceof Uint32Array) {
            return gl.UNSIGNED_INT;
        } // eslint-disable-line
        if (typedArray instanceof Float32Array) {
            return gl.FLOAT;
        } // eslint-disable-line
        throw 'unsupported typed array type';
    };
    // This is really just a guess. Though I can't really imagine using
    // anything else? Maybe for some compression?
    ShaderFactory.prototype.getNormalizationForTypedArray = function (typedArray) {
        if (typedArray instanceof Int8Array) {
            return true;
        } // eslint-disable-line
        if (typedArray instanceof Uint8Array) {
            return true;
        } // eslint-disable-line
        return false;
    };
    ShaderFactory.prototype.isArrayBuffer = function (a) {
        return a.buffer && a.buffer instanceof ArrayBuffer;
    };
    ShaderFactory.prototype.createBufferFromTypedArray = function (gl, array, type, drawType) {
        type = type || gl.ARRAY_BUFFER;
        var buffer = gl.createBuffer();
        gl.bindBuffer(type, buffer);
        gl.bufferData(type, array, drawType || gl.STATIC_DRAW);
        return buffer;
    };
    ShaderFactory.prototype.allButIndices = function (name) {
        return name !== 'indices';
    };
    ShaderFactory.prototype.createMapping = function (obj) {
        var mapping = {};
        Object.keys(obj).filter(this.allButIndices).forEach(function (key) {
            mapping['a_' + key] = key;
        });
        return mapping;
    };
    ShaderFactory.prototype.makeTypedArray = function (array, name) {
        if (this.isArrayBuffer(array)) {
            return array;
        }
        if (array.data && this.isArrayBuffer(array.data)) {
            return array.data;
        }
        if (Array.isArray(array)) {
            array = {
                data: array,
            };
        }
        if (!array.numComponents) {
            array.numComponents = this.guessNumComponentsFromName(name, array.length);
        }
        var type = array.type;
        if (!type) {
            if (name === 'indices') {
                type = Uint16Array;
            }
        }
        var typedArray = this.createAugmentedTypedArray(array.numComponents, array.data.length / array.numComponents | 0, type);
        typedArray.push(array.data);
        return typedArray;
    };
    ShaderFactory.prototype.createAttribsFromArrays = function (gl, arrays, opt_mapping) {
        var _this = this;
        var mapping = opt_mapping || this.createMapping(arrays);
        var attribs = {};
        Object.keys(mapping).forEach(function (attribName) {
            var bufferName = mapping[attribName];
            var origArray = arrays[bufferName];
            if (origArray.value) {
                attribs[attribName] = {
                    value: origArray.value,
                };
            }
            else {
                var array = _this.makeTypedArray(origArray, bufferName);
                attribs[attribName] = {
                    buffer: _this.createBufferFromTypedArray(gl, array),
                    numComponents: origArray.numComponents || array.numComponents || _this.guessNumComponentsFromName(bufferName),
                    type: _this.getGLTypeForTypedArray(gl, array),
                    normalize: _this.getNormalizationForTypedArray(array),
                };
            }
        });
        return attribs;
    };
    ShaderFactory.prototype.createBufferInfoFromArrays = function (arrays, opt_mapping) {
        var gl = this._gl;
        var bufferInfo = {
            attribs: this.createAttribsFromArrays(gl, arrays, opt_mapping),
        };
        var indices = arrays.indices;
        if (indices) {
            indices = this.makeTypedArray(indices, 'indices');
            bufferInfo.indices = this.createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);
            bufferInfo.numElements = indices.length;
        }
        else {
            bufferInfo.numElements = this.getNumElementsFromNonIndexedArrays(arrays);
        }
        return new Shader_1.BufferAttribsData(bufferInfo.attribs, bufferInfo.numElements, bufferInfo.indices);
    };
    return ShaderFactory;
}());
exports.G_ShaderFactory = new ShaderFactory();
},{"./Shader":56}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShaderUseVariantType = void 0;
var ShaderUseVariantType;
(function (ShaderUseVariantType) {
    ShaderUseVariantType[ShaderUseVariantType["UndefinedMin"] = 0] = "UndefinedMin";
    ShaderUseVariantType[ShaderUseVariantType["Vertex"] = 1] = "Vertex";
    ShaderUseVariantType[ShaderUseVariantType["Normal"] = 2] = "Normal";
    ShaderUseVariantType[ShaderUseVariantType["UVs"] = 3] = "UVs";
    //目前支持同时使用9块纹理单元
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD"] = 4] = "TEX_COORD";
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD1"] = 5] = "TEX_COORD1";
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD2"] = 6] = "TEX_COORD2";
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD3"] = 7] = "TEX_COORD3";
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD4"] = 8] = "TEX_COORD4";
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD5"] = 9] = "TEX_COORD5";
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD6"] = 10] = "TEX_COORD6";
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD7"] = 11] = "TEX_COORD7";
    ShaderUseVariantType[ShaderUseVariantType["TEX_COORD8"] = 12] = "TEX_COORD8";
    ShaderUseVariantType[ShaderUseVariantType["CUBE_COORD"] = 13] = "CUBE_COORD";
    ShaderUseVariantType[ShaderUseVariantType["SKYBOX"] = 14] = "SKYBOX";
    ShaderUseVariantType[ShaderUseVariantType["Model"] = 15] = "Model";
    ShaderUseVariantType[ShaderUseVariantType["View"] = 16] = "View";
    ShaderUseVariantType[ShaderUseVariantType["Projection"] = 17] = "Projection";
    ShaderUseVariantType[ShaderUseVariantType["ModelInverse"] = 18] = "ModelInverse";
    ShaderUseVariantType[ShaderUseVariantType["ModelTransform"] = 19] = "ModelTransform";
    ShaderUseVariantType[ShaderUseVariantType["ModelInverseTransform"] = 20] = "ModelInverseTransform";
    ShaderUseVariantType[ShaderUseVariantType["ViewModel"] = 21] = "ViewModel";
    ShaderUseVariantType[ShaderUseVariantType["ProjectionViewModel"] = 22] = "ProjectionViewModel";
    ShaderUseVariantType[ShaderUseVariantType["ProjectionView"] = 23] = "ProjectionView";
    ShaderUseVariantType[ShaderUseVariantType["ProjectionViewInverse"] = 24] = "ProjectionViewInverse";
    ShaderUseVariantType[ShaderUseVariantType["ProjectionInverse"] = 25] = "ProjectionInverse";
    ShaderUseVariantType[ShaderUseVariantType["ProjectionViewModelInverse"] = 26] = "ProjectionViewModelInverse";
    ShaderUseVariantType[ShaderUseVariantType["LightWorldPosition"] = 27] = "LightWorldPosition";
    ShaderUseVariantType[ShaderUseVariantType["CameraWorldPosition"] = 28] = "CameraWorldPosition";
    ShaderUseVariantType[ShaderUseVariantType["LightColor"] = 29] = "LightColor";
    ShaderUseVariantType[ShaderUseVariantType["LightDirection"] = 30] = "LightDirection";
    ShaderUseVariantType[ShaderUseVariantType["Color"] = 31] = "Color";
    ShaderUseVariantType[ShaderUseVariantType["NodeVertColor"] = 32] = "NodeVertColor";
    ShaderUseVariantType[ShaderUseVariantType["NodeCustomMatrix"] = 33] = "NodeCustomMatrix";
    ShaderUseVariantType[ShaderUseVariantType["UndefinedMax"] = 34] = "UndefinedMax";
})(ShaderUseVariantType = exports.ShaderUseVariantType || (exports.ShaderUseVariantType = {}));
},{}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.G_UISetting = void 0;
var UISetting = /** @class */ (function () {
    function UISetting() {
        this.settings = {
            cam2DPosX: 0,
            cam2DPosY: 0,
            cam2DPosZ: 0,
            cam2DRotX: 0,
            cam2DRotY: 0,
            cam2DRotZ: 0,
            cam3DFieldOfView: 60,
            cam3DPosX: 0,
            cam3DPosY: 2,
            cam3DPosZ: 5,
            cam3DRotX: 0,
            cam3DRotY: 0,
            cam3DRotZ: 0,
            cam3DNear: 1,
            cam3DFar: 200,
            lightPosX: 2.5,
            lightPosY: 4.8,
            lightPosZ: 7,
            lightDirX: 8,
            lightDirY: 5,
            lightDirZ: -10,
            lightColorR: 0.1,
            lightColorG: 0.1,
            lightColorB: 0.1,
            lightColorA: 1.0,
            lightTargetX: 3.5,
            lightTargetY: 0,
            lightTargetZ: 3.5,
            lightProjWidth: 10,
            lightProjHeight: 10,
            lightFieldOfView: 120,
            lightBias: 0.005,
        };
        this._renderCallBackArray = [];
    }
    // //初始化UI
    UISetting.prototype.setUI = function () {
        var render = this.render.bind(this);
        var webglLessonsUI = window["webglLessonsUI"];
        var camera2D = [
            //2d相机
            { type: 'slider', key: 'cam2DPosX', min: -10, max: 10, change: render, precision: 2, step: 0.1 },
            { type: 'slider', key: 'cam2DPosY', min: -10, max: 10, change: render, precision: 2, step: 0.1 },
            { type: 'slider', key: 'cam2DPosZ', min: -10, max: 10, change: render, precision: 2, step: 0.1 },
            { type: 'slider', key: 'cam2DRotX', min: 0, max: 360, change: render, },
            { type: 'slider', key: 'cam2DRotY', min: 0, max: 360, change: render, },
            { type: 'slider', key: 'cam2DRotZ', min: 0, max: 360, change: render, },
        ];
        var camera3D = [
            //3d相机
            { type: 'slider', key: 'cam3DFieldOfView', min: 0, max: 180, change: render, },
            { type: 'slider', key: 'cam3DPosX', min: -100, max: 100, change: render, },
            { type: 'slider', key: 'cam3DPosY', min: -100, max: 100, change: render, },
            { type: 'slider', key: 'cam3DPosZ', min: -100, max: 200, change: render, },
            { type: 'slider', key: 'cam3DRotX', min: 0, max: 360, change: render, },
            { type: 'slider', key: 'cam3DRotY', min: 0, max: 360, change: render, },
            { type: 'slider', key: 'cam3DRotZ', min: 0, max: 360, change: render, },
            { type: 'slider', key: 'cam3DNear', min: 1, max: 300, change: render, },
            { type: 'slider', key: 'cam3DFar', min: 1, max: 300, change: render, },
        ];
        var light = [
            { type: 'slider', key: 'lightPosX', min: -10, max: 10, change: this.render.bind(this), precision: 2, step: 0.001, },
            { type: 'slider', key: 'lightPosY', min: 1, max: 20, change: this.render.bind(this), precision: 2, step: 0.001, },
            { type: 'slider', key: 'lightPosZ', min: 1, max: 20, change: this.render.bind(this), precision: 2, step: 0.001, },
            { type: 'slider', key: 'lightDirX', min: -10, max: 10, change: this.render.bind(this), precision: 2, step: 1, },
            { type: 'slider', key: 'lightDirY', min: -10, max: 10, change: this.render.bind(this), precision: 2, step: 1, },
            { type: 'slider', key: 'lightDirZ', min: -10, max: 10, change: this.render.bind(this), precision: 2, step: 1, },
            { type: 'slider', key: 'lightColorR', min: 0, max: 1, change: this.render.bind(this), precision: 2, step: 0.01, },
            { type: 'slider', key: 'lightColorG', min: 0, max: 1, change: this.render.bind(this), precision: 2, step: 0.01, },
            { type: 'slider', key: 'lightColorB', min: 0, max: 1, change: this.render.bind(this), precision: 2, step: 0.01, },
            { type: 'slider', key: 'lightColorA', min: 0, max: 1, change: this.render.bind(this), precision: 2, step: 0.01, },
            { type: 'slider', key: 'lightTargetX', min: -10, max: 10, change: this.render.bind(this), precision: 2, step: 0.001, },
            { type: 'slider', key: 'lightTargetY', min: 0, max: 20, change: this.render.bind(this), precision: 2, step: 0.001, },
            { type: 'slider', key: 'lightTargetZ', min: -10, max: 20, change: this.render.bind(this), precision: 2, step: 0.001, },
            { type: 'slider', key: 'lightProjWidth', min: 0, max: 100, change: this.render.bind(this), precision: 2, step: 0.001, },
            { type: 'slider', key: 'lightProjHeight', min: 0, max: 100, change: this.render.bind(this), precision: 2, step: 0.001, },
            { type: 'slider', key: 'lightFieldOfView', min: 1, max: 179, change: this.render.bind(this), },
            { type: 'slider', key: 'lightBias', min: 0.005, max: 0.001, change: this.render.bind(this), precision: 3, step: 0.001, },
        ];
        webglLessonsUI.setupUI(document.querySelector('#ui'), this.settings, [].concat(camera2D).concat(camera3D));
        this.render();
    };
    UISetting.prototype.render = function () {
        var _this = this;
        if (this._renderCallBackArray.length > 0) {
            this._renderCallBackArray.forEach(function (fn, index) {
                fn(_this.settings);
            });
        }
    };
    UISetting.prototype.pushRenderCallBack = function (cb) {
        this._renderCallBackArray.indexOf(cb) < 0 ? this._renderCallBackArray.push(cb) : console.log("已经存在 无需再次绑定");
    };
    UISetting.prototype.getSettings = function () {
        return this.settings;
    };
    return UISetting;
}());
exports.G_UISetting = new UISetting();
},{}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MathUtils = void 0;
/**
 * 数学库工具类
 */
var MathUtils;
(function (MathUtils) {
    /**
     * 求弧度
     * @param deg 角度
     */
    function degToRad(deg) {
        return deg * Math.PI / 180;
    }
    MathUtils.degToRad = degToRad;
    function px(v) {
        return (v | 0) + "px";
    }
    MathUtils.px = px;
    function radToDeg(r) {
        return r * 180 / Math.PI;
    }
    MathUtils.radToDeg = radToDeg;
    // Check if the image is a power of 2 in both dimensions.
    function isPowerOf2(value) {
        return (value & (value - 1)) === 0;
    }
    MathUtils.isPowerOf2 = isPowerOf2;
    function rand(min, max) {
        return Math.random() * (max - min) + min;
    }
    MathUtils.rand = rand;
    function emod(x, n) {
        return x >= 0 ? (x % n) : ((n - (-x % n)) % n);
    }
    MathUtils.emod = emod;
})(MathUtils = exports.MathUtils || (exports.MathUtils = {}));
},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
