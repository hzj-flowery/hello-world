var __extends = (this && this.__extends) || (function () {
			var extendStatics = function (d, b) {
				extendStatics = Object.setPrototypeOf ||
					({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
					function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
				return extendStatics(d, b);
			};
			return function (d, b) {
				extendStatics(d, b);
				function __() { this.constructor = d; }
				d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
			};
		})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GLapi_1 = require("./core/renderer/gfx/GLapi");
/**
* _attach
*/
function _attach(gl, location, attachment, face) {
    if (face === void 0) { face = 0; }
    // if (attachment instanceof Texture2D) {
    //     gl.framebufferTexture2D(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.TEXTURE_2D,
    //         attachment._glID,
    //         0
    //     );
    // } 
    // else if (attachment instanceof TextureCube) {
    //     gl.framebufferTexture2D(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,
    //         attachment._glID,
    //         0
    //     );
    // } else {
    //     gl.framebufferRenderbuffer(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.RENDERBUFFER,
    //         attachment._glID
    //     );
    // }
}
var Device = /** @class */ (function () {
    function Device() {
        this._width = 0;
        this._height = 0;
        //copy-------------------------------------------------------------------------------------------------
        this._caps = {
            maxVertexStreams: 4,
            maxVertexTextures: 0,
            maxFragUniforms: 0,
            maxTextureUnits: 0,
            maxVertexAttribs: 0,
            maxTextureSize: 0,
            maxDrawBuffers: 0,
            maxColorAttachments: 0
        };
        this._extensions = [];
    }
    ;
    Object.defineProperty(Device, "Instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new Device();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    Device.prototype.init = function () {
        var canvas = window["canvas"];
        var gl = this.createGLContext(canvas);
        this.gl = gl;
        this.canvas = canvas;
        GLapi_1.GLapi.bindGL(gl);
        canvas.onmousedown = this.onMouseDown.bind(this);
        canvas.onmousemove = this.onMouseMove.bind(this);
        canvas.onmouseup = this.onMouseUp.bind(this);
        this._width = canvas.clientWidth;
        this._height = canvas.clientHeight;
        console.log("画布的尺寸----", this._width, this._height);
        this.initExt();
    };
    Device.prototype.getWebglContext = function () {
        return this.canvas.getContext("webgl");
    };
    Object.defineProperty(Device.prototype, "Width", {
        get: function () {
            return this._width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "Height", {
        get: function () {
            return this._height;
        },
        enumerable: false,
        configurable: true
    });
    //获取webgl画笔的类型
    Device.prototype.getContextType = function () {
        if (this.gl instanceof WebGL2RenderingContext) {
            return "webgl2";
        }
        else if (this.gl instanceof WebGLRenderingContext) {
            return "webgl";
        }
    };
    //创建webgl画笔
    Device.prototype.createGLContext = function (canvas) {
        var names = ["webgl2", "webgl", "experimental-webgl"];
        var context = null;
        for (var i = 0; i < names.length; i++) {
            try {
                console.log("-names---", names[i]);
                context = canvas.getContext(names[i]);
            }
            catch (e) { }
            if (context) {
                break;
            }
        }
        if (context) {
            //添加动态属性记录画布的大小
            context.viewportWidth = canvas.width;
            context.viewportHeight = canvas.height;
        }
        else {
            alert("Failed to create WebGL context!");
        }
        return context;
    };
    Device.prototype.onMouseDown = function (ev) {
        this.readP();
    };
    Device.prototype.onMouseMove = function (ev) {
    };
    Device.prototype.onMouseUp = function (ev) {
    };
    /**
     * 将结果绘制到UI上
     */
    Device.prototype.drawToUI = function (time, scene2D, scene3D) {
        this.gl.clearColor(0.50, 0.50, 0.50, 1.0);
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, scene2D.getFrameBuffer());
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
        scene3D.readyDraw(time);
        scene2D.readyDraw(time);
    };
    //将结果绘制到窗口
    Device.prototype.draw2screen = function (time, scene2D, scene3D) {
        this.gl.clearColor(0.8, 0.8, 0.8, 1.0);
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
        scene3D.readyDraw(time);
        scene2D.readyDraw(time);
    };
    /**
   * @method setFrameBuffer
   * @param {FrameBuffer} fb - null means use the backbuffer
   */
    Device.prototype.setFrameBuffer = function (fb) {
        if (this._framebuffer === fb) {
            return;
        }
        this._framebuffer = fb;
        var gl = this.gl;
        if (!fb) {
            console.log("绑定帧缓冲失败--------");
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            return;
        }
        else {
            console.log("绑定帧缓冲成功");
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, fb.getHandle());
        // let numColors = fb._colors.length;
        // for (let i = 0; i < numColors; ++i) {
        //     let colorBuffer = fb._colors[i];
        //     _attach(gl, gl.COLOR_ATTACHMENT0 + i, colorBuffer);
        //     // TODO: what about cubemap face??? should be the target parameter for colorBuffer
        // }
        // for (let i = numColors; i < this._caps.maxColorAttachments; ++i) {
        //     gl.framebufferTexture2D(
        //         gl.FRAMEBUFFER,
        //         gl.COLOR_ATTACHMENT0 + i,
        //         gl.TEXTURE_2D,
        //         null,
        //         0
        //     );
        // }
        // if (fb._depth) {
        //     _attach(gl, gl.DEPTH_ATTACHMENT, fb._depth);
        // }
        // if (fb._stencil) {
        //     _attach(gl, gl.STENCIL_ATTACHMENT, fb._stencil);
        // }
        // if (fb._depthStencil) {
        //     _attach(gl, gl.DEPTH_STENCIL_ATTACHMENT, fb._depthStencil);
        // }
    };
    Device.prototype.draw = function (sceneData) {
    };
    /**
     *
     * @param object
     * {
     * x:
     * y:
     * w:
     * h:
     * }
     */
    Device.prototype.setViewPort = function (object) {
        this.gl.viewport(object.x, object.y, object.w * this.gl.canvas.width, object.h * this.gl.canvas.height);
    };
    /**
     * Resize a canvas to match the size its displayed.
     * @param {HTMLCanvasElement} canvas The canvas to resize.
     * @param {number} [multiplier] amount to multiply by.
     *    Pass in window.devicePixelRatio for native pixels.
     * @return {boolean} true if the canvas was resized.
     * @memberOf module:webgl-utils
     */
    Device.prototype.resizeCanvasToDisplaySize = function (canvas, multiplier) {
        multiplier = multiplier || 1;
        var width = canvas.clientWidth * multiplier | 0;
        var height = canvas.clientHeight * multiplier | 0;
        if (canvas.width !== width || canvas.height !== height) {
            canvas.width = width;
            canvas.height = height;
            return true;
        }
        return false;
    };
    Device.prototype.initExt = function () {
        this._stats = {
            texture: 0,
            vb: 0,
            ib: 0,
            drawcalls: 0,
        };
        // https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Using_Extensions
        this._initExtensions([
            'EXT_texture_filter_anisotropic',
            'EXT_shader_texture_lod',
            'OES_standard_derivatives',
            'OES_texture_float',
            'OES_texture_float_linear',
            'OES_texture_half_float',
            'OES_texture_half_float_linear',
            'OES_vertex_array_object',
            'WEBGL_compressed_texture_atc',
            'WEBGL_compressed_texture_etc',
            'WEBGL_compressed_texture_etc1',
            'WEBGL_compressed_texture_pvrtc',
            'WEBGL_compressed_texture_s3tc',
            'WEBGL_depth_texture',
            'WEBGL_draw_buffers',
        ]);
        this._initCaps();
        // this._initStates();
        this.handlePrecision();
        console.log("拓展-----", this.gl.getSupportedExtensions());
        /**
         * 'EXT_color_buffer_float',
         * 'EXT_disjoint_timer_query_webgl2',
         * 'EXT_float_blend',
         * 'EXT_texture_compression_bptc',
         * 'EXT_texture_compression_rgtc',
         * 'EXT_texture_filter_anisotropic',
         * 'KHR_parallel_shader_compile',
         * 'OES_texture_float_linear',
         * 'WEBGL_compressed_texture_s3tc',
         * 'WEBGL_compressed_texture_s3tc_srgb',
         * 'WEBGL_debug_renderer_info',
         * 'WEBGL_debug_shaders',
         * 'WEBGL_lose_context',
         * 'WEBGL_multi_draw',
         * 'OVR_multiview2
         */
    };
    Device.prototype.handlePrecision = function () {
        var gl = this.gl;
        console.log("处理精度");
        var data1 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT);
        var data2 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);
        var data3 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
        var data4 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT);
        var data5 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT);
        var data6 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT);
        console.log("vertex 精度值---", data1, data2, data3, data4, data5, data6);
        var data1 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT);
        var data2 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);
        var data3 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
        var data4 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT);
        var data5 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT);
        var data6 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT);
        console.log("fragment 精度值---", data1, data2, data3, data4, data5, data6);
    };
    /**
     * 初始化渲染状态
     */
    Device.prototype._initStates = function () {
        var gl = this.gl;
        // gl.frontFace(gl.CCW);这一句代码是多余的，webgl默认的就是逆时针为正面
        gl.disable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ZERO);
        gl.blendEquation(gl.FUNC_ADD);
        gl.blendColor(1, 1, 1, 1);
        gl.colorMask(true, true, true, true);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        gl.disable(gl.DEPTH_TEST);
        gl.depthFunc(gl.LESS);
        gl.depthMask(true);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.depthRange(0, 1);
        gl.disable(gl.STENCIL_TEST);
        gl.stencilFunc(gl.ALWAYS, 0, 0xFF);
        gl.stencilMask(0xFF);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        gl.clearDepth(1);
        gl.clearColor(0, 0, 0, 0);
        gl.clearStencil(0);
        gl.disable(gl.SCISSOR_TEST);
    };
    Device.prototype._initExtensions = function (extensions) {
        var gl = this.gl;
        for (var i = 0; i < extensions.length; ++i) {
            var name_1 = extensions[i];
            var vendorPrefixes = ["", "WEBKIT_", "MOZ_"];
            for (var j = 0; j < vendorPrefixes.length; j++) {
                try {
                    var ext = gl.getExtension(vendorPrefixes[j] + name_1);
                    if (ext) {
                        this._extensions[name_1] = ext;
                        break;
                    }
                }
                catch (e) {
                    console.error(e);
                }
            }
        }
    };
    /**
* @method ext
* @param {string} name
*/
    Device.prototype.ext = function (name) {
        return this._extensions[name];
    };
    Device.prototype._initCaps = function () {
        var gl = this.gl;
        var extDrawBuffers = this.ext('WEBGL_draw_buffers');
        this._caps.maxVertexStreams = 4;
        this._caps.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        this._caps.maxFragUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
        this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        this._caps.maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
        this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this._caps.maxDrawBuffers = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
        this._caps.maxColorAttachments = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
        console.log("this._caps---", this._caps);
        localStorage.setItem("zm", "nihaoa");
    };
    Device.prototype.readP = function () {
        var data = window["canvas"].toDataURL('image/png');
        console.log(data);
        var dataImg = new Image();
        dataImg.src = data;
        console.log("fs-------", localStorage.getItem("zm"));
        var fso = new ActiveXObject("Scripting.FileSystemObject");
        var f1 = fso.createtextfile("c:\\myjstest.txt", true);
        console.log(fso, f1);
        // let gl = this.gl;
        // var pixels = new Uint8Array(gl.drawingBufferWidth * gl.drawingBufferHeight * 4);
        // gl.readPixels(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
        // console.log("gl.drawingBufferWidth",gl.drawingBufferWidth,gl.drawingBufferHeight,pixels); // Uint8Array
    };
    //剔除某一个面
    /**
     *
     * @param back true 代表剔除背面 false 代表剔除前面
     * @param both 表示前后面都剔除
     */
    Device.prototype.cullFace = function (back, both) {
        if (back === void 0) { back = true; }
        var gl = this.gl;
        gl.enable(gl.CULL_FACE); //开启面剔除功能
        gl.frontFace(gl.CW); //逆时针绘制的代表正面 正常理解，看到的面是正面gl.FRONT，看不到的面是背面gl.BACK
        // gl.frontFace(gl.CCW);//顺时针绘制的代表正面  需要反过来理解，即我们看到的面是背面，看不到的面是正面
        if (both) {
            gl.cullFace(gl.FRONT_AND_BACK); //前后两个面都剔除
        }
        else if (back) {
            gl.cullFace(gl.BACK); //只剔除背面
        }
        else {
            gl.cullFace(gl.FRONT); //只剔除前面
        }
    };
    /**
     * 关闭面剔除功能
     */
    Device.prototype.closeCullFace = function () {
        var gl = this.gl;
        gl.disable(gl.CULL_FACE);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.FRONT);
        gl.disable(gl.CULL_FACE);
    };
    return Device;
}());
exports.default = Device;
},{"./core/renderer/gfx/GLapi":20}],2:[function(require,module,exports){
"use strict";
/**
 * 加载管理员
 */
Object.defineProperty(exports, "__esModule", { value: true });
var CacheImageData = /** @class */ (function () {
    function CacheImageData(url, img) {
        this.url = "";
        this.url = url;
        this.img = img;
    }
    return CacheImageData;
}());
function loadFile(url, typeFunc) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetch(url)];
                case 1:
                    response = _a.sent();
                    if (!response.ok) {
                        throw new Error("could not load: " + url);
                    }
                    return [4 /*yield*/, response[typeFunc]()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function loadBinary(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, loadFile(url, 'arrayBuffer')];
        });
    });
}
function loadJSON(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, loadFile(url, 'json')];
        });
    });
}
var LoaderManager = /** @class */ (function () {
    function LoaderManager() {
        this._cacheImage = [];
        this._cache = new Map();
    }
    Object.defineProperty(LoaderManager, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new LoaderManager();
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    //加载gltf动画文件
    LoaderManager.prototype.loadGLTF = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var gltf, baseURL, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, loadJSON(path)];
                    case 1:
                        gltf = _b.sent();
                        baseURL = new URL(path, location.href);
                        _a = gltf;
                        return [4 /*yield*/, Promise.all(gltf.buffers.map(function (buffer) {
                                var url = new URL(buffer.uri, baseURL.href);
                                return loadBinary(url.href);
                            }))];
                    case 2:
                        _a.buffers = _b.sent();
                        this._cache.set(path, gltf);
                        return [2 /*return*/];
                }
            });
        });
    };
    //加载json格式的二进制
    //就是将json转为二进制 然后以二进制读取再转会json
    LoaderManager.prototype.loadJsonBlobData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        //以二进制方式读取数据,读取到的结果将放入Blob的一个对象中存放
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                fr.onload = function (e) {
                    console.log("bin file---", fr.result);
                    var rawData = new Float32Array(fr.result);
                    var str = "";
                    for (var i = 0; i < rawData.length; i++) {
                        str = str + String.fromCharCode((rawData[i]));
                    }
                    JSON.parse(str);
                    console.log("result --", str);
                    _this._cache.set(path, fr.result);
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result);
                };
            }
        };
    };
    //加载二进制数据
    LoaderManager.prototype.loadBlobData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                fr.onload = function (e) {
                    _this._cache.set(path, fr.result);
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result);
                };
            }
        };
    };
    //加载json数据
    LoaderManager.prototype.loadJsonData = function (path, callBackProgress, callBackFinish) {
        var request = new XMLHttpRequest();
        var _this = this;
        request.open("get", path);
        request.send(null);
        request.responseType = "json";
        request.onload = function () {
            if (request.status == 0) {
                var jsonData = request.response;
                _this._cache.set(path, jsonData);
                if (callBackFinish)
                    callBackFinish.call(null, jsonData);
            }
        };
    };
    //加载可以转化为json的数据
    LoaderManager.prototype.loadJsonStringData = function (path, callBackProgress, callBackFinish) {
        var request = new XMLHttpRequest();
        var _this = this;
        request.open("get", path);
        request.send(null);
        request.responseType = "text";
        request.onload = function () {
            if (request.status == 0) {
                var jsonData = JSON.parse(request.responseText);
                _this._cache.set(path, jsonData);
                if (callBackFinish)
                    callBackFinish.call(null, jsonData);
            }
        };
    };
    //加载骨骼数据
    LoaderManager.prototype.loadSkelData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                // fr.readAsText(request.response);
                fr.onload = function (e) {
                    // console.log("加载二进制成功---",fr.result);
                    _this._cache.set(path, fr.result);
                    // var uint8_msg = new Uint8Array(fr.result as ArrayBuffer);
                    // // 解码成字符串
                    // var decodedString = String.fromCharCode.apply(null, uint8_msg);
                    // console.log("字符串--",decodedString); 
                    // // parse,转成json数据
                    // var data = JSON.parse(decodedString);
                    // console.log(data);
                    // let content = fr.result;//arraybuffer类型数据
                    // let resBlob = new Blob([content])
                    // let reader = new FileReader()
                    // reader.readAsText(resBlob, "utf-8")
                    // reader.onload = () => {
                    //     console.log("gagag---",reader.result);
                    //         let res = JSON.parse(reader.result as string)
                    //         console.log(res);
                    // }
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result);
                };
            }
        };
    };
    //加载图片数据
    LoaderManager.prototype.loadImageData = function (path, callBackProgress, callBackFinish) {
        var img = new Image();
        img.onload = function (img) {
            if (!img) {
                console.log("加载的图片路径不存在---", path);
                return;
            }
            this._cacheImage.push(new CacheImageData(path, img));
            if (callBackFinish)
                callBackFinish.call(null, img);
        }.bind(this, img);
        img.src = path;
    };
    LoaderManager.prototype.getLoadFunc = function (path) {
        var strArr = path.split('.');
        var extName = strArr[strArr.length - 1];
        switch (extName) {
            case "jpg": return this.loadImageData;
            case "png": return this.loadImageData;
            case "bin": return this.loadBlobData;
            //   case "bin":return this.loadJsonBlobData;
            case "json": return this.loadJsonData;
            case "gltf": return this.loadJsonStringData;
            case "skel": return this.loadSkelData;
            default:
                console.log("发现未知后缀名的文件----", path);
                null;
                break;
        }
    };
    //加载数据
    LoaderManager.prototype.loadData = function (arr, callBackProgress, callBackFinish) {
        return __awaiter(this, void 0, void 0, function () {
            var count, j, path, loadFunc;
            var _this_1 = this;
            return __generator(this, function (_a) {
                count = 0;
                for (j = 0; j < arr.length; j++) {
                    path = arr[j];
                    loadFunc = this.getLoadFunc(path);
                    loadFunc.call(this, path, null, function (res) {
                        count++;
                        _this_1.onLoadProgress(count / arr.length);
                        if (count == arr.length) {
                            _this_1.onLoadFinish();
                            if (callBackFinish)
                                callBackFinish();
                        }
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    //获取缓存中的数据
    LoaderManager.prototype.getCacheData = function (url) {
        console.log(url, this._cache.has(url));
        return this._cache.get(url);
    };
    /**
     * 获取缓存的纹理数据
     * @param url
     */
    LoaderManager.prototype.getCacheImage = function (url) {
        for (var j = 0; j < this._cacheImage.length; j++) {
            var data = this._cacheImage[j];
            if (data.url == url)
                return data.img;
        }
        return null;
    };
    /**
     * 移除CPU端内存中的图片缓存
     * @param url
     */
    LoaderManager.prototype.removeImage = function (url) {
        var index = -1;
        var img;
        for (var j = 0; j < this._cacheImage.length; j++) {
            var data = this._cacheImage[j];
            if (data.url == url) {
                index = j;
                img = data.img;
                break;
            }
        }
        if (index >= 0) {
            console.log("解除引用");
            this._cacheImage.splice(index, 1);
            this.releaseCPUMemoryForImageCache(img);
        }
        else {
            console.log("没找到----", img, index);
        }
    };
    /**
     *
     * @param img
     * 释放CPU端内存中的图片缓存
     */
    LoaderManager.prototype.releaseCPUMemoryForImageCache = function (img) {
        img.src = "";
        img = null;
    };
    LoaderManager.prototype.onLoadProgress = function (progress) {
        console.log("加载进度---------", progress);
    };
    LoaderManager.prototype.onLoadFinish = function () {
        console.log("加载完成啦");
    };
    return LoaderManager;
}());
exports.default = LoaderManager;
},{}],3:[function(require,module,exports){
"use strict";
//第1步 - 准备Canvas和获取WebGL的渲染上下文
Object.defineProperty(exports, "__esModule", { value: true });
var Device_1 = require("./Device");
var LoaderManager_1 = require("./LoaderManager");
var Shader_1 = require("./core/renderer/shader/Shader");
var Stage_1 = require("./core/renderer/3d/Stage");
Device_1.default.Instance.init();
Shader_1.G_ShaderFactory.init(Device_1.default.Instance.gl);
//testWebl_Label.run();
//LightTest.run();
// skyBoxTest.run();
// SkinTes1.run();
var arr = [
    "res/models/killer_whale/whale.CYCLES.bin",
    "res/models/killer_whale/whale.CYCLES.gltf",
    "res/8x8-font.png",
    "res/wood.jpg",
    "res/tree.jpg",
    "res/ground.jpg",
    "res/wicker.jpg"
];
// ThreeDTexture.run();
// LabelTest.run();
// ShaderShadowTest.run();
Stage_1.default.run();
// CameraTest.run();
// TextureTest.run();
// SpeedTest.run();
//  HaiTwn1.run();
// ThreeDLightTest.run();
// SpotLightTest.run();
// PointLightTest.run();
LoaderManager_1.default.instance.loadData(arr, null, function () {
    // debugger;
    // new RenderFlow().startup();
});
},{"./Device":1,"./LoaderManager":2,"./core/renderer/3d/Stage":6,"./core/renderer/shader/Shader":22}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Component = /** @class */ (function () {
    function Component() {
    }
    return Component;
}());
var Ref = /** @class */ (function () {
    function Ref() {
        this._referenceCount = 0;
        this._referenceCount = 1;
    }
    Ref.prototype.addReferenceCount = function () {
        this._referenceCount++;
    };
    Ref.prototype.reduceReferenceCount = function () {
        this._referenceCount--;
    };
    return Ref;
}());
exports.default = Ref;
},{}],5:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.glMatrix = void 0;
var glMatrix;
(function (glMatrix_1) {
    /**
* Common utilities
* @module glMatrix
*/
    // Configuration Constants
    var EPSILON = 0.000001;
    var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
    var RANDOM = Math.random;
    /**
     * Sets the type of array used when creating new vectors and matrices
     *
     * @param {Type} type Array type, such as Float32Array or Array
     */
    function setMatrixArrayType(type) {
        ARRAY_TYPE = type;
    }
    var degree = Math.PI / 180;
    /**
     * Convert Degree To Radian
     *
     * @param {Number} a Angle in Degrees
     */
    function toRadian(a) {
        return a * degree;
    }
    /**
     * Tests whether or not the arguments have approximately the same value, within an absolute
     * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
     * than or equal to 1.0, and a relative tolerance is used for larger values)
     *
     * @param {Number} a The first number to test.
     * @param {Number} b The second number to test.
     * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
     */
    function equals(a, b) {
        return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
    }
    if (!Math.hypot)
        Math.hypot = function () {
            var y = 0, i = arguments.length;
            while (i--) {
                y += arguments[i] * arguments[i];
            }
            return Math.sqrt(y);
        };
    var MatType = Float32Array;
    var common = /*#__PURE__*/ Object.freeze({
        EPSILON: EPSILON,
        get ARRAY_TYPE() { return ARRAY_TYPE; },
        RANDOM: RANDOM,
        setMatrixArrayType: setMatrixArrayType,
        toRadian: toRadian,
        equals: equals
    });
    /**
     * 2x2 Matrix
     * @module mat2
     */
    /**
     * Creates a new identity mat2
     *
     * @returns {mat2} a new 2x2 matrix
     */
    function create() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
        }
        out[0] = 1;
        out[3] = 1;
        return out;
    }
    /**
     * Creates a new mat2 initialized with values from an existing matrix
     *
     * @param {mat2} a matrix to clone
     * @returns {mat2} a new 2x2 matrix
     */
    function clone(a) {
        var out = new ARRAY_TYPE(4);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Copy the values from one mat2 to another
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Set a mat2 to the identity matrix
     *
     * @param {mat2} out the receiving matrix
     * @returns {mat2} out
     */
    function identity(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
    }
    /**
     * Create a new mat2 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m10 Component in column 1, row 0 position (index 2)
     * @param {Number} m11 Component in column 1, row 1 position (index 3)
     * @returns {mat2} out A new 2x2 matrix
     */
    function fromValues(m00, m01, m10, m11) {
        var out = new ARRAY_TYPE(4);
        out[0] = m00;
        out[1] = m01;
        out[2] = m10;
        out[3] = m11;
        return out;
    }
    /**
     * Set the components of a mat2 to the given values
     *
     * @param {mat2} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m10 Component in column 1, row 0 position (index 2)
     * @param {Number} m11 Component in column 1, row 1 position (index 3)
     * @returns {mat2} out
     */
    function set(out, m00, m01, m10, m11) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m10;
        out[3] = m11;
        return out;
    }
    /**
     * Transpose the values of a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function transpose(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache
        // some values
        if (out === a) {
            var a1 = a[1];
            out[1] = a[2];
            out[2] = a1;
        }
        else {
            out[0] = a[0];
            out[1] = a[2];
            out[2] = a[1];
            out[3] = a[3];
        }
        return out;
    }
    /**
     * adds 2 vectors3s
     * @param {Vector3} a a
     * @param {Vector3} b b
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function addVectors(dst, a, b) {
        dst = dst || new MatType(3);
        dst[0] = a[0] + b[0];
        dst[1] = a[1] + b[1];
        dst[2] = a[2] + b[2];
        return dst;
    }
    /**
     * subtracts 2 vectors3s
     * @param {Vector3} a a
     * @param {Vector3} b b
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function subtractVectors(dst, a, b) {
        dst = dst || new MatType(3);
        dst[0] = a[0] - b[0];
        dst[1] = a[1] - b[1];
        dst[2] = a[2] - b[2];
        return dst;
    }
    /**
     * scale vectors3
     * @param {Vector3} v vector
     * @param {Number} s scale
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function scaleVector(dst, v, s) {
        dst = dst || new MatType(3);
        dst[0] = v[0] * s;
        dst[1] = v[1] * s;
        dst[2] = v[2] * s;
        return dst;
    }
    /**
     * Inverts a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function invert(out, a) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3]; // Calculate the determinant
        var det = a0 * a3 - a2 * a1;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = a3 * det;
        out[1] = -a1 * det;
        out[2] = -a2 * det;
        out[3] = a0 * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function adjoint(out, a) {
        // Caching this value is nessecary if out == a
        var a0 = a[0];
        out[0] = a[3];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a0;
        return out;
    }
    /**
     * Calculates the determinant of a mat2
     *
     * @param {mat2} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant(a) {
        return a[0] * a[3] - a[2] * a[1];
    }
    /**
     * Multiplies two mat2's
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function multiply(out, a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        out[0] = a0 * b0 + a2 * b1;
        out[1] = a1 * b0 + a3 * b1;
        out[2] = a0 * b2 + a2 * b3;
        out[3] = a1 * b2 + a3 * b3;
        return out;
    }
    /**
     * Rotates a mat2 by the given angle
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2} out
     */
    function rotate(out, a, rad) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = a0 * c + a2 * s;
        out[1] = a1 * c + a3 * s;
        out[2] = a0 * -s + a2 * c;
        out[3] = a1 * -s + a3 * c;
        return out;
    }
    /**
     * Scales the mat2 by the dimensions in the given vec2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to rotate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat2} out
     **/
    function scale(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var v0 = v[0], v1 = v[1];
        out[0] = a0 * v0;
        out[1] = a1 * v0;
        out[2] = a2 * v1;
        out[3] = a3 * v1;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat2.identity(dest);
     *     mat2.rotate(dest, dest, rad);
     *
     * @param {mat2} out mat2 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2} out
     */
    function fromRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = -s;
        out[3] = c;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat2.identity(dest);
     *     mat2.scale(dest, dest, vec);
     *
     * @param {mat2} out mat2 receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat2} out
     */
    function fromScaling(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = v[1];
        return out;
    }
    /**
     * Returns a string representation of a mat2
     *
     * @param {mat2} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str(a) {
        return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Returns Frobenius norm of a mat2
     *
     * @param {mat2} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob(a) {
        return Math.hypot(a[0], a[1], a[2], a[3]);
    }
    /**
     * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
     * @param {mat2} L the lower triangular matrix
     * @param {mat2} D the diagonal matrix
     * @param {mat2} U the upper triangular matrix
     * @param {mat2} a the input matrix to factorize
     */
    function LDU(L, D, U, a) {
        L[2] = a[2] / a[0];
        U[0] = a[0];
        U[1] = a[1];
        U[3] = a[3] - L[2] * U[1];
        return [L, D, U];
    }
    /**
     * Adds two mat2's
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function subtract(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat2} a The first matrix.
     * @param {mat2} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat2} a The first matrix.
     * @param {mat2} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$1(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat2} out
     */
    function multiplyScalar(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        return out;
    }
    /**
     * Adds two mat2's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat2} out the receiving vector
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat2} out
     */
    function multiplyScalarAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        return out;
    }
    /**
     * Alias for {@link mat2.multiply}
     * @function
     */
    var mul = multiply;
    /**
     * Alias for {@link mat2.subtract}
     * @function
     */
    var sub = subtract;
    glMatrix_1.mat2 = Object.freeze({
        create: create,
        clone: clone,
        copy: copy,
        identity: identity,
        fromValues: fromValues,
        set: set,
        transpose: transpose,
        invert: invert,
        adjoint: adjoint,
        determinant: determinant,
        multiply: multiply,
        rotate: rotate,
        scale: scale,
        fromRotation: fromRotation,
        fromScaling: fromScaling,
        str: str,
        frob: frob,
        LDU: LDU,
        add: add,
        subtract: subtract,
        exactEquals: exactEquals,
        equals: equals$1,
        multiplyScalar: multiplyScalar,
        multiplyScalarAndAdd: multiplyScalarAndAdd,
        mul: mul,
        sub: sub
    });
    /**
     * 2x3 Matrix
     * @module mat2d
     *
     * @description
     * A mat2d contains six elements defined as:
     * <pre>
     * [a, c, tx,
     *  b, d, ty]
     * </pre>
     * This is a short form for the 3x3 matrix:
     * <pre>
     * [a, c, tx,
     *  b, d, ty,
     *  0, 0, 1]
     * </pre>
     * The last row is ignored so the array is shorter and operations are faster.
     */
    /**
     * Creates a new identity mat2d
     *
     * @returns {mat2d} a new 2x3 matrix
     */
    function create$1() {
        var out = new ARRAY_TYPE(6);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[4] = 0;
            out[5] = 0;
        }
        out[0] = 1;
        out[3] = 1;
        return out;
    }
    /**
     * Creates a new mat2d initialized with values from an existing matrix
     *
     * @param {mat2d} a matrix to clone
     * @returns {mat2d} a new 2x3 matrix
     */
    function clone$1(a) {
        var out = new ARRAY_TYPE(6);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        return out;
    }
    /**
     * Copy the values from one mat2d to another
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the source matrix
     * @returns {mat2d} out
     */
    function copy$1(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        return out;
    }
    /**
     * Set a mat2d to the identity matrix
     *
     * @param {mat2d} out the receiving matrix
     * @returns {mat2d} out
     */
    function identity$1(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Create a new mat2d with the given values
     *
     * @param {Number} a Component A (index 0)
     * @param {Number} b Component B (index 1)
     * @param {Number} c Component C (index 2)
     * @param {Number} d Component D (index 3)
     * @param {Number} tx Component TX (index 4)
     * @param {Number} ty Component TY (index 5)
     * @returns {mat2d} A new mat2d
     */
    function fromValues$1(a, b, c, d, tx, ty) {
        var out = new ARRAY_TYPE(6);
        out[0] = a;
        out[1] = b;
        out[2] = c;
        out[3] = d;
        out[4] = tx;
        out[5] = ty;
        return out;
    }
    /**
     * Set the components of a mat2d to the given values
     *
     * @param {mat2d} out the receiving matrix
     * @param {Number} a Component A (index 0)
     * @param {Number} b Component B (index 1)
     * @param {Number} c Component C (index 2)
     * @param {Number} d Component D (index 3)
     * @param {Number} tx Component TX (index 4)
     * @param {Number} ty Component TY (index 5)
     * @returns {mat2d} out
     */
    function set$1(out, a, b, c, d, tx, ty) {
        out[0] = a;
        out[1] = b;
        out[2] = c;
        out[3] = d;
        out[4] = tx;
        out[5] = ty;
        return out;
    }
    /**
     * Inverts a mat2d
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the source matrix
     * @returns {mat2d} out
     */
    function invert$1(out, a) {
        var aa = a[0], ab = a[1], ac = a[2], ad = a[3];
        var atx = a[4], aty = a[5];
        var det = aa * ad - ab * ac;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = ad * det;
        out[1] = -ab * det;
        out[2] = -ac * det;
        out[3] = aa * det;
        out[4] = (ac * aty - ad * atx) * det;
        out[5] = (ab * atx - aa * aty) * det;
        return out;
    }
    /**
     * Calculates the determinant of a mat2d
     *
     * @param {mat2d} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$1(a) {
        return a[0] * a[3] - a[1] * a[2];
    }
    /**
     * Multiplies two mat2d's
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function multiply$1(out, a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
        out[0] = a0 * b0 + a2 * b1;
        out[1] = a1 * b0 + a3 * b1;
        out[2] = a0 * b2 + a2 * b3;
        out[3] = a1 * b2 + a3 * b3;
        out[4] = a0 * b4 + a2 * b5 + a4;
        out[5] = a1 * b4 + a3 * b5 + a5;
        return out;
    }
    /**
     * Rotates a mat2d by the given angle
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2d} out
     */
    function rotate$1(out, a, rad) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = a0 * c + a2 * s;
        out[1] = a1 * c + a3 * s;
        out[2] = a0 * -s + a2 * c;
        out[3] = a1 * -s + a3 * c;
        out[4] = a4;
        out[5] = a5;
        return out;
    }
    /**
     * Scales the mat2d by the dimensions in the given vec2
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to translate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat2d} out
     **/
    function scale$1(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var v0 = v[0], v1 = v[1];
        out[0] = a0 * v0;
        out[1] = a1 * v0;
        out[2] = a2 * v1;
        out[3] = a3 * v1;
        out[4] = a4;
        out[5] = a5;
        return out;
    }
    /**
     * Translates the mat2d by the dimensions in the given vec2
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to translate
     * @param {vec2} v the vec2 to translate the matrix by
     * @returns {mat2d} out
     **/
    function translate(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var v0 = v[0], v1 = v[1];
        out[0] = a0;
        out[1] = a1;
        out[2] = a2;
        out[3] = a3;
        out[4] = a0 * v0 + a2 * v1 + a4;
        out[5] = a1 * v0 + a3 * v1 + a5;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.rotate(dest, dest, rad);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2d} out
     */
    function fromRotation$1(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = -s;
        out[3] = c;
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.scale(dest, dest, vec);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat2d} out
     */
    function fromScaling$1(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = v[1];
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.translate(dest, dest, vec);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {vec2} v Translation vector
     * @returns {mat2d} out
     */
    function fromTranslation(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = v[0];
        out[5] = v[1];
        return out;
    }
    /**
     * Returns a string representation of a mat2d
     *
     * @param {mat2d} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$1(a) {
        return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
    }
    /**
     * Returns Frobenius norm of a mat2d
     *
     * @param {mat2d} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$1(a) {
        return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
    }
    /**
     * Adds two mat2d's
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function add$1(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function subtract$1(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat2d} out
     */
    function multiplyScalar$1(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        return out;
    }
    /**
     * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat2d} out the receiving vector
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat2d} out
     */
    function multiplyScalarAndAdd$1(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat2d} a The first matrix.
     * @param {mat2d} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$1(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat2d} a The first matrix.
     * @param {mat2d} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$2(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
    }
    /**
     * Alias for {@link mat2d.multiply}
     * @function
     */
    var mul$1 = multiply$1;
    /**
     * Alias for {@link mat2d.subtract}
     * @function
     */
    var sub$1 = subtract$1;
    glMatrix_1.mat2d = Object.freeze({
        create: create$1,
        clone: clone$1,
        copy: copy$1,
        identity: identity$1,
        fromValues: fromValues$1,
        set: set$1,
        invert: invert$1,
        determinant: determinant$1,
        multiply: multiply$1,
        rotate: rotate$1,
        scale: scale$1,
        translate: translate,
        fromRotation: fromRotation$1,
        fromScaling: fromScaling$1,
        fromTranslation: fromTranslation,
        str: str$1,
        frob: frob$1,
        add: add$1,
        subtract: subtract$1,
        multiplyScalar: multiplyScalar$1,
        multiplyScalarAndAdd: multiplyScalarAndAdd$1,
        exactEquals: exactEquals$1,
        equals: equals$2,
        mul: mul$1,
        sub: sub$1
    });
    /**
     * 3x3 Matrix
     * @module mat3
     */
    /**
     * Creates a new identity mat3
     *
     * @returns {mat3} a new 3x3 matrix
     */
    function create$2() {
        var out = new ARRAY_TYPE(9);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
        }
        out[0] = 1;
        out[4] = 1;
        out[8] = 1;
        return out;
    }
    /**
     * Copies the upper-left 3x3 values into the given mat3.
     *
     * @param {mat3} out the receiving 3x3 matrix
     * @param {mat4} a   the source 4x4 matrix
     * @returns {mat3} out
     */
    function fromMat4(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[4];
        out[4] = a[5];
        out[5] = a[6];
        out[6] = a[8];
        out[7] = a[9];
        out[8] = a[10];
        return out;
    }
    /**
     * Creates a new mat3 initialized with values from an existing matrix
     *
     * @param {mat3} a matrix to clone
     * @returns {mat3} a new 3x3 matrix
     */
    function clone$2(a) {
        var out = new ARRAY_TYPE(9);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Copy the values from one mat3 to another
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function copy$2(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Create a new mat3 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m10 Component in column 1, row 0 position (index 3)
     * @param {Number} m11 Component in column 1, row 1 position (index 4)
     * @param {Number} m12 Component in column 1, row 2 position (index 5)
     * @param {Number} m20 Component in column 2, row 0 position (index 6)
     * @param {Number} m21 Component in column 2, row 1 position (index 7)
     * @param {Number} m22 Component in column 2, row 2 position (index 8)
     * @returns {mat3} A new mat3
     */
    function fromValues$2(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        var out = new ARRAY_TYPE(9);
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m10;
        out[4] = m11;
        out[5] = m12;
        out[6] = m20;
        out[7] = m21;
        out[8] = m22;
        return out;
    }
    /**
     * Set the components of a mat3 to the given values
     *
     * @param {mat3} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m10 Component in column 1, row 0 position (index 3)
     * @param {Number} m11 Component in column 1, row 1 position (index 4)
     * @param {Number} m12 Component in column 1, row 2 position (index 5)
     * @param {Number} m20 Component in column 2, row 0 position (index 6)
     * @param {Number} m21 Component in column 2, row 1 position (index 7)
     * @param {Number} m22 Component in column 2, row 2 position (index 8)
     * @returns {mat3} out
     */
    function set$2(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m10;
        out[4] = m11;
        out[5] = m12;
        out[6] = m20;
        out[7] = m21;
        out[8] = m22;
        return out;
    }
    /**
     * Set a mat3 to the identity matrix
     *
     * @param {mat3} out the receiving matrix
     * @returns {mat3} out
     */
    function identity$2(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Transpose the values of a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function transpose$1(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
            var a01 = a[1], a02 = a[2], a12 = a[5];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a01;
            out[5] = a[7];
            out[6] = a02;
            out[7] = a12;
        }
        else {
            out[0] = a[0];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a[1];
            out[4] = a[4];
            out[5] = a[7];
            out[6] = a[2];
            out[7] = a[5];
            out[8] = a[8];
        }
        return out;
    }
    /**
     * Inverts a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function invert$2(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        var b01 = a22 * a11 - a12 * a21;
        var b11 = -a22 * a10 + a12 * a20;
        var b21 = a21 * a10 - a11 * a20; // Calculate the determinant
        var det = a00 * b01 + a01 * b11 + a02 * b21;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = b01 * det;
        out[1] = (-a22 * a01 + a02 * a21) * det;
        out[2] = (a12 * a01 - a02 * a11) * det;
        out[3] = b11 * det;
        out[4] = (a22 * a00 - a02 * a20) * det;
        out[5] = (-a12 * a00 + a02 * a10) * det;
        out[6] = b21 * det;
        out[7] = (-a21 * a00 + a01 * a20) * det;
        out[8] = (a11 * a00 - a01 * a10) * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function adjoint$1(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        out[0] = a11 * a22 - a12 * a21;
        out[1] = a02 * a21 - a01 * a22;
        out[2] = a01 * a12 - a02 * a11;
        out[3] = a12 * a20 - a10 * a22;
        out[4] = a00 * a22 - a02 * a20;
        out[5] = a02 * a10 - a00 * a12;
        out[6] = a10 * a21 - a11 * a20;
        out[7] = a01 * a20 - a00 * a21;
        out[8] = a00 * a11 - a01 * a10;
        return out;
    }
    /**
     * Calculates the determinant of a mat3
     *
     * @param {mat3} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$2(a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
    }
    /**
     * Multiplies two mat3's
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function multiply$2(out, a, b) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        var b00 = b[0], b01 = b[1], b02 = b[2];
        var b10 = b[3], b11 = b[4], b12 = b[5];
        var b20 = b[6], b21 = b[7], b22 = b[8];
        out[0] = b00 * a00 + b01 * a10 + b02 * a20;
        out[1] = b00 * a01 + b01 * a11 + b02 * a21;
        out[2] = b00 * a02 + b01 * a12 + b02 * a22;
        out[3] = b10 * a00 + b11 * a10 + b12 * a20;
        out[4] = b10 * a01 + b11 * a11 + b12 * a21;
        out[5] = b10 * a02 + b11 * a12 + b12 * a22;
        out[6] = b20 * a00 + b21 * a10 + b22 * a20;
        out[7] = b20 * a01 + b21 * a11 + b22 * a21;
        out[8] = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
    }
    /**
     * Translate a mat3 by the given vector
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to translate
     * @param {vec2} v vector to translate by
     * @returns {mat3} out
     */
    function translate$1(out, a, v) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a10;
        out[4] = a11;
        out[5] = a12;
        out[6] = x * a00 + y * a10 + a20;
        out[7] = x * a01 + y * a11 + a21;
        out[8] = x * a02 + y * a12 + a22;
        return out;
    }
    /**
     * Rotates a mat3 by the given angle
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat3} out
     */
    function rotate$2(out, a, rad) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c * a00 + s * a10;
        out[1] = c * a01 + s * a11;
        out[2] = c * a02 + s * a12;
        out[3] = c * a10 - s * a00;
        out[4] = c * a11 - s * a01;
        out[5] = c * a12 - s * a02;
        out[6] = a20;
        out[7] = a21;
        out[8] = a22;
        return out;
    }
    /**
     * Scales the mat3 by the dimensions in the given vec2
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to rotate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat3} out
     **/
    function scale$2(out, a, v) {
        var x = v[0], y = v[1];
        out[0] = x * a[0];
        out[1] = x * a[1];
        out[2] = x * a[2];
        out[3] = y * a[3];
        out[4] = y * a[4];
        out[5] = y * a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.translate(dest, dest, vec);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {vec2} v Translation vector
     * @returns {mat3} out
     */
    function fromTranslation$1(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = v[0];
        out[7] = v[1];
        out[8] = 1;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.rotate(dest, dest, rad);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat3} out
     */
    function fromRotation$2(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = 0;
        out[3] = -s;
        out[4] = c;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.scale(dest, dest, vec);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat3} out
     */
    function fromScaling$2(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = v[1];
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Copies the values from a mat2d into a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat2d} a the matrix to copy
     * @returns {mat3} out
     **/
    function fromMat2d(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = 0;
        out[3] = a[2];
        out[4] = a[3];
        out[5] = 0;
        out[6] = a[4];
        out[7] = a[5];
        out[8] = 1;
        return out;
    }
    /**
    * Calculates a 3x3 matrix from the given quaternion
    *
    * @param {mat3} out mat3 receiving operation result
    * @param {quat} q Quaternion to create matrix from
    *
    * @returns {mat3} out
    */
    function fromQuat(out, q) {
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - yy - zz;
        out[3] = yx - wz;
        out[6] = zx + wy;
        out[1] = yx + wz;
        out[4] = 1 - xx - zz;
        out[7] = zy - wx;
        out[2] = zx - wy;
        out[5] = zy + wx;
        out[8] = 1 - xx - yy;
        return out;
    }
    /**
    * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
    *
    * @param {mat3} out mat3 receiving operation result
    * @param {mat4} a Mat4 to derive the normal matrix from
    *
    * @returns {mat3} out
    */
    function normalFromMat4(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        return out;
    }
    /**
     * Generates a 2D projection matrix with the given bounds
     *
     * @param {mat3} out mat3 frustum matrix will be written into
     * @param {number} width Width of your gl context
     * @param {number} height Height of gl context
     * @returns {mat3} out
     */
    function projection(out, width, height) {
        out[0] = 2 / width;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = -2 / height;
        out[5] = 0;
        out[6] = -1;
        out[7] = 1;
        out[8] = 1;
        return out;
    }
    /**
     * Returns a string representation of a mat3
     *
     * @param {mat3} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$2(a) {
        return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
    }
    /**
     * Returns Frobenius norm of a mat3
     *
     * @param {mat3} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$2(a) {
        return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
    }
    /**
     * Adds two mat3's
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function add$2(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        out[8] = a[8] + b[8];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function subtract$2(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        out[6] = a[6] - b[6];
        out[7] = a[7] - b[7];
        out[8] = a[8] - b[8];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat3} out
     */
    function multiplyScalar$2(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        out[8] = a[8] * b;
        return out;
    }
    /**
     * Adds two mat3's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat3} out the receiving vector
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat3} out
     */
    function multiplyScalarAndAdd$2(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        out[6] = a[6] + b[6] * scale;
        out[7] = a[7] + b[7] * scale;
        out[8] = a[8] + b[8] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat3} a The first matrix.
     * @param {mat3} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$2(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat3} a The first matrix.
     * @param {mat3} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$3(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
    }
    /**
     * Alias for {@link mat3.multiply}
     * @function
     */
    var mul$2 = multiply$2;
    /**
     * Alias for {@link mat3.subtract}
     * @function
     */
    var sub$2 = subtract$2;
    glMatrix_1.mat3 = Object.freeze({
        create: create$2,
        fromMat4: fromMat4,
        clone: clone$2,
        copy: copy$2,
        fromValues: fromValues$2,
        set: set$2,
        identity: identity$2,
        transpose: transpose$1,
        invert: invert$2,
        adjoint: adjoint$1,
        determinant: determinant$2,
        multiply: multiply$2,
        translate: translate$1,
        rotate: rotate$2,
        scale: scale$2,
        fromTranslation: fromTranslation$1,
        fromRotation: fromRotation$2,
        fromScaling: fromScaling$2,
        fromMat2d: fromMat2d,
        fromQuat: fromQuat,
        normalFromMat4: normalFromMat4,
        projection: projection,
        str: str$2,
        frob: frob$2,
        add: add$2,
        subtract: subtract$2,
        multiplyScalar: multiplyScalar$2,
        multiplyScalarAndAdd: multiplyScalarAndAdd$2,
        exactEquals: exactEquals$2,
        equals: equals$3,
        mul: mul$2,
        sub: sub$2
    });
    /**
     * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
     * @module mat4
     */
    /**
     * Creates a new identity mat4
     *
     * @returns {mat4} a new 4x4 matrix
     */
    function create$3() {
        var out = new ARRAY_TYPE(16);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
        }
        out[0] = 1;
        out[5] = 1;
        out[10] = 1;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a new mat4 initialized with values from an existing matrix
     *
     * @param {mat4} a matrix to clone
     * @returns {mat4} a new 4x4 matrix
     */
    function clone$3(a) {
        var out = new ARRAY_TYPE(16);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Copy the values from one mat4 to another
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function copy$3(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Create a new mat4 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} A new mat4
     */
    function fromValues$3(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        var out = new ARRAY_TYPE(16);
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m03;
        out[4] = m10;
        out[5] = m11;
        out[6] = m12;
        out[7] = m13;
        out[8] = m20;
        out[9] = m21;
        out[10] = m22;
        out[11] = m23;
        out[12] = m30;
        out[13] = m31;
        out[14] = m32;
        out[15] = m33;
        return out;
    }
    /**
     * Set the components of a mat4 to the given values
     *
     * @param {mat4} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} out
     */
    function set$3(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m03;
        out[4] = m10;
        out[5] = m11;
        out[6] = m12;
        out[7] = m13;
        out[8] = m20;
        out[9] = m21;
        out[10] = m22;
        out[11] = m23;
        out[12] = m30;
        out[13] = m31;
        out[14] = m32;
        out[15] = m33;
        return out;
    }
    /**
     * Set a mat4 to the identity matrix
     *
     * @param {mat4} out the receiving matrix
     * @returns {mat4} out
     */
    function identity$3(out) {
        out = out || new MatType(16);
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Transpose the values of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function transpose$2(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
            var a01 = a[1], a02 = a[2], a03 = a[3];
            var a12 = a[6], a13 = a[7];
            var a23 = a[11];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a01;
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a02;
            out[9] = a12;
            out[11] = a[14];
            out[12] = a03;
            out[13] = a13;
            out[14] = a23;
        }
        else {
            out[0] = a[0];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a[1];
            out[5] = a[5];
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a[2];
            out[9] = a[6];
            out[10] = a[10];
            out[11] = a[14];
            out[12] = a[3];
            out[13] = a[7];
            out[14] = a[11];
            out[15] = a[15];
        }
        return out;
    }
    /**
     * creates a matrix from translation, quaternion, scale
     * @param {Number[]} translation [x, y, z] translation
     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation
     * @param {Number[]} scale [x, y, z] scale
     * @param {Matrix4} [dst] optional matrix to store result
     * @return {Matrix4} dst or a new matrix if none provided
     */
    function compose(translation, quaternion, scale, dst) {
        dst = dst || new Float32Array(16);
        var x = quaternion[0];
        var y = quaternion[1];
        var z = quaternion[2];
        var w = quaternion[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = scale[0];
        var sy = scale[1];
        var sz = scale[2];
        dst[0] = (1 - (yy + zz)) * sx;
        dst[1] = (xy + wz) * sx;
        dst[2] = (xz - wy) * sx;
        dst[3] = 0;
        dst[4] = (xy - wz) * sy;
        dst[5] = (1 - (xx + zz)) * sy;
        dst[6] = (yz + wx) * sy;
        dst[7] = 0;
        dst[8] = (xz + wy) * sz;
        dst[9] = (yz - wx) * sz;
        dst[10] = (1 - (xx + yy)) * sz;
        dst[11] = 0;
        dst[12] = translation[0];
        dst[13] = translation[1];
        dst[14] = translation[2];
        dst[15] = 1;
        return dst;
    }
    function decompose(mat, translation, quaternion, scale) {
        var sx = length(mat.slice(0, 3));
        var sy = length(mat.slice(4, 7));
        var sz = length(mat.slice(8, 11));
        // if determinate is negative, we need to invert one scale
        var det = determinate(mat);
        if (det < 0) {
            sx = -sx;
        }
        translation[0] = mat[12];
        translation[1] = mat[13];
        translation[2] = mat[14];
        // scale the rotation part
        var matrix = glMatrix_1.mat4.create();
        glMatrix_1.mat4.copy(matrix, mat);
        var invSX = 1 / sx;
        var invSY = 1 / sy;
        var invSZ = 1 / sz;
        matrix[0] *= invSX;
        matrix[1] *= invSX;
        matrix[2] *= invSX;
        matrix[4] *= invSY;
        matrix[5] *= invSY;
        matrix[6] *= invSY;
        matrix[8] *= invSZ;
        matrix[9] *= invSZ;
        matrix[10] *= invSZ;
        quatFromRotationMatrix(matrix, quaternion);
        scale[0] = sx;
        scale[1] = sy;
        scale[2] = sz;
    }
    function determinate(m) {
        var m00 = m[0 * 4 + 0];
        var m01 = m[0 * 4 + 1];
        var m02 = m[0 * 4 + 2];
        var m03 = m[0 * 4 + 3];
        var m10 = m[1 * 4 + 0];
        var m11 = m[1 * 4 + 1];
        var m12 = m[1 * 4 + 2];
        var m13 = m[1 * 4 + 3];
        var m20 = m[2 * 4 + 0];
        var m21 = m[2 * 4 + 1];
        var m22 = m[2 * 4 + 2];
        var m23 = m[2 * 4 + 3];
        var m30 = m[3 * 4 + 0];
        var m31 = m[3 * 4 + 1];
        var m32 = m[3 * 4 + 2];
        var m33 = m[3 * 4 + 3];
        var tmp_0 = m22 * m33;
        var tmp_1 = m32 * m23;
        var tmp_2 = m12 * m33;
        var tmp_3 = m32 * m13;
        var tmp_4 = m12 * m23;
        var tmp_5 = m22 * m13;
        var tmp_6 = m02 * m33;
        var tmp_7 = m32 * m03;
        var tmp_8 = m02 * m23;
        var tmp_9 = m22 * m03;
        var tmp_10 = m02 * m13;
        var tmp_11 = m12 * m03;
        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);
        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);
    }
    function quatFromRotationMatrix(m, dst) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        var m11 = m[0];
        var m12 = m[4];
        var m13 = m[8];
        var m21 = m[1];
        var m22 = m[5];
        var m23 = m[9];
        var m31 = m[2];
        var m32 = m[6];
        var m33 = m[10];
        var trace = m11 + m22 + m33;
        if (trace > 0) {
            var s = 0.5 / Math.sqrt(trace + 1);
            dst[3] = 0.25 / s;
            dst[0] = (m32 - m23) * s;
            dst[1] = (m13 - m31) * s;
            dst[2] = (m21 - m12) * s;
        }
        else if (m11 > m22 && m11 > m33) {
            var s = 2 * Math.sqrt(1 + m11 - m22 - m33);
            dst[3] = (m32 - m23) / s;
            dst[0] = 0.25 * s;
            dst[1] = (m12 + m21) / s;
            dst[2] = (m13 + m31) / s;
        }
        else if (m22 > m33) {
            var s = 2 * Math.sqrt(1 + m22 - m11 - m33);
            dst[3] = (m13 - m31) / s;
            dst[0] = (m12 + m21) / s;
            dst[1] = 0.25 * s;
            dst[2] = (m23 + m32) / s;
        }
        else {
            var s = 2 * Math.sqrt(1 + m33 - m11 - m22);
            dst[3] = (m21 - m12) / s;
            dst[0] = (m13 + m31) / s;
            dst[1] = (m23 + m32) / s;
            dst[2] = 0.25 * s;
        }
    }
    /**
     * Inverts a mat4
     * 求一个矩阵的逆矩阵
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function invert$3(out, a) {
        out = out || new MatType(16);
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function adjoint$2(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
        out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
        out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
        out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
        out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
        out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
        out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
        out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
        out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
        out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
        out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
        out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
        out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
        out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
        out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
        out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
        return out;
    }
    /**
     * Calculates the determinant of a mat4
     *
     * @param {mat4} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$3(a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    }
    /**
     * Multiplies two mat4s
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */
    function multiply$3(out, a, b) {
        out = out || new MatType(16);
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15]; // Cache only the current line of the second matrix
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[4];
        b1 = b[5];
        b2 = b[6];
        b3 = b[7];
        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[8];
        b1 = b[9];
        b2 = b[10];
        b3 = b[11];
        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[12];
        b1 = b[13];
        b2 = b[14];
        b3 = b[15];
        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        return out;
    }
    /**
     * Translate a mat4 by the given vector
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to translate
     * @param {vec3} v vector to translate by
     * @returns {mat4} out
     */
    function translate$2(out, a, v) {
        var x = v[0], y = v[1], z = v[2];
        var a00, a01, a02, a03;
        var a10, a11, a12, a13;
        var a20, a21, a22, a23;
        if (a === out) {
            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
        }
        else {
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a03;
            out[4] = a10;
            out[5] = a11;
            out[6] = a12;
            out[7] = a13;
            out[8] = a20;
            out[9] = a21;
            out[10] = a22;
            out[11] = a23;
            out[12] = a00 * x + a10 * y + a20 * z + a[12];
            out[13] = a01 * x + a11 * y + a21 * z + a[13];
            out[14] = a02 * x + a12 * y + a22 * z + a[14];
            out[15] = a03 * x + a13 * y + a23 * z + a[15];
        }
        return out;
    }
    /**
     * Scales the mat4 by the dimensions in the given vec3 not using vectorization
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {vec3} v the vec3 to scale the matrix by
     * @returns {mat4} out
     **/
    function scale$3(out, a, v) {
        var x = v[0], y = v[1], z = v[2];
        out[0] = a[0] * x;
        out[1] = a[1] * x;
        out[2] = a[2] * x;
        out[3] = a[3] * x;
        out[4] = a[4] * y;
        out[5] = a[5] * y;
        out[6] = a[6] * y;
        out[7] = a[7] * y;
        out[8] = a[8] * z;
        out[9] = a[9] * z;
        out[10] = a[10] * z;
        out[11] = a[11] * z;
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Rotates a mat4 by the given angle around the given axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @param {vec3} axis the axis to rotate around
     * @returns {mat4} out
     */
    function rotate$3(out, a, rad, axis) {
        var x = axis[0], y = axis[1], z = axis[2];
        var len = Math.hypot(x, y, z);
        var s, c, t;
        var a00, a01, a02, a03;
        var a10, a11, a12, a13;
        var a20, a21, a22, a23;
        var b00, b01, b02;
        var b10, b11, b12;
        var b20, b21, b22;
        if (len < EPSILON) {
            return null;
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(rad);
        c = Math.cos(rad);
        t = 1 - c;
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11]; // Construct the elements of the rotation matrix
        b00 = x * x * t + c;
        b01 = y * x * t + z * s;
        b02 = z * x * t - y * s;
        b10 = x * y * t - z * s;
        b11 = y * y * t + c;
        b12 = z * y * t + x * s;
        b20 = x * z * t + y * s;
        b21 = y * z * t - x * s;
        b22 = z * z * t + c; // Perform rotation-specific matrix multiplication
        out[0] = a00 * b00 + a10 * b01 + a20 * b02;
        out[1] = a01 * b00 + a11 * b01 + a21 * b02;
        out[2] = a02 * b00 + a12 * b01 + a22 * b02;
        out[3] = a03 * b00 + a13 * b01 + a23 * b02;
        out[4] = a00 * b10 + a10 * b11 + a20 * b12;
        out[5] = a01 * b10 + a11 * b11 + a21 * b12;
        out[6] = a02 * b10 + a12 * b11 + a22 * b12;
        out[7] = a03 * b10 + a13 * b11 + a23 * b12;
        out[8] = a00 * b20 + a10 * b21 + a20 * b22;
        out[9] = a01 * b20 + a11 * b21 + a21 * b22;
        out[10] = a02 * b20 + a12 * b21 + a22 * b22;
        out[11] = a03 * b20 + a13 * b21 + a23 * b22;
        if (a !== out) {
            // If the source and destination differ, copy the unchanged last row
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        }
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the X axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateX(out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[4] = a10 * c + a20 * s;
        out[5] = a11 * c + a21 * s;
        out[6] = a12 * c + a22 * s;
        out[7] = a13 * c + a23 * s;
        out[8] = a20 * c - a10 * s;
        out[9] = a21 * c - a11 * s;
        out[10] = a22 * c - a12 * s;
        out[11] = a23 * c - a13 * s;
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the Y axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateY(out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[0] = a00 * c - a20 * s;
        out[1] = a01 * c - a21 * s;
        out[2] = a02 * c - a22 * s;
        out[3] = a03 * c - a23 * s;
        out[8] = a00 * s + a20 * c;
        out[9] = a01 * s + a21 * c;
        out[10] = a02 * s + a22 * c;
        out[11] = a03 * s + a23 * c;
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the Z axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateZ(out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged last row
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[0] = a00 * c + a10 * s;
        out[1] = a01 * c + a11 * s;
        out[2] = a02 * c + a12 * s;
        out[3] = a03 * c + a13 * s;
        out[4] = a10 * c - a00 * s;
        out[5] = a11 * c - a01 * s;
        out[6] = a12 * c - a02 * s;
        out[7] = a13 * c - a03 * s;
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {vec3} v Translation vector
     * @returns {mat4} out
     */
    function fromTranslation$2(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.scale(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {vec3} v Scaling vector
     * @returns {mat4} out
     */
    function fromScaling$3(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = v[1];
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = v[2];
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a given angle around a given axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotate(dest, dest, rad, axis);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @param {vec3} axis the axis to rotate around
     * @returns {mat4} out
     */
    function fromRotation$3(out, rad, axis) {
        var x = axis[0], y = axis[1], z = axis[2];
        var len = Math.hypot(x, y, z);
        var s, c, t;
        if (len < EPSILON) {
            return null;
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(rad);
        c = Math.cos(rad);
        t = 1 - c; // Perform rotation-specific matrix multiplication
        out[0] = x * x * t + c;
        out[1] = y * x * t + z * s;
        out[2] = z * x * t - y * s;
        out[3] = 0;
        out[4] = x * y * t - z * s;
        out[5] = y * y * t + c;
        out[6] = z * y * t + x * s;
        out[7] = 0;
        out[8] = x * z * t + y * s;
        out[9] = y * z * t - x * s;
        out[10] = z * z * t + c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the X axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateX(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromXRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = c;
        out[6] = s;
        out[7] = 0;
        out[8] = 0;
        out[9] = -s;
        out[10] = c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the Y axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateY(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromYRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = c;
        out[1] = 0;
        out[2] = -s;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = s;
        out[9] = 0;
        out[10] = c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the Z axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateZ(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromZRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = c;
        out[1] = s;
        out[2] = 0;
        out[3] = 0;
        out[4] = -s;
        out[5] = c;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation and vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @returns {mat4} out
     */
    function fromRotationTranslation(out, q, v) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - (yy + zz);
        out[1] = xy + wz;
        out[2] = xz - wy;
        out[3] = 0;
        out[4] = xy - wz;
        out[5] = 1 - (xx + zz);
        out[6] = yz + wx;
        out[7] = 0;
        out[8] = xz + wy;
        out[9] = yz - wx;
        out[10] = 1 - (xx + yy);
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a new mat4 from a dual quat.
     *
     * @param {mat4} out Matrix
     * @param {quat2} a Dual Quaternion
     * @returns {mat4} mat4 receiving operation result
     */
    function fromQuat2(out, a) {
        var translation = new ARRAY_TYPE(3);
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
        var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense
        if (magnitude > 0) {
            translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
            translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
            translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
        }
        else {
            translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
            translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
            translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
        }
        fromRotationTranslation(out, a, translation);
        return out;
    }
    /**
     * Returns the translation vector component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslation,
     *  the returned vector will be the same as the translation vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive translation component
     * @param  {mat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */
    function getTranslation(out, mat) {
        out[0] = mat[12];
        out[1] = mat[13];
        out[2] = mat[14];
        return out;
    }
    /**
     * Returns the scaling factor component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslationScale
     *  with a normalized Quaternion paramter, the returned vector will be
     *  the same as the scaling vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive scaling factor component
     * @param  {mat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */
    function getScaling(out, mat) {
        var m11 = mat[0];
        var m12 = mat[1];
        var m13 = mat[2];
        var m21 = mat[4];
        var m22 = mat[5];
        var m23 = mat[6];
        var m31 = mat[8];
        var m32 = mat[9];
        var m33 = mat[10];
        out[0] = Math.hypot(m11, m12, m13);
        out[1] = Math.hypot(m21, m22, m23);
        out[2] = Math.hypot(m31, m32, m33);
        return out;
    }
    /**
     * Returns a quaternion representing the rotational component
     *  of a transformation matrix. If a matrix is built with
     *  fromRotationTranslation, the returned quaternion will be the
     *  same as the quaternion originally supplied.
     * @param {quat} out Quaternion to receive the rotation component
     * @param {mat4} mat Matrix to be decomposed (input)
     * @return {quat} out
     */
    function getRotation(out, mat) {
        var scaling = new ARRAY_TYPE(3);
        getScaling(scaling, mat);
        var is1 = 1 / scaling[0];
        var is2 = 1 / scaling[1];
        var is3 = 1 / scaling[2];
        var sm11 = mat[0] * is1;
        var sm12 = mat[1] * is2;
        var sm13 = mat[2] * is3;
        var sm21 = mat[4] * is1;
        var sm22 = mat[5] * is2;
        var sm23 = mat[6] * is3;
        var sm31 = mat[8] * is1;
        var sm32 = mat[9] * is2;
        var sm33 = mat[10] * is3;
        var trace = sm11 + sm22 + sm33;
        var S = 0;
        if (trace > 0) {
            S = Math.sqrt(trace + 1.0) * 2;
            out[3] = 0.25 * S;
            out[0] = (sm23 - sm32) / S;
            out[1] = (sm31 - sm13) / S;
            out[2] = (sm12 - sm21) / S;
        }
        else if (sm11 > sm22 && sm11 > sm33) {
            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
            out[3] = (sm23 - sm32) / S;
            out[0] = 0.25 * S;
            out[1] = (sm12 + sm21) / S;
            out[2] = (sm31 + sm13) / S;
        }
        else if (sm22 > sm33) {
            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
            out[3] = (sm31 - sm13) / S;
            out[0] = (sm12 + sm21) / S;
            out[1] = 0.25 * S;
            out[2] = (sm23 + sm32) / S;
        }
        else {
            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
            out[3] = (sm12 - sm21) / S;
            out[0] = (sm31 + sm13) / S;
            out[1] = (sm23 + sm32) / S;
            out[2] = 0.25 * S;
        }
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @param {vec3} s Scaling vector
     * @returns {mat4} out
     */
    function fromRotationTranslationScale(out, q, v, s) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s[0];
        var sy = s[1];
        var sz = s[2];
        out[0] = (1 - (yy + zz)) * sx;
        out[1] = (xy + wz) * sx;
        out[2] = (xz - wy) * sx;
        out[3] = 0;
        out[4] = (xy - wz) * sy;
        out[5] = (1 - (xx + zz)) * sy;
        out[6] = (yz + wx) * sy;
        out[7] = 0;
        out[8] = (xz + wy) * sz;
        out[9] = (yz - wx) * sz;
        out[10] = (1 - (xx + yy)) * sz;
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     mat4.translate(dest, origin);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *     mat4.translate(dest, negativeOrigin);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @param {vec3} s Scaling vector
     * @param {vec3} o The origin vector around which to scale and rotate
     * @returns {mat4} out
     */
    function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s[0];
        var sy = s[1];
        var sz = s[2];
        var ox = o[0];
        var oy = o[1];
        var oz = o[2];
        var out0 = (1 - (yy + zz)) * sx;
        var out1 = (xy + wz) * sx;
        var out2 = (xz - wy) * sx;
        var out4 = (xy - wz) * sy;
        var out5 = (1 - (xx + zz)) * sy;
        var out6 = (yz + wx) * sy;
        var out8 = (xz + wy) * sz;
        var out9 = (yz - wx) * sz;
        var out10 = (1 - (xx + yy)) * sz;
        out[0] = out0;
        out[1] = out1;
        out[2] = out2;
        out[3] = 0;
        out[4] = out4;
        out[5] = out5;
        out[6] = out6;
        out[7] = 0;
        out[8] = out8;
        out[9] = out9;
        out[10] = out10;
        out[11] = 0;
        out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
        out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
        out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
        out[15] = 1;
        return out;
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat} q Quaternion to create matrix from
     *
     * @returns {mat4} out
     */
    function fromQuat$1(out, q) {
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - yy - zz;
        out[1] = yx + wz;
        out[2] = zx - wy;
        out[3] = 0;
        out[4] = yx - wz;
        out[5] = 1 - xx - zz;
        out[6] = zy + wx;
        out[7] = 0;
        out[8] = zx + wy;
        out[9] = zy - wx;
        out[10] = 1 - xx - yy;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Generates a frustum matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Number} left Left bound of the frustum
     * @param {Number} right Right bound of the frustum
     * @param {Number} bottom Bottom bound of the frustum
     * @param {Number} top Top bound of the frustum
     * @param {Number} near Near bound of the frustum
     * @param {Number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function frustum(out, left, right, bottom, top, near, far) {
        var rl = 1 / (right - left);
        var tb = 1 / (top - bottom);
        var nf = 1 / (near - far);
        out[0] = near * 2 * rl;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = near * 2 * tb;
        out[6] = 0;
        out[7] = 0;
        out[8] = (right + left) * rl;
        out[9] = (top + bottom) * tb;
        out[10] = (far + near) * nf;
        out[11] = -1;
        out[12] = 0;
        out[13] = 0;
        out[14] = far * near * 2 * nf;
        out[15] = 0;
        return out;
    }
    /**
     * Generates a perspective projection matrix with the given bounds.
     * Passing null/undefined/no value for far will generate infinite projection matrix.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} fovy Vertical field of view in radians
     * @param {number} aspect Aspect ratio. typically viewport width/height
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum, can be null or Infinity
     * @returns {mat4} out
     */
    function perspective(out, fovy, aspect, near, far) {
        out = out || new MatType(16);
        var f = 1.0 / Math.tan(fovy / 2), nf;
        out[0] = f / aspect;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = f;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[11] = -1;
        out[12] = 0;
        out[13] = 0;
        out[15] = 0;
        if (far != null && far !== Infinity) {
            nf = 1 / (near - far);
            out[10] = (far + near) * nf;
            out[14] = 2 * far * near * nf;
        }
        else {
            out[10] = -1;
            out[14] = -2 * near;
        }
        return out;
    }
    /**
     * Generates a perspective projection matrix with the given field of view.
     * This is primarily useful for generating projection matrices to be used
     * with the still experiemental WebVR API.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function perspectiveFromFieldOfView(out, fov, near, far) {
        var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
        var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
        var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
        var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
        var xScale = 2.0 / (leftTan + rightTan);
        var yScale = 2.0 / (upTan + downTan);
        out[0] = xScale;
        out[1] = 0.0;
        out[2] = 0.0;
        out[3] = 0.0;
        out[4] = 0.0;
        out[5] = yScale;
        out[6] = 0.0;
        out[7] = 0.0;
        out[8] = -((leftTan - rightTan) * xScale * 0.5);
        out[9] = (upTan - downTan) * yScale * 0.5;
        out[10] = far / (near - far);
        out[11] = -1.0;
        out[12] = 0.0;
        out[13] = 0.0;
        out[14] = far * near / (near - far);
        out[15] = 0.0;
        return out;
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} left Left bound of the frustum
     * @param {number} right Right bound of the frustum
     * @param {number} bottom Bottom bound of the frustum
     * @param {number} top Top bound of the frustum
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function ortho(out, left, right, bottom, top, near, far) {
        out = out || new MatType(16);
        var lr = 1 / (left - right);
        var bt = 1 / (bottom - top);
        var nf = 1 / (near - far);
        out[0] = -2 * lr;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = -2 * bt;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 2 * nf;
        out[11] = 0;
        out[12] = (left + right) * lr;
        out[13] = (top + bottom) * bt;
        out[14] = (far + near) * nf;
        out[15] = 1;
        return out;
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point, and up axis.
     * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {vec3} eye Position of the viewer
     * @param {vec3} center Point the viewer is looking at
     * @param {vec3} up vec3 pointing up
     * @returns {mat4} out
     */
    function lookAt(out, eye, center, up) {
        out = out || new MatType(16);
        var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
        var eyex = eye[0];
        var eyey = eye[1];
        var eyez = eye[2];
        var upx = up[0]; //0
        var upy = up[1]; //1
        var upz = up[2]; //0
        var centerx = center[0]; //0
        var centery = center[1]; //0
        var centerz = center[2]; //0
        if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
            return identity$3(out);
        }
        z0 = eyex - centerx;
        z1 = eyey - centery;
        z2 = eyez - centerz;
        //平方和的平方根
        len = 1 / Math.hypot(z0, z1, z2);
        z0 *= len;
        z1 *= len;
        z2 *= len;
        x0 = upy * z2 - upz * z1;
        x1 = upz * z0 - upx * z2;
        x2 = upx * z1 - upy * z0;
        len = Math.hypot(x0, x1, x2);
        if (!len) {
            x0 = 0;
            x1 = 0;
            x2 = 0;
        }
        else {
            len = 1 / len;
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        y0 = z1 * x2 - z2 * x1;
        y1 = z2 * x0 - z0 * x2;
        y2 = z0 * x1 - z1 * x0;
        len = Math.hypot(y0, y1, y2);
        if (!len) {
            y0 = 0;
            y1 = 0;
            y2 = 0;
        }
        else {
            len = 1 / len;
            y0 *= len;
            y1 *= len;
            y2 *= len;
        }
        out[0] = x0;
        out[1] = y0;
        out[2] = z0; //x轴
        out[3] = 0;
        out[4] = x1;
        out[5] = y1;
        out[6] = z1; //y轴
        out[7] = 0;
        out[8] = x2;
        out[9] = y2;
        out[10] = z2; //z轴
        out[11] = 0;
        out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
        out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
        out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
        out[15] = 1;
        return out;
    }
    /**
     * Creates a lookAt matrix.
     * This is a world matrix for a camera. In other words it will transform
     * from the origin to a place and orientation in the world. For a view
     * matrix take the inverse of this.
     * @param {Vector3} cameraPosition position of the camera
     * @param {Vector3} target position of the target
     * @param {Vector3} up direction
     * @param {Matrix4} [dst] optional matrix to store result
     * @return {Matrix4} dst or a new matrix if none provided
     * @memberOf module:webgl-3d-math
     */
    function lookAt2(dst, cameraPosition, target, up) {
        dst = dst || new MatType(16);
        var zAxis = [];
        var subR = [];
        normalize(zAxis, subtractVectors(subR, cameraPosition, target));
        var xAxis = [];
        var cross1 = [];
        normalize(xAxis, cross(cross1, up, zAxis));
        var yAxis = [];
        var cross2 = [];
        normalize(yAxis, cross(cross2, zAxis, xAxis));
        dst[0] = xAxis[0];
        dst[1] = xAxis[1];
        dst[2] = xAxis[2];
        dst[3] = 0;
        dst[4] = yAxis[0];
        dst[5] = yAxis[1];
        dst[6] = yAxis[2];
        dst[7] = 0;
        dst[8] = zAxis[0];
        dst[9] = zAxis[1];
        dst[10] = zAxis[2];
        dst[11] = 0;
        dst[12] = cameraPosition[0];
        dst[13] = cameraPosition[1];
        dst[14] = cameraPosition[2];
        dst[15] = 1;
        return dst;
    }
    /**
     * Generates a matrix that makes something look at something else.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {vec3} eye Position of the viewer
     * @param {vec3} center Point the viewer is looking at
     * @param {vec3} up vec3 pointing up
     * @returns {mat4} out
     */
    function targetTo(out, eye, target, up) {
        var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
        var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
        var len = z0 * z0 + z1 * z1 + z2 * z2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            z0 *= len;
            z1 *= len;
            z2 *= len;
        }
        var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
        len = x0 * x0 + x1 * x1 + x2 * x2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        out[0] = x0;
        out[1] = x1;
        out[2] = x2;
        out[3] = 0;
        out[4] = z1 * x2 - z2 * x1;
        out[5] = z2 * x0 - z0 * x2;
        out[6] = z0 * x1 - z1 * x0;
        out[7] = 0;
        out[8] = z0;
        out[9] = z1;
        out[10] = z2;
        out[11] = 0;
        out[12] = eyex;
        out[13] = eyey;
        out[14] = eyez;
        out[15] = 1;
        return out;
    }
    /**
     * Returns a string representation of a mat4
     *
     * @param {mat4} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$3(a) {
        return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
    }
    /**
     * Returns Frobenius norm of a mat4
     *
     * @param {mat4} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$3(a) {
        return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
    }
    /**
     * Adds two mat4's
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */
    function add$3(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        out[8] = a[8] + b[8];
        out[9] = a[9] + b[9];
        out[10] = a[10] + b[10];
        out[11] = a[11] + b[11];
        out[12] = a[12] + b[12];
        out[13] = a[13] + b[13];
        out[14] = a[14] + b[14];
        out[15] = a[15] + b[15];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */
    function subtract$3(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        out[6] = a[6] - b[6];
        out[7] = a[7] - b[7];
        out[8] = a[8] - b[8];
        out[9] = a[9] - b[9];
        out[10] = a[10] - b[10];
        out[11] = a[11] - b[11];
        out[12] = a[12] - b[12];
        out[13] = a[13] - b[13];
        out[14] = a[14] - b[14];
        out[15] = a[15] - b[15];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat4} out
     */
    function multiplyScalar$3(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        out[8] = a[8] * b;
        out[9] = a[9] * b;
        out[10] = a[10] * b;
        out[11] = a[11] * b;
        out[12] = a[12] * b;
        out[13] = a[13] * b;
        out[14] = a[14] * b;
        out[15] = a[15] * b;
        return out;
    }
    /**
     * Adds two mat4's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat4} out the receiving vector
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat4} out
     */
    function multiplyScalarAndAdd$3(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        out[6] = a[6] + b[6] * scale;
        out[7] = a[7] + b[7] * scale;
        out[8] = a[8] + b[8] * scale;
        out[9] = a[9] + b[9] * scale;
        out[10] = a[10] + b[10] * scale;
        out[11] = a[11] + b[11] * scale;
        out[12] = a[12] + b[12] * scale;
        out[13] = a[13] + b[13] * scale;
        out[14] = a[14] + b[14] * scale;
        out[15] = a[15] + b[15] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat4} a The first matrix.
     * @param {mat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$3(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat4} a The first matrix.
     * @param {mat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$4(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
        var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
        var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
        var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
        var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
    }
    /**
     * Alias for {@link mat4.multiply}
     * @function
     */
    var mul$3 = multiply$3;
    /**
     * Alias for {@link mat4.subtract}
     * @function
     */
    var sub$3 = subtract$3;
    glMatrix_1.mat4 = Object.freeze({
        create: create$3,
        clone: clone$3,
        copy: copy$3,
        compose: compose,
        decompose: decompose,
        fromValues: fromValues$3,
        set: set$3,
        identity: identity$3,
        transpose: transpose$2,
        invert: invert$3,
        adjoint: adjoint$2,
        determinant: determinant$3,
        multiply: multiply$3,
        translate: translate$2,
        scale: scale$3,
        rotate: rotate$3,
        rotateX: rotateX,
        rotateY: rotateY,
        rotateZ: rotateZ,
        fromTranslation: fromTranslation$2,
        transformDirection: transformDirection,
        transformPoint: transformPoint,
        translation: translation,
        fromScaling: fromScaling$3,
        fromRotation: fromRotation$3,
        fromXRotation: fromXRotation,
        fromYRotation: fromYRotation,
        fromZRotation: fromZRotation,
        fromRotationTranslation: fromRotationTranslation,
        fromQuat2: fromQuat2,
        getTranslation: getTranslation,
        getScaling: getScaling,
        getRotation: getRotation,
        fromRotationTranslationScale: fromRotationTranslationScale,
        fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
        fromQuat: fromQuat$1,
        frustum: frustum,
        perspective: perspective,
        perspectiveFromFieldOfView: perspectiveFromFieldOfView,
        ortho: ortho,
        lookAt: lookAt,
        lookAt2: lookAt2,
        targetTo: targetTo,
        str: str$3,
        frob: frob$3,
        add: add$3,
        subtract: subtract$3,
        multiplyScalar: multiplyScalar$3,
        multiplyScalarAndAdd: multiplyScalarAndAdd$3,
        exactEquals: exactEquals$3,
        equals: equals$4,
        mul: mul$3,
        sub: sub$3
    });
    /**
    * Makes a translation matrix
    * @param {number} tx x translation.
    * @param {number} ty y translation.
    * @param {number} tz z translation.
    * @param {Matrix4} [dst] optional matrix to store result
    * @return {Matrix4} dst or a new matrix if none provided
    * @memberOf module:webgl-3d-math
    */
    function translation(dst, tx, ty, tz) {
        dst = dst || new MatType(16);
        dst[0] = 1;
        dst[1] = 0;
        dst[2] = 0;
        dst[3] = 0;
        dst[4] = 0;
        dst[5] = 1;
        dst[6] = 0;
        dst[7] = 0;
        dst[8] = 0;
        dst[9] = 0;
        dst[10] = 1;
        dst[11] = 0;
        dst[12] = tx;
        dst[13] = ty;
        dst[14] = tz;
        dst[15] = 1;
        return dst;
    }
    /**
    * Takes a 4-by-4 matrix and a vector with 3 entries,
    * interprets the vector as a point, transforms that point by the matrix, and
    * returns the result as a vector with 3 entries.
    * @param {Matrix4} m The matrix.
    * @param {Vector3} v The point.
    * @param {Vector4} dst optional vector4 to store result
    * @return {Vector4} dst or new Vector4 if not provided
    * @memberOf module:webgl-3d-math
    */
    function transformPoint(dst, m, v) {
        dst = dst || new MatType(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];
        dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;
        dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;
        dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;
        return dst;
    }
    /**
     * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a
     * direction, transforms that direction by the matrix, and returns the result;
     * assumes the transformation of 3-dimensional space represented by the matrix
     * is parallel-preserving, i.e. any combination of rotation, scaling and
     * translation, but not a perspective distortion. Returns a vector with 3
     * entries.
     * @param {Matrix4} m The matrix.
     * @param {Vector3} v The direction.
     * @param {Vector4} dst optional vector4 to store result
     * @return {Vector4} dst or new Vector4 if not provided
     * @memberOf module:webgl-3d-math
     */
    function transformDirection(m, v, dst) {
        dst = dst || new MatType(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];
        dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];
        dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];
        return dst;
    }
    /**
     * 3 Dimensional Vector
     * @module vec3
     */
    /**
     * Creates a new, empty vec3
     *
     * @returns {vec3} a new 3D vector
     */
    function create$4() {
        var out = new ARRAY_TYPE(3);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec3 initialized with values from an existing vector
     *
     * @param {vec3} a vector to clone
     * @returns {vec3} a new 3D vector
     */
    function clone$4(a) {
        var out = new ARRAY_TYPE(3);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
    }
    /**
     * Calculates the length of a vec3
     *
     * @param {vec3} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        return Math.hypot(x, y, z);
    }
    /**
     * Creates a new vec3 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} a new 3D vector
     */
    function fromValues$4(x, y, z) {
        var out = new ARRAY_TYPE(3);
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
    }
    /**
     * Copy the values from one vec3 to another
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the source vector
     * @returns {vec3} out
     */
    function copy$4(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
    }
    /**
     * Set the components of a vec3 to the given values
     *
     * @param {vec3} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} out
     */
    function set$4(out, x, y, z) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
    }
    /**
     * Adds two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function add$4(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function subtract$4(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        return out;
    }
    /**
     * Multiplies two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function multiply$4(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        out[2] = a[2] * b[2];
        return out;
    }
    /**
     * Divides two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function divide(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        out[2] = a[2] / b[2];
        return out;
    }
    /**
     * Math.ceil the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to ceil
     * @returns {vec3} out
     */
    function ceil(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        return out;
    }
    /**
     * Math.floor the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to floor
     * @returns {vec3} out
     */
    function floor(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        return out;
    }
    /**
     * Returns the minimum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function min(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        out[2] = Math.min(a[2], b[2]);
        return out;
    }
    /**
     * Returns the maximum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function max(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        out[2] = Math.max(a[2], b[2]);
        return out;
    }
    /**
     * Math.round the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to round
     * @returns {vec3} out
     */
    function round(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        return out;
    }
    /**
     * Scales a vec3 by a scalar number
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec3} out
     */
    function scale$4(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        return out;
    }
    /**
     * Adds two vec3's after scaling the second operand by a scalar value
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec3} out
     */
    function scaleAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        return Math.hypot(x, y, z);
    }
    /**
     * Calculates the squared euclidian distance between two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        return x * x + y * y + z * z;
    }
    /**
     * Calculates the squared length of a vec3
     *
     * @param {vec3} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        return x * x + y * y + z * z;
    }
    /**
     * Negates the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to negate
     * @returns {vec3} out
     */
    function negate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to invert
     * @returns {vec3} out
     */
    function inverse(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        return out;
    }
    /**
     * Normalize a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to normalize
     * @returns {vec3} out
     */
    function normalize(out, a) {
        out = out || new Float32Array(3);
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var len = x * x + y * y + z * z;
        if (len > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len = 1 / Math.sqrt(len);
        }
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    /**
     * Computes the cross product of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function cross(out, a, b) {
        var ax = a[0], ay = a[1], az = a[2];
        var bx = b[0], by = b[1], bz = b[2];
        out[0] = ay * bz - az * by;
        out[1] = az * bx - ax * bz;
        out[2] = ax * by - ay * bx;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function lerp(out, a, b, t) {
        var ax = a[0];
        var ay = a[1];
        var az = a[2];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        out[2] = az + t * (b[2] - az);
        return out;
    }
    /**
     * Performs a hermite interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {vec3} c the third operand
     * @param {vec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function hermite(out, a, b, c, d, t) {
        var factorTimes2 = t * t;
        var factor1 = factorTimes2 * (2 * t - 3) + 1;
        var factor2 = factorTimes2 * (t - 2) + t;
        var factor3 = factorTimes2 * (t - 1);
        var factor4 = factorTimes2 * (3 - 2 * t);
        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
        return out;
    }
    /**
     * Performs a bezier interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {vec3} c the third operand
     * @param {vec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function bezier(out, a, b, c, d, t) {
        var inverseFactor = 1 - t;
        var inverseFactorTimesTwo = inverseFactor * inverseFactor;
        var factorTimes2 = t * t;
        var factor1 = inverseFactorTimesTwo * inverseFactor;
        var factor2 = 3 * t * inverseFactorTimesTwo;
        var factor3 = 3 * factorTimes2 * inverseFactor;
        var factor4 = factorTimes2 * t;
        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec3} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec3} out
     */
    function random(out, scale) {
        scale = scale || 1.0;
        var r = RANDOM() * 2.0 * Math.PI;
        var z = RANDOM() * 2.0 - 1.0;
        var zScale = Math.sqrt(1.0 - z * z) * scale;
        out[0] = Math.cos(r) * zScale;
        out[1] = Math.sin(r) * zScale;
        out[2] = z * scale;
        return out;
    }
    /**
     * Transforms the vec3 with a mat4.
     * 4th vector component is implicitly '1'
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec3} out
     */
    function transformMat4(out, a, m) {
        var x = a[0], y = a[1], z = a[2];
        var w = m[3] * x + m[7] * y + m[11] * z + m[15];
        w = w || 1.0;
        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
        return out;
    }
    /**
     * Transforms the vec3 with a mat3.
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {mat3} m the 3x3 matrix to transform with
     * @returns {vec3} out
     */
    function transformMat3(out, a, m) {
        var x = a[0], y = a[1], z = a[2];
        out[0] = x * m[0] + y * m[3] + z * m[6];
        out[1] = x * m[1] + y * m[4] + z * m[7];
        out[2] = x * m[2] + y * m[5] + z * m[8];
        return out;
    }
    /**
     * Transforms the vec3 with a quat
     * Can also be used for dual quaternions. (Multiply it with the real part)
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec3} out
     */
    function transformQuat(out, a, q) {
        // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
        var x = a[0], y = a[1], z = a[2]; // var qvec = [qx, qy, qz];
        // var uv = vec3.cross([], qvec, a);
        var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);
        var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);
        var w2 = qw * 2;
        uvx *= w2;
        uvy *= w2;
        uvz *= w2; // vec3.scale(uuv, uuv, 2);
        uuvx *= 2;
        uuvy *= 2;
        uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));
        out[0] = x + uvx + uuvx;
        out[1] = y + uvy + uuvy;
        out[2] = z + uvz + uuvz;
        return out;
    }
    /**
     * Rotate a 3D vector around the x-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateX$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[0];
        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Rotate a 3D vector around the y-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateY$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
        r[1] = p[1];
        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Rotate a 3D vector around the z-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateZ$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
        r[2] = p[2]; //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Get the angle between two 3D vectors
     * @param {vec3} a The first operand
     * @param {vec3} b The second operand
     * @returns {Number} The angle in radians
     */
    function angle(a, b) {
        var tempA = fromValues$4(a[0], a[1], a[2]);
        var tempB = fromValues$4(b[0], b[1], b[2]);
        normalize(tempA, tempA);
        normalize(tempB, tempB);
        var cosine = dot(tempA, tempB);
        if (cosine > 1.0) {
            return 0;
        }
        else if (cosine < -1.0) {
            return Math.PI;
        }
        else {
            return Math.acos(cosine);
        }
    }
    /**
     * Set the components of a vec3 to zero
     *
     * @param {vec3} out the receiving vector
     * @returns {vec3} out
     */
    function zero(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        out[2] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec3} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$4(a) {
        return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {vec3} a The first vector.
     * @param {vec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$4(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec3} a The first vector.
     * @param {vec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$5(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2];
        var b0 = b[0], b1 = b[1], b2 = b[2];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
    }
    /**
     * Alias for {@link vec3.subtract}
     * @function
     */
    var sub$4 = subtract$4;
    /**
     * Alias for {@link vec3.multiply}
     * @function
     */
    var mul$4 = multiply$4;
    /**
     * Alias for {@link vec3.divide}
     * @function
     */
    var div = divide;
    /**
     * Alias for {@link vec3.distance}
     * @function
     */
    var dist = distance;
    /**
     * Alias for {@link vec3.squaredDistance}
     * @function
     */
    var sqrDist = squaredDistance;
    /**
     * Alias for {@link vec3.length}
     * @function
     */
    var len = length;
    /**
     * Alias for {@link vec3.squaredLength}
     * @function
     */
    var sqrLen = squaredLength;
    /**
     * Perform some operation over an array of vec3s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach = function () {
        var vec = create$4();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 3;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                vec[2] = a[i + 2];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
                a[i + 2] = vec[2];
            }
            return a;
        };
    }();
    glMatrix_1.vec3 = Object.freeze({
        create: create$4,
        clone: clone$4,
        length: length,
        fromValues: fromValues$4,
        copy: copy$4,
        set: set$4,
        add: add$4,
        subtract: subtract$4,
        multiply: multiply$4,
        divide: divide,
        ceil: ceil,
        floor: floor,
        min: min,
        max: max,
        round: round,
        scale: scale$4,
        scaleAndAdd: scaleAndAdd,
        distance: distance,
        squaredDistance: squaredDistance,
        squaredLength: squaredLength,
        negate: negate,
        inverse: inverse,
        normalize: normalize,
        dot: dot,
        cross: cross,
        lerp: lerp,
        hermite: hermite,
        bezier: bezier,
        random: random,
        transformMat4: transformMat4,
        transformMat3: transformMat3,
        transformQuat: transformQuat,
        rotateX: rotateX$1,
        rotateY: rotateY$1,
        rotateZ: rotateZ$1,
        angle: angle,
        zero: zero,
        str: str$4,
        exactEquals: exactEquals$4,
        equals: equals$5,
        sub: sub$4,
        mul: mul$4,
        div: div,
        dist: dist,
        sqrDist: sqrDist,
        len: len,
        sqrLen: sqrLen,
        forEach: forEach
    });
    /**
     * 4 Dimensional Vector
     * @module vec4
     */
    /**
     * Creates a new, empty vec4
     *
     * @returns {vec4} a new 4D vector
     */
    function create$5() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec4 initialized with values from an existing vector
     *
     * @param {vec4} a vector to clone
     * @returns {vec4} a new 4D vector
     */
    function clone$5(a) {
        var out = new ARRAY_TYPE(4);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Creates a new vec4 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} a new 4D vector
     */
    function fromValues$5(x, y, z, w) {
        var out = new ARRAY_TYPE(4);
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    /**
     * Copy the values from one vec4 to another
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the source vector
     * @returns {vec4} out
     */
    function copy$5(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Set the components of a vec4 to the given values
     *
     * @param {vec4} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} out
     */
    function set$5(out, x, y, z, w) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    /**
     * Adds two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function add$5(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function subtract$5(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        return out;
    }
    /**
     * Multiplies two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function multiply$5(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        out[2] = a[2] * b[2];
        out[3] = a[3] * b[3];
        return out;
    }
    /**
     * Divides two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function divide$1(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        out[2] = a[2] / b[2];
        out[3] = a[3] / b[3];
        return out;
    }
    /**
     * Math.ceil the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to ceil
     * @returns {vec4} out
     */
    function ceil$1(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        out[3] = Math.ceil(a[3]);
        return out;
    }
    /**
     * Math.floor the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to floor
     * @returns {vec4} out
     */
    function floor$1(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        out[3] = Math.floor(a[3]);
        return out;
    }
    /**
     * Returns the minimum of two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function min$1(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        out[2] = Math.min(a[2], b[2]);
        out[3] = Math.min(a[3], b[3]);
        return out;
    }
    /**
     * Returns the maximum of two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function max$1(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        out[2] = Math.max(a[2], b[2]);
        out[3] = Math.max(a[3], b[3]);
        return out;
    }
    /**
     * Math.round the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to round
     * @returns {vec4} out
     */
    function round$1(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        out[3] = Math.round(a[3]);
        return out;
    }
    /**
     * Scales a vec4 by a scalar number
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec4} out
     */
    function scale$5(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        return out;
    }
    /**
     * Adds two vec4's after scaling the second operand by a scalar value
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec4} out
     */
    function scaleAndAdd$1(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance$1(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        var w = b[3] - a[3];
        return Math.hypot(x, y, z, w);
    }
    /**
     * Calculates the squared euclidian distance between two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance$1(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        var w = b[3] - a[3];
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Calculates the length of a vec4
     *
     * @param {vec4} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length$1(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        return Math.hypot(x, y, z, w);
    }
    /**
     * Calculates the squared length of a vec4
     *
     * @param {vec4} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength$1(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Negates the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to negate
     * @returns {vec4} out
     */
    function negate$1(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = -a[3];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to invert
     * @returns {vec4} out
     */
    function inverse$1(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        out[3] = 1.0 / a[3];
        return out;
    }
    /**
     * Normalize a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to normalize
     * @returns {vec4} out
     */
    function normalize$1(out, a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        var len = x * x + y * y + z * z + w * w;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
        }
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot$1(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    /**
     * Returns the cross-product of three vectors in a 4-dimensional space
     *
     * @param {vec4} result the receiving vector
     * @param {vec4} U the first vector
     * @param {vec4} V the second vector
     * @param {vec4} W the third vector
     * @returns {vec4} result
     */
    function cross$1(out, u, v, w) {
        var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
        var G = u[0];
        var H = u[1];
        var I = u[2];
        var J = u[3];
        out[0] = H * F - I * E + J * D;
        out[1] = -(G * F) + I * C - J * B;
        out[2] = G * E - H * C + J * A;
        out[3] = -(G * D) + H * B - I * A;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec4} out
     */
    function lerp$1(out, a, b, t) {
        var ax = a[0];
        var ay = a[1];
        var az = a[2];
        var aw = a[3];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        out[2] = az + t * (b[2] - az);
        out[3] = aw + t * (b[3] - aw);
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec4} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec4} out
     */
    function random$1(out, scale) {
        scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
        // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
        // http://projecteuclid.org/euclid.aoms/1177692644;
        var v1, v2, v3, v4;
        var s1, s2;
        do {
            v1 = RANDOM() * 2 - 1;
            v2 = RANDOM() * 2 - 1;
            s1 = v1 * v1 + v2 * v2;
        } while (s1 >= 1);
        do {
            v3 = RANDOM() * 2 - 1;
            v4 = RANDOM() * 2 - 1;
            s2 = v3 * v3 + v4 * v4;
        } while (s2 >= 1);
        var d = Math.sqrt((1 - s1) / s2);
        out[0] = scale * v1;
        out[1] = scale * v2;
        out[2] = scale * v3 * d;
        out[3] = scale * v4 * d;
        return out;
    }
    /**
     * Transforms the vec4 with a mat4.
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec4} out
     */
    function transformMat4$1(out, a, m) {
        var x = a[0], y = a[1], z = a[2], w = a[3];
        out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
        out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
        out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
        out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
        return out;
    }
    /**
     * Transforms the vec4 with a quat
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec4} out
     */
    function transformQuat$1(out, a, q) {
        var x = a[0], y = a[1], z = a[2];
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3]; // calculate quat * vec
        var ix = qw * x + qy * z - qz * y;
        var iy = qw * y + qz * x - qx * z;
        var iz = qw * z + qx * y - qy * x;
        var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat
        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        out[3] = a[3];
        return out;
    }
    /**
     * Set the components of a vec4 to zero
     *
     * @param {vec4} out the receiving vector
     * @returns {vec4} out
     */
    function zero$1(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        out[2] = 0.0;
        out[3] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec4} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$5(a) {
        return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {vec4} a The first vector.
     * @param {vec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$5(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec4} a The first vector.
     * @param {vec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$6(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Alias for {@link vec4.subtract}
     * @function
     */
    var sub$5 = subtract$5;
    /**
     * Alias for {@link vec4.multiply}
     * @function
     */
    var mul$5 = multiply$5;
    /**
     * Alias for {@link vec4.divide}
     * @function
     */
    var div$1 = divide$1;
    /**
     * Alias for {@link vec4.distance}
     * @function
     */
    var dist$1 = distance$1;
    /**
     * Alias for {@link vec4.squaredDistance}
     * @function
     */
    var sqrDist$1 = squaredDistance$1;
    /**
     * Alias for {@link vec4.length}
     * @function
     */
    var len$1 = length$1;
    /**
     * Alias for {@link vec4.squaredLength}
     * @function
     */
    var sqrLen$1 = squaredLength$1;
    /**
     * Perform some operation over an array of vec4s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach$1 = function () {
        var vec = create$5();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 4;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                vec[2] = a[i + 2];
                vec[3] = a[i + 3];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
                a[i + 2] = vec[2];
                a[i + 3] = vec[3];
            }
            return a;
        };
    }();
    glMatrix_1.vec4 = Object.freeze({
        create: create$5,
        clone: clone$5,
        fromValues: fromValues$5,
        copy: copy$5,
        set: set$5,
        add: add$5,
        subtract: subtract$5,
        multiply: multiply$5,
        divide: divide$1,
        ceil: ceil$1,
        floor: floor$1,
        min: min$1,
        max: max$1,
        round: round$1,
        scale: scale$5,
        scaleAndAdd: scaleAndAdd$1,
        distance: distance$1,
        squaredDistance: squaredDistance$1,
        length: length$1,
        squaredLength: squaredLength$1,
        negate: negate$1,
        inverse: inverse$1,
        normalize: normalize$1,
        dot: dot$1,
        cross: cross$1,
        lerp: lerp$1,
        random: random$1,
        transformMat4: transformMat4$1,
        transformQuat: transformQuat$1,
        zero: zero$1,
        str: str$5,
        exactEquals: exactEquals$5,
        equals: equals$6,
        sub: sub$5,
        mul: mul$5,
        div: div$1,
        dist: dist$1,
        sqrDist: sqrDist$1,
        len: len$1,
        sqrLen: sqrLen$1,
        forEach: forEach$1
    });
    /**
     * Quaternion
     * @module quat
     */
    /**
     * Creates a new identity quat
     *
     * @returns {quat} a new quaternion
     */
    function create$6() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
        }
        out[3] = 1;
        return out;
    }
    /**
     * Set a quat to the identity quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */
    function identity$4(out) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
    }
    /**
     * Sets a quat from the given angle and rotation axis,
     * then returns it.
     *
     * @param {quat} out the receiving quaternion
     * @param {vec3} axis the axis around which to rotate
     * @param {Number} rad the angle in radians
     * @returns {quat} out
     **/
    function setAxisAngle(out, axis, rad) {
        rad = rad * 0.5;
        var s = Math.sin(rad);
        out[0] = s * axis[0];
        out[1] = s * axis[1];
        out[2] = s * axis[2];
        out[3] = Math.cos(rad);
        return out;
    }
    /**
     * Gets the rotation axis and angle for a given
     *  quaternion. If a quaternion is created with
     *  setAxisAngle, this method will return the same
     *  values as providied in the original parameter list
     *  OR functionally equivalent values.
     * Example: The quaternion formed by axis [0, 0, 1] and
     *  angle -90 is the same as the quaternion formed by
     *  [0, 0, 1] and 270. This method favors the latter.
     * @param  {vec3} out_axis  Vector receiving the axis of rotation
     * @param  {quat} q     Quaternion to be decomposed
     * @return {Number}     Angle, in radians, of the rotation
     */
    function getAxisAngle(out_axis, q) {
        var rad = Math.acos(q[3]) * 2.0;
        var s = Math.sin(rad / 2.0);
        if (s > EPSILON) {
            out_axis[0] = q[0] / s;
            out_axis[1] = q[1] / s;
            out_axis[2] = q[2] / s;
        }
        else {
            // If s is zero, return any axis (no rotation - axis does not matter)
            out_axis[0] = 1;
            out_axis[1] = 0;
            out_axis[2] = 0;
        }
        return rad;
    }
    /**
     * Multiplies two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {quat} out
     */
    function multiply$6(out, a, b) {
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = b[0], by = b[1], bz = b[2], bw = b[3];
        out[0] = ax * bw + aw * bx + ay * bz - az * by;
        out[1] = ay * bw + aw * by + az * bx - ax * bz;
        out[2] = az * bw + aw * bz + ax * by - ay * bx;
        out[3] = aw * bw - ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the X axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateX$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw + aw * bx;
        out[1] = ay * bw + az * bx;
        out[2] = az * bw - ay * bx;
        out[3] = aw * bw - ax * bx;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Y axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateY$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var by = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw - az * by;
        out[1] = ay * bw + aw * by;
        out[2] = az * bw + ax * by;
        out[3] = aw * bw - ay * by;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Z axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateZ$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bz = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw + ay * bz;
        out[1] = ay * bw - ax * bz;
        out[2] = az * bw + aw * bz;
        out[3] = aw * bw - az * bz;
        return out;
    }
    /**
     * Calculates the W component of a quat from the X, Y, and Z components.
     * Assumes that quaternion is 1 unit in length.
     * Any existing W component will be ignored.
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate W component of
     * @returns {quat} out
     */
    function calculateW(out, a) {
        var x = a[0], y = a[1], z = a[2];
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
        return out;
    }
    /**
     * Performs a spherical linear interpolation between two quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */
    function slerp(out, a, b, t) {
        // benchmarks:
        //    http://jsperf.com/quaternion-slerp-implementations
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = b[0], by = b[1], bz = b[2], bw = b[3];
        var omega, cosom, sinom, scale0, scale1; // calc cosine
        cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)
        if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        } // calculate coefficients
        if (1.0 - cosom > EPSILON) {
            // standard case (slerp)
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        }
        else {
            // "from" and "to" quaternions are very close
            //  ... so we can do a linear interpolation
            scale0 = 1.0 - t;
            scale1 = t;
        } // calculate final values
        out[0] = scale0 * ax + scale1 * bx;
        out[1] = scale0 * ay + scale1 * by;
        out[2] = scale0 * az + scale1 * bz;
        out[3] = scale0 * aw + scale1 * bw;
        return out;
    }
    /**
     * Generates a random quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */
    function random$2(out) {
        // Implementation of http://planning.cs.uiuc.edu/node198.html
        // TODO: Calling random 3 times is probably not the fastest solution
        var u1 = RANDOM();
        var u2 = RANDOM();
        var u3 = RANDOM();
        var sqrt1MinusU1 = Math.sqrt(1 - u1);
        var sqrtU1 = Math.sqrt(u1);
        out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
        out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
        out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
        out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
        return out;
    }
    /**
     * Calculates the inverse of a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate inverse of
     * @returns {quat} out
     */
    function invert$4(out, a) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
        var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
        out[0] = -a0 * invDot;
        out[1] = -a1 * invDot;
        out[2] = -a2 * invDot;
        out[3] = a3 * invDot;
        return out;
    }
    /**
     * Calculates the conjugate of a quat
     * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate conjugate of
     * @returns {quat} out
     */
    function conjugate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     *
     * @param {quat} out the receiving quaternion
     * @param {mat3} m rotation matrix
     * @returns {quat} out
     * @function
     */
    function fromMat3(out, m) {
        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
        // article "Quaternion Calculus and Fast Animation".
        var fTrace = m[0] + m[4] + m[8];
        var fRoot;
        if (fTrace > 0.0) {
            // |w| > 1/2, may as well choose w > 1/2
            fRoot = Math.sqrt(fTrace + 1.0); // 2w
            out[3] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot; // 1/(4w)
            out[0] = (m[5] - m[7]) * fRoot;
            out[1] = (m[6] - m[2]) * fRoot;
            out[2] = (m[1] - m[3]) * fRoot;
        }
        else {
            // |w| <= 1/2
            var i = 0;
            if (m[4] > m[0])
                i = 1;
            if (m[8] > m[i * 3 + i])
                i = 2;
            var j = (i + 1) % 3;
            var k = (i + 2) % 3;
            fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
            out[i] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot;
            out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
            out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
            out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
        }
        return out;
    }
    /**
     * Creates a quaternion from the given euler angle x, y, z.
     *
     * @param {quat} out the receiving quaternion
     * @param {x} Angle to rotate around X axis in degrees.
     * @param {y} Angle to rotate around Y axis in degrees.
     * @param {z} Angle to rotate around Z axis in degrees.
     * @returns {quat} out
     * @function
     */
    function fromEuler(out, x, y, z) {
        var halfToRad = 0.5 * Math.PI / 180.0;
        x *= halfToRad;
        y *= halfToRad;
        z *= halfToRad;
        var sx = Math.sin(x);
        var cx = Math.cos(x);
        var sy = Math.sin(y);
        var cy = Math.cos(y);
        var sz = Math.sin(z);
        var cz = Math.cos(z);
        out[0] = sx * cy * cz - cx * sy * sz;
        out[1] = cx * sy * cz + sx * cy * sz;
        out[2] = cx * cy * sz - sx * sy * cz;
        out[3] = cx * cy * cz + sx * sy * sz;
        return out;
    }
    /**
     * Returns a string representation of a quatenion
     *
     * @param {quat} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$6(a) {
        return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {quat} a quaternion to clone
     * @returns {quat} a new quaternion
     * @function
     */
    var clone$6 = clone$5;
    /**
     * Creates a new quat initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} a new quaternion
     * @function
     */
    var fromValues$6 = fromValues$5;
    /**
     * Copy the values from one quat to another
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the source quaternion
     * @returns {quat} out
     * @function
     */
    var copy$6 = copy$5;
    /**
     * Set the components of a quat to the given values
     *
     * @param {quat} out the receiving quaternion
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} out
     * @function
     */
    var set$6 = set$5;
    /**
     * Adds two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {quat} out
     * @function
     */
    var add$6 = add$5;
    /**
     * Alias for {@link quat.multiply}
     * @function
     */
    var mul$6 = multiply$6;
    /**
     * Scales a quat by a scalar number
     *
     * @param {quat} out the receiving vector
     * @param {quat} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {quat} out
     * @function
     */
    var scale$6 = scale$5;
    /**
     * Calculates the dot product of two quat's
     *
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */
    var dot$2 = dot$1;
    /**
     * Performs a linear interpolation between two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     * @function
     */
    var lerp$2 = lerp$1;
    /**
     * Calculates the length of a quat
     *
     * @param {quat} a vector to calculate length of
     * @returns {Number} length of a
     */
    var length$2 = length$1;
    /**
     * Alias for {@link quat.length}
     * @function
     */
    var len$2 = length$2;
    /**
     * Calculates the squared length of a quat
     *
     * @param {quat} a vector to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */
    var squaredLength$2 = squaredLength$1;
    /**
     * Alias for {@link quat.squaredLength}
     * @function
     */
    var sqrLen$2 = squaredLength$2;
    /**
     * Normalize a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quaternion to normalize
     * @returns {quat} out
     * @function
     */
    var normalize$2 = normalize$1;
    /**
     * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {quat} a The first quaternion.
     * @param {quat} b The second quaternion.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    var exactEquals$6 = exactEquals$5;
    /**
     * Returns whether or not the quaternions have approximately the same elements in the same position.
     *
     * @param {quat} a The first vector.
     * @param {quat} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    var equals$7 = equals$6;
    /**
     * Sets a quaternion to represent the shortest rotation from one
     * vector to another.
     *
     * Both vectors are assumed to be unit length.
     *
     * @param {quat} out the receiving quaternion.
     * @param {vec3} a the initial vector
     * @param {vec3} b the destination vector
     * @returns {quat} out
     */
    var rotationTo = function () {
        var tmpvec3 = create$4();
        var xUnitVec3 = fromValues$4(1, 0, 0);
        var yUnitVec3 = fromValues$4(0, 1, 0);
        return function (out, a, b) {
            var dot$1 = dot(a, b);
            if (dot$1 < -0.999999) {
                cross(tmpvec3, xUnitVec3, a);
                if (len(tmpvec3) < 0.000001)
                    cross(tmpvec3, yUnitVec3, a);
                normalize(tmpvec3, tmpvec3);
                setAxisAngle(out, tmpvec3, Math.PI);
                return out;
            }
            else if (dot$1 > 0.999999) {
                out[0] = 0;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                return out;
            }
            else {
                cross(tmpvec3, a, b);
                out[0] = tmpvec3[0];
                out[1] = tmpvec3[1];
                out[2] = tmpvec3[2];
                out[3] = 1 + dot$1;
                return normalize$2(out, out);
            }
        };
    }();
    /**
     * Performs a spherical linear interpolation with two control points
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {quat} c the third operand
     * @param {quat} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */
    var sqlerp = function () {
        var temp1 = create$6();
        var temp2 = create$6();
        return function (out, a, b, c, d, t) {
            slerp(temp1, a, d, t);
            slerp(temp2, b, c, t);
            slerp(out, temp1, temp2, 2 * t * (1 - t));
            return out;
        };
    }();
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     *
     * @param {vec3} view  the vector representing the viewing direction
     * @param {vec3} right the vector representing the local "right" direction
     * @param {vec3} up    the vector representing the local "up" direction
     * @returns {quat} out
     */
    var setAxes = function () {
        var matr = create$2();
        return function (out, view, right, up) {
            matr[0] = right[0];
            matr[3] = right[1];
            matr[6] = right[2];
            matr[1] = up[0];
            matr[4] = up[1];
            matr[7] = up[2];
            matr[2] = -view[0];
            matr[5] = -view[1];
            matr[8] = -view[2];
            return normalize$2(out, fromMat3(out, matr));
        };
    }();
    glMatrix_1.quat = Object.freeze({
        create: create$6,
        identity: identity$4,
        setAxisAngle: setAxisAngle,
        getAxisAngle: getAxisAngle,
        multiply: multiply$6,
        rotateX: rotateX$2,
        rotateY: rotateY$2,
        rotateZ: rotateZ$2,
        calculateW: calculateW,
        slerp: slerp,
        random: random$2,
        invert: invert$4,
        conjugate: conjugate,
        fromMat3: fromMat3,
        fromEuler: fromEuler,
        str: str$6,
        clone: clone$6,
        fromValues: fromValues$6,
        copy: copy$6,
        set: set$6,
        add: add$6,
        mul: mul$6,
        scale: scale$6,
        dot: dot$2,
        lerp: lerp$2,
        length: length$2,
        len: len$2,
        squaredLength: squaredLength$2,
        sqrLen: sqrLen$2,
        normalize: normalize$2,
        exactEquals: exactEquals$6,
        equals: equals$7,
        rotationTo: rotationTo,
        sqlerp: sqlerp,
        setAxes: setAxes
    });
    /**
     * Dual Quaternion<br>
     * Format: [real, dual]<br>
     * Quaternion format: XYZW<br>
     * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
     * @module quat2
     */
    /**
     * Creates a new identity dual quat
     *
     * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
     */
    function create$7() {
        var dq = new ARRAY_TYPE(8);
        if (ARRAY_TYPE != Float32Array) {
            dq[0] = 0;
            dq[1] = 0;
            dq[2] = 0;
            dq[4] = 0;
            dq[5] = 0;
            dq[6] = 0;
            dq[7] = 0;
        }
        dq[3] = 1;
        return dq;
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {quat2} a dual quaternion to clone
     * @returns {quat2} new dual quaternion
     * @function
     */
    function clone$7(a) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = a[0];
        dq[1] = a[1];
        dq[2] = a[2];
        dq[3] = a[3];
        dq[4] = a[4];
        dq[5] = a[5];
        dq[6] = a[6];
        dq[7] = a[7];
        return dq;
    }
    /**
     * Creates a new dual quat initialized with the given values
     *
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component
     * @param {Number} y2 Y component
     * @param {Number} z2 Z component
     * @param {Number} w2 W component
     * @returns {quat2} new dual quaternion
     * @function
     */
    function fromValues$7(x1, y1, z1, w1, x2, y2, z2, w2) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = x1;
        dq[1] = y1;
        dq[2] = z1;
        dq[3] = w1;
        dq[4] = x2;
        dq[5] = y2;
        dq[6] = z2;
        dq[7] = w2;
        return dq;
    }
    /**
     * Creates a new dual quat from the given values (quat and translation)
     *
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component (translation)
     * @param {Number} y2 Y component (translation)
     * @param {Number} z2 Z component (translation)
     * @returns {quat2} new dual quaternion
     * @function
     */
    function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = x1;
        dq[1] = y1;
        dq[2] = z1;
        dq[3] = w1;
        var ax = x2 * 0.5, ay = y2 * 0.5, az = z2 * 0.5;
        dq[4] = ax * w1 + ay * z1 - az * y1;
        dq[5] = ay * w1 + az * x1 - ax * z1;
        dq[6] = az * w1 + ax * y1 - ay * x1;
        dq[7] = -ax * x1 - ay * y1 - az * z1;
        return dq;
    }
    /**
     * Creates a dual quat from a quaternion and a translation
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {quat} q a normalized quaternion
     * @param {vec3} t tranlation vector
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromRotationTranslation$1(out, q, t) {
        var ax = t[0] * 0.5, ay = t[1] * 0.5, az = t[2] * 0.5, bx = q[0], by = q[1], bz = q[2], bw = q[3];
        out[0] = bx;
        out[1] = by;
        out[2] = bz;
        out[3] = bw;
        out[4] = ax * bw + ay * bz - az * by;
        out[5] = ay * bw + az * bx - ax * bz;
        out[6] = az * bw + ax * by - ay * bx;
        out[7] = -ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Creates a dual quat from a translation
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {vec3} t translation vector
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromTranslation$3(out, t) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = t[0] * 0.5;
        out[5] = t[1] * 0.5;
        out[6] = t[2] * 0.5;
        out[7] = 0;
        return out;
    }
    /**
     * Creates a dual quat from a quaternion
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {quat} q the quaternion
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromRotation$4(out, q) {
        out[0] = q[0];
        out[1] = q[1];
        out[2] = q[2];
        out[3] = q[3];
        out[4] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        return out;
    }
    /**
     * Creates a new dual quat from a matrix (4x4)
     *
     * @param {quat2} out the dual quaternion
     * @param {mat4} a the matrix
     * @returns {quat2} dual quat receiving operation result
     * @function
     */
    function fromMat4$1(out, a) {
        //TODO Optimize this
        var outer = create$6();
        getRotation(outer, a);
        var t = new ARRAY_TYPE(3);
        getTranslation(t, a);
        fromRotationTranslation$1(out, outer, t);
        return out;
    }
    /**
     * Copy the values from one dual quat to another
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the source dual quaternion
     * @returns {quat2} out
     * @function
     */
    function copy$7(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        return out;
    }
    /**
     * Set a dual quat to the identity dual quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @returns {quat2} out
     */
    function identity$5(out) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        return out;
    }
    /**
     * Set the components of a dual quat to the given values
     *
     * @param {quat2} out the receiving quaternion
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component
     * @param {Number} y2 Y component
     * @param {Number} z2 Z component
     * @param {Number} w2 W component
     * @returns {quat2} out
     * @function
     */
    function set$7(out, x1, y1, z1, w1, x2, y2, z2, w2) {
        out[0] = x1;
        out[1] = y1;
        out[2] = z1;
        out[3] = w1;
        out[4] = x2;
        out[5] = y2;
        out[6] = z2;
        out[7] = w2;
        return out;
    }
    /**
     * Gets the real part of a dual quat
     * @param  {quat} out real part
     * @param  {quat2} a Dual Quaternion
     * @return {quat} real part
     */
    var getReal = copy$6;
    /**
     * Gets the dual part of a dual quat
     * @param  {quat} out dual part
     * @param  {quat2} a Dual Quaternion
     * @return {quat} dual part
     */
    function getDual(out, a) {
        out[0] = a[4];
        out[1] = a[5];
        out[2] = a[6];
        out[3] = a[7];
        return out;
    }
    /**
     * Set the real component of a dual quat to the given quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat} q a quaternion representing the real part
     * @returns {quat2} out
     * @function
     */
    var setReal = copy$6;
    /**
     * Set the dual component of a dual quat to the given quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat} q a quaternion representing the dual part
     * @returns {quat2} out
     * @function
     */
    function setDual(out, q) {
        out[4] = q[0];
        out[5] = q[1];
        out[6] = q[2];
        out[7] = q[3];
        return out;
    }
    /**
     * Gets the translation of a normalized dual quat
     * @param  {vec3} out translation
     * @param  {quat2} a Dual Quaternion to be decomposed
     * @return {vec3} translation
     */
    function getTranslation$1(out, a) {
        var ax = a[4], ay = a[5], az = a[6], aw = a[7], bx = -a[0], by = -a[1], bz = -a[2], bw = a[3];
        out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
        out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
        out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
        return out;
    }
    /**
     * Translates a dual quat by the given vector
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to translate
     * @param {vec3} v vector to translate by
     * @returns {quat2} out
     */
    function translate$3(out, a, v) {
        var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3], bx1 = v[0] * 0.5, by1 = v[1] * 0.5, bz1 = v[2] * 0.5, ax2 = a[4], ay2 = a[5], az2 = a[6], aw2 = a[7];
        out[0] = ax1;
        out[1] = ay1;
        out[2] = az1;
        out[3] = aw1;
        out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
        out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
        out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
        out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
        return out;
    }
    /**
     * Rotates a dual quat around the X axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateX$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateX$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat around the Y axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateY$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateY$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat around the Z axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateZ$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateZ$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat by a given quaternion (a * q)
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {quat} q quaternion to rotate by
     * @returns {quat2} out
     */
    function rotateByQuatAppend(out, a, q) {
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3], ax = a[0], ay = a[1], az = a[2], aw = a[3];
        out[0] = ax * qw + aw * qx + ay * qz - az * qy;
        out[1] = ay * qw + aw * qy + az * qx - ax * qz;
        out[2] = az * qw + aw * qz + ax * qy - ay * qx;
        out[3] = aw * qw - ax * qx - ay * qy - az * qz;
        ax = a[4];
        ay = a[5];
        az = a[6];
        aw = a[7];
        out[4] = ax * qw + aw * qx + ay * qz - az * qy;
        out[5] = ay * qw + aw * qy + az * qx - ax * qz;
        out[6] = az * qw + aw * qz + ax * qy - ay * qx;
        out[7] = aw * qw - ax * qx - ay * qy - az * qz;
        return out;
    }
    /**
     * Rotates a dual quat by a given quaternion (q * a)
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat} q quaternion to rotate by
     * @param {quat2} a the dual quaternion to rotate
     * @returns {quat2} out
     */
    function rotateByQuatPrepend(out, q, a) {
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3], bx = a[0], by = a[1], bz = a[2], bw = a[3];
        out[0] = qx * bw + qw * bx + qy * bz - qz * by;
        out[1] = qy * bw + qw * by + qz * bx - qx * bz;
        out[2] = qz * bw + qw * bz + qx * by - qy * bx;
        out[3] = qw * bw - qx * bx - qy * by - qz * bz;
        bx = a[4];
        by = a[5];
        bz = a[6];
        bw = a[7];
        out[4] = qx * bw + qw * bx + qy * bz - qz * by;
        out[5] = qy * bw + qw * by + qz * bx - qx * bz;
        out[6] = qz * bw + qw * bz + qx * by - qy * bx;
        out[7] = qw * bw - qx * bx - qy * by - qz * bz;
        return out;
    }
    /**
     * Rotates a dual quat around a given axis. Does the normalisation automatically
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {vec3} axis the axis to rotate around
     * @param {Number} rad how far the rotation should be
     * @returns {quat2} out
     */
    function rotateAroundAxis(out, a, axis, rad) {
        //Special case for rad = 0
        if (Math.abs(rad) < EPSILON) {
            return copy$7(out, a);
        }
        var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
        rad = rad * 0.5;
        var s = Math.sin(rad);
        var bx = s * axis[0] / axisLength;
        var by = s * axis[1] / axisLength;
        var bz = s * axis[2] / axisLength;
        var bw = Math.cos(rad);
        var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3];
        out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        var ax = a[4], ay = a[5], az = a[6], aw = a[7];
        out[4] = ax * bw + aw * bx + ay * bz - az * by;
        out[5] = ay * bw + aw * by + az * bx - ax * bz;
        out[6] = az * bw + aw * bz + ax * by - ay * bx;
        out[7] = aw * bw - ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Adds two dual quat's
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {quat2} out
     * @function
     */
    function add$7(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        return out;
    }
    /**
     * Multiplies two dual quat's
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {quat2} out
     */
    function multiply$7(out, a, b) {
        var ax0 = a[0], ay0 = a[1], az0 = a[2], aw0 = a[3], bx1 = b[4], by1 = b[5], bz1 = b[6], bw1 = b[7], ax1 = a[4], ay1 = a[5], az1 = a[6], aw1 = a[7], bx0 = b[0], by0 = b[1], bz0 = b[2], bw0 = b[3];
        out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
        out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
        out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
        out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
        out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
        out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
        out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
        out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
        return out;
    }
    /**
     * Alias for {@link quat2.multiply}
     * @function
     */
    var mul$7 = multiply$7;
    /**
     * Scales a dual quat by a scalar number
     *
     * @param {quat2} out the receiving dual quat
     * @param {quat2} a the dual quat to scale
     * @param {Number} b amount to scale the dual quat by
     * @returns {quat2} out
     * @function
     */
    function scale$7(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        return out;
    }
    /**
     * Calculates the dot product of two dual quat's (The dot product of the real parts)
     *
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */
    var dot$3 = dot$2;
    /**
     * Performs a linear interpolation between two dual quats's
     * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
     *
     * @param {quat2} out the receiving dual quat
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat2} out
     */
    function lerp$3(out, a, b, t) {
        var mt = 1 - t;
        if (dot$3(a, b) < 0)
            t = -t;
        out[0] = a[0] * mt + b[0] * t;
        out[1] = a[1] * mt + b[1] * t;
        out[2] = a[2] * mt + b[2] * t;
        out[3] = a[3] * mt + b[3] * t;
        out[4] = a[4] * mt + b[4] * t;
        out[5] = a[5] * mt + b[5] * t;
        out[6] = a[6] * mt + b[6] * t;
        out[7] = a[7] * mt + b[7] * t;
        return out;
    }
    /**
     * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a dual quat to calculate inverse of
     * @returns {quat2} out
     */
    function invert$5(out, a) {
        var sqlen = squaredLength$3(a);
        out[0] = -a[0] / sqlen;
        out[1] = -a[1] / sqlen;
        out[2] = -a[2] / sqlen;
        out[3] = a[3] / sqlen;
        out[4] = -a[4] / sqlen;
        out[5] = -a[5] / sqlen;
        out[6] = -a[6] / sqlen;
        out[7] = a[7] / sqlen;
        return out;
    }
    /**
     * Calculates the conjugate of a dual quat
     * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat2} a quat to calculate conjugate of
     * @returns {quat2} out
     */
    function conjugate$1(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a[3];
        out[4] = -a[4];
        out[5] = -a[5];
        out[6] = -a[6];
        out[7] = a[7];
        return out;
    }
    /**
     * Calculates the length of a dual quat
     *
     * @param {quat2} a dual quat to calculate length of
     * @returns {Number} length of a
     * @function
     */
    var length$3 = length$2;
    /**
     * Alias for {@link quat2.length}
     * @function
     */
    var len$3 = length$3;
    /**
     * Calculates the squared length of a dual quat
     *
     * @param {quat2} a dual quat to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */
    var squaredLength$3 = squaredLength$2;
    /**
     * Alias for {@link quat2.squaredLength}
     * @function
     */
    var sqrLen$3 = squaredLength$3;
    /**
     * Normalize a dual quat
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a dual quaternion to normalize
     * @returns {quat2} out
     * @function
     */
    function normalize$3(out, a) {
        var magnitude = squaredLength$3(a);
        if (magnitude > 0) {
            magnitude = Math.sqrt(magnitude);
            var a0 = a[0] / magnitude;
            var a1 = a[1] / magnitude;
            var a2 = a[2] / magnitude;
            var a3 = a[3] / magnitude;
            var b0 = a[4];
            var b1 = a[5];
            var b2 = a[6];
            var b3 = a[7];
            var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
            out[0] = a0;
            out[1] = a1;
            out[2] = a2;
            out[3] = a3;
            out[4] = (b0 - a0 * a_dot_b) / magnitude;
            out[5] = (b1 - a1 * a_dot_b) / magnitude;
            out[6] = (b2 - a2 * a_dot_b) / magnitude;
            out[7] = (b3 - a3 * a_dot_b) / magnitude;
        }
        return out;
    }
    /**
     * Returns a string representation of a dual quatenion
     *
     * @param {quat2} a dual quaternion to represent as a string
     * @returns {String} string representation of the dual quat
     */
    function str$7(a) {
        return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';
    }
    /**
     * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {quat2} a the first dual quaternion.
     * @param {quat2} b the second dual quaternion.
     * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
     */
    function exactEquals$7(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
    }
    /**
     * Returns whether or not the dual quaternions have approximately the same elements in the same position.
     *
     * @param {quat2} a the first dual quat.
     * @param {quat2} b the second dual quat.
     * @returns {Boolean} true if the dual quats are equal, false otherwise.
     */
    function equals$8(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));
    }
    glMatrix_1.quat2 = Object.freeze({
        create: create$7,
        clone: clone$7,
        fromValues: fromValues$7,
        fromRotationTranslationValues: fromRotationTranslationValues,
        fromRotationTranslation: fromRotationTranslation$1,
        fromTranslation: fromTranslation$3,
        fromRotation: fromRotation$4,
        fromMat4: fromMat4$1,
        copy: copy$7,
        identity: identity$5,
        set: set$7,
        getReal: getReal,
        getDual: getDual,
        setReal: setReal,
        setDual: setDual,
        getTranslation: getTranslation$1,
        translate: translate$3,
        rotateX: rotateX$3,
        rotateY: rotateY$3,
        rotateZ: rotateZ$3,
        rotateByQuatAppend: rotateByQuatAppend,
        rotateByQuatPrepend: rotateByQuatPrepend,
        rotateAroundAxis: rotateAroundAxis,
        add: add$7,
        multiply: multiply$7,
        mul: mul$7,
        scale: scale$7,
        dot: dot$3,
        lerp: lerp$3,
        invert: invert$5,
        conjugate: conjugate$1,
        length: length$3,
        len: len$3,
        squaredLength: squaredLength$3,
        sqrLen: sqrLen$3,
        normalize: normalize$3,
        str: str$7,
        exactEquals: exactEquals$7,
        equals: equals$8
    });
    /**
     * 2 Dimensional Vector
     * @module vec2
     */
    /**
     * Creates a new, empty vec2
     *
     * @returns {vec2} a new 2D vector
     */
    function create$8() {
        var out = new ARRAY_TYPE(2);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec2 initialized with values from an existing vector
     *
     * @param {vec2} a vector to clone
     * @returns {vec2} a new 2D vector
     */
    function clone$8(a) {
        var out = new ARRAY_TYPE(2);
        out[0] = a[0];
        out[1] = a[1];
        return out;
    }
    /**
     * Creates a new vec2 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} a new 2D vector
     */
    function fromValues$8(x, y) {
        var out = new ARRAY_TYPE(2);
        out[0] = x;
        out[1] = y;
        return out;
    }
    /**
     * Copy the values from one vec2 to another
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the source vector
     * @returns {vec2} out
     */
    function copy$8(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        return out;
    }
    /**
     * Set the components of a vec2 to the given values
     *
     * @param {vec2} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} out
     */
    function set$8(out, x, y) {
        out[0] = x;
        out[1] = y;
        return out;
    }
    /**
     * Adds two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function add$8(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function subtract$6(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        return out;
    }
    /**
     * Multiplies two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function multiply$8(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        return out;
    }
    /**
     * Divides two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function divide$2(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        return out;
    }
    /**
     * Math.ceil the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to ceil
     * @returns {vec2} out
     */
    function ceil$2(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        return out;
    }
    /**
     * Math.floor the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to floor
     * @returns {vec2} out
     */
    function floor$2(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        return out;
    }
    /**
     * Returns the minimum of two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function min$2(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        return out;
    }
    /**
     * Returns the maximum of two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function max$2(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        return out;
    }
    /**
     * Math.round the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to round
     * @returns {vec2} out
     */
    function round$2(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        return out;
    }
    /**
     * Scales a vec2 by a scalar number
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec2} out
     */
    function scale$8(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        return out;
    }
    /**
     * Adds two vec2's after scaling the second operand by a scalar value
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec2} out
     */
    function scaleAndAdd$2(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance$2(a, b) {
        var x = b[0] - a[0], y = b[1] - a[1];
        return Math.hypot(x, y);
    }
    /**
     * Calculates the squared euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance$2(a, b) {
        var x = b[0] - a[0], y = b[1] - a[1];
        return x * x + y * y;
    }
    /**
     * Calculates the length of a vec2
     *
     * @param {vec2} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length$4(a) {
        var x = a[0], y = a[1];
        return Math.hypot(x, y);
    }
    /**
     * Calculates the squared length of a vec2
     *
     * @param {vec2} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength$4(a) {
        var x = a[0], y = a[1];
        return x * x + y * y;
    }
    /**
     * Negates the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to negate
     * @returns {vec2} out
     */
    function negate$2(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to invert
     * @returns {vec2} out
     */
    function inverse$2(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        return out;
    }
    /**
     * Normalize a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to normalize
     * @returns {vec2} out
     */
    function normalize$4(out, a) {
        var x = a[0], y = a[1];
        var len = x * x + y * y;
        if (len > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len = 1 / Math.sqrt(len);
        }
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot$4(a, b) {
        return a[0] * b[0] + a[1] * b[1];
    }
    /**
     * Computes the cross product of two vec2's
     * Note that the cross product must by definition produce a 3D vector
     *
     * @param {vec3} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec3} out
     */
    function cross$2(out, a, b) {
        var z = a[0] * b[1] - a[1] * b[0];
        out[0] = out[1] = 0;
        out[2] = z;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec2} out
     */
    function lerp$4(out, a, b, t) {
        var ax = a[0], ay = a[1];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec2} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec2} out
     */
    function random$3(out, scale) {
        scale = scale || 1.0;
        var r = RANDOM() * 2.0 * Math.PI;
        out[0] = Math.cos(r) * scale;
        out[1] = Math.sin(r) * scale;
        return out;
    }
    /**
     * Transforms the vec2 with a mat2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat2} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat2(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[2] * y;
        out[1] = m[1] * x + m[3] * y;
        return out;
    }
    /**
     * Transforms the vec2 with a mat2d
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat2d} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat2d(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[2] * y + m[4];
        out[1] = m[1] * x + m[3] * y + m[5];
        return out;
    }
    /**
     * Transforms the vec2 with a mat3
     * 3rd vector component is implicitly '1'
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat3} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat3$1(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[3] * y + m[6];
        out[1] = m[1] * x + m[4] * y + m[7];
        return out;
    }
    /**
     * Transforms the vec2 with a mat4
     * 3rd vector component is implicitly '0'
     * 4th vector component is implicitly '1'
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat4$2(out, a, m) {
        var x = a[0];
        var y = a[1];
        out[0] = m[0] * x + m[4] * y + m[12];
        out[1] = m[1] * x + m[5] * y + m[13];
        return out;
    }
    /**
     * Rotate a 2D vector
     * @param {vec2} out The receiving vec2
     * @param {vec2} a The vec2 point to rotate
     * @param {vec2} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec2} out
     */
    function rotate$4(out, a, b, c) {
        //Translate point to the origin
        var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(c), cosC = Math.cos(c); //perform rotation and translate to correct position
        out[0] = p0 * cosC - p1 * sinC + b[0];
        out[1] = p0 * sinC + p1 * cosC + b[1];
        return out;
    }
    /**
     * Get the angle between two 2D vectors
     * @param {vec2} a The first operand
     * @param {vec2} b The second operand
     * @returns {Number} The angle in radians
     */
    function angle$1(a, b) {
        var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1];
        var len1 = x1 * x1 + y1 * y1;
        if (len1 > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len1 = 1 / Math.sqrt(len1);
        }
        var len2 = x2 * x2 + y2 * y2;
        if (len2 > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len2 = 1 / Math.sqrt(len2);
        }
        var cosine = (x1 * x2 + y1 * y2) * len1 * len2;
        if (cosine > 1.0) {
            return 0;
        }
        else if (cosine < -1.0) {
            return Math.PI;
        }
        else {
            return Math.acos(cosine);
        }
    }
    /**
     * Set the components of a vec2 to zero
     *
     * @param {vec2} out the receiving vector
     * @returns {vec2} out
     */
    function zero$2(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec2} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$8(a) {
        return 'vec2(' + a[0] + ', ' + a[1] + ')';
    }
    /**
     * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
     *
     * @param {vec2} a The first vector.
     * @param {vec2} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$8(a, b) {
        return a[0] === b[0] && a[1] === b[1];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec2} a The first vector.
     * @param {vec2} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$9(a, b) {
        var a0 = a[0], a1 = a[1];
        var b0 = b[0], b1 = b[1];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
    }
    /**
     * Alias for {@link vec2.length}
     * @function
     */
    var len$4 = length$4;
    /**
     * Alias for {@link vec2.subtract}
     * @function
     */
    var sub$6 = subtract$6;
    /**
     * Alias for {@link vec2.multiply}
     * @function
     */
    var mul$8 = multiply$8;
    /**
     * Alias for {@link vec2.divide}
     * @function
     */
    var div$2 = divide$2;
    /**
     * Alias for {@link vec2.distance}
     * @function
     */
    var dist$2 = distance$2;
    /**
     * Alias for {@link vec2.squaredDistance}
     * @function
     */
    var sqrDist$2 = squaredDistance$2;
    /**
     * Alias for {@link vec2.squaredLength}
     * @function
     */
    var sqrLen$4 = squaredLength$4;
    /**
     * Perform some operation over an array of vec2s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach$2 = function () {
        var vec = create$8();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 2;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
            }
            return a;
        };
    }();
    glMatrix_1.vec2 = Object.freeze({
        create: create$8,
        clone: clone$8,
        fromValues: fromValues$8,
        copy: copy$8,
        set: set$8,
        add: add$8,
        subtract: subtract$6,
        multiply: multiply$8,
        divide: divide$2,
        ceil: ceil$2,
        floor: floor$2,
        min: min$2,
        max: max$2,
        round: round$2,
        scale: scale$8,
        scaleAndAdd: scaleAndAdd$2,
        distance: distance$2,
        squaredDistance: squaredDistance$2,
        length: length$4,
        squaredLength: squaredLength$4,
        negate: negate$2,
        inverse: inverse$2,
        normalize: normalize$4,
        dot: dot$4,
        cross: cross$2,
        lerp: lerp$4,
        random: random$3,
        transformMat2: transformMat2,
        transformMat2d: transformMat2d,
        transformMat3: transformMat3$1,
        transformMat4: transformMat4$2,
        rotate: rotate$4,
        angle: angle$1,
        zero: zero$2,
        str: str$8,
        exactEquals: exactEquals$8,
        equals: equals$9,
        len: len$4,
        sub: sub$6,
        mul: mul$8,
        div: div$2,
        dist: dist$2,
        sqrDist: sqrDist$2,
        sqrLen: sqrLen$4,
        forEach: forEach$2
    });
    glMatrix_1.glMatrix = common;
    glMatrix_1.mat2 = glMatrix_1.mat2;
    glMatrix_1.mat2d = glMatrix_1.mat2d;
    glMatrix_1.mat3 = glMatrix_1.mat3;
    glMatrix_1.mat4 = glMatrix_1.mat4;
    glMatrix_1.quat = glMatrix_1.quat;
    glMatrix_1.quat2 = glMatrix_1.quat2;
    glMatrix_1.vec2 = glMatrix_1.vec2;
    glMatrix_1.vec3 = glMatrix_1.vec3;
    glMatrix_1.vec4 = glMatrix_1.vec4;
})(glMatrix = exports.glMatrix || (exports.glMatrix = {}));
},{}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 <div class="description" style="position: absolute;left: 750px; top:10px;color:crimson">
        Drag sliders to change the frustum.
        </div>
        <div style="position:absolute;">
          <img id="eye" src="resources/eye-icon.png" style="position: absolute; z-index:2; left: 10px; top: 275px; width: 32px; height: auto;"/>
        </div>
        <div id="uiContainer" style="position: absolute;left: 750px; top:30px;color: blue;">
          <div id="ui">
            <div id="cameraPosX"></div>
            <div id="cameraPosY"></div>
            <div id="cameraPosZ"></div>
            <div id="cameraRotateX"></div>
            <div id="cameraRotateY"></div>
            <div id="cameraRotateZ"></div>
            <div id="fieldOfView"></div>
            <div id="zNear"></div>
            <div id="zFar"></div>
            <div id="zPosition"></div>
          </div>
        </div>
 */
var Device_1 = require("../../../Device");
var Matrix_1 = require("../../Matrix");
var MathUtils_1 = require("../../utils/MathUtils");
var CameraFrustum_1 = require("../camera/CameraFrustum");
var Primitives_1 = require("../shader/Primitives");
var Shader_1 = require("../shader/Shader");
var baseVertexShader = 'attribute vec4 a_position;' +
    'attribute vec4 a_color;' +
    'uniform mat4 u_worldViewProjection;' +
    'uniform mat4 u_exampleWorldViewProjection;' +
    'varying vec4 v_color;' +
    'varying vec4 v_position;' +
    'void main() {' +
    'gl_Position = u_worldViewProjection * a_position;' +
    'v_position = u_exampleWorldViewProjection * a_position;' +
    'v_position = v_position / v_position.w;' +
    'v_color = a_color;' +
    '}';
var colorFragmentShader = 'precision mediump float;' +
    'varying vec4 v_color;' +
    'varying vec4 v_position;' +
    'uniform vec4 u_color;' +
    'void main() {' +
    'bool blend = (v_position.x < -1.0 || v_position.x > 1.0 ||' +
    'v_position.y < -1.0 || v_position.y > 1.0 ||' +
    'v_position.z < -1.0 || v_position.z > 1.0);' +
    'vec4 blendColor = blend ? vec4(0.35, 0.35, 0.35, 1.0) : vec4(1, 1, 1, 1);' +
    'gl_FragColor = v_color * u_color * blendColor;' +
    '}';
var wireCubeArrays = {
    position: [
        -1, 1, -1,
        1, 1, -1,
        1, -1, -1,
        -1, -1, -1,
        -1, 1, 1,
        1, 1, 1,
        1, -1, 1,
        -1, -1, 1,
    ],
    color: [
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
    ],
    indices: [
        0, 1, 1, 2, 2, 3, 3, 0,
        4, 5, 5, 6, 6, 7, 7, 4,
        0, 4, 1, 5, 2, 6, 3, 7,
    ],
};
var faceColors = [
    [1, 0, 0, 1,],
    [0, 1, 0, 1,],
    [1, 1, 0, 1,],
    [0, 0, 1, 1,],
    [1, 0, 1, 1,],
    [0, 1, 1, 1,],
];
var colorVerts = [];
for (var f = 0; f < 6; ++f) {
    for (var v = 0; v < 4; ++v) {
        colorVerts.push.apply(colorVerts, faceColors[f]);
    }
}
// globals
var pixelRatio = window.devicePixelRatio || 1;
var Stage = /** @class */ (function () {
    function Stage() {
        this.sceneCubeUniforms = {
            u_color: [1, 1, 1, 1],
            u_worldViewProjection: new Float32Array(16),
            u_exampleWorldViewProjection: new Float32Array(16),
        };
        this.zNear = 10; //相机最近能看到的距离
        this.zFar = 50; //相机最远能看到的距离
        this.fieldOfView = 30; //相机张开的角度
        this.zPosition = -25; //场景的位置
        this.v3t0 = new Float32Array(3);
        this.targetToEye = new Float32Array(3);
        this.eyePosition = new Float32Array([31, 17, 15]); //相机的位置
        this.eyeRotation = new Float32Array([0, 0, 0]); //相机的旋转
        this.target = new Float32Array([23, 16, 0]);
        this.up = new Float32Array([0, 1, 0]);
        this.viewProjection = new Float32Array(16);
        this.gl = Device_1.default.Instance.gl;
    }
    Stage.run = function () {
        new Stage().start();
    };
    // Setup a ui.
    Stage.prototype.updateFieldOfView = function (event, ui) {
        this.fieldOfView = ui.value;
    };
    Stage.prototype.updateZNear = function (event, ui) {
        this.zNear = ui.value;
    };
    Stage.prototype.updateZFar = function (event, ui) {
        this.zFar = ui.value;
    };
    Stage.prototype.updateZPosition = function (event, ui) {
        this.zPosition = ui.value;
    };
    Stage.prototype.updateCamearXPos = function (event, ui) {
        this.eyePosition[0] = ui.value;
    };
    Stage.prototype.updateCamearYPos = function (event, ui) {
        this.eyePosition[1] = ui.value;
    };
    Stage.prototype.updateCamearZPos = function (event, ui) {
        this.eyePosition[2] = ui.value;
    };
    Stage.prototype.updateCamearXRotation = function (event, ui) {
        this.eyeRotation[0] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    Stage.prototype.updateCamearYRotation = function (event, ui) {
        this.eyeRotation[1] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    Stage.prototype.updateCamearZRotation = function (event, ui) {
        this.eyeRotation[2] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    Stage.prototype.start = function () {
        this.colorProgramInfo = Shader_1.G_ShaderFactory.createProgramInfo(baseVertexShader, colorFragmentShader);
        var cubeArrays = Primitives_1.syPrimitives.createCubeVertices(2);
        delete cubeArrays.normal;
        delete cubeArrays.texcoord;
        cubeArrays.color = colorVerts;
        this.cubeBufferInfo = Shader_1.G_ShaderFactory.createBufferInfoFromArrays(cubeArrays);
        this.aspect = this.gl.canvas.width / (this.gl.canvas.width / 2);
        this._frustum = new CameraFrustum_1.CameraFrustum(this.gl);
        this.setUI();
        requestAnimationFrame(this.render.bind(this));
    };
    Stage.prototype.render = function (time) {
        time *= 0.001;
        this.adjustCamera();
        this.drawScene(time, this.viewProjection, new Float32Array(16), this.colorProgramInfo, this.cubeBufferInfo);
        //----------------------------------------
        this._frustum.testDraw(this.viewProjection, this.aspect, this.zNear, this.zFar, this.fieldOfView);
        this.draw3DView(time);
        requestAnimationFrame(this.render.bind(this));
    };
    Stage.prototype.setUI = function () {
        var webglLessonsUI = window["webglLessonsUI"];
        webglLessonsUI.setupSlider("#fieldOfView", { value: this.fieldOfView, slide: this.updateFieldOfView.bind(this), max: 179 });
        webglLessonsUI.setupSlider("#zNear", { value: this.zNear, slide: this.updateZNear.bind(this), min: 1, max: 50 });
        webglLessonsUI.setupSlider("#zFar", { value: this.zFar, slide: this.updateZFar.bind(this), min: 1, max: 50 });
        webglLessonsUI.setupSlider("#zPosition", { value: this.zPosition, slide: this.updateZPosition.bind(this), min: -60, max: 0 });
        webglLessonsUI.setupSlider("#cameraPosX", { value: this.eyePosition[0], slide: this.updateCamearXPos.bind(this), min: 1, max: 50 }); //31
        webglLessonsUI.setupSlider("#cameraPosY", { value: this.eyePosition[1], slide: this.updateCamearYPos.bind(this), min: 1, max: 50 }); //17
        webglLessonsUI.setupSlider("#cameraPosZ", { value: this.eyePosition[2], slide: this.updateCamearZPos.bind(this), min: 1, max: 50 }); //15
        webglLessonsUI.setupSlider("#cameraRotateX", { value: this.eyeRotation[0], slide: this.updateCamearXRotation.bind(this), min: 0, max: 360 }); //31
        webglLessonsUI.setupSlider("#cameraRotateY", { value: this.eyeRotation[1], slide: this.updateCamearYRotation.bind(this), min: 0, max: 360 }); //17
        webglLessonsUI.setupSlider("#cameraRotateZ", { value: this.eyeRotation[2], slide: this.updateCamearZRotation.bind(this), min: 0, max: 360 }); //15
    };
    Stage.prototype.adjustCamera = function () {
        Matrix_1.glMatrix.vec3.subtract(this.targetToEye, this.eyePosition, this.target);
        var gl = this.gl;
        Device_1.default.Instance.resizeCanvasToDisplaySize(gl.canvas, pixelRatio);
        var halfHeight = gl.canvas.height / 2;
        var width = gl.canvas.width;
        var proj = Matrix_1.glMatrix.mat4.create();
        var view = new Float32Array(16);
        // clear the screen.
        gl.disable(gl.SCISSOR_TEST);
        gl.colorMask(true, true, true, true);
        gl.clearColor(0, 0, 0, 0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.viewport(0, halfHeight, width, halfHeight);
        gl.enable(gl.DEPTH_TEST);
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        Matrix_1.glMatrix.mat4.perspective(proj, MathUtils_1.MathUtils.degToRad(60), this.aspect, 1, 5000);
        var f = 1;
        Matrix_1.glMatrix.vec3.scale(this.v3t0, this.targetToEye, f);
        Matrix_1.glMatrix.vec3.add(this.v3t0, this.target, this.v3t0);
        Matrix_1.glMatrix.mat4.lookAt(view, this.v3t0, //eyePosition,
        this.target, this.up);
        Matrix_1.glMatrix.mat4.rotateX(view, view, this.eyeRotation[0]);
        Matrix_1.glMatrix.mat4.rotateY(view, view, this.eyeRotation[1]);
        Matrix_1.glMatrix.mat4.rotateZ(view, view, this.eyeRotation[2]);
        // glMatrix.mat4.invert(view, view);
        //算出视图投影矩阵
        Matrix_1.glMatrix.mat4.multiply(this.viewProjection, proj, view);
    };
    // Draw scene
    Stage.prototype.drawScene = function (time, vp, exProjection, shaderD, buffAttData) {
        Device_1.default.Instance.cullFace(false);
        var worldTemp = Matrix_1.glMatrix.mat4.create();
        this.gl.useProgram(shaderD.spGlID);
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(shaderD.attrSetters, buffAttData);
        var cubeScale = 3;
        for (var ii = -1; ii <= 1; ++ii) {
            Matrix_1.glMatrix.mat4.translation(worldTemp, ii * 10, 0, this.zPosition);
            // glMatrix.mat4.rotateY(worldTemp, worldTemp, time + ii * Math.PI / 6);
            // glMatrix.mat4.rotateX(worldTemp, worldTemp, Math.PI / 4);
            // glMatrix.mat4.rotateZ(worldTemp, worldTemp, Math.PI / 4);
            Matrix_1.glMatrix.mat4.scale(worldTemp, worldTemp, [cubeScale, cubeScale, cubeScale]);
            Matrix_1.glMatrix.mat4.multiply(this.sceneCubeUniforms.u_worldViewProjection, vp, worldTemp);
            Matrix_1.glMatrix.mat4.multiply(this.sceneCubeUniforms.u_exampleWorldViewProjection, exProjection, worldTemp);
            Shader_1.G_ShaderFactory.setUniforms(shaderD.uniSetters, this.sceneCubeUniforms);
            Shader_1.G_ShaderFactory.drawBufferInfo(buffAttData);
        }
        Device_1.default.Instance.closeCullFace();
    };
    // Draw 3D view
    Stage.prototype.draw3DView = function (time) {
        var halfHeight = this.gl.canvas.height / 2;
        var width = this.gl.canvas.width;
        var gl = this.gl;
        gl.enable(gl.SCISSOR_TEST);
        gl.viewport(0, 0, width, halfHeight);
        gl.scissor(0, 0, width, halfHeight);
        gl.clearColor(0.5, 0.5, 0.5, 1);
        gl.clear(gl.COLOR_BUFFER_BIT);
        var proj = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.perspective(proj, MathUtils_1.MathUtils.degToRad(this.fieldOfView), this.aspect, this.zNear, this.zFar);
        // this.drawScene(time, proj as Float32Array, new Float32Array(16), this.colorProgramInfo, this.cubeBufferInfo);
        this.drawScene(time, this.viewProjection, new Float32Array(16), this.colorProgramInfo, this.cubeBufferInfo);
    };
    return Stage;
}());
exports.default = Stage;
},{"../../../Device":1,"../../Matrix":5,"../../utils/MathUtils":23,"../camera/CameraFrustum":14,"../shader/Primitives":21,"../shader/Shader":22}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = void 0;
var Ref_1 = require("../../../Ref");
var Matrix_1 = require("../../Matrix");
var Node = /** @class */ (function (_super) {
    __extends(Node, _super);
    function Node() {
        var _this = _super.call(this) || this;
        _this.x = 0;
        _this.y = 0;
        _this.z = 0;
        _this.scaleX = 1;
        _this.scaleY = 1;
        _this.scaleZ = 1;
        _this.rotateX = 0;
        _this.rotateY = 0;
        _this.rotateZ = 0;
        _this.width = 0; //宽度
        _this.height = 0; //高度
        _this.anchorX = 0.5; //x轴锚点
        _this.anchorY = 0.5; //y轴锚点
        _this._glMatrix = Matrix_1.glMatrix; //矩阵操作api
        _this.initBaseNode();
        return _this;
    }
    Node.prototype.initBaseNode = function () {
        this.name = "defaultName";
        this._children = [];
        this._modelMatrix = this._glMatrix.mat4.create();
        this._worldMatrix = this._glMatrix.mat4.create();
        this._glMatrix.mat4.identity(this._worldMatrix);
        this._glMatrix.mat4.identity(this._modelMatrix);
    };
    Object.defineProperty(Node.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (node) {
            this._parent = node;
        },
        enumerable: false,
        configurable: true
    });
    /**
     *
     * @param node
     */
    Node.prototype.addChild = function (node) {
        this._children.push(node);
        node.parent = this;
    };
    /**
     *
     * @param node
     */
    Node.prototype.removeChild = function (node) {
        var index = this._children.indexOf(node);
        if (index >= 0) {
            this._children.splice(index, 1);
        }
    };
    //更新世界矩阵
    Node.prototype.updateWorldMatrix = function () {
        if (this._parent) {
            //二处调用
            this.setFatherMatrix(this._parent.getModelViewMatrix());
            return;
        }
        //否则这就是场景节点，不需要变换
    };
    //绘制之前
    Node.prototype.onDrawBefore = function () {
    };
    Node.prototype.onDrawAfter = function () {
    };
    Node.prototype.drawBefore = function () {
        //更新矩阵数据
    };
    Node.prototype.drawAfter = function () {
    };
    //开启绘制
    Node.prototype.readyDraw = function (time) {
        //更新世界节点
        this.updateWorldMatrix();
        //更新当前节点的矩阵数据
        this.updateMatrixData();
        //开始绘制
        this.draw(time);
        for (var j = 0; j < this._children.length; j++) {
            this._children[j].readyDraw(time);
        }
    };
    Node.prototype.draw = function (time) {
    };
    /**
     *
     * @param mvMatrix 设置父节点矩阵
     */
    Node.prototype.setFatherMatrix = function (mvMatrix) {
        this._worldMatrix = this.mat4Clone$3(mvMatrix);
    };
    /**
    * 更新2D矩阵
    * 将此节点的数据更新到这个矩阵中
    */
    Node.prototype.updateMatrixData = function () {
        //旋转
        this.matrix4RotateX(this._modelMatrix, this._worldMatrix, this.rotateX * (Math.PI / 180));
        this.matrix4RotateY(this._modelMatrix, this._modelMatrix, this.rotateY * (Math.PI / 180));
        this.matrix4RotateZ(this._modelMatrix, this._modelMatrix, this.rotateZ * (Math.PI / 180));
        //处理旋转
        this.mat4Scale$3(this._modelMatrix, this._modelMatrix, [this.scaleX, this.scaleY, this.scaleZ]);
        //平移
        this.mat4Translate$2(this._modelMatrix, this._modelMatrix, [this.x, this.y, this.z]);
    };
    /**
     * 模型世界矩阵
     */
    Node.prototype.getModelViewMatrix = function () {
        return this._modelMatrix;
    };
    Node.prototype.setPosition = function (x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    };
    Node.prototype.setScale = function (x, y, z) {
        this.scaleX = x;
        this.scaleY = y;
        this.scaleZ = z;
    };
    Node.prototype.setRotation = function (x, y, z) {
        this.rotateX = x;
        this.rotateY = y;
        this.rotateZ = z;
    };
    Node.prototype.rotate = function (x, y, z) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (z === void 0) { z = 0; }
        this.rotateX = this.rotateX + x;
        this.rotateY = this.rotateY + y;
        this.rotateZ = this.rotateZ + z;
    };
    //矩阵运算---------------------------------------------------------------------
    /**
     * Rotates a matrix by the given angle around the Y axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    Node.prototype.matrix4RotateY = function (out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        /**
         *  【0  4  8   12】
         *  【1  5  9   13】
         *  【2  6  10  14】
         *  【3  7  11  15】
         *   x轴 y轴 z轴
         *  【1  0  0   0】
         *  【0  1  0   0】
         *  【0  0  1   0】
         *  【0  1  0   1】
         */
        out[0] = a00 * c - a20 * s; //x轴的x坐标在世界坐标系下的投影
        out[1] = a01 * c - a21 * s; //
        out[2] = a02 * c - a22 * s;
        out[3] = a03 * c - a23 * s;
        out[8] = a00 * s + a20 * c;
        out[9] = a01 * s + a21 * c;
        out[10] = a02 * s + a22 * c;
        out[11] = a03 * s + a23 * c;
        return out;
    };
    /**
     * Rotates a matrix by the given angle around the X axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    Node.prototype.matrix4RotateX = function (out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[4] = a10 * c + a20 * s;
        out[5] = a11 * c + a21 * s;
        out[6] = a12 * c + a22 * s;
        out[7] = a13 * c + a23 * s;
        out[8] = a20 * c - a10 * s;
        out[9] = a21 * c - a11 * s;
        out[10] = a22 * c - a12 * s;
        out[11] = a23 * c - a13 * s;
        return out;
    };
    /**
    * Rotates a matrix by the given angle around the Z axis
    *
    * @param {mat4} out the receiving matrix
    * @param {mat4} a the matrix to rotate
    * @param {Number} rad the angle to rotate the matrix by
    * @returns {mat4} out
    */
    Node.prototype.matrix4RotateZ = function (out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged last row
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[0] = a00 * c + a10 * s;
        out[1] = a01 * c + a11 * s;
        out[2] = a02 * c + a12 * s;
        out[3] = a03 * c + a13 * s;
        out[4] = a10 * c - a00 * s;
        out[5] = a11 * c - a01 * s;
        out[6] = a12 * c - a02 * s;
        out[7] = a13 * c - a03 * s;
        return out;
    };
    /**
     * Translate a mat4 by the given vector
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to translate
     * @param {vec3} v vector to translate by
     * @returns {mat4} out
     */
    Node.prototype.mat4Translate$2 = function (out, a, v) {
        var x = v[0], y = v[1], z = v[2];
        var a00, a01, a02, a03;
        var a10, a11, a12, a13;
        var a20, a21, a22, a23;
        /**
        *  【0  4  8   12】
        *  【1  5  9   13】
        *  【2  6  10  14】
        *  【3  7  11  15】
        *   x轴 y轴 z轴
        *  【1  0  0   0】  [x]
        *  【0  1  0   0】  [y]
        *  【0  0  1   0】  [z]
        *  【0  1  0   1】
        *   解析
        *   世界空间坐标系属于右手坐标系，右手手背背着屏幕，大拇指向右+x,食指向上+y,中指指向自己+z
        *   一个向量可以构成一个线，两个向量可以构成一个面，三个向量可以构成一个空间
        *   x轴向量：【1，0，0】
        *   y轴向量：【0，1，0】
        *   z轴向量：【0，0，1】
        *
        *   特别规定1，这三个坐标轴都是两两互相垂直的
        *   特别规定2，世界空间坐标系是以一个参照物，是不允许发生任何改变的，比如旋转 缩放，平移
        *
        *   空间坐标系的长度单位就是【1，1，1】，三个轴两两互相垂直
        *   这个长度单位很重要，不可以忽视，它其实起到了一个缩放的作用，我们在外界会有一个长度，这个长度映射到空间坐标系中就需要和这个单位相乘
        *   举个例子，对于一个存在于世界空间坐标系中的点，我们对于它的坐标的定义为（x1,y1,z1）,那他的位置究竟在哪呢，由于它直接位于世界空间坐标系
        *   系中，所以它的坐标位置就是（x1,y1,z1）,其实这个结果是基于下面这个运算方法：
        *   （x1和x轴向量相乘，y1和y轴坐标相乘，z1和z轴向量相乘），只是他们是基于原点，并且长度单位为1，所以结果就是（x1,y1,z1）
        *   关于这个
        *   对于实际的渲染运算中，我们通常会构造一个矩阵来和世界坐标系相对应，虽然他是4维矩阵，但是这只是构造出来的而已，前面三列指的是坐标轴，
        *   就是和世界空间坐标系的那个坐标轴一样的，只是它允许缩放，旋转，和平移，后面的一列其实是记录这个矩阵的坐标系的位置
        *   我们通常会用一个摄像机来干这样的事情，摄像机的位置（x,y,z）,就可以构造出来这么一个对应的矩阵坐标系，如果摄像机的位置为【0，0，0】，说明这个摄像机构造出来
        *   的摄像机坐标系位于世界坐标系的原点，如果摄像机坐标系的长度单位是【1，1，1】，旋转【0，0，0】，那说明这个摄像机所构造的空间坐标系就是世界空间坐标系
        *   然而事实上我们不会这样做，摄像机作为一个节点存在，它可以进行任何变换，这里的变换指的是缩放，旋转，平移，缩放变换修改的是每个坐标轴的长度单位
        *   旋转变换修改的是坐标轴向量的（x,y,z）值，平移变换修改的是整个节点空间坐标系的位置，那么我们为什么会构造一个四维方针矩阵呢，就是用第四列来存放当前坐标系的位置用的
        *
        *   空间坐标系推演
        *
        *   世界空间坐标系
        *
        *   相机，它作为一个节点存在于世界空间坐标系中，它会构造一个相机的节点坐标系，这个节点的位置记录在第四列向量中，它的前三列记录的是当前相机节点是如何修改这个节点坐标系的
        *   修改的行为包含了缩放和旋转，其实就是修改三个坐标轴的向量，凡是位于这个节点坐标系下的顶点乘以这个矩阵都可以得出来世界空间坐标系下的位置
        *
        *    宏观上看，一个节点坐标系，不过是对世界坐标系进行变换
        *
        *    在相机的节点坐标系中，又包含很多节点，比如场景节点，同样场景作为一个节点存在，他也会去构造一个节点坐标系，
        *
        *    场景中也会包含很多节点，每个节点也会去构造自己的节点坐标系
        *
        *    节点本身也是可以包含很多节点，这些节点都有自己的节点坐标系
        *
        *
        *    相机是世界坐标系的节点，把相机看成一个点，由于世界坐标系不会生任何变换，所以这个点就处在世界坐标系空间中
        *    但是相机不是吃醋的，他要生根发芽，所以它也会构造一个空间坐标系出来，这个坐标系起初和世界坐标系是完全吻合的，但由于相机天生好动，它会缩放，旋转，平移
        *    这会造成这个空间坐标系不同于世界坐标系，相机的空间坐标系里包含了很多点，那这些点如果想转换为世界空间坐标系下，就需要乘以相机这个空间坐标系
        *
        *    场景是相机空间坐标系下的一个节点，把场景看成一个点，只要乘以相机的空间坐标系就可以转换到世界坐标系下的点
        *    但场景也不是吃醋的，它也要生根发芽，所以它也要造一个空间坐标系出来，起初这个坐标系和相机坐标系完全吻合的，但由于场景天生好动，它也会缩放，旋转，平移
        *    这会造成这个空间坐标系不同与相机的坐标系，场景的空间坐标系里包含了很多点，那这些点如果要想转换为相机空间坐标下的点，就需要乘以场景这个空间坐标系
        *
        *    节点是场景空间坐标系下的一个节点，把节点看成一个点，只要乘以场景的空间坐标系就可以转换到相机的坐标系下的点
        *    但节点也不是吃醋的，它也要生根发芽，所以它也要造一个节点坐标系，起初这个节点坐标系和场景的节点坐标系完全吻合的，但由于这个节点天生好动，它也会缩放，旋转，平移
        *    这会造成这个节点坐标系不同于场景的空间坐标系，对于节点中的点，如果它要想变为场景空间坐标系下的点，就需要乘以这个节点坐标系
        *
        *    。。。接下来就是节点的各种继承了
        *
        *    对于旋转和缩放，我们制定了一个前三列向量分别用来记录，当前节点对于它构造的空间坐标系的变换，其实这个前三列向量就是指的是x轴，y轴，z轴
        *    对于第四列，我们用来保存当前节点将自己的空间坐标系平移变换的位置
        */
        if (a === out) {
            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
        }
        else {
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a03;
            out[4] = a10;
            out[5] = a11;
            out[6] = a12;
            out[7] = a13;
            out[8] = a20;
            out[9] = a21;
            out[10] = a22;
            out[11] = a23;
            out[12] = a00 * x + a10 * y + a20 * z + a[12];
            out[13] = a01 * x + a11 * y + a21 * z + a[13];
            out[14] = a02 * x + a12 * y + a22 * z + a[14];
            out[15] = a03 * x + a13 * y + a23 * z + a[15];
        }
        return out;
    };
    /**
     * Scales the mat4 by the dimensions in the given vec3 not using vectorization
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {vec3} v the vec3 to scale the matrix by
     * @returns {mat4} out
     **/
    Node.prototype.mat4Scale$3 = function (out, a, v) {
        var x = v[0], y = v[1], z = v[2];
        out[0] = a[0] * x;
        out[1] = a[1] * x;
        out[2] = a[2] * x;
        out[3] = a[3] * x;
        out[4] = a[4] * y;
        out[5] = a[5] * y;
        out[6] = a[6] * y;
        out[7] = a[7] * y;
        out[8] = a[8] * z;
        out[9] = a[9] * z;
        out[10] = a[10] * z;
        out[11] = a[11] * z;
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    };
    /**
    * Creates a new mat4 initialized with values from an existing matrix
    *
    * @param {mat4} a matrix to clone
    * @returns {mat4} a new 4x4 matrix
    */
    Node.prototype.mat4Clone$3 = function (a) {
        var out = new Float32Array(16);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    };
    return Node;
}(Ref_1.default));
exports.Node = Node;
},{"../../../Ref":4,"../../Matrix":5}],8:[function(require,module,exports){
"use strict";
/**
 * 字节数组的使用
 * 整型：这个可以是一个字节Uint8Array,Int8Array,也可是双字节Uint16Array,Int16Array,
 * 也可是四字节Unit32Array,Int32Array
 * 浮点型：这个要四个字节，适用于float类型，例如Float32Array,当然也只有这一种类型
 * 双精度型：这个要八个字节，适用于double类型，例如Float64Array,当然也只有这一种类型
 *
 * 使用
 *  // From a length
var float32 = new Float32Array(2);
float32[0] = 42;
console.log(float32[0]); // 42
console.log(float32.length); // 2
console.log(float32.BYTES_PER_ELEMENT); // 4

// From an array
var arr = new Float32Array([21,31]);
console.log(arr[1]); // 31

// From another TypedArray
var x = new Float32Array([21, 31]);
var y = new Float32Array(x);
console.log(y[0]); // 21

// From an ArrayBuffer
// var buffer = new ArrayBuffer(16);
var buffer = new ArrayBuffer(16);
// buffer[0] = 10;
// buffer[1] = 20;
// buffer[2] = 30;
// buffer[3] = 40;
// buffer[4] = 50;
var z = new Float32Array(buffer, 0, 4);
console.log(z);
// z.forEach(function(value,index,arr){
//     console.log(value,index,arr);
// })

 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SY = void 0;
/**
 * 现阶段 核心渲染计算都要放在此类中
 */
var Shader_1 = require("../shader/Shader");
var GameMainCamera_1 = require("../camera/GameMainCamera");
var Node_1 = require("./Node");
var Texture2D_1 = require("./Texture2D");
var TextureCube_1 = require("./TextureCube");
var TextureCustom_1 = require("./TextureCustom");
var Device_1 = require("../../../Device");
/**
 * 缓冲区中的数据就是一个二进制流，一般我们会按照字节处理，八个二进制为一个字节，又称字节流
 * 我们用字节流来表示数据，一个数据可以用若干个字节来表示
 * 一般用下面这几个数组来组织字节流
 * Int8Array：每个数据占1个字节
 * Uint8Array：每个数据占1个字节
 * Int16Array：每个数据占2个字节
 * Uint16Array：每个数据占2个字节
 * Float32Array：每个数据占4个字节
 */
var glBaseBuffer = /** @class */ (function () {
    function glBaseBuffer(gl, data, itemSize) {
        this.itemSize = 0; //在缓冲区中，一个单位数据有几个数据组成
        this.itemNums = 0; //在缓冲区中，单位数据的数目
        this.itemBytes = 2; //每个数据的存储字节数
        this._glID = gl.createBuffer();
        this.sourceData = data;
        this.itemSize = itemSize;
        this.itemNums = data.length / itemSize;
        this.gl = gl;
    }
    //上传数据到GPU显存
    glBaseBuffer.prototype.uploadData2GPU = function () {
        this.bindBuffer();
        this.bindData();
    };
    /**
   * @method destroy
   */
    glBaseBuffer.prototype.destroy = function () {
        if (this._glID === -1) {
            console.error('The buffer already destroyed');
            return;
        }
        this.gl.deleteBuffer(this._glID);
        this._glID = -1;
    };
    return glBaseBuffer;
}());
//顶点buffer
var VertexsBuffer = /** @class */ (function (_super) {
    __extends(VertexsBuffer, _super);
    function VertexsBuffer(gl, vertexs, itemSize) {
        return _super.call(this, gl, vertexs, itemSize) || this;
    }
    VertexsBuffer.prototype.bindBuffer = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._glID);
    };
    VertexsBuffer.prototype.bindData = function () {
        this.itemBytes = 32 / 8;
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.sourceData), this.gl.STATIC_DRAW);
    };
    return VertexsBuffer;
}(glBaseBuffer));
//索引buffer
var IndexsBuffer = /** @class */ (function (_super) {
    __extends(IndexsBuffer, _super);
    function IndexsBuffer(gl, indexs, itemSize) {
        return _super.call(this, gl, indexs, itemSize) || this;
    }
    IndexsBuffer.prototype.bindBuffer = function () {
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this._glID);
    };
    IndexsBuffer.prototype.bindData = function () {
        this.itemBytes = 16 / 8;
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.sourceData), this.gl.STATIC_DRAW);
    };
    return IndexsBuffer;
}(glBaseBuffer));
//uvbuffer
var UVsBuffer = /** @class */ (function (_super) {
    __extends(UVsBuffer, _super);
    function UVsBuffer(gl, uvs, itemSize) {
        return _super.call(this, gl, uvs, itemSize) || this;
    }
    UVsBuffer.prototype.bindBuffer = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._glID);
    };
    UVsBuffer.prototype.bindData = function () {
        this.itemBytes = 32 / 8;
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.sourceData), this.gl.STATIC_DRAW);
    };
    return UVsBuffer;
}(glBaseBuffer));
//法线buffer
var NormalBuffer = /** @class */ (function (_super) {
    __extends(NormalBuffer, _super);
    function NormalBuffer(gl, normals, itemSize) {
        return _super.call(this, gl, normals, itemSize) || this;
    }
    NormalBuffer.prototype.bindBuffer = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._glID);
    };
    NormalBuffer.prototype.bindData = function () {
        this.itemBytes = 32 / 8;
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.sourceData), this.gl.STATIC_DRAW);
    };
    return NormalBuffer;
}(glBaseBuffer));
/**
 * 显示节点
 * author:hzj
 */
var SY;
(function (SY) {
    var GLID_TYPE;
    (function (GLID_TYPE) {
        GLID_TYPE[GLID_TYPE["VERTEX"] = 1] = "VERTEX";
        GLID_TYPE[GLID_TYPE["INDEX"] = 2] = "INDEX";
        GLID_TYPE[GLID_TYPE["NORMAL"] = 3] = "NORMAL";
        GLID_TYPE[GLID_TYPE["UV"] = 4] = "UV";
        GLID_TYPE[GLID_TYPE["TEXTURE_2D"] = 5] = "TEXTURE_2D";
        GLID_TYPE[GLID_TYPE["TEXTURE_CUBE"] = 6] = "TEXTURE_CUBE"; //立方体纹理
    })(GLID_TYPE = SY.GLID_TYPE || (SY.GLID_TYPE = {}));
    var Sprite = /** @class */ (function (_super) {
        __extends(Sprite, _super);
        function Sprite(gl) {
            var _this = _super.call(this) || this;
            _this._cameraType = 0; //相机的类型(0表示透视1表示正交)
            _this.gl = gl;
            _this._glPrimitiveType = 6 /* TRIANGLE_FAN */;
            _this.init();
            return _this;
        }
        Sprite.prototype.init = function () {
            this.onInit();
        };
        Sprite.prototype.onInit = function () {
        };
        Object.defineProperty(Sprite.prototype, "shader", {
            //获取shader
            get: function () {
                return this._shader;
            },
            enumerable: false,
            configurable: true
        });
        Sprite.prototype.setShader = function (vert, frag) {
            this._shader = Shader_1.Shader.create(vert, frag);
        };
        //创建顶点缓冲
        Sprite.prototype.createVertexsBuffer = function (vertexs, itemSize) {
            this._vertexsBuffer = new VertexsBuffer(this.gl, vertexs, itemSize);
            this._vertexsBuffer.uploadData2GPU();
            return this._vertexsBuffer;
        };
        //创建法线缓冲
        Sprite.prototype.createNormalsBuffer = function (normals, itemSize) {
            this._normalsBuffer = new NormalBuffer(this.gl, normals, itemSize);
            this._normalsBuffer.uploadData2GPU();
            return this._normalsBuffer;
        };
        //创建索引缓冲
        //索引缓冲的单位数据个数肯定为1
        Sprite.prototype.createIndexsBuffer = function (indexs) {
            this._indexsBuffer = new IndexsBuffer(this.gl, indexs, 1);
            this._indexsBuffer.uploadData2GPU();
            return this._indexsBuffer;
        };
        //创建uv缓冲
        Sprite.prototype.createUVsBuffer = function (uvs, itemSize) {
            this._uvsBuffer = new UVsBuffer(this.gl, uvs, itemSize);
            this._uvsBuffer.uploadData2GPU();
            return this._uvsBuffer;
        };
        //创建一个纹理buffer
        Sprite.prototype.createTexture2DBuffer = function (url) {
            this._texture = new Texture2D_1.Texture2D(this.gl);
            this._texture.url = url;
            return this._texture;
        };
        Sprite.prototype.createTextureCubeBuffer = function (arr) {
            this._texture = new TextureCube_1.default(this.gl);
            this._texture.url = arr;
            return this._texture;
        };
        Sprite.prototype.createCustomTextureBuffer = function (data) {
            this._texture = new TextureCustom_1.default(this.gl);
            this._texture.url = data;
            return this._texture;
        };
        Object.defineProperty(Sprite.prototype, "url", {
            set: function (url) {
                //普通图片
                if (typeof url == "string") {
                    this.createTexture2DBuffer(url);
                }
                //天空盒
                else if (url instanceof Array && url.length == 6) {
                    this.createTextureCubeBuffer(url);
                }
                //自定义纹理
                else if (typeof (url) == "object") {
                    this.createCustomTextureBuffer(url);
                }
            },
            enumerable: false,
            configurable: true
        });
        Sprite.prototype.getGLID = function (type) {
            switch (type) {
                case GLID_TYPE.INDEX: return this._indexsBuffer ? this._indexsBuffer._glID : -1;
                case GLID_TYPE.TEXTURE_2D: return this._texture ? this._texture._glID : -1;
                case GLID_TYPE.TEXTURE_CUBE: return this._texture ? this._texture._glID : -1;
                case GLID_TYPE.UV: return this._uvsBuffer ? this._uvsBuffer._glID : -1;
                case GLID_TYPE.NORMAL: return this._normalsBuffer ? this._normalsBuffer._glID : -1;
                case GLID_TYPE.VERTEX: return this._vertexsBuffer ? this._vertexsBuffer._glID : -1;
                default: return -1; //未知
            }
        };
        Sprite.prototype.getBuffer = function (type) {
            switch (type) {
                case GLID_TYPE.INDEX: return this._indexsBuffer;
                case GLID_TYPE.UV: return this._uvsBuffer;
                case GLID_TYPE.NORMAL: return this._normalsBuffer;
                case GLID_TYPE.VERTEX: return this._vertexsBuffer;
                default: return null; //未知
            }
        };
        Sprite.prototype.getBufferItemSize = function (type) {
            var buffer = this.getBuffer(type);
            return buffer ? buffer.itemSize : -1;
        };
        Sprite.prototype.updateCamera = function (time) {
        };
        /**
         *
         * @param texture 纹理的GLID
         */
        Sprite.prototype.draw = function (time) {
            if (this._texture && this._texture.loaded == false) {
                return;
            }
            //激活shader
            this._shader.active();
            var out = this._glMatrix.vec3.create();
            //给shader中的变量赋值
            this._shader.setUseLight([0.0, 1, 1.0, 1], this._glMatrix.vec3.normalize(out, [8, 5, -10]));
            if (this._shader.USE_SKYBOX) {
                var resu = (this).updateCamera(time);
                this._shader.setUseSkyBox(resu);
            }
            var newMV = this._glMatrix.mat4.create();
            var v = GameMainCamera_1.default.instance.getCamera(this._cameraType).getModelViewMatrix();
            var m = this._modelMatrix;
            this._glMatrix.mat4.mul(newMV, v, m);
            this._shader.setUseModelViewMatrix(newMV);
            var pMatix = GameMainCamera_1.default.instance.getCamera(this._cameraType).getProjectionMatrix();
            this._shader.setUseProjectionMatrix(pMatix);
            this._shader.setUseVertexAttribPointerForVertex(this.getGLID(SY.GLID_TYPE.VERTEX), this.getBufferItemSize(SY.GLID_TYPE.VERTEX));
            this._shader.setUseVertexAttribPointerForUV(this.getGLID(SY.GLID_TYPE.UV), this.getBufferItemSize(SY.GLID_TYPE.UV));
            this._shader.setUseVertexAttriPointerForNormal(this.getGLID(SY.GLID_TYPE.NORMAL), this.getBufferItemSize(SY.GLID_TYPE.NORMAL));
            if (this._texture && this._texture._glID && !this._shader.USE_SKYBOX) {
                this._shader.setUseTexture(this.getGLID(SY.GLID_TYPE.TEXTURE_2D));
            }
            this.startVertexShader();
            //解除缓冲区对于目标纹理的绑定
            this.gl.bindTexture(this.gl.TEXTURE_2D, null);
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
            this._shader.disableVertexAttribArray();
        };
        //启动顶点着色器
        Sprite.prototype.startVertexShader = function () {
            var indexglID = this.getGLID(SY.GLID_TYPE.INDEX);
            if (indexglID != -1) {
                this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexglID);
                this.gl.drawElements(this._glPrimitiveType, this.getBuffer(SY.GLID_TYPE.INDEX).itemNums, this.gl.UNSIGNED_SHORT, 0);
            }
            else {
                var points = this.getBuffer(SY.GLID_TYPE.VERTEX);
                this.gl.drawArrays(this._glPrimitiveType, 0, points.itemNums);
            }
        };
        Object.defineProperty(Sprite.prototype, "texture", {
            get: function () {
                return this._texture;
            },
            enumerable: false,
            configurable: true
        });
        Sprite.prototype.destroy = function () {
            this._texture.destroy();
        };
        return Sprite;
    }(Node_1.Node));
    SY.Sprite = Sprite;
    //2d显示节点
    var Sprite2D = /** @class */ (function (_super) {
        __extends(Sprite2D, _super);
        function Sprite2D(gl) {
            var _this = _super.call(this, gl) || this;
            _this._lt = []; //左上
            _this._lb = []; //左下
            _this._rt = []; //右上
            _this._rb = []; //右下
            return _this;
        }
        Sprite2D.prototype.updateUV = function () {
            //uv 数据
            var floorVertexTextureCoordinates = [
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0,
            ];
            this.createUVsBuffer(floorVertexTextureCoordinates, 2);
            // 索引数据
            var floorVertexIndices = [0, 1, 2, 3];
            this.createIndexsBuffer(floorVertexIndices);
        };
        /**
        *
        * @param width
        * @param height
        */
        Sprite2D.prototype.setContentSize = function (width, height) {
            this.width = width;
            this.height = height;
            var clipW = this.width / Device_1.default.Instance.Width;
            var clipH = this.height / Device_1.default.Instance.Height;
            var z = -0.1;
            //[-1,1] = >[0,1]
            var w = 2 * clipW;
            var h = 2 * clipH;
            this._lb = [];
            this._lb.push(-this.anchorX * w);
            this._lb.push(-this.anchorY * h);
            this._lb.push(z); //左下
            this._rb = [];
            this._rb.push(w - this.anchorX * w); //右下
            this._rb.push(-this.anchorY * h);
            this._rb.push(z);
            this._rt = [];
            this._rt.push(w - this.anchorX * w); //右上
            this._rt.push(h - this.anchorY * h);
            this._rt.push(z);
            this._lt = [];
            this._lt.push(-this.anchorX * w);
            this._lt.push(h - this.anchorY * h); //左上
            this._lt.push(z);
            var floorVertexPosition = [].concat(this._lb, this._rb, this._rt, this._lt);
            this.createVertexsBuffer(floorVertexPosition, 3);
            this.updateUV();
        };
        return Sprite2D;
    }(SY.Sprite));
    SY.Sprite2D = Sprite2D;
})(SY = exports.SY || (exports.SY = {}));
},{"../../../Device":1,"../camera/GameMainCamera":15,"../shader/Shader":22,"./Node":7,"./Texture2D":10,"./TextureCube":11,"./TextureCustom":12}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture = exports.TextureUpdateOpts = void 0;
var GLEnums_1 = require("../gfx/GLEnums");
/**
 * 创建一个纹理的一些设置参数
 */
var TextureUpdateOpts = /** @class */ (function () {
    function TextureUpdateOpts() {
        this.width = 1;
        this.height = 1;
        this.genMipmaps = false; //是否开启mipmap技术
        this.compressed = false; //纹理是否是压缩的
        this.anisotropy = 1; //设置纹理所有方向的最大值
        this.minFilter = GLEnums_1.gltex_filter.LINEAR; //纹理缩小过滤模式
        this.magFilter = GLEnums_1.gltex_filter.LINEAR; //纹理放大过滤模式
        this.mipFilter = GLEnums_1.gltex_filter.LINEAR_MIPMAP_LINEAR; //设置纹理缩小过滤的模式为特殊的线性过滤GL_LINEAR_MIPMAP_NEAREST
        this.wrapS = 33648 /* MIRROR */; //设置s方向上的贴图模式为镜像对称重复
        this.wrapT = 33648 /* MIRROR */; //设置t方向上的贴图模式为镜像对称重复
        this.format = 16 /* RGBA8 */; //纹理的格式
    }
    return TextureUpdateOpts;
}());
exports.TextureUpdateOpts = TextureUpdateOpts;
var _nullWebGLTexture = null;
var _textureID = 0;
var Texture = /** @class */ (function () {
    function Texture(gl) {
        this.loaded = false; //是否加载到内存
        this._bites = 0; //纹理在GPU端所占的内存
        this._gl = gl;
        this._target = -1;
        this._id = _textureID++;
        this._glID = gl.createTexture();
        this._bites = 0;
        this.loaded = false;
        console.log("-_id-------", this._id);
    }
    Texture.prototype.updateOptions = function (options) {
        this._width = options.width;
        this._height = options.height;
        this._genMipmaps = options.genMipmaps;
        this._anisotropy = options.anisotropy;
        this._minFilter = options.minFilter;
        this._magFilter = options.magFilter;
        this._mipFilter = options.mipFilter;
        this._wrapS = options.wrapS;
        this._wrapT = options.wrapT;
        // wrapR available in webgl2
        // this._wrapR = enums.WRAP_REPEAT;
        this._format = options.format;
        this._format = options.format;
        this._compressed =
            (this._format >= 0 /* RGB_DXT1 */ && this._format <= 8 /* RGBA_PVRTC_4BPPV1 */) ||
                (this._format >= 28 /* RGB_ETC2 */ && this._format <= 29 /* RGBA_ETC2 */);
        this.updateNormalBytes();
    };
    //更新字节数
    Texture.prototype.updateNormalBytes = function () {
        if (this._compressed == false) {
            this._bites = (this._width * this._height * GLEnums_1.glTextureChanelTotalBytes(this._format)) / 1024;
        }
    };
    //更新由于开启了mipmap而造成的纹理内存增大的字节数
    Texture.prototype.updateGenMipMapsAddBites = function () {
        //（1/）
        this.updateNormalBytes();
        this._bites = this._bites * (4 / 3);
    };
    /**
     * @method destroy
     */
    Texture.prototype.destroy = function () {
        if (this._glID === _nullWebGLTexture) {
            console.error('The texture already destroyed');
            return;
        }
        this._gl.deleteTexture(this._glID);
        this._glID = _nullWebGLTexture;
    };
    return Texture;
}());
exports.Texture = Texture;
},{"../gfx/GLEnums":19}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture2D = void 0;
var LoaderManager_1 = require("../../../LoaderManager");
var GLEnums_1 = require("../gfx/GLEnums");
var Texture_1 = require("./Texture");
/*

//gl.texImage2D将 pixels 指定给绑定的纹理对象
// WebGL1:
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);
void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);

// WebGL2:
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);

参数值解析
internalformat        type            通道数 通道字节数
RGBA         	 UNSIGNED_BYTE	        4	    4
RGB	             UNSIGNED_BYTE	        3	    3
RGBA             UNSIGNED_SHORT_4_4_4_4	4	    2
RGBA         	 UNSIGNED_SHORT_5_5_5_1	4	    2
RGB	             UNSIGNED_SHORT_5_6_5   3	    2
LUMINANCE_ALPHA	 UNSIGNED_BYTE       	2	    2
LUMINANCE   	 UNSIGNED_BYTE      	1	    1
ALPHA       	 UNSIGNED_BYTE       	1	    1
注意internalformat的值必须和format值保持一致


//gl.texParameteri设置纹理参数
gl.texParameteri(target, pname, param) ，将param的值赋给绑定到目标的纹理对象的pname参数上。
参数：
target: gl.TEXTURE_2D 或 gl.TEXTURE_CUBE_MAP
pname: 可指定4个纹理参数

放大（gl.TEXTURE_MAP_FILTER）:当纹理的绘制范围比纹理本身更大时，如何获取纹理颜色。比如，将16*16的纹理图像映射到32*32像素的空间时，纹理的尺寸变为原始的两倍。默认值为gl.LINEAR。
缩小（gl.TEXTURE_MIN_FILTER）: 当纹理的绘制返回比纹理本身更小时，如何获取纹素颜色。比如，将32*32的纹理图像映射到16*16像素空间里，纹理的尺寸就只有原始的一般。默认值为gl.NEAREST_MIPMAP_LINEAR。
水平填充（gl.TEXTURE_WRAP_S）: 表示如何对纹理图像左侧或右侧区域进行填充。默认值为gl.REPEAT。
垂直填充（gl.TEXTURE_WRAP_T）: 表示如何对纹理图像上方和下方的区域进行填充。默认值为gl.REPEAT。
param: 纹理参数的值

可赋给 gl.TEXTURE_MAP_FILTER 和 gl.TEXTURE_MIN_FILTER 参数的值

gl.NEAREST: 使用原纹理上距离映射后像素中心最近的那个像素的颜色值，作为新像素的值。

gl.LINEAR: 使用距离新像素中心最近的四个像素的颜色值的加权平均，作为新像素的值（和gl.NEAREST相比，该方法图像质量更好，但也会有较大的开销。）

可赋给 gl.TEXTURE_WRAP_S 和 gl.TEXTURE_WRAP_T 的常量：

gl.REPEAT: 平铺式的重复纹理

gl.MIRRORED_REPEAT: 镜像对称的重复纹理

gl.CLAMP_TO_EDGE: 使用纹理图像边缘值
*/
var Texture2D = /** @class */ (function (_super) {
    __extends(Texture2D, _super);
    function Texture2D(gl) {
        var _this = _super.call(this, gl) || this;
        _this._target = gl.TEXTURE_2D;
        return _this;
    }
    Object.defineProperty(Texture2D.prototype, "url", {
        set: function (soucePath) {
            var image = LoaderManager_1.default.instance.getCacheImage(soucePath);
            this._url = soucePath;
            var options = new Texture_1.TextureUpdateOpts();
            options.image = image;
            options.width = image.width;
            options.height = image.height;
            this.updateOptions(options);
            this.onLoadImageFinish(image);
            console.log("bytes----------", this._bites);
        },
        enumerable: false,
        configurable: true
    });
    //加载图片完成
    Texture2D.prototype.onLoadImageFinish = function (image) {
        this.loaded = true;
        // 指定当前操作的贴图
        this._gl.bindTexture(this._target, this._glID);
        // Y 轴取反
        this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, true);
        var formatInfo = GLEnums_1.glTextureFmtInfor(this._format);
        // 创建贴图, 绑定对应的图像并设置数据格式
        // this._gl.texImage2D(
        //      this._target,
        //      0, // 就是这个参数指定几级 Mipmap
        //      this._gl.RGBA, 
        //      this._gl.RGBA, 
        //      this._gl.UNSIGNED_BYTE, 
        //      image);
        //256*256   p(gpu内存) = width * height * 4 /1024 = 256k
        this._gl.texImage2D(this._target, 0, formatInfo.format, formatInfo.internalFormat, formatInfo.pixelType, image);
        //256*256  p(gpu内存) = width * height * 3 /1024 =342 - 342/4 = 192k 相当于内存减少1/4
        //this._gl.texImage2D(this._target, 0, this._gl.RGB,this._gl.RGB, this._gl.UNSIGNED_BYTE, image);
        //   this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, true);
        // 生成 MipMap 映射
        // 首先要调用此方法
        // 要在texImage2D 后调用，否则会报错error:GL_INVALID_OPERATION  gl.generateMipmap(this._target)
        //如果开启此技术对于256*256这个贴图 它的内存占用会比原来多出三分之一
        //256*256 p(gpu内存) = (width * height * 4 /1024)*(4/3) =342
        //能够使用这个技术的图片的宽高必须是2的幂
        //此技术开启以后，会生成以下级别的图片，256*256这个是0级
        //级别：128*128（1）,64*64（1）,32*32（1）,16*16（1）,8*8（1）,4*4（1）,2*2（1）,1*1（1）
        //实时渲染时，根据采样密度选择其中的某一级纹理，以此避免运行时的大量计算
        if (this._genMipmaps && this.isPow2(image.width) && this.isPow2(image.height)) {
            //  this._gl.hint(this._gl.GENERATE_MIPMAP_HINT, this._gl.NICEST);
            this._gl.generateMipmap(this._target);
            this.updateGenMipMapsAddBites();
        }
        else if (this._genMipmaps) {
            console.warn('NPOT textures do not support mipmap filter');
            this._genMipmaps = false;
        }
        //特别注意
        if (this.isPow2(image.width) == false || this.isPow2(image.height) == false) {
            console.warn('WebGL1 doesn\'t support all wrap modes with NPOT textures');
        }
        /**
         * MIN_FILTER 和 MAG_FILTER
         * -------------对于纹理的放大
         * 一个纹理是由离散的数据组成的，比如一个 2x2 的纹理是由 4 个像素组成的，使用 (0,0)、(0, 1) 等四个坐标去纹理上取样，自然可以取到对应的像素颜色；
         * 但是，如果使用非整数坐标到这个纹理上去取色。比如，当这个纹理被「拉近」之后，在屏幕上占据了 4x4 一共 16 个像素，
         * 那么就会使用 (0.33,0) 之类的坐标去取值，如何根据离散的 4 个像素颜色去计算 (0.33,0) 处的颜色，就取决于参数 MAG_FILTER
         * MAG_FILTER（放大） 有两个可选项，NEAREST 和 LINEAR。
         * 顾名思义，NEAREST 就是去取距离当前坐标最近的那个像素的颜色，而 LINEAR 则会根据距离当前坐标最近的 4 个点去内插计算出一个数值
         * NEAREST：速度快，但图片被放的比较大的时候,图片的颗粒感会比较明显
         * LINEAR： 速度慢点，但图片会显示的更顺滑一点
         * -------------对于纹理的缩小
         * MIN_FILTER（缩小） 有以下 6 个可选配置项：
         * NEAREST
         * LINEAR
         * NEAREST_MIPMAP_NEAREST
         * NEAREST_MIPMAP_LINEAR
         * LINEAR_MIPMAP_NEAREST
         * LINEAR_MIPMAP_LINEAR
         * 前两个配置项和 MAG_FILTER 的含义和作用是完全一样的。
         * 但问题是，当纹理被缩小时，原纹理中并不是每一个像素周围都会落上采样点，这就导致了某些像素，完全没有参与纹理的计算，新纹理丢失了一些信息。
         * 假设一种极端的情况，就是一个纹理彻底缩小为了一个点，那么这个点的值应当是纹理上所有像素颜色的平均值，这才比较合理。
         * 但是 NEAREST 只会从纹理中取一个点，而 LINEAR 也只是从纹理中取了四个点计算了一下而已。这时候，就该用上 MIPMAP 了
         *
         * 为了在纹理缩小也获得比较好的效果，需要按照采样密度，选择一定数量（通常大于 LINEAR 的 4 个，极端情况下为原纹理上所有像素）的像素进行计算。
         * 实时进行计算的开销是很大的，所有有一种称为 MIPMAP（金字塔）的技术。
         * 在纹理创建之初，就为纹理创建好 MIPMAP，比如对 512x512 的纹理，依次建立 256x256（称为 1 级 Mipmap）、128x128（称为 2 级 Mipmap） 乃至 2x2、1x1 的纹理。
         * 实时渲染时，根据采样密度选择其中的某一级纹理，以此避免运行时的大量计算
         */
        // 设定参数, 放大滤镜和缩小滤镜的采样方式
        //放大
        this._gl.texParameteri(this._target, this._gl.TEXTURE_MAG_FILTER, GLEnums_1.gltex_filter.LINEAR);
        //缩小
        //一旦使用(NEAREST_MIPMAP_NEAREST，NEAREST_MIPMAP_LINEAR，LINEAR_MIPMAP_NEAREST，LINEAR_MIPMAP_LINEAR)
        if (this._genMipmaps) {
            //说明就要使用mipmap了啊
            this._gl.texParameteri(this._target, this._gl.TEXTURE_MIN_FILTER, GLEnums_1.gltex_filter.LINEAR_MIPMAP_LINEAR);
        }
        else {
            this._gl.texParameteri(this._target, this._gl.TEXTURE_MIN_FILTER, GLEnums_1.gltex_filter.LINEAR);
        }
        // 设定参数, x 轴和 y 轴为镜面重复绘制
        //纹理的填充模式
        /**
         * gl.REPEAT
         * gl.CLAMP_TO_EDGE
         * gl.MIRRORED_REPEAT
         */
        //水平方向
        this._gl.texParameteri(this._target, this._gl.TEXTURE_WRAP_S, this._wrapS);
        //垂直方向
        this._gl.texParameteri(this._target, this._gl.TEXTURE_WRAP_T, this._wrapT);
        // 清除当前操作的贴图
        this._gl.bindTexture(this._target, null);
    };
    Texture2D.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    //判断当前数是不是2的幂
    Texture2D.prototype.isPow2 = function (v) {
        return !(v & (v - 1)) && (!!v);
    };
    return Texture2D;
}(Texture_1.Texture));
exports.Texture2D = Texture2D;
},{"../../../LoaderManager":2,"../gfx/GLEnums":19,"./Texture":9}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Texture_1 = require("./Texture");
var GLEnums_1 = require("../gfx/GLEnums");
/**
 * 立方体纹理
 */
var TextureCube = /** @class */ (function (_super) {
    __extends(TextureCube, _super);
    function TextureCube(gl) {
        var _this = _super.call(this, gl) || this;
        _this._target = gl.TEXTURE_CUBE_MAP;
        return _this;
    }
    Object.defineProperty(TextureCube.prototype, "url", {
        /**
         * @param path
         * 0:right
         * 1:left
         * 2:up
         * 3:down
         * 4:back
         * 5:front
         */
        set: function (path) {
            this.faceInfos = [
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_X,
                    url: path[0],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
                    url: path[1],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
                    url: path[2],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
                    url: path[3],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
                    url: path[4],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,
                    url: path[5],
                },
            ];
            this.loadFaceInfor();
        },
        enumerable: false,
        configurable: true
    });
    //加载各个面信息
    TextureCube.prototype.loadFaceInfor = function () {
        var _this = this;
        var gl = this._gl;
        var texture = this._glID;
        gl.bindTexture(this._target, texture);
        var loadedCount = 0;
        this.faceInfos.forEach(function (faceInfo) {
            var target = faceInfo.target, url = faceInfo.url;
            // Upload the canvas to the cubemap face.
            var level = 0;
            var internalFormat = gl.RGBA;
            var format = gl.RGBA;
            var type = gl.UNSIGNED_BYTE;
            var width = 512;
            var height = 512;
            // setup each face so it's immediately renderable
            gl.texImage2D(target, level, format, width, height, 0, internalFormat, type, null);
            // Asynchronously load an image
            var image = new Image();
            image.src = url;
            image.addEventListener('load', function () {
                console.log("加载图片成功啦---");
                // Now that the image has loaded make copy it to the texture.
                gl.bindTexture(this._target, texture);
                // Y 轴取反
                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
                gl.texImage2D(target, level, format, internalFormat, type, image);
                loadedCount++;
                if (loadedCount == 6)
                    this.loaded = true;
                //   gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
            }.bind(_this));
        });
        //gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
        //放大
        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, GLEnums_1.gltex_filter.LINEAR);
        //缩小
        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, GLEnums_1.gltex_filter.LINEAR);
        //水平方向
        gl.texParameteri(this._target, gl.TEXTURE_WRAP_S, 33648 /* MIRROR */);
        //垂直方向
        gl.texParameteri(this._target, gl.TEXTURE_WRAP_T, 33648 /* MIRROR */);
    };
    return TextureCube;
}(Texture_1.Texture));
exports.default = TextureCube;
},{"../gfx/GLEnums":19,"./Texture":9}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Texture_1 = require("./Texture");
var GLapi_1 = require("../gfx/GLapi");
/**
 * 自定义纹理
 */
var TextureCustom = /** @class */ (function (_super) {
    __extends(TextureCustom, _super);
    function TextureCustom(gl) {
        var _this = _super.call(this, gl) || this;
        _this._target = gl.TEXTURE_2D;
        return _this;
    }
    Object.defineProperty(TextureCustom.prototype, "url", {
        /**
         * @param {level,internalFormat,width,height,border,format,type,data,alignment} urlData
         */
        set: function (urlData) {
            this.initTexture(urlData);
        },
        enumerable: false,
        configurable: true
    });
    TextureCustom.prototype.initTexture = function (urlData) {
        this.loaded = true;
        var gl = this._gl;
        gl.bindTexture(this._target, this._glID);
        // fill texture with 3x2 pixels
        var level = urlData.level || 0;
        var internalFormat = urlData.internalFormat;
        var width = urlData.width;
        var height = urlData.height;
        var border = urlData.border || 0;
        var format = urlData.format;
        var type = urlData.type || gl.UNSIGNED_BYTE;
        var data = urlData.data;
        var alignment = urlData.alignment || 1;
        GLapi_1.GLapi.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);
        GLapi_1.GLapi.texImage2D(this._target, level, internalFormat, width, height, border, format, type, data);
        // set the filtering so we don't need mips and it's not filtered
        GLapi_1.GLapi.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        GLapi_1.GLapi.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        GLapi_1.GLapi.texParameteri(this._target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        GLapi_1.GLapi.texParameteri(this._target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    };
    return TextureCustom;
}(Texture_1.Texture));
exports.default = TextureCustom;
},{"../gfx/GLapi":20,"./Texture":9}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("./enums");
var Node_1 = require("../base/Node");
/**
 *
 * 【0  4  8   12】
 * 【1  5  9   13】
 * 【2  6  10  14】
 * 【3  7  11  15】
 *
 * 基础理解1：
 * 摄像机会造一个模型矩阵和一个透视矩阵
 * 模型矩阵VM
 *
 * 平移----------------------------------------------------
 * 只有（12，13，14，15）参与运算
 *  out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
 *    (4x4)          (4x1)
 *   x  y  z  w
 * 【1  0  0  0】    【x1】                 【x1】                 【1  0  0  x1】
 * 【0  1  0  0】    【y1】                 【y1】trnslate         【0  1  0  y1】
 * 【0  0  1  0】--->【z1】-->两个矩阵相乘-->【z1】------------->   【0  0  1  z1】
 * 【0  0  0  1】    【1 】                 【1 】  self build     【0  0  0  1 】
 *
 * 缩放---------------------------------------------------------
 *  out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;

    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;

    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
 * 【1  0  0  0】    【x2】                 【x2】                 【x2  0   0   x1】
 * 【0  1  0  0】    【y2】                 【y2】scale            【0   y2  0   y1】
 * 【0  0  1  0】--->【z2】-->两个矩阵相乘-->【z2】------------->   【0   0   z2  z1】
 * 【0  0  0  1】    【1 】                 【1 】  self build     【0   0   0    1】
 *
 * 旋转-------------------------------------------------------------
 *
 * 这是一个非常干净的模型矩阵，任何一个向量乘以这个矩阵都等于它自身
 * 相机的位置pos 【x1,y1,z1】
 * 相机的缩放scal【x2,y2,z2】
 * 相机的平移tras【x3,y3,z3】
 * 假设相机放在世界坐标系的正中心【0,0,0】[1,1,1][0,0,0]
 *
 * 场景会从相机哪里继承这个矩阵VM
 * 场景也继承节点Node 他也有这个位置 缩放 平移的变化
 */
/**
 * 坐标系：
 * 笛卡尔坐标系：X轴为水平方向，Y轴为垂直方向
 * 视口坐标:左下角为(0,0),右上角为（1,1)
 * 屏幕坐标:屏幕的左下角为(0,0),但右上角为(screen.width,screen.height)，screen.width表示屏幕宽度，screen.height表示屏幕高度
 * UI坐标系:这个坐标系与屏幕坐标系相似，左下角为（0，0）点，右上角为（Screen.width，Screen.height）
 * uv坐标系：左下角为【0，0】，右上角为【1,1】
 * 齐次裁切坐标:屏幕正中心为原点（0,0），坐标范围是【-1,1】
 *
 * 左手坐标系：大拇指向右（+x）,食指向上（+y）,中指向前（+z）
 * 右手坐标系：大拇指向左（+x）,食指向上（+y）,中指向前（+z）
 *
 * 一:opengl属于右手坐标系
 * 二：设备坐标系属于左手坐标系
 * 三：unity属于左手坐标系
 * 四：Direct3D使用的是左手坐标系
 */
/**
 * !#en Values for Camera.clearFlags, determining what to clear when rendering a Camera.
 * !#zh 摄像机清除标记位，决定摄像机渲染时会清除哪些状态
 * @enum Camera.ClearFlags
 */
var ClearFlags;
(function (ClearFlags) {
    /**
    * !#en
    * Clear the background color.
    * !#zh
    * 清除背景颜色
    * @property COLOR
    */
    ClearFlags[ClearFlags["COLOR"] = 1] = "COLOR";
    /**
     * !#en
     * Clear the depth buffer.
     * !#zh
     * 清除深度缓冲区
     * @property DEPTH
     */
    ClearFlags[ClearFlags["DEPTH"] = 2] = "DEPTH";
    /**
     * !#en
     * Clear the stencil.
     * !#zh
     * 清除模板缓冲区
     * @property STENCIL
     */
    ClearFlags[ClearFlags["STENCIL"] = 4] = "STENCIL";
})(ClearFlags || (ClearFlags = {}));
var StageFlags;
(function (StageFlags) {
    StageFlags[StageFlags["OPAQUE"] = 1] = "OPAQUE";
    StageFlags[StageFlags["TRANSPARENT"] = 2] = "TRANSPARENT";
})(StageFlags || (StageFlags = {}));
var Camera = /** @class */ (function (_super) {
    __extends(Camera, _super);
    /**
     *
     * @param fovy    //相机张开的角度
     * @param aspect //宽高横纵比
     * @param near   //最近能看到的距离
     * @param far    //最远能看到的距离
     * @param type   //相机的类型
     */
    function Camera(fovy, aspect, near, far, type) {
        var _this = _super.call(this) || this;
        /**
         * 清除标志
         * 在GPU的一次绘制过程中，会在在帧缓冲区产生三个附件
         * 颜色缓冲附件:存储RGB
         * 深度附件:存储深度z值
         * 模板缓冲附件：存储模板值，用于测试，比如我们只绘制某一些具有特定模板值的像素
         * 我们将像素信息绘制到屏幕，都是依靠这三个附件的，
         * 绘制结束后，我们需要及时清理
         */
        _this._clearFlags = enums_1.default.CLEAR_COLOR | enums_1.default.CLEAR_DEPTH;
        /**
         * 清理屏幕时使用的颜色
         * 当我们把帧缓冲的附件置空的时候，那么就会出现黑屏，原因是GPU从帧缓冲取不到颜色数据用于渲染
         * 这个时候需要我们指定一种颜色来更换帧缓冲的颜色附件中的像素信息
         */
        _this._clearColor = [];
        // ortho properties
        /**
         * 下面这个值将会影响齐次裁切空间的高度的范围大小
         * 【-_orthoHeight,_orthoHeight】
         * 非常重要，相当于视口的宽和屏幕宽的比例
         * 这个一般用于2D渲染
         * 屏幕空间--》齐次裁切空间--》屏幕空间
         */
        _this._orthoHeight = 1;
        /**
         * 下面这个值将会影响齐次裁切空间的宽度的范围大小
         * 【-_orthoWidth,_orthoWidth】
         * 非常重要，相当于视口的高和屏幕高的比例
         */
        _this._orthoWidth = 1;
        // priority. the smaller one will be rendered first
        //当场景有多个相机时，决定那个相机先渲染
        _this._priority = 0;
        /**
         * 视口与屏幕的对齐设置
         * 笛卡尔坐标系
         * x:表示视口的x轴方向的起始位置
         * y:表示视口的y轴方向的起始位置
         * w:表示视口的宽度和屏幕的宽度的比值
         * h:表示视口的高度和屏幕的高度的比值
         */
        _this._rect = {
            x: 0, y: 0, w: 1, h: 1
        };
        _this._type = enums_1.default.PROJ_PERSPECTIVE;
        _this._fovy = fovy;
        _this._aspect = aspect;
        _this._near = near;
        _this._far = far;
        //创建透视矩阵
        _this._projectionMatrix = _this._glMatrix.mat4.create();
        _this._type = type;
        _this._center = [0, 0, 0]; //看向原点
        _this._up = [0, 1, 0]; //向上看
        _this._eye = [0, 0, 0]; //默认看向原点
        _this.updateCameraMatrix();
        return _this;
    }
    Object.defineProperty(Camera.prototype, "Fovy", {
        get: function () {
            return this._fovy;
        },
        set: function (fov) {
            this._fovy = fov;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Aspect", {
        get: function () {
            return this._aspect;
        },
        set: function (aspect) {
            this._aspect = aspect;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Near", {
        get: function () {
            return this._near;
        },
        set: function (near) {
            this._near = near;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Far", {
        get: function () {
            return this._far;
        },
        set: function (far) {
            this._far = far;
        },
        enumerable: false,
        configurable: true
    });
    Camera.prototype.setRect = function (x, y, w, h) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (w === void 0) { w = 1; }
        if (h === void 0) { h = 1; }
        this._rect.x = x;
        this._rect.y = y;
        this._rect.w = w;
        this._rect.h = h;
    };
    Object.defineProperty(Camera.prototype, "rect", {
        //获取视口
        get: function () {
            return this._rect;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * 透视矩阵
     */
    Camera.prototype.getProjectionMatrix = function () {
        return this._projectionMatrix;
    };
    /**
     * Get the clearing flags of the camera
     * @returns {number} camera clearing flags
     */
    Camera.prototype.getClearFlags = function () {
        return this._clearFlags;
    };
    /**
     * Set the clearing flags of the camera
     * @param {number} flags camera clearing flags
     */
    Camera.prototype.setClearFlags = function (flags) {
        this._clearFlags = flags;
    };
    /**
     * 更新相机矩阵
     * 主要是投影矩阵和模型矩阵
     */
    Camera.prototype.updateCameraMatrix = function () {
        if (this._type == enums_1.default.PROJ_PERSPECTIVE) {
            this._glMatrix.mat4.perspective(this._projectionMatrix, this._fovy, this._aspect, this._near, this._far);
        }
        else {
            var x = this._orthoWidth;
            var y = this._orthoHeight;
            /**
             * 下面将会构造一个正交投影矩阵
             * 可以把齐次裁切坐标的位置想象成屏幕正中心
             * x的范围是【-x,x】
             * y的范围是【-y,y】
             * 这个将会映射到屏幕坐标系上，而屏幕坐标的范围是【0,1】
             * 这里就会存在映射关系
             * 对于2d，在我们的逻辑中，通常是把物体放在屏幕坐标系下，我们只关心这个屏幕坐标系下的坐标
             * 但其实齐次裁切坐标它的正中心确是视口的中心，并非左下角，所以这里边的映射就需要注意
             * 最后：
             * 1可以提供给用户，就让他去使用屏幕坐标系，只是最后上传渲染数据的时候，我们把它映射到齐次裁切空间下
             * 屏幕--》齐次裁切
             * 【0,1】->【-x,x】
             * 【0,1】->【-y,y】
             * 2渲染完成以后，我们再把它从齐次裁切空间映射到屏幕坐标系
             * 齐次裁切 --》屏幕
             * 【-x,x】->【0,1】
             * 【-y,y】->【0,1】
             */
            this._glMatrix.mat4.ortho(this._projectionMatrix, -x, x, -y, y, this._near, this._far);
        }
        var m = this._glMatrix.mat4.create();
        // 初始化模型视图矩阵
        this._glMatrix.mat4.identity(m);
        // //摄像机的位置
        this._glMatrix.mat4.lookAt(m, this._eye, this._center, this._up);
        //有肯能相机被放在了某个物上
        if (this.parent) {
            this._glMatrix.mat4.mul(this._worldMatrix, this._worldMatrix, m);
        }
        else {
            this._glMatrix.mat4.copy(this._worldMatrix, m);
        }
        this.updateMatrixData();
    };
    Camera.prototype.getInversModelViewMatrix = function () {
        var invers = this._glMatrix.mat4.create();
        this._glMatrix.mat4.invert(invers, this._modelMatrix);
        return invers;
    };
    /**
     * 此函数务必调用
     * @param eye  相机的位置
     * @param center 相机看向的位置
     * @param up
     * 按照我设定的默认参数，
     * 看向原点，此处的原点指的是屏幕的中心，
     * 相机正着摆放，可以把自己的头当做摄像机
     * eye.z>=0,正面看屏幕的中心
     * eye.z<0,背面看屏幕的中心
     */
    Camera.prototype.lookAt = function (eye, center, up) {
        if (center === void 0) { center = [0, 0, 0]; }
        if (up === void 0) { up = [0, 1, 0]; }
        this._eye = eye;
        this._center = center;
        this._up = up;
        this.updateCameraMatrix();
    };
    Camera.prototype.setUp = function (x, y, z) {
        this._up = [];
        this._up.push(x);
        this._up.push(y);
        this._up.push(z);
    };
    Camera.prototype.setCenter = function (x, y, z) {
        this._center = [];
        this._center.push(x);
        this._center.push(y);
        this._center.push(z);
    };
    Object.defineProperty(Camera.prototype, "targetTexture", {
        get: function () {
            return this._targetTexture;
        },
        /**
         * !#en
         * Destination render texture.
         * Usually cameras render directly to screen, but for some effects it is useful to make a camera render into a texture.
         * !#zh
         * 摄像机渲染的目标 RenderTexture。
         * 一般摄像机会直接渲染到屏幕上，但是有一些效果可以使用摄像机渲染到 RenderTexture 上再对 RenderTexture 进行处理来实现。
         * @property {RenderTexture} targetTexture
         */
        set: function (targetTexture) {
            this._targetTexture = targetTexture;
            this._updateTargetTexture();
        },
        enumerable: false,
        configurable: true
    });
    Camera.prototype._updateTargetTexture = function () {
        var texture = this._targetTexture;
        this.setFrameBuffer(texture ? texture._frameBuffer : null);
    };
    /**
    * Get the framebuffer of the camera
    * @returns {FrameBuffer} camera framebuffer
    */
    Camera.prototype.getFramebuffer = function () {
        return this._framebuffer;
    };
    /**
     * Set the framebuffer of the camera
     * @param {FrameBuffer} framebuffer camera framebuffer
     */
    Camera.prototype.setFrameBuffer = function (framebuffer) {
        this._framebuffer = framebuffer;
    };
    return Camera;
}(Node_1.Node));
exports.default = Camera;
},{"../base/Node":7,"./enums":18}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraFrustum = void 0;
var Device_1 = require("../../../Device");
var Matrix_1 = require("../../Matrix");
var MathUtils_1 = require("../../utils/MathUtils");
var Sprite_1 = require("../base/Sprite");
var Primitives_1 = require("../shader/Primitives");
var Shader_1 = require("../shader/Shader");
var vertexColorVertexShader = 'attribute vec4 a_position;' +
    'attribute vec4 a_color;' +
    'uniform mat4 u_worldViewProjection;' +
    'varying vec4 v_color;' +
    'void main() {' +
    'gl_Position = u_worldViewProjection * a_position;' +
    'v_color = a_color;' +
    '}';
var vertexColorFragmentShader = 'precision mediump float;' +
    'uniform vec4 u_color;' +
    'varying vec4 v_color;' +
    'void main() {' +
    'gl_FragColor = u_color * v_color;' +
    '}';
var baseVertexShader = 'attribute vec4 a_position;' +
    'attribute vec4 a_color;' +
    'uniform mat4 u_worldViewProjection;' +
    'uniform mat4 u_exampleWorldViewProjection;' +
    'varying vec4 v_color;' +
    'varying vec4 v_position;' +
    'void main() {' +
    'gl_Position = u_worldViewProjection * a_position;' +
    'v_position = u_exampleWorldViewProjection * a_position;' +
    'v_position = v_position / v_position.w;' +
    'v_color = a_color;' +
    '}';
var colorFragmentShader = 'precision mediump float;' +
    'varying vec4 v_color;' +
    'varying vec4 v_position;' +
    'uniform vec4 u_color;' +
    'void main() {' +
    'bool blend = (v_position.x < -1.0 || v_position.x > 1.0 ||' +
    'v_position.y < -1.0 || v_position.y > 1.0 ||' +
    'v_position.z < -1.0 || v_position.z > 1.0);' +
    'vec4 blendColor = blend ? vec4(0.35, 0.35, 0.35, 1.0) : vec4(1, 1, 1, 1);' +
    'gl_FragColor = v_color * u_color * blendColor;' +
    '}';
var darkColors = {
    lines: [1, 1, 1, 1],
};
var lightColors = {
    lines: [0, 0, 0, 1],
};
var darkMatcher = window.matchMedia("(prefers-color-scheme: dark)");
var isDarkMode = darkMatcher.matches;
var colors = isDarkMode ? darkColors : lightColors;
var eyeElem = document.querySelector("#eye");
var wireCubeArrays = {
    position: [
        -1, 1, -1,
        1, 1, -1,
        1, -1, -1,
        -1, -1, -1,
        -1, 1, 1,
        1, 1, 1,
        1, -1, 1,
        -1, -1, 1,
    ],
    color: [
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
        1, 1, 1, 1,
    ],
    indices: [
        0, 1, 1, 2, 2, 3, 3, 0,
        4, 5, 5, 6, 6, 7, 7, 4,
        0, 4, 1, 5, 2, 6, 3, 7,
    ],
};
var tempColor = [
    1, 1, 1, 1,
    1, 1, 1, 1,
    1, 1, 1, 1,
    1, 1, 1, 1,
];
for (var j = 0; j < 4; j++)
    tempColor.push.apply(tempColor, colors.lines);
var cubeRaysArrays = {
    position: wireCubeArrays.position,
    color: tempColor,
    indices: [
        0, 4, 1, 5, 2, 6, 3, 7,
    ],
};
var faceColors = [
    [1, 0, 0, 1,],
    [0, 1, 0, 1,],
    [1, 1, 0, 1,],
    [0, 0, 1, 1,],
    [1, 0, 1, 1,],
    [0, 1, 1, 1,],
];
var colorVerts = [];
for (var f = 0; f < 6; ++f) {
    for (var v = 0; v < 4; ++v) {
        colorVerts.push.apply(colorVerts, faceColors[f]);
    }
}
// globals
var pixelRatio = window.devicePixelRatio || 1;
var CameraFrustum = /** @class */ (function (_super) {
    __extends(CameraFrustum, _super);
    function CameraFrustum(gl) {
        var _this = _super.call(this, gl) || this;
        _this.zNear = 10; //相机最近能看到的距离
        _this.zFar = 50; //相机最远能看到的距离
        _this.fieldOfView = 30; //相机张开的角度
        // uniforms.
        _this.sharedUniforms = {};
        _this.frustumCubeUniforms = {
            u_color: [1, 1, 1, 0.4],
            u_worldViewProjection: new Float32Array(16),
            u_exampleWorldViewProjection: new Float32Array(16),
        };
        _this.cubeRaysUniforms = {
            u_color: colors.lines,
            u_worldViewProjection: new Float32Array(16),
        };
        _this.wireFrustumUniforms = {
            u_color: colors.lines,
            u_worldViewProjection: new Float32Array(16),
        };
        return _this;
    }
    CameraFrustum.create = function () {
        return new CameraFrustum(Device_1.default.Instance.gl);
    };
    CameraFrustum.prototype.onInit = function () {
        this.vertexColorProgramInfo = Shader_1.G_ShaderFactory.createProgramInfo(vertexColorVertexShader, vertexColorFragmentShader);
        this.colorProgramInfo = Shader_1.G_ShaderFactory.createProgramInfo(baseVertexShader, colorFragmentShader);
        this.cubeRaysBufferInfo = Shader_1.G_ShaderFactory.createBufferInfoFromArrays(cubeRaysArrays);
        this.wireCubeBufferInfo = Shader_1.G_ShaderFactory.createBufferInfoFromArrays(wireCubeArrays);
        var cubeArrays = Primitives_1.syPrimitives.createCubeVertices(2);
        delete cubeArrays.normal;
        delete cubeArrays.texcoord;
        cubeArrays.color = colorVerts;
        this.cubeBufferInfo = Shader_1.G_ShaderFactory.createBufferInfoFromArrays(cubeArrays);
        this.aspect = this.gl.canvas.width / (this.gl.canvas.width / 2);
        this.zFar = 50;
        this.zNear = 10;
        this.fieldOfView = 30;
    };
    CameraFrustum.prototype.testDraw = function (vp, aspect, zNear, zFar, fieldOfView) {
        this.aspect = aspect;
        this.zNear = zNear;
        this.zFar = zFar;
        this.fieldOfView = fieldOfView;
        //绘制齐次裁切空间 六个面
        this.drawFrustumCube(vp, this.colorProgramInfo, this.cubeBufferInfo);
        //绘制四条射线
        this.drawViewCone(vp, this.vertexColorProgramInfo, this.cubeRaysBufferInfo);
        //绘制四个金属线
        this.drawFrustumWire(vp, this.vertexColorProgramInfo, this.wireCubeBufferInfo);
    };
    // Draw view cone.
    //绘制齐次裁切空间的四条射线
    CameraFrustum.prototype.drawViewCone = function (vp, sd, buffAttr) {
        var halfHeight = this.gl.canvas.height / 2;
        var width = this.gl.canvas.width;
        var proj = Matrix_1.glMatrix.mat4.create();
        var worldTemp = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.perspective(proj, MathUtils_1.MathUtils.degToRad(this.fieldOfView), this.aspect, 1, 5000);
        Matrix_1.glMatrix.mat4.invert(proj, proj);
        Matrix_1.glMatrix.mat4.translation(worldTemp, 0, 0, 0);
        Matrix_1.glMatrix.mat4.multiply(worldTemp, worldTemp, proj);
        Matrix_1.glMatrix.mat4.multiply(this.cubeRaysUniforms.u_worldViewProjection, vp, worldTemp);
        this.gl.useProgram(sd.spGlID);
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(sd.attrSetters, buffAttr);
        Shader_1.G_ShaderFactory.setUniforms(sd.uniSetters, this.sharedUniforms);
        Shader_1.G_ShaderFactory.setUniforms(sd.uniSetters, this.cubeRaysUniforms);
        Shader_1.G_ShaderFactory.drawBufferInfo(buffAttr, this.gl.LINES);
        var eyePosition = Matrix_1.glMatrix.mat4.transformPoint(null, this.cubeRaysUniforms.u_worldViewProjection, [0, 0, 0]);
        var ex = (eyePosition[0] * .5 + .5) * width / pixelRatio;
        var ey = (eyePosition[1] * -.5 + .5) * halfHeight / pixelRatio;
        eyeElem.style.left = MathUtils_1.MathUtils.px(ex - eyeElem.width / 2);
        eyeElem.style.top = MathUtils_1.MathUtils.px(ey - eyeElem.height / 2);
    };
    // Draw Frustum Wire
    //绘制齐次裁切空间远近平面的边缘线
    CameraFrustum.prototype.drawFrustumWire = function (vp, sdData, buffAttrData) {
        var worldTemp = Matrix_1.glMatrix.mat4.create();
        var proj = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.perspective(proj, MathUtils_1.MathUtils.degToRad(this.fieldOfView), this.aspect, this.zNear, this.zFar);
        Matrix_1.glMatrix.mat4.invert(proj, proj);
        Matrix_1.glMatrix.mat4.translation(worldTemp, 0, 0, 0);
        Matrix_1.glMatrix.mat4.multiply(worldTemp, worldTemp, proj);
        Matrix_1.glMatrix.mat4.multiply(this.wireFrustumUniforms.u_worldViewProjection, vp, worldTemp);
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(sdData.attrSetters, buffAttrData);
        Shader_1.G_ShaderFactory.setUniforms(sdData.uniSetters, this.sharedUniforms);
        Shader_1.G_ShaderFactory.setUniforms(sdData.uniSetters, this.wireFrustumUniforms);
        Shader_1.G_ShaderFactory.drawBufferInfo(buffAttrData, this.gl.LINES);
    };
    // Draw Frustum Cube behind
    CameraFrustum.prototype.drawFrustumCube = function (vp, shaderD, buffAttData) {
        var gl = this.gl;
        Device_1.default.Instance.cullFace(false);
        var worldTemp = Matrix_1.glMatrix.mat4.create();
        var tempProj = Matrix_1.glMatrix.mat4.create();
        gl.useProgram(shaderD.spGlID);
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(shaderD.attrSetters, buffAttData);
        Matrix_1.glMatrix.mat4.perspective(tempProj, MathUtils_1.MathUtils.degToRad(this.fieldOfView), this.aspect, this.zNear, this.zFar);
        Matrix_1.glMatrix.mat4.invert(tempProj, tempProj);
        Matrix_1.glMatrix.mat4.translation(worldTemp, 0, 0, 0);
        Matrix_1.glMatrix.mat4.multiply(worldTemp, tempProj, worldTemp);
        Matrix_1.glMatrix.mat4.multiply(this.frustumCubeUniforms.u_worldViewProjection, vp, worldTemp);
        Shader_1.G_ShaderFactory.setUniforms(shaderD.uniSetters, this.sharedUniforms);
        Shader_1.G_ShaderFactory.setUniforms(shaderD.uniSetters, this.frustumCubeUniforms);
        Shader_1.G_ShaderFactory.drawBufferInfo(buffAttData);
        Device_1.default.Instance.closeCullFace();
    };
    return CameraFrustum;
}(Sprite_1.SY.Sprite));
exports.CameraFrustum = CameraFrustum;
},{"../../../Device":1,"../../Matrix":5,"../../utils/MathUtils":23,"../base/Sprite":8,"../shader/Primitives":21,"../shader/Shader":22}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Device_1 = require("../../../Device");
var MathUtils_1 = require("../../utils/MathUtils");
var enums_1 = require("./enums");
var OrthoCamera_1 = require("./OrthoCamera");
var PerspectiveCamera_1 = require("./PerspectiveCamera");
/**
 * 游戏主相机
 */
var GameMainCamera = /** @class */ (function () {
    function GameMainCamera() {
        //ui部分----------------------------------------------------------------------------
        this.zNear = 10; //相机最近能看到的距离
        this.zFar = 50; //相机最远能看到的距离
        this.fieldOfView = 30; //相机张开的角度
        this.zPosition = -25; //场景的位置
        this.eyePosition = new Float32Array([31, 17, 15]); //相机的位置
        this.eyeRotation = new Float32Array([0, 0, 0]); //相机的旋转
    }
    Object.defineProperty(GameMainCamera, "instance", {
        get: function () {
            if (!this._instance) {
                var gl = Device_1.default.Instance.gl;
                this._instance = new GameMainCamera();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    GameMainCamera.prototype.setCamera = function (type, aspect, angle, near, far) {
        if (angle === void 0) { angle = 60; }
        if (near === void 0) { near = 0.1; }
        if (far === void 0) { far = 200; }
        this._cameraType = type;
        if (type == enums_1.default.PROJ_PERSPECTIVE) {
            this._3dCamera = new PerspectiveCamera_1.default(angle * Math.PI / 180, aspect, near, far);
            // this.createUI();
            // this._3dCamera.showFrustum();
            return this._3dCamera;
        }
        else if (type == enums_1.default.PROJ_ORTHO) {
            this._2dCamera = new OrthoCamera_1.default(angle * Math.PI / 180, aspect, near, far);
            return this._2dCamera;
        }
    };
    GameMainCamera.prototype.getCamera = function (type) {
        return type == enums_1.default.PROJ_PERSPECTIVE ? this._3dCamera : this._2dCamera;
    };
    GameMainCamera.prototype.get3DCamera = function () {
        return this._3dCamera;
    };
    GameMainCamera.prototype.get2DCamera = function () {
        return this._2dCamera;
    };
    GameMainCamera.prototype.updateFieldOfView = function (event, ui) {
        this.fieldOfView = ui.value;
    };
    GameMainCamera.prototype.updateZNear = function (event, ui) {
        this.zNear = ui.value;
    };
    GameMainCamera.prototype.updateZFar = function (event, ui) {
        this.zFar = ui.value;
    };
    GameMainCamera.prototype.updateZPosition = function (event, ui) {
        this.zPosition = ui.value;
    };
    GameMainCamera.prototype.updateCamearXPos = function (event, ui) {
        this.eyePosition[0] = ui.value;
    };
    GameMainCamera.prototype.updateCamearYPos = function (event, ui) {
        this.eyePosition[1] = ui.value;
    };
    GameMainCamera.prototype.updateCamearZPos = function (event, ui) {
        this.eyePosition[2] = ui.value;
    };
    GameMainCamera.prototype.updateCamearXRotation = function (event, ui) {
        this.eyeRotation[0] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    GameMainCamera.prototype.updateCamearYRotation = function (event, ui) {
        this.eyeRotation[1] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    GameMainCamera.prototype.updateCamearZRotation = function (event, ui) {
        this.eyeRotation[2] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    //创建相机UI
    GameMainCamera.prototype.createUI = function () {
        var webglLessonsUI = window["webglLessonsUI"];
        webglLessonsUI.setupSlider("#fieldOfView", { value: this.fieldOfView, slide: this.updateFieldOfView.bind(this), max: 179 });
        webglLessonsUI.setupSlider("#zNear", { value: this.zNear, slide: this.updateZNear.bind(this), min: 1, max: 50 });
        webglLessonsUI.setupSlider("#zFar", { value: this.zFar, slide: this.updateZFar.bind(this), min: 1, max: 50 });
        webglLessonsUI.setupSlider("#zPosition", { value: this.zPosition, slide: this.updateZPosition.bind(this), min: -60, max: 0 });
        webglLessonsUI.setupSlider("#cameraPosX", { value: this.eyePosition[0], slide: this.updateCamearXPos.bind(this), min: 1, max: 50 }); //31
        webglLessonsUI.setupSlider("#cameraPosY", { value: this.eyePosition[1], slide: this.updateCamearYPos.bind(this), min: 1, max: 50 }); //17
        webglLessonsUI.setupSlider("#cameraPosZ", { value: this.eyePosition[2], slide: this.updateCamearZPos.bind(this), min: 1, max: 50 }); //15
        webglLessonsUI.setupSlider("#cameraRotateX", { value: this.eyeRotation[0], slide: this.updateCamearXRotation.bind(this), min: 0, max: 360 }); //31
        webglLessonsUI.setupSlider("#cameraRotateY", { value: this.eyeRotation[1], slide: this.updateCamearYRotation.bind(this), min: 0, max: 360 }); //17
        webglLessonsUI.setupSlider("#cameraRotateZ", { value: this.eyeRotation[2], slide: this.updateCamearZRotation.bind(this), min: 0, max: 360 }); //15
    };
    return GameMainCamera;
}());
exports.default = GameMainCamera;
},{"../../../Device":1,"../../utils/MathUtils":23,"./OrthoCamera":16,"./PerspectiveCamera":17,"./enums":18}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Camera_1 = require("./Camera");
var enums_1 = require("./enums");
var OrthoCamera = /** @class */ (function (_super) {
    __extends(OrthoCamera, _super);
    function OrthoCamera(fovy, aspect, near, far) {
        return _super.call(this, fovy, aspect, near, far, enums_1.default.PROJ_ORTHO) || this;
    }
    return OrthoCamera;
}(Camera_1.default));
exports.default = OrthoCamera;
},{"./Camera":13,"./enums":18}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Camera_1 = require("./Camera");
var enums_1 = require("./enums");
var PerspectiveCamera = /** @class */ (function (_super) {
    __extends(PerspectiveCamera, _super);
    function PerspectiveCamera(fovy, aspect, near, far) {
        var _this = _super.call(this, fovy, aspect, near, far, enums_1.default.PROJ_PERSPECTIVE) || this;
        _this.test();
        return _this;
    }
    PerspectiveCamera.prototype.test = function () {
        this.setRect(0, 0, 1, 1);
    };
    PerspectiveCamera.prototype.readyDraw = function (time) {
        _super.prototype.readyDraw.call(this, time);
    };
    /**
     * @param time in seconds
     */
    PerspectiveCamera.prototype.updateLookAt = function (time) {
        // convert to seconds
        time *= 0.001;
        // camera going in circle 2 units from origin looking at origin
        var m4 = this._glMatrix.mat4;
        var cameraPosition = [Math.cos(time * 0.1), 0, Math.sin(time * 0.1)];
        var target = [0, 0, 0];
        var up = [0, 1, 0];
        // Compute the camera's matrix using look at.
        var cameraMatrix = m4.create();
        m4.lookAt(cameraMatrix, cameraPosition, target, up);
        // Make a view matrix from the camera matrix.
        var viewMatrix = m4.create();
        m4.invert(viewMatrix, cameraMatrix);
        // We only care about direciton so remove the translation
        viewMatrix[12] = 0;
        viewMatrix[13] = 0;
        viewMatrix[14] = 0;
        var viewDirectionProjectionMatrix = m4.create();
        m4.multiply(viewDirectionProjectionMatrix, this._projectionMatrix, viewMatrix);
        var viewDirectionProjectionInverseMatrix = m4.create();
        m4.invert(viewDirectionProjectionInverseMatrix, viewDirectionProjectionMatrix);
        return viewDirectionProjectionInverseMatrix;
    };
    return PerspectiveCamera;
}(Camera_1.default));
exports.default = PerspectiveCamera;
},{"./Camera":13,"./enums":18}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    // projection
    PROJ_PERSPECTIVE: 0,
    PROJ_ORTHO: 1,
    // lights
    LIGHT_DIRECTIONAL: 0,
    LIGHT_POINT: 1,
    LIGHT_SPOT: 2,
    LIGHT_AMBIENT: 3,
    // shadows
    SHADOW_NONE: 0,
    SHADOW_HARD: 1,
    SHADOW_SOFT: 2,
    // parameter type
    // PARAM_INT:             typeMap.int,
    // PARAM_INT2:            typeMap.ivec2,
    // PARAM_INT3:            typeMap.ivec3,
    // PARAM_INT4:            typeMap.ivec4,
    // PARAM_FLOAT:           typeMap.float,
    // PARAM_FLOAT2:          typeMap.vec2,
    // PARAM_FLOAT3:          typeMap.vec3,
    // PARAM_FLOAT4:          typeMap.vec4,
    // PARAM_MAT2:            typeMap.mat2,
    // PARAM_MAT3:            typeMap.mat3,
    // PARAM_MAT4:            typeMap.mat4,
    // PARAM_TEXTURE_2D:      typeMap.sampler2D,
    // PARAM_TEXTURE_CUBE:    typeMap.samplerCube,
    // clear flags
    CLEAR_COLOR: 1,
    CLEAR_DEPTH: 2,
    CLEAR_STENCIL: 4,
    CLEAR_SKYBOX: 8,
    //
    BUFFER_VIEW_INT8: 0,
    BUFFER_VIEW_UINT8: 1,
    BUFFER_VIEW_INT16: 2,
    BUFFER_VIEW_UINT16: 3,
    BUFFER_VIEW_INT32: 4,
    BUFFER_VIEW_UINT32: 5,
    BUFFER_VIEW_FLOAT32: 6,
};
},{}],19:[function(require,module,exports){
"use strict";
//texture 取值
Object.defineProperty(exports, "__esModule", { value: true });
exports.glTextureChanelTotalBytes = exports.glTextureTotalChanels = exports.glTextureFmtInfor = exports.glFilter = exports.glblend = exports.glblend_func = exports.glbuffer_usage = exports.glindex_buffer_format = exports.gldepth_stencil_func = exports.glstencil_operation = exports.glcull = exports.glrender_buffer_format = exports.glTEXTURE_UNIT_VALID = exports.gltex_filter = void 0;
// texture filter
exports.gltex_filter = {
    NEAREST: 9728,
    LINEAR: 9729,
    //下面是针对缩小的是采用mipmap技术
    NEAREST_MIPMAP_NEAREST: 9984,
    LINEAR_MIPMAP_NEAREST: 9985,
    NEAREST_MIPMAP_LINEAR: 9986,
    LINEAR_MIPMAP_LINEAR: 9987,
};
var _filterGL = [
    [exports.gltex_filter.NEAREST, exports.gltex_filter.NEAREST_MIPMAP_NEAREST, exports.gltex_filter.NEAREST_MIPMAP_LINEAR],
    [exports.gltex_filter.LINEAR, exports.gltex_filter.LINEAR_MIPMAP_NEAREST, exports.gltex_filter.LINEAR_MIPMAP_LINEAR],
];
var _textureFmtGL = [
    // RGB_DXT1: 0
    { format: 6407 /* RGB */, internalFormat: 33776 /* RGB_S3TC_DXT1_EXT */, pixelType: null },
    // RGBA_DXT1: 1
    { format: 6408 /* RGBA */, internalFormat: 33777 /* RGBA_S3TC_DXT1_EXT */, pixelType: null },
    // RGBA_DXT3: 2
    { format: 6408 /* RGBA */, internalFormat: 33778 /* RGBA_S3TC_DXT3_EXT */, pixelType: null },
    // RGBA_DXT5: 3
    { format: 6408 /* RGBA */, internalFormat: 33779 /* RGBA_S3TC_DXT5_EXT */, pixelType: null },
    // RGB_ETC1: 4
    { format: 6407 /* RGB */, internalFormat: 36196 /* RGB_ETC1_WEBGL */, pixelType: null },
    // RGB_PVRTC_2BPPV1: 5
    { format: 6407 /* RGB */, internalFormat: 35841 /* RGB_PVRTC_2BPPV1_IMG */, pixelType: null },
    // RGBA_PVRTC_2BPPV1: 6
    { format: 6408 /* RGBA */, internalFormat: 35843 /* RGBA_PVRTC_2BPPV1_IMG */, pixelType: null },
    // RGB_PVRTC_4BPPV1: 7
    { format: 6407 /* RGB */, internalFormat: 35840 /* RGB_PVRTC_4BPPV1_IMG */, pixelType: null },
    // RGBA_PVRTC_4BPPV1: 8
    { format: 6408 /* RGBA */, internalFormat: 35842 /* RGBA_PVRTC_4BPPV1_IMG */, pixelType: null },
    // A8: 9
    { format: 6406 /* ALPHA */, internalFormat: 6406 /* ALPHA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // L8: 10
    { format: 6409 /* LUMINANCE */, internalFormat: 6409 /* LUMINANCE */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // L8_A8: 11
    { format: 6410 /* LUMINANCE_ALPHA */, internalFormat: 6410 /* LUMINANCE_ALPHA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // R5_G6_B5: 12
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 33635 /* UNSIGNED_SHORT_5_6_5 */ },
    // R5_G5_B5_A1: 13
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 32820 /* UNSIGNED_SHORT_5_5_5_1 */ },
    // R4_G4_B4_A4: 14
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 32819 /* UNSIGNED_SHORT_4_4_4_4 */ },
    // RGB8: 15
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // RGBA8: 16
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // RGB16F: 17
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 36193 /* HALF_FLOAT_OES */ },
    // RGBA16F: 18
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 36193 /* HALF_FLOAT_OES */ },
    // RGB32F: 19
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 5126 /* FLOAT */ },
    // RGBA32F: 20
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 5126 /* FLOAT */ },
    // R32F: 21
    { format: null, internalFormat: null, pixelType: null },
    // _111110F: 22
    { format: null, internalFormat: null, pixelType: null },
    // SRGB: 23
    { format: null, internalFormat: null, pixelType: null },
    // SRGBA: 24
    { format: null, internalFormat: null, pixelType: null },
    // D16: 25
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5123 /* UNSIGNED_SHORT */ },
    // D32: 26
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5125 /* UNSIGNED_INT */ },
    // D24S8: 27
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5125 /* UNSIGNED_INT */ },
    // RGB_ETC2: 28
    { format: 6407 /* RGB */, internalFormat: 37492 /* RGB8_ETC2 */, pixelType: null },
    // RGBA_ETC2: 29
    { format: 6408 /* RGBA */, internalFormat: 37496 /* RGBA8_ETC2_EAC */, pixelType: null },
];
/**
 * webgl有效的纹理单元
 * 经过测试最大的纹理单元数目是32个
 */
exports.glTEXTURE_UNIT_VALID = [
    "TEXTURE0", "TEXTURE1", "TEXTURE2", "TEXTURE3", "TEXTURE4", "TEXTURE5", "TEXTURE6", "TEXTURE7",
    "TEXTURE8", "TEXTURE9", "TEXTURE10", "TEXTURE11", "TEXTURE12", "TEXTURE13", "TEXTURE14", "TEXTURE15",
    "TEXTURE16", "TEXTURE17", "TEXTURE18", "TEXTURE19", "TEXTURE20", "TEXTURE21", "TEXTURE22", "TEXTURE23",
    "TEXTURE24", "TEXTURE25", "TEXTURE26", "TEXTURE27", "TEXTURE28", "TEXTURE29", "TEXTURE30", "TEXTURE31",
];
// render-buffer format
exports.glrender_buffer_format = {
    RGBA4: 32854,
    RGB5_A1: 32855,
    RGB565: 36194,
    D16: 33189,
    S8: 36168,
    D24S8: 34041,
};
// cull
exports.glcull = {
    NONE: 0,
    FRONT: 1028,
    BACK: 1029,
    FRONT_AND_BACK: 1032,
};
// stencil operation
exports.glstencil_operation = {
    DISABLE: 0,
    ENABLE: 1,
    INHERIT: 2,
    OP_KEEP: 7680,
    OP_ZERO: 0,
    OP_REPLACE: 7681,
    OP_INCR: 7682,
    OP_INCR_WRAP: 34055,
    OP_DECR: 7683,
    OP_DECR_WRAP: 34056,
    OP_INVERT: 5386,
};
// depth and stencil function
// 简写"ds"
exports.gldepth_stencil_func = {
    NEVER: 512,
    LESS: 513,
    EQUAL: 514,
    LEQUAL: 515,
    GREATER: 516,
    NOTEQUAL: 517,
    GEQUAL: 518,
    ALWAYS: 519,
};
// index buffer format
exports.glindex_buffer_format = {
    INDEX_FMT_UINT8: 5121,
    INDEX_FMT_UINT16: 5123,
    INDEX_FMT_UINT32: 5125,
};
// buffer usage
exports.glbuffer_usage = {
    USAGE_STATIC: 35044,
    USAGE_DYNAMIC: 35048,
    USAGE_STREAM: 35040,
};
// blend-func
exports.glblend_func = {
    ADD: 32774,
    SUBTRACT: 32778,
    REVERSE_SUBTRACT: 32779,
};
// blend
exports.glblend = {
    ZERO: 0,
    ONE: 1,
    SRC_COLOR: 768,
    ONE_MINUS_SRC_COLOR: 769,
    DST_COLOR: 774,
    ONE_MINUS_DST_COLOR: 775,
    SRC_ALPHA: 770,
    ONE_MINUS_SRC_ALPHA: 771,
    DST_ALPHA: 772,
    ONE_MINUS_DST_ALPHA: 773,
    CONSTANT_COLOR: 32769,
    ONE_MINUS_CONSTANT_COLOR: 32770,
    CONSTANT_ALPHA: 32771,
    ONE_MINUS_CONSTANT_ALPHA: 32772,
    SRC_ALPHA_SATURATE: 776,
};
/**
 * @method glFilter
 * @param {WebGLContext} gl
 * @param {FILTER_*} filter
 * @param {FILTER_*} mipFilter
 */
function glFilter(gl, filter, mipFilter) {
    if (mipFilter === void 0) { mipFilter = -1; }
    var result = _filterGL[filter][mipFilter + 1];
    if (result === undefined) {
        console.warn("Unknown FILTER: " + filter);
        return mipFilter === -1 ? exports.gltex_filter.LINEAR : exports.gltex_filter.LINEAR_MIPMAP_LINEAR;
    }
    return result;
}
exports.glFilter = glFilter;
/**
 * @method glTextureFmt
 * @param {gltex_format} fmt
 * @return {format,internalFormat,pixelType} result
 */
function glTextureFmtInfor(fmt) {
    var result = _textureFmtGL[fmt];
    if (result === undefined) {
        console.warn("Unknown TEXTURE_FMT: " + fmt);
        return _textureFmtGL[16 /* RGBA8 */];
    }
    return result;
}
exports.glTextureFmtInfor = glTextureFmtInfor;
/*
format                type            通道数 通道总字节数
RGBA         	 UNSIGNED_BYTE	        4	    4
RGB	             UNSIGNED_BYTE	        3	    3
RGBA             UNSIGNED_SHORT_4_4_4_4	4	    2
RGBA         	 UNSIGNED_SHORT_5_5_5_1	4	    2
RGB	             UNSIGNED_SHORT_5_6_5   3	    2
LUMINANCE_ALPHA	 UNSIGNED_BYTE       	2	    2
LUMINANCE   	 UNSIGNED_BYTE      	1	    1
ALPHA       	 UNSIGNED_BYTE       	1	    1
*/
var glformat_type_bytes = {};
glformat_type_bytes[6408 /* RGBA */] = {};
glformat_type_bytes[6407 /* RGB */] = {};
glformat_type_bytes[6410 /* LUMINANCE_ALPHA */] = {};
glformat_type_bytes[6409 /* LUMINANCE */] = {};
glformat_type_bytes[6406 /* ALPHA */] = {};
glformat_type_bytes[6408 /* RGBA */][5121 /* UNSIGNED_BYTE */] = 4;
glformat_type_bytes[6407 /* RGB */][5121 /* UNSIGNED_BYTE */] = 3;
glformat_type_bytes[6408 /* RGBA */][32819 /* UNSIGNED_SHORT_4_4_4_4 */] = 2;
glformat_type_bytes[6408 /* RGBA */][32820 /* UNSIGNED_SHORT_5_5_5_1 */] = 2;
glformat_type_bytes[6407 /* RGB */][33635 /* UNSIGNED_SHORT_5_6_5 */] = 2;
glformat_type_bytes[6410 /* LUMINANCE_ALPHA */][5121 /* UNSIGNED_BYTE */] = 2;
glformat_type_bytes[6409 /* LUMINANCE */][5121 /* UNSIGNED_BYTE */] = 1;
glformat_type_bytes[6406 /* ALPHA */][5121 /* UNSIGNED_BYTE */] = 1;
var glformat_type_chanels = {};
glformat_type_chanels[6408 /* RGBA */] = {};
glformat_type_chanels[6407 /* RGB */] = {};
glformat_type_chanels[6410 /* LUMINANCE_ALPHA */] = {};
glformat_type_chanels[6409 /* LUMINANCE */] = {};
glformat_type_chanels[6406 /* ALPHA */] = {};
glformat_type_chanels[6408 /* RGBA */][5121 /* UNSIGNED_BYTE */] = 4;
glformat_type_chanels[6407 /* RGB */][5121 /* UNSIGNED_BYTE */] = 3;
glformat_type_chanels[6408 /* RGBA */][32819 /* UNSIGNED_SHORT_4_4_4_4 */] = 4;
glformat_type_chanels[6408 /* RGBA */][32820 /* UNSIGNED_SHORT_5_5_5_1 */] = 4;
glformat_type_chanels[6407 /* RGB */][33635 /* UNSIGNED_SHORT_5_6_5 */] = 3;
glformat_type_chanels[6410 /* LUMINANCE_ALPHA */][5121 /* UNSIGNED_BYTE */] = 2;
glformat_type_chanels[6409 /* LUMINANCE */][5121 /* UNSIGNED_BYTE */] = 1;
glformat_type_chanels[6406 /* ALPHA */][5121 /* UNSIGNED_BYTE */] = 1;
/**
 * 获取纹理的通道数
 * @method glTextureChanelTotalBytes
 * @param {gltex_format} fmt
 */
function glTextureTotalChanels(fmt) {
    var result = glTextureFmtInfor(fmt);
    var re = glformat_type_chanels[result.format][result.pixelType];
    if (!re) {
        console.warn("glTextureTotalChanels 报错,", result);
        re = 0;
    }
    return re;
}
exports.glTextureTotalChanels = glTextureTotalChanels;
/**
 * 获取纹理的通道字节数
 * @method glTextureChanelTotalBytes
 * @param {gltex_format} fmt
 */
function glTextureChanelTotalBytes(fmt) {
    var result = glTextureFmtInfor(fmt);
    var re = glformat_type_bytes[result.format][result.pixelType];
    if (!re) {
        console.warn("glTextureChanelTotalBytes 报错,", result);
        re = 0;
    }
    return re;
}
exports.glTextureChanelTotalBytes = glTextureChanelTotalBytes;
},{}],20:[function(require,module,exports){
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLapi = exports.glEnums = exports.glErrors = void 0;
exports.glErrors = (_a = {},
    _a[1] = { error: "failed to compile shader: ERROR: 0:1 : No prceision specified for (float)",
        reason: "没有在片元着色器中指定float的精度" },
    _a[2] = { error: "类型不匹配", reason: "编程的时候，如果浮点数刚好是0、1等整数值，要注意书写为0.0,1.0，\
    不能省略点，如果直接写0、1等形式，系统会识别为整型数，进行运算的过程中，如果把数据类型搞错可能会报错" },
    _a[3] = { error: "WebGL: INVALID_OPERATION: texImage2D: ArrayBufferView not big enough for request",
        reason: "我们传入的纹理数据和纹理格式不匹配，纹理数据有宽高,纹理格式会决定每一个像素取几个纹理数据" },
    _a);
/**
 * enums
 */
exports.glEnums = {
    // buffer usage
    USAGE_STATIC: 35044,
    USAGE_DYNAMIC: 35048,
    USAGE_STREAM: 35040,
    // index buffer format
    INDEX_FMT_UINT8: 5121,
    INDEX_FMT_UINT16: 5123,
    INDEX_FMT_UINT32: 5125,
    // vertex attribute semantic
    ATTR_POSITION: 'a_position',
    ATTR_NORMAL: 'a_normal',
    ATTR_TANGENT: 'a_tangent',
    ATTR_BITANGENT: 'a_bitangent',
    ATTR_WEIGHTS: 'a_weights',
    ATTR_JOINTS: 'a_joints',
    ATTR_COLOR: 'a_color',
    ATTR_COLOR0: 'a_color0',
    ATTR_COLOR1: 'a_color1',
    ATTR_UV: 'a_uv',
    ATTR_UV0: 'a_uv0',
    ATTR_UV1: 'a_uv1',
    ATTR_UV2: 'a_uv2',
    ATTR_UV3: 'a_uv3',
    ATTR_UV4: 'a_uv4',
    ATTR_UV5: 'a_uv5',
    ATTR_UV6: 'a_uv6',
    ATTR_UV7: 'a_uv7',
    ATTR_TEX_COORD: 'a_texCoord',
    ATTR_TEX_COORD1: 'a_texCoord1',
    ATTR_TEX_COORD2: 'a_texCoord2',
    ATTR_TEX_COORD3: 'a_texCoord3',
    ATTR_TEX_COORD4: 'a_texCoord4',
    ATTR_TEX_COORD5: 'a_texCoord5',
    ATTR_TEX_COORD6: 'a_texCoord6',
    ATTR_TEX_COORD7: 'a_texCoord7',
    ATTR_TEX_COORD8: 'a_texCoord8',
    // vertex attribute type
    ATTR_TYPE_INT8: 5120,
    ATTR_TYPE_UINT8: 5121,
    ATTR_TYPE_INT16: 5122,
    ATTR_TYPE_UINT16: 5123,
    ATTR_TYPE_INT32: 5124,
    ATTR_TYPE_UINT32: 5125,
    ATTR_TYPE_FLOAT32: 5126,
    // texture filter
    FILTER_NEAREST: 0,
    FILTER_LINEAR: 1,
    // texture wrap mode
    WRAP_REPEAT: 10497,
    WRAP_CLAMP: 33071,
    WRAP_MIRROR: 33648,
    // texture format
    // compress formats
    TEXTURE_FMT_RGB_DXT1: 0,
    TEXTURE_FMT_RGBA_DXT1: 1,
    TEXTURE_FMT_RGBA_DXT3: 2,
    TEXTURE_FMT_RGBA_DXT5: 3,
    TEXTURE_FMT_RGB_ETC1: 4,
    TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
    TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
    TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
    TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
    // normal formats
    TEXTURE_FMT_A8: 9,
    TEXTURE_FMT_L8: 10,
    TEXTURE_FMT_L8_A8: 11,
    TEXTURE_FMT_R5_G6_B5: 12,
    TEXTURE_FMT_R5_G5_B5_A1: 13,
    TEXTURE_FMT_R4_G4_B4_A4: 14,
    TEXTURE_FMT_RGB8: 15,
    TEXTURE_FMT_RGBA8: 16,
    TEXTURE_FMT_RGB16F: 17,
    TEXTURE_FMT_RGBA16F: 18,
    TEXTURE_FMT_RGB32F: 19,
    TEXTURE_FMT_RGBA32F: 20,
    TEXTURE_FMT_R32F: 21,
    TEXTURE_FMT_111110F: 22,
    TEXTURE_FMT_SRGB: 23,
    TEXTURE_FMT_SRGBA: 24,
    // depth formats
    TEXTURE_FMT_D16: 25,
    TEXTURE_FMT_D32: 26,
    TEXTURE_FMT_D24S8: 27,
    // etc2 format
    TEXTURE_FMT_RGB_ETC2: 28,
    TEXTURE_FMT_RGBA_ETC2: 29,
    // depth and stencil function
    DS_FUNC_NEVER: 512,
    DS_FUNC_LESS: 513,
    DS_FUNC_EQUAL: 514,
    DS_FUNC_LEQUAL: 515,
    DS_FUNC_GREATER: 516,
    DS_FUNC_NOTEQUAL: 517,
    DS_FUNC_GEQUAL: 518,
    DS_FUNC_ALWAYS: 519,
    // render-buffer format
    RB_FMT_RGBA4: 32854,
    RB_FMT_RGB5_A1: 32855,
    RB_FMT_RGB565: 36194,
    RB_FMT_D16: 33189,
    RB_FMT_S8: 36168,
    RB_FMT_D24S8: 34041,
    // blend-equation
    BLEND_FUNC_ADD: 32774,
    BLEND_FUNC_SUBTRACT: 32778,
    BLEND_FUNC_REVERSE_SUBTRACT: 32779,
    // blend
    BLEND_ZERO: 0,
    BLEND_ONE: 1,
    BLEND_SRC_COLOR: 768,
    BLEND_ONE_MINUS_SRC_COLOR: 769,
    BLEND_DST_COLOR: 774,
    BLEND_ONE_MINUS_DST_COLOR: 775,
    BLEND_SRC_ALPHA: 770,
    BLEND_ONE_MINUS_SRC_ALPHA: 771,
    BLEND_DST_ALPHA: 772,
    BLEND_ONE_MINUS_DST_ALPHA: 773,
    BLEND_CONSTANT_COLOR: 32769,
    BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
    BLEND_CONSTANT_ALPHA: 32771,
    BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
    BLEND_SRC_ALPHA_SATURATE: 776,
    // stencil operation
    STENCIL_DISABLE: 0,
    STENCIL_ENABLE: 1,
    STENCIL_INHERIT: 2,
    STENCIL_OP_KEEP: 7680,
    STENCIL_OP_ZERO: 0,
    STENCIL_OP_REPLACE: 7681,
    STENCIL_OP_INCR: 7682,
    STENCIL_OP_INCR_WRAP: 34055,
    STENCIL_OP_DECR: 7683,
    STENCIL_OP_DECR_WRAP: 34056,
    STENCIL_OP_INVERT: 5386,
    // cull
    CULL_NONE: 0,
    CULL_FRONT: 1028,
    CULL_BACK: 1029,
    CULL_FRONT_AND_BACK: 1032,
    // primitive type
    PT_POINTS: 0,
    PT_LINES: 1,
    PT_LINE_LOOP: 2,
    PT_LINE_STRIP: 3,
    PT_TRIANGLES: 4,
    PT_TRIANGLE_STRIP: 5,
    PT_TRIANGLE_FAN: 6,
};
var GLapi;
(function (GLapi) {
    //本地opegl上下文
    var gl;
    //此函数务必调用
    function bindGL(glT) {
        gl = glT;
        GLapi.glTEXTURE_MAG_FILTER = gl.TEXTURE_MAG_FILTER;
        GLapi.glTEXTURE_MIN_FILTER = gl.TEXTURE_MIN_FILTER;
    }
    GLapi.bindGL = bindGL;
    /**
 * @method attrTypeBytes
 * @param {ATTR_TYPE_*} attrType
 */
    function attrTypeBytes(attrType) {
        if (attrType === exports.glEnums.ATTR_TYPE_INT8) {
            return 1;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT8) {
            return 1;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_INT16) {
            return 2;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT16) {
            return 2;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_INT32) {
            return 4;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT32) {
            return 4;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_FLOAT32) {
            return 4;
        }
        console.warn("Unknown ATTR_TYPE: " + attrType);
        return 0;
    }
    GLapi.attrTypeBytes = attrTypeBytes;
    /**
     * 将buffer绑定到目标缓冲区
     * @param target
     * GLenum指定结合点（目标）。可能的值：
        gl.ARRAY_BUFFER：包含顶点属性的缓冲区，例如顶点坐标，纹理坐标数据或顶点颜色数据。
        gl.ELEMENT_ARRAY_BUFFER：用于元素索引的缓冲区。
        使用WebGL 2上下文时，还可以使用以下值：
        gl.COPY_READ_BUFFER：用于从一个缓冲区对象复制到另一个缓冲区对象的缓冲区。
        gl.COPY_WRITE_BUFFER：用于从一个缓冲区对象复制到另一个缓冲区对象的缓冲区。
        gl.TRANSFORM_FEEDBACK_BUFFER：用于变换反馈操作的缓冲区。
        gl.UNIFORM_BUFFER：用于存储统一块的缓冲区。
        gl.PIXEL_PACK_BUFFER：用于像素传输操作的缓冲区。
        gl.PIXEL_UNPACK_BUFFER：用于像素传输操作的缓冲区。
     * @param buffer
     */
    function bindBuffer(target, buffer) {
        gl.bindBuffer(target, buffer);
    }
    GLapi.bindBuffer = bindBuffer;
    /**
     * @param mode
     * 枚举类型 指定要渲染的图元类型。可以是以下类型:
        gl.POINTS: 画单独的点。
        gl.LINE_STRIP: 画一条直线到下一个顶点。
        gl.LINE_LOOP: 绘制一条直线到下一个顶点，并将最后一个顶点返回到第一个顶点.
        gl.LINES: 在一对顶点之间画一条线.
        gl.TRIANGLE_STRIP
        gl.TRIANGLE_FAN
        gl.TRIANGLES: 为一组三个顶点绘制一个三角形.
     * @param count
        整数型 指定要渲染的元素数量
     * @param type
        枚举类型 指定元素数组缓冲区中的值的类型。可能的值是:
        gl.UNSIGNED_BYTE
        gl.UNSIGNED_SHORT
        当使用 OES_element_index_uint 扩展时:
        gl.UNSIGNED_INT
     * @param offset
         字节单位 指定元素数组缓冲区中的偏移量。必须是给定类型大小的有效倍数
        @returns
        none
        @error
        如果 mode 不是正确值,  gl.INVALID_ENUM 将会抛出错误异常.
        如果offset 不是给定类型大小的有效倍数, gl.INVALID_OPERATION 将会抛出错误异常.
        如果 count 是负的,  gl.INVALID_VALUE 将会抛出错误异常.
     */
    function drawElements(mode, count, type, offset) {
        gl.drawElements(mode, count, type, offset);
    }
    GLapi.drawElements = drawElements;
    /**
     *
     * @param mode
     * GLenum 类型，指定绘制图元的方式，可能值如下。
        gl.POINTS: 绘制一系列点。
        gl.LINE_STRIP: 绘制一个线条。即，绘制一系列线段，上一点连接下一点。
        gl.LINE_LOOP: 绘制一个线圈。即，绘制一系列线段，上一点连接下一点，并且最后一点与第一个点相连。
        gl.LINES: 绘制一系列单独线段。每两个点作为端点，线段之间不连接。
        gl.TRIANGLE_STRIP：绘制一个三角带。
        gl.TRIANGLE_FAN：绘制一个三角扇。
        gl.TRIANGLES: 绘制一系列三角形。每三个点作为顶点
     * @param first
        GLint 类型 ，指定从哪个点开始绘制
     * @param count
        GLsizei 类型，指定绘制需要使用到多少个点
     @returns
     none
     @error
        如果 mode 不是一个可接受值，将会抛出 gl.INVALID_ENUM 异常。
        如果 first 或者 count 是负值，会抛出 gl.INVALID_VALUE 异常。
        如果 gl.CURRENT_PROGRAM 为 null，会抛出 gl.INVALID_OPERATION 异常
     */
    function drawArrays(mode, first, count) {
        gl.drawArrays(mode, first, count);
    }
    GLapi.drawArrays = drawArrays;
    /*
        // WebGL1:
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);
    // WebGL2:
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);
    */
    /**
     *
     * @param target
     *    GLenum 指定纹理的绑定对象.可能的值:
             gl.TEXTURE_2D: 二维纹理贴图.
             gl.TEXTURE_CUBE_MAP_POSITIVE_X:立方体映射纹理的正X面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_X: 立方体映射纹理的负X面。
             gl.TEXTURE_CUBE_MAP_POSITIVE_Y: 立方体映射纹理的正Y面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_Y: 立方体映射纹理的负Y面。
             gl.TEXTURE_CUBE_MAP_POSITIVE_Z: 立方体映射纹理的正Z面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_Z: 立方体映射纹理的负Z面。
     * @param level
     *  GLint 指定详细级别. 0级是基本图像等级，n级是第n个金字塔简化级.
     * @param internalformat
     * @param width
     *  GLsizei 指定纹理的宽度
     * @param height
     * GLsizei 指定纹理的高度
     * @param border
     * GLint 指定纹理的边框宽度。必须为 0
     * @param format
     *  GLenum 指定texel数据格式。在 WebGL 1中，它必须与 internalformat 相同（查看上面). 在WebGL 2中, 这张表中列出了这些组合
     * @param type
     * GLenum 指定texel数据的数据类型。可能的值:
         gl.UNSIGNED_BYTE:  gl.RGBA每个通道8位
         gl.UNSIGNED_SHORT_5_6_5: 5 bits红, 6 bits绿, 5 bits蓝
         gl.UNSIGNED_SHORT_4_4_4_4: 4 bits红, 4 bits绿, 4 bits蓝, 4 alpha bits.
         gl.UNSIGNED_SHORT_5_5_5_1: 5 bits红, 5 bits绿, 5 bits蓝, 1 alpha bit.
         当使用 WEBGL_depth_texture 扩展:
         gl.UNSIGNED_SHORT
         gl.UNSIGNED_INT
         ext.UNSIGNED_INT_24_8_WEBGL (constant provided by the extension)
         当使用 OES_texture_float扩展 :
         gl.FLOAT
         当使用 OES_texture_half_float 扩展:
         ext.HALF_FLOAT_OES (constant provided by the extension)
         当使用 WebGL 2 context,下面的值也是可用的:
         gl.BYTE
         gl.UNSIGNED_SHORT
         gl.SHORT
         gl.UNSIGNED_INT
         gl.INT
         gl.HALF_FLOAT
         gl.FLOAT
         gl.UNSIGNED_INT_2_10_10_10_REV
         gl.UNSIGNED_INT_10F_11F_11F_REV
         gl.UNSIGNED_INT_5_9_9_9_REV
         gl.UNSIGNED_INT_24_8
         gl.FLOAT_32_UNSIGNED_INT_24_8_REV (pixels must be null)
     * @param pixels
     * 下列对象之一可以用作纹理的像素源:
         ArrayBufferView,
         Uint8Array  如果 type 是 gl.UNSIGNED_BYTE则必须使用
         Uint16Array 如果 type 是 gl.UNSIGNED_SHORT_5_6_5, gl.UNSIGNED_SHORT_4_4_4_4, gl.UNSIGNED_SHORT_5_5_5_1, gl.UNSIGNED_SHORT 或ext.HALF_FLOAT_OES则必须使用
         Uint32Array 如果type 是 gl.UNSIGNED_INT 或ext.UNSIGNED_INT_24_8_WEBGL则必须使用
     */
    function texImage2D(target, level, internalformat, width, height, border, format, type, pixels) {
        gl.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    }
    GLapi.texImage2D = texImage2D;
    /**
     * 图像预处理函数
     * 规定了图像如何从内存中读出，又或者如何从显存读入内存
     * @param pname
     *  Glenum 类型 ，表示处理的方式。关于该参数可选值，请见下面表格
     * @param param
     *  GLint  类型，表示 pname 处理方式的参数。关于该参数可选值，请见下面表格
     * 支持的平台webgl 1.0,opengl es 2.0
     * pname                                   default            param          des
     * gl.PACK_ALIGNMENT                         4             1, 2, 4, 8       将像素数据打包到内存中（从显存将数据发往内存）
     * gl.UNPACK_ALIGNMENT                       4             1, 2, 4, 8       从内存中解包像素数据(接完以后发往显存)
     * gl.UNPACK_FLIP_Y_WEBGL                    false         true,false       如果为true，则把图片上下对称翻转坐标轴(图片本身不变)
     * gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL         false         true, false      将alpha通道乘以其他颜色通道
     * gl.UNPACK_COLORSPACE_CONVERSION_WEBGL  (gl.BROWSER_DEFAULT_WEBGL) (gl.BROWSER_DEFAULT_WEBGL, gl.NONE) 默认颜色空间转换或无颜色空间转换
     *
     */
    function pixelStorei(pname, param) {
        gl.pixelStorei(pname, param);
    }
    GLapi.pixelStorei = pixelStorei;
    function texParameterf(target, pname, param) {
        gl.texParameterf(target, pname, param);
    }
    GLapi.texParameterf = texParameterf;
    /**
     * 设置纹理过滤的属性
     * 当图片进行一些变换诸如放大缩小等，如何从纹理中取数据
     * @param target
     * GLenum 指定绑定点(目标)。可能的值：
                gl.TEXTURE_2D: 二维纹理.
                gl.TEXTURE_CUBE_MAP: 立方体纹理.
                当使用 WebGL 2 context 时,还可以使用以下值
                gl.TEXTURE_3D: 三维贴图.
                gl.TEXTURE_2D_ARRAY: 二维数组贴图.
     * @param pname
     * @param param
     *
     *  gl.TEXTURE_MAG_FILTER	纹理放大滤波器	gl.LINEAR (默认值), gl.NEAREST.
        gl.TEXTURE_MIN_FILTER	纹理缩小滤波器	gl.LINEAR, gl.NEAREST, gl.NEAREST_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR (默认值), gl.LINEAR_MIPMAP_LINEAR.
        gl.TEXTURE_WRAP_S	纹理坐标水平填充 s	gl.REPEAT (默认值),gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        gl.TEXTURE_WRAP_T	纹理坐标垂直填充 t	gl.REPEAT (默认值),gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        Additionally available when using the EXT_texture_filter_anisotropic extension
        ext.TEXTURE_MAX_ANISOTROPY_EXT	纹理最大向异性	 GLfloat 值.
        Additionally available when using a WebGL 2 context
        gl.TEXTURE_BASE_LEVEL	纹理映射等级	任何整型值.
        gl.TEXTURE_COMPARE_FUNC	纹理对比函数	gl.LEQUAL (默认值), gl.GEQUAL, gl.LESS, gl.GREATER, gl.EQUAL, gl.NOTEQUAL, gl.ALWAYS, gl.NEVER.
        gl.TEXTURE_COMPARE_MODE	纹理对比模式	gl.NONE (默认值), gl.COMPARE_REF_TO_TEXTURE.
        gl.TEXTURE_MAX_LEVEL	最大纹理映射数组等级	任何整型值.
        gl.TEXTURE_MAX_LOD	纹理最大细节层次值	任何整型值.
        gl.TEXTURE_MIN_LOD	纹理最小细节层次值	任何浮点型值.
        gl.TEXTURE_WRAP_R	纹理坐标r包装功能	gl.REPEAT (默认值), gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        @error
        INVALID_ENUM target不是合法的值。
        INVALID_OPRATION 当前目标上没有绑定纹理对象
     */
    function texParameteri(target, pname, param) {
        gl.texParameteri(target, pname, param);
    }
    GLapi.texParameteri = texParameteri;
    /**
     * 获取shader中attribute下对应的属性位置
     * @param program shader的glID
     * @param name 属性的名字
     * @returns
     * 表明属性位置的下标 GLint 数字，如果找不到该属性则返回-1
     */
    function getAttribLocation(program, name) {
        return gl.getAttribLocation(program, name);
    }
    GLapi.getAttribLocation = getAttribLocation;
    /**
     * 激活顶点属性
     * @param index
     * 类型为GLuint 的索引，指向要激活的顶点属性。如果您只知道属性的名称，不知道索引，
     * 您可以使用以下方法来获取索引getAttribLocation()
     *
     * 特别说明
     * 在WebGL中，作用于顶点的数据会先储存在attributes。
     * 这些数据仅对JavaScript代码和顶点着色器可用。
     * 属性由索引号引用到GPU维护的属性列表中。在不同的平台或GPU上，某些顶点属性索引可能具有预定义的值。
     * 创建属性时，WebGL层会分配其他属性。
       无论怎样，都需要你使用enableVertexAttribArray()方法，来激活每一个属性以便使用，不被激活的属性是不会被使用的。
       一旦激活，以下其他方法就可以获取到属性的值了，
       包括vertexAttribPointer()，vertexAttrib*()，和 getVertexAttrib()
       @error
       您可以使用getError()方法，来检查使用enableVertexAttribArray()时发生的错误。
       WebGLRenderingContext.INVALID_VALUE 非法的 index 。
       一般是 index 大于或等于了顶点属性列表允许的最大值。该值可以通过 WebGLRenderingContext.MAX_VERTEX_ATTRIBS获取
     */
    function enableVertexAttribArray(index) {
        gl.enableVertexAttribArray(index);
    }
    GLapi.enableVertexAttribArray = enableVertexAttribArray;
    /**
     * 方法在给定的索引位置关闭通用顶点属性数组
     * @param index
     * shader 变量的位置
     */
    function disableVertexAttribArray(index) {
        gl.disableVertexAttribArray(index);
    }
    GLapi.disableVertexAttribArray = disableVertexAttribArray;
    /**
     * 告诉显卡从当前绑定的缓冲区（bindBuffer()指定的缓冲区）中读取顶点数据。
       WebGL API 的WebGLRenderingContext.vertexAttribPointer()方法绑定当前缓冲区范围到gl.ARRAY_BUFFER,
       成为当前顶点缓冲区对象的通用顶点属性并指定它的布局(缓冲区对象中的偏移量)
     * @param index
       指定要修改的顶点属性的索引 其实就是某个attribute变量在shader中的位置
     * @param size
       指定每个顶点属性的组成数量，必须是1，2，3或4
     * @param type
        指定数组中每个元素的数据类型可能是：
            gl.BYTE: signed 8-bit integer, with values in [-128, 127]
            有符号的8位整数，范围[-128, 127]
            gl.SHORT: signed 16-bit integer, with values in [-32768, 32767]
            有符号的16位整数，范围[-32768, 32767]
            gl.UNSIGNED_BYTE: unsigned 8-bit integer, with values in [0, 255]
            无符号的8位整数，范围[0, 255]
            gl.UNSIGNED_SHORT: unsigned 16-bit integer, with values in [0, 65535]
            无符号的16位整数，范围[0, 65535]
            gl.FLOAT: 32-bit IEEE floating point number
            32位IEEE标准的浮点数
            When using a WebGL 2 context, the following values are available additionally:
            使用WebGL2版本的还可以使用以下值：
            gl.HALF_FLOAT: 16-bit IEEE floating point number
            16位IEEE标准的浮点数
     * @param normalized
        当转换为浮点数时是否应该将整数数值归一化到特定的范围。
            For types gl.BYTE and gl.SHORT, normalizes the values to [-1, 1] if true.
            对于类型gl.BYTE和gl.SHORT，如果是true则将值归一化为[-1, 1]
            For types gl.UNSIGNED_BYTE and gl.UNSIGNED_SHORT, normalizes the values to [0, 1] if true.
            对于类型gl.UNSIGNED_BYTE和gl.UNSIGNED_SHORT，如果是true则将值归一化为[0, 1]
            For types gl.FLOAT and gl.HALF_FLOAT, this parameter has no effect.
            对于类型gl.FLOAT和gl.HALF_FLOAT，此参数无效
     * @param stride
        一个GLsizei，以字节为单位指定连续顶点属性开始之间的偏移量(即数组中一行长度)。
        不能大于255。如果stride为0，则假定该属性是紧密打包的，即不交错属性，
        每个属性在一个单独的块中，下一个顶点的属性紧跟当前顶点之后
     * @param offset
         GLintptr指定顶点属性数组中第一部分的字节偏移量。必须是类型的字节长度的倍数

        @error
        A gl.INVALID_VALUE error is thrown if offset is negative.
        如果偏移量为负，则抛出gl.INVALID_VALUE错误。
        A gl.INVALID_OPERATION error is thrown if stride and offset are not multiples of the size of the data type.
        如果stride和offset不是数据类型大小的倍数，则抛出gl.INVALID_OPERATION错误。
        A gl.INVALID_OPERATION error is thrown if no WebGLBuffer is bound to the ARRAY_BUFFER target.
        如果没有将WebGLBuffer绑定到ARRAY_BUFFER目标，则抛出gl.INVALID_OPERATION错误。
        When using a WebGL 2 context
        a gl.INVALID_OPERATION error is thrown if this vertex attribute is defined as a integer in the vertex shader (e.g. uvec4 or ivec4, instead of vec4).
     */
    function vertexAttribPointer(index, size, type, normalized, stride, offset) {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
    GLapi.vertexAttribPointer = vertexAttribPointer;
    /**
     * 设置缓冲区大小
     * @param target
     * @param size
     * GLsizeiptr 设定Buffer对象的数据存储区大小
     * @param usage
     */
    function bufferDataLength(target, size, usage) {
        gl.bufferData(target, size, usage);
    }
    GLapi.bufferDataLength = bufferDataLength;
    function bufferData(target, srcData, usage) {
        gl.bufferData(target, srcData, usage);
    }
    GLapi.bufferData = bufferData;
    function bufferSubData(target, offset, srcData) {
        gl.bufferSubData(target, offset, srcData);
    }
    GLapi.bufferSubData = bufferSubData;
    /**
     *
     * @param target
     * GLenum 指定Buffer绑定点（目标）。可取以下值：
        gl.ARRAY_BUFFER: 包含顶点属性的Buffer，如顶点坐标，纹理坐标数据或顶点颜色数据。
        gl.ELEMENT_ARRAY_BUFFER: 用于元素索引的Buffer。
        当使用 WebGL 2 context 时，可以使用以下值：
        gl.COPY_READ_BUFFER: 从一个Buffer对象复制到另一个Buffer对象。
        gl.COPY_WRITE_BUFFER: 从一个Buffer对象复制到另一个Buffer对象。
        gl.TRANSFORM_FEEDBACK_BUFFER: 用于转换反馈操作的Buffer。
        gl.UNIFORM_BUFFER: 用于存储统一块的Buffer。
        gl.PIXEL_PACK_BUFFER: 用于像素转换操作的Buffer。
        gl.PIXEL_UNPACK_BUFFER: 用于像素转换操作的Buffer
     * @param srcData
        一个ArrayBuffer，SharedArrayBuffer 或者 ArrayBufferView 类型的数组对象，将被复制到Buffer的数据存储区。
         如果为null，数据存储区仍会被创建，但是不会进行初始化和定义
     * @param usage
         GLenum 指定数据存储区的使用方法。可取以下值：
            gl.STATIC_DRAW: 缓冲区的内容可能经常使用，而不会经常更改。内容被写入缓冲区，但不被读取。
            gl.DYNAMIC_DRAW: 缓冲区的内容可能经常被使用，并且经常更改。内容被写入缓冲区，但不被读取。
            gl.STREAM_DRAW: 缓冲区的内容可能不会经常使用。内容被写入缓冲区，但不被读取。
            当使用 WebGL 2 context 时，可以使用以下值：
            gl.STATIC_READ: 缓冲区的内容可能经常使用，而不会经常更改。内容从缓冲区读取，但不写入。
            gl.DYNAMIC_READ: 缓冲区的内容可能经常使用，并且经常更改。内容从缓冲区读取，但不写入。
            gl.STREAM_READ: 缓冲区的内容可能不会经常使用。内容从缓冲区读取，但不写入。
            gl.STATIC_COPY: 缓冲区的内容可能经常使用，而不会经常更改。用户不会从缓冲区读取内容，也不写入。
            gl.DYNAMIC_COPY: 缓冲区的内容可能经常使用，并且经常更改。用户不会从缓冲区读取内容，也不写入。
            gl.STREAM_COPY: 缓冲区的内容可能不会经常使用。用户不会从缓冲区读取内容，也不写入
     * @param srcOffset
           GLuint 指定读取缓冲时的初始元素索引偏移量
     * @param length
            GLuint 默认为0
        @error
            如果无法创建size指定大小的数据存储区，则会抛出gl.OUT_OF_MEMORY异常。
            如果size是负值，则会抛出gl.INVALID_VALUE异常。
            如果target或usage不属于枚举值之列，则会抛出gl.INVALID_ENUM异常
     */
    function bufferDataForWebgl2(target, srcData, usage, srcOffset, length) {
        //gl.bufferData(target, srcData, usage, srcOffset, length)
    }
    GLapi.bufferDataForWebgl2 = bufferDataForWebgl2;
})(GLapi = exports.GLapi || (exports.GLapi = {}));
},{}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syPrimitives = void 0;
var Matrix_1 = require("../../Matrix");
var Shader_1 = require("./Shader");
/**
 * 绘制中心
 */
var syPrimitives;
(function (syPrimitives) {
    function applyFuncToV3Array(array, matrix, fn) {
        var len = array.length;
        var tmp = new Float32Array(3);
        for (var ii = 0; ii < len; ii += 3) {
            fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);
            array[ii] = tmp[0];
            array[ii + 1] = tmp[1];
            array[ii + 2] = tmp[2];
        }
    }
    function transformNormal(mi, v, dst) {
        dst = dst || new Float32Array(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
        dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
        dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];
        return dst;
    }
    /**
     * Reorients directions by the given matrix..
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientDirections(array, matrix) {
        applyFuncToV3Array(array, matrix, Matrix_1.glMatrix.mat4.transformDirection);
        return array;
    }
    /**
     * Reorients normals by the inverse-transpose of the given
     * matrix..
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientNormals(array, matrix) {
        var invertM = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.invert(invertM, matrix);
        applyFuncToV3Array(array, invertM, transformNormal);
        return array;
    }
    /**
     * Reorients positions by the given matrix. In other words, it
     * multiplies each vertex by the given matrix.
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientPositions(array, matrix) {
        applyFuncToV3Array(array, matrix, Matrix_1.glMatrix.mat4.transformPoint);
        return array;
    }
    /**
     * Reorients arrays by the given matrix. Assumes arrays have
     * names that contains 'pos' could be reoriented as positions,
     * 'binorm' or 'tan' as directions, and 'norm' as normals.
     *
     * @param {Object.<string, (number[]|TypedArray)>} arrays The vertices to reorient
     * @param {Matrix} matrix matrix to reorient by.
     * @return {Object.<string, (number[]|TypedArray)>} same arrays that were passed in.
     * @memberOf module:primitives
     */
    function reorientVertices(arrays, matrix) {
        Object.keys(arrays).forEach(function (name) {
            var array = arrays[name];
            if (name.indexOf('pos') >= 0) {
                reorientPositions(array, matrix);
            }
            else if (name.indexOf('tan') >= 0 || name.indexOf('binorm') >= 0) {
                reorientDirections(array, matrix);
            }
            else if (name.indexOf('norm') >= 0) {
                reorientNormals(array, matrix);
            }
        });
        return arrays;
    }
    /**
     * creates a random integer between 0 and range - 1 inclusive.
     * @param {number} range
     * @return {number} random value between 0 and range - 1 inclusive.
     */
    function randInt(range) {
        return Math.random() * range | 0;
    }
    /**
     * Creates XZ plane vertices.
     * The created plane has position, normal and uv streams.
     *
     * @param {number} [width] Width of the plane. Default = 1
     * @param {number} [depth] Depth of the plane. Default = 1
     * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
     * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
     * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {
        if (!matrix) {
            matrix = Matrix_1.glMatrix.mat4.create();
            Matrix_1.glMatrix.mat4.identity(matrix);
        }
        width = width || 1;
        depth = depth || 1;
        subdivisionsWidth = subdivisionsWidth || 1;
        subdivisionsDepth = subdivisionsDepth || 1;
        var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);
        var positions = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texcoords = Shader_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        for (var z = 0; z <= subdivisionsDepth; z++) {
            for (var x = 0; x <= subdivisionsWidth; x++) {
                var u = x / subdivisionsWidth;
                var v = z / subdivisionsDepth;
                positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);
                normals.push(0, 1, 0);
                texcoords.push(u, v);
            }
        }
        var numVertsAcross = subdivisionsWidth + 1;
        var indices = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);
        for (var z = 0; z < subdivisionsDepth; z++) {
            for (var x = 0; x < subdivisionsWidth; x++) {
                // Make triangle 1 of quad.
                indices.push((z + 0) * numVertsAcross + x, (z + 1) * numVertsAcross + x, (z + 0) * numVertsAcross + x + 1);
                // Make triangle 2 of quad.
                indices.push((z + 1) * numVertsAcross + x, (z + 1) * numVertsAcross + x + 1, (z + 0) * numVertsAcross + x + 1);
            }
        }
        var arrays = reorientVertices({
            position: positions,
            normal: normals,
            texcoord: texcoords,
            indices: indices,
        }, matrix);
        return arrays;
    }
    syPrimitives.createPlaneVertices = createPlaneVertices;
    /**
     * Creates sphere vertices.
     * The created sphere has position, normal and uv streams.
     * @param {number} radius radius of the sphere.
     * @param {number} subdivisionsAxis number of steps around the sphere.
     * @param {number} subdivisionsHeight number of vertically on the sphere.
     * @param {number} [opt_startLatitudeInRadians] where to start the
     *     top of the sphere. Default = 0.
     * @param {number} [opt_endLatitudeInRadians] Where to end the
     *     bottom of the sphere. Default = Math.PI.
     * @param {number} [opt_startLongitudeInRadians] where to start
     *     wrapping the sphere. Default = 0.
     * @param {number} [opt_endLongitudeInRadians] where to end
     *     wrapping the sphere. Default = 2 * Math.PI.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {
        if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {
            throw Error('subdivisionAxis and subdivisionHeight must be > 0');
        }
        opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;
        opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;
        opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;
        opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);
        var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;
        var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;
        // We are going to generate our sphere by iterating through its
        // spherical coordinates and generating 2 triangles for each quad on a
        // ring of the sphere.
        var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);
        var positions = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texCoords = Shader_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        // Generate the individual vertices in our vertex buffer.
        for (var y = 0; y <= subdivisionsHeight; y++) {
            for (var x = 0; x <= subdivisionsAxis; x++) {
                // Generate a vertex based on its spherical coordinates
                var u = x / subdivisionsAxis;
                var v = y / subdivisionsHeight;
                var theta = longRange * u;
                var phi = latRange * v;
                var sinTheta = Math.sin(theta);
                var cosTheta = Math.cos(theta);
                var sinPhi = Math.sin(phi);
                var cosPhi = Math.cos(phi);
                var ux = cosTheta * sinPhi;
                var uy = cosPhi;
                var uz = sinTheta * sinPhi;
                positions.push(radius * ux, radius * uy, radius * uz);
                normals.push(ux, uy, uz);
                texCoords.push(1 - u, v);
            }
        }
        var numVertsAround = subdivisionsAxis + 1;
        var indices = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);
        for (var x = 0; x < subdivisionsAxis; x++) {
            for (var y = 0; y < subdivisionsHeight; y++) {
                // Make triangle 1 of quad.
                indices.push((y + 0) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x);
                // Make triangle 2 of quad.
                indices.push((y + 1) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x + 1);
            }
        }
        return {
            position: positions,
            normal: normals,
            texcoord: texCoords,
            indices: indices,
        };
    }
    syPrimitives.createSphereVertices = createSphereVertices;
    /**
    * Array of the indices of corners of each face of a cube.
    * @type {Array.<number[]>}
    */
    var CUBE_FACE_INDICES = [
        [3, 7, 5, 1],
        [6, 2, 0, 4],
        [6, 7, 3, 2],
        [0, 1, 5, 4],
        [7, 6, 4, 5],
        [2, 3, 1, 0],
    ];
    /**
     * Creates the vertices and indices for a cube. The
     * cube will be created around the origin. (-size / 2, size / 2)
     *
     * @param {number} size Width, height and depth of the cube.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createCubeVertices(size) {
        var k = size / 2;
        var cornerVertices = [
            [-k, -k, -k],
            [+k, -k, -k],
            [-k, +k, -k],
            [+k, +k, -k],
            [-k, -k, +k],
            [+k, -k, +k],
            [-k, +k, +k],
            [+k, +k, +k],
        ];
        var faceNormals = [
            [+1, +0, +0],
            [-1, +0, +0],
            [+0, +1, +0],
            [+0, -1, +0],
            [+0, +0, +1],
            [+0, +0, -1],
        ];
        var uvCoords = [
            [1, 0],
            [0, 0],
            [0, 1],
            [1, 1],
        ];
        var numVertices = 6 * 4;
        var positions = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texCoords = Shader_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        var indices = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, 6 * 2, Uint16Array);
        for (var f = 0; f < 6; ++f) {
            var faceIndices = CUBE_FACE_INDICES[f];
            for (var v = 0; v < 4; ++v) {
                var position = cornerVertices[faceIndices[v]];
                var normal = faceNormals[f];
                var uv = uvCoords[v];
                // Each face needs all four vertices because the normals and texture
                // coordinates are not all the same.
                positions.push(position);
                normals.push(normal);
                texCoords.push(uv);
            }
            // Two triangles make a square face.
            var offset = 4 * f;
            indices.push(offset + 0, offset + 1, offset + 2);
            indices.push(offset + 0, offset + 2, offset + 3);
        }
        return {
            position: positions,
            normal: normals,
            texcoord: texCoords,
            indices: indices,
        };
    }
    syPrimitives.createCubeVertices = createCubeVertices;
    /**
     * creates a function that calls fn to create vertices and then
     * creates a bufferInfo object for them
     */
    function createBufferInfoFunc(fn) {
        return function () {
            var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));
            return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
        };
    }
    function createSphereBufferInfo(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {
        var arrays = createSphereVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createSphereBufferInfo = createSphereBufferInfo;
    function createPlaneBufferInfo(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {
        var arrays = createPlaneVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createPlaneBufferInfo = createPlaneBufferInfo;
    function createCubeBufferInfo(size) {
        var arrays = createCubeVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createCubeBufferInfo = createCubeBufferInfo;
    /**
     * return {
    create3DFBufferInfo: createBufferInfoFunc(create3DFVertices),
    create3DFBuffer: createBufferFunc(create3DFVertices),
    create3DFVertices,
    create3DFWithVertexColorsBufferInfo: createFlattenedFunc(create3DFVertices),
    createCubeBufferInfo: createBufferInfoFunc(createCubeVertices),
    createCubeBuffers: createBufferFunc(createCubeVertices),
    createCubeVertices,
    createCubeWithVertexColorsBufferInfo: createFlattenedFunc(createCubeVertices),
    createPlaneBufferInfo: createBufferInfoFunc(createPlaneVertices),
    createPlaneBuffers: createBufferFunc(createPlaneVertices),
    createPlaneVertices,
    createPlaneWithVertexColorsBufferInfo: createFlattenedFunc(createPlaneVertices),
    createXYQuadBufferInfo: createBufferInfoFunc(createXYQuadVertices),
    createXYQuadBuffers: createBufferFunc(createXYQuadVertices),
    createXYQuadVertices,
    createXYQuadWithVertexColorsBufferInfo: createFlattenedFunc(createXYQuadVertices),
    createSphereBufferInfo: createBufferInfoFunc(createSphereVertices),
    createSphereBuffers: createBufferFunc(createSphereVertices),
    createSphereVertices,
    createSphereWithVertexColorsBufferInfo: createFlattenedFunc(createSphereVertices),
    createTruncatedConeBufferInfo: createBufferInfoFunc(createTruncatedConeVertices),
    createTruncatedConeBuffers: createBufferFunc(createTruncatedConeVertices),
    createTruncatedConeVertices,
    createTruncatedConeWithVertexColorsBufferInfo: createFlattenedFunc(createTruncatedConeVertices),
    deindexVertices,
    flattenNormals,
    makeRandomVertexColors,
    reorientDirections,
    reorientNormals,
    reorientPositions,
    reorientVertices,
  };
     */
})(syPrimitives = exports.syPrimitives || (exports.syPrimitives = {}));
},{"../../Matrix":5,"./Shader":22}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shader = exports.G_ShaderFactory = exports.BufferAttribsData = exports.ShaderData = void 0;
var GLEnums_1 = require("../gfx/GLEnums");
var GLapi_1 = require("../gfx/GLapi");
var ShaderType;
(function (ShaderType) {
    ShaderType[ShaderType["VERTEX"] = 1] = "VERTEX";
    ShaderType[ShaderType["FRAGMENT"] = 2] = "FRAGMENT";
})(ShaderType || (ShaderType = {}));
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec3 a_normal;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MVMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'varying vec3 v_normal;' +
    'varying vec2 v_uv;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_MVMatrix * vec4(a_position, 1.0);' +
    'v_uv = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 v_uv;' +
    'uniform samplerCube u_skybox;' +
    'uniform sampler2D u_texCoord;' +
    'uniform mat4 u_PVM_Matrix_Inverse;' +
    'uniform vec4 u_color;' +
    'uniform vec4 u_color_dir;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, v_uv);' +
    '}';
var ShaderData = /** @class */ (function () {
    function ShaderData(spGLID, index) {
        this._textureUnit = 0;
        this._index = -1;
        this._spGLID = spGLID;
        this._textureUnit = 0;
        this._index = index;
    }
    Object.defineProperty(ShaderData.prototype, "spGlID", {
        get: function () {
            return this._spGLID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "textureUnit", {
        get: function () {
            return this._textureUnit;
        },
        enumerable: false,
        configurable: true
    });
    ShaderData.prototype.addTextureUnit = function () {
        var before = this._textureUnit;
        this._textureUnit++;
        return before;
    };
    Object.defineProperty(ShaderData.prototype, "uniSetters", {
        get: function () {
            return this._uniformSetters;
        },
        set: function (set) {
            this._uniformSetters = set;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "attrSetters", {
        get: function () {
            return this._attribSetters;
        },
        set: function (set) {
            this._attribSetters = set;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "Index", {
        get: function () {
            return this._index;
        },
        enumerable: false,
        configurable: true
    });
    return ShaderData;
}());
exports.ShaderData = ShaderData;
var BufferAttribsData = /** @class */ (function () {
    function BufferAttribsData(attribs, numElements, indices) {
        this.attribs = attribs;
        this.numElements = numElements;
        this.indices = indices;
    }
    return BufferAttribsData;
}());
exports.BufferAttribsData = BufferAttribsData;
/**
 * shader工厂
 */
var ShaderFactory = /** @class */ (function () {
    function ShaderFactory() {
        this.texcoordRE = /coord|texture/i;
        this.colorRE = /color|colour/i;
        /**
         * tries to get the number of elements from a set of arrays.
         */
        this.positionKeys = ['position', 'positions', 'a_position'];
    }
    ShaderFactory.prototype.init = function (gl) {
        this._gl = gl;
        this._shaderData = [];
    };
    /**
     * 获取一个shaderData
     * @param index
     */
    ShaderFactory.prototype.getShareDataByIndex = function (index) {
        var ret;
        this._shaderData.forEach(function (value, index) {
            if (value.Index == index) {
                ret = value;
            }
        });
        return ret;
    };
    /**
     * 获取一个shaderData
     * @param glID
     */
    ShaderFactory.prototype.getShareDataByGlID = function (glID) {
        var ret;
        this._shaderData.forEach(function (value, index) {
            if (value.spGlID == glID) {
                ret = value;
            }
        });
        return ret;
    };
    /**
     * 生成一个shaderData
     * @param GLID
     * @param textureUnit
     * @param USet
     * @param ASet
     */
    ShaderFactory.prototype.createShaderData = function (GLID) {
        var ret = this.getShareDataByGlID(GLID);
        if (ret == null) {
            var index = this._shaderData.length;
            var res = new ShaderData(GLID, index);
            this._shaderData.push(res);
            return res;
        }
        return ret;
    };
    /**
    *
    * @param shaderType shader的类型 1代表顶点着色器 2代表像素着色器
    * @param shaderSource shader的源码
    */
    ShaderFactory.prototype.loadShader = function (shaderType, shaderSource) {
        // 创建着色器
        var shader;
        if (shaderType == ShaderType.FRAGMENT) {
            shader = this._gl.createShader(this._gl.FRAGMENT_SHADER);
        }
        else if (shaderType == ShaderType.VERTEX) {
            shader = this._gl.createShader(this._gl.VERTEX_SHADER);
        }
        else {
            return null;
        }
        // 编译着色器
        this._gl.shaderSource(shader, shaderSource);
        this._gl.compileShader(shader);
        // 判断编译是否成功
        if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS)) {
            alert(this._gl.getShaderInfoLog(shader));
            return null;
        }
        return shader;
    };
    /**
     *
     * @param vertextCode 顶点shader
     * @param fragCode 片段shader
     */
    ShaderFactory.prototype.createShader = function (vertextCode, fragCode) {
        if (vertextCode === void 0) { vertextCode = vertextBaseCode; }
        if (fragCode === void 0) { fragCode = fragBaseCode; }
        // 从 DOM 上创建对应的着色器
        var vertexShader = this.loadShader(ShaderType.VERTEX, vertextCode);
        var fragmentShader = this.loadShader(ShaderType.FRAGMENT, fragCode);
        // 创建程序并连接着色器
        var shaderGLID = this._gl.createProgram();
        this._gl.attachShader(shaderGLID, vertexShader);
        this._gl.attachShader(shaderGLID, fragmentShader);
        this._gl.linkProgram(shaderGLID);
        // 连接失败的检测
        if (!this._gl.getProgramParameter(shaderGLID, this._gl.LINK_STATUS)) {
            alert("Failed to setup shaders");
        }
        return shaderGLID;
    };
    ShaderFactory.prototype.onCreateShader = function () {
    };
    ShaderFactory.prototype.destroyShder = function (shaderProgram) {
    };
    ShaderFactory.prototype.createAttribSetter = function (index) {
        var gl = this._gl;
        return function (b) {
            if (b.value) {
                gl.disableVertexAttribArray(index);
                switch (b.value.length) {
                    case 4:
                        gl.vertexAttrib4fv(index, b.value);
                        break;
                    case 3:
                        gl.vertexAttrib3fv(index, b.value);
                        break;
                    case 2:
                        gl.vertexAttrib2fv(index, b.value);
                        break;
                    case 1:
                        gl.vertexAttrib1fv(index, b.value);
                        break;
                    default:
                        throw new Error('the length of a float constant value must be between 1 and 4!');
                }
            }
            else {
                gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);
                gl.enableVertexAttribArray(index);
                gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);
            }
        };
    };
    ShaderFactory.prototype.createAttributeSetters = function (shaderData) {
        var gl = this._gl;
        var program = shaderData.spGlID;
        var attribSetters = {};
        var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        for (var ii = 0; ii < numAttribs; ++ii) {
            var attribInfo = gl.getActiveAttrib(program, ii);
            if (!attribInfo) {
                break;
            }
            var index = gl.getAttribLocation(program, attribInfo.name);
            attribSetters[attribInfo.name] = this.createAttribSetter(index);
        }
        return attribSetters;
    };
    /**
   * Returns the corresponding bind point for a given sampler type
   */
    ShaderFactory.prototype.getBindPointForSamplerType = function (gl, type) {
        if (type === gl.SAMPLER_2D)
            return gl.TEXTURE_2D; // eslint-disable-line
        if (type === gl.SAMPLER_CUBE)
            return gl.TEXTURE_CUBE_MAP; // eslint-disable-line
        return undefined;
    };
    /**
       * Creates a setter for a uniform of the given program with it's
       * location embedded in the setter.
       * @param {WebGLProgram} program
       * @param {WebGLUniformInfo} uniformInfo
       * @returns {function} the created setter.
       */
    ShaderFactory.prototype.createUniformSetter = function (uniformInfo, shaderData) {
        var gl = this._gl;
        var program = shaderData.spGlID;
        var location = gl.getUniformLocation(program, uniformInfo.name);
        var type = uniformInfo.type;
        // Check if this uniform is an array
        var isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');
        if (type === gl.FLOAT && isArray) {
            return function (v) {
                gl.uniform1fv(location, v);
            };
        }
        if (type === gl.FLOAT) {
            return function (v) {
                gl.uniform1f(location, v);
            };
        }
        if (type === gl.FLOAT_VEC2) {
            return function (v) {
                gl.uniform2fv(location, v);
            };
        }
        if (type === gl.FLOAT_VEC3) {
            return function (v) {
                gl.uniform3fv(location, v);
            };
        }
        if (type === gl.FLOAT_VEC4) {
            return function (v) {
                gl.uniform4fv(location, v);
            };
        }
        if (type === gl.INT && isArray) {
            return function (v) {
                gl.uniform1iv(location, v);
            };
        }
        if (type === gl.INT) {
            return function (v) {
                gl.uniform1i(location, v);
            };
        }
        if (type === gl.INT_VEC2) {
            return function (v) {
                gl.uniform2iv(location, v);
            };
        }
        if (type === gl.INT_VEC3) {
            return function (v) {
                gl.uniform3iv(location, v);
            };
        }
        if (type === gl.INT_VEC4) {
            return function (v) {
                gl.uniform4iv(location, v);
            };
        }
        if (type === gl.BOOL) {
            return function (v) {
                gl.uniform1iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC2) {
            return function (v) {
                gl.uniform2iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC3) {
            return function (v) {
                gl.uniform3iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC4) {
            return function (v) {
                gl.uniform4iv(location, v);
            };
        }
        if (type === gl.FLOAT_MAT2) {
            return function (v) {
                gl.uniformMatrix2fv(location, false, v);
            };
        }
        if (type === gl.FLOAT_MAT3) {
            return function (v) {
                gl.uniformMatrix3fv(location, false, v);
            };
        }
        if (type === gl.FLOAT_MAT4) {
            return function (v) {
                gl.uniformMatrix4fv(location, false, v);
            };
        }
        if ((type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) && isArray) {
            var units = [];
            for (var ii = 0; ii < uniformInfo.size; ++ii) {
                units.push(shaderData.addTextureUnit());
            }
            return function (bindPoint, units) {
                return function (textures) {
                    gl.uniform1iv(location, units);
                    textures.forEach(function (texture, index) {
                        gl.activeTexture(gl.TEXTURE0 + units[index]);
                        gl.bindTexture(bindPoint, texture);
                    });
                };
            }(this.getBindPointForSamplerType(gl, type), units);
        }
        if (type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) {
            return function (bindPoint, unit) {
                return function (texture) {
                    gl.uniform1i(location, unit);
                    gl.activeTexture(gl.TEXTURE0 + unit);
                    gl.bindTexture(bindPoint, texture);
                };
            }(this.getBindPointForSamplerType(gl, type), shaderData.addTextureUnit());
        }
        throw ('unknown type: 0x' + type.toString(16)); // we should never get here.
    };
    /**
     * uniform变量设置器
     */
    ShaderFactory.prototype.createUniformSetters = function (shaderData) {
        var program = shaderData.spGlID;
        var gl = this._gl;
        var uniformSetters = {};
        var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for (var ii = 0; ii < numUniforms; ++ii) {
            var uniformInfo = gl.getActiveUniform(program, ii);
            if (!uniformInfo) {
                break;
            }
            var name_1 = uniformInfo.name;
            // remove the array suffix.
            if (name_1.substr(-3) === '[0]') {
                name_1 = name_1.substr(0, name_1.length - 3);
            }
            var setter = this.createUniformSetter(uniformInfo, shaderData);
            uniformSetters[name_1] = setter;
        }
        return uniformSetters;
    };
    /**
     * 创建一个shader
     * @param vs
     * @param fs
     */
    ShaderFactory.prototype.createProgramInfo = function (vs, fs) {
        var glID = this.createShader(vs, fs);
        var shaderData = this.createShaderData(glID);
        var uniformSetters = this.createUniformSetters(shaderData);
        var attribSetters = this.createAttributeSetters(shaderData);
        shaderData.uniSetters = uniformSetters;
        shaderData.attrSetters = attribSetters;
        return shaderData;
    };
    ShaderFactory.prototype.getShaderProgram = function (index) {
        return this.getShareDataByIndex(index).spGlID;
    };
    //设置attribute变量
    ShaderFactory.prototype.setBuffersAndAttributes = function (attribSetters, buffers) {
        var gl = this._gl;
        var attribs = buffers.attribs;
        var setters = attribSetters;
        Object.keys(attribs).forEach(function (name) {
            var setter = setters[name];
            if (setter) {
                setter(attribs[name]);
            }
        });
        if (buffers.indices) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);
        }
    };
    //设置uniform变量
    ShaderFactory.prototype.setUniforms = function (uniformSetters) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var setters = uniformSetters;
        var _loop_1 = function (uniforms) {
            Object.keys(uniforms).forEach(function (name) {
                var setter = setters[name];
                if (setter) {
                    setter(uniforms[name]);
                }
            });
        };
        for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
            var uniforms = values_1[_a];
            _loop_1(uniforms);
        }
    };
    //启动顶点着色器绘制
    ShaderFactory.prototype.drawBufferInfo = function (bufferInfo, primitiveType, count, offset) {
        var gl = this._gl;
        var indices = bufferInfo.indices;
        primitiveType = primitiveType === undefined ? gl.TRIANGLES : primitiveType;
        var numElements = count === undefined ? bufferInfo.numElements : count;
        offset = offset === undefined ? 0 : offset;
        if (indices) {
            gl.drawElements(primitiveType, numElements, gl.UNSIGNED_SHORT, offset);
        }
        else {
            gl.drawArrays(primitiveType, offset, numElements);
        }
    };
    //ext---------------------------------------------------------------------------------
    // Add `push` to a typed array. It just keeps a 'cursor'
    // and allows use to `push` values into the array so we
    // don't have to manually compute offsets
    ShaderFactory.prototype.augmentTypedArray = function (typedArray, numComponents) {
        var cursor = 0;
        typedArray.push = function () {
            for (var ii = 0; ii < arguments.length; ++ii) {
                var value = arguments[ii];
                if (value instanceof Array || (value.buffer && value.buffer instanceof ArrayBuffer)) {
                    for (var jj = 0; jj < value.length; ++jj) {
                        typedArray[cursor++] = value[jj];
                    }
                }
                else {
                    typedArray[cursor++] = value;
                }
            }
        };
        typedArray.reset = function (opt_index) {
            cursor = opt_index || 0;
        };
        typedArray.numComponents = numComponents;
        Object.defineProperty(typedArray, 'numElements', {
            get: function () {
                return this.length / this.numComponents | 0;
            },
        });
        return typedArray;
    };
    /**
    * creates a typed array with a `push` function attached
    * so that you can easily *push* values.
    *
    * `push` can take multiple arguments. If an argument is an array each element
    * of the array will be added to the typed array.
    *
    * Example:
    *
    *     let array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values
    *     array.push(1, 2, 3);
    *     array.push([4, 5, 6]);
    *     // array now contains [1, 2, 3, 4, 5, 6]
    *
    * Also has `numComponents` and `numElements` properties.
    *
    * @param {number} numComponents number of components
    * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.
    * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.
    * @return {ArrayBuffer} A typed array.
    * @memberOf module:webgl-utils
    */
    ShaderFactory.prototype.createAugmentedTypedArray = function (numComponents, numElements, opt_type) {
        var Type = opt_type || Float32Array;
        return this.augmentTypedArray(new Type(numComponents * numElements), numComponents);
    };
    ShaderFactory.prototype.getArray = function (array) {
        return array.length ? array : array.data;
    };
    ShaderFactory.prototype.guessNumComponentsFromName = function (name, length) {
        var numComponents;
        if (this.texcoordRE.test(name)) {
            numComponents = 2;
        }
        else if (this.colorRE.test(name)) {
            numComponents = 4;
        }
        else {
            numComponents = 3; // position, normals, indices ...
        }
        if (length % numComponents > 0) {
            throw new Error("Can not guess numComponents for attribute '" + name + "'. Tried " + numComponents + " but " + length + " values is not evenly divisible by " + numComponents + ". You should specify it.");
        }
        return numComponents;
    };
    ShaderFactory.prototype.getNumComponents = function (array, arrayName) {
        return array.numComponents || array.size || this.guessNumComponentsFromName(arrayName, this.getArray(array).length);
    };
    ShaderFactory.prototype.getNumElementsFromNonIndexedArrays = function (arrays) {
        var key;
        for (var _i = 0, _a = this.positionKeys; _i < _a.length; _i++) {
            var k = _a[_i];
            if (k in arrays) {
                key = k;
                break;
            }
        }
        key = key || Object.keys(arrays)[0];
        var array = arrays[key];
        var length = this.getArray(array).length;
        var numComponents = this.getNumComponents(array, key);
        var numElements = length / numComponents;
        if (length % numComponents > 0) {
            throw new Error("numComponents " + numComponents + " not correct for length " + length);
        }
        return numElements;
    };
    ShaderFactory.prototype.getGLTypeForTypedArray = function (gl, typedArray) {
        if (typedArray instanceof Int8Array) {
            return gl.BYTE;
        } // eslint-disable-line
        if (typedArray instanceof Uint8Array) {
            return gl.UNSIGNED_BYTE;
        } // eslint-disable-line
        if (typedArray instanceof Int16Array) {
            return gl.SHORT;
        } // eslint-disable-line
        if (typedArray instanceof Uint16Array) {
            return gl.UNSIGNED_SHORT;
        } // eslint-disable-line
        if (typedArray instanceof Int32Array) {
            return gl.INT;
        } // eslint-disable-line
        if (typedArray instanceof Uint32Array) {
            return gl.UNSIGNED_INT;
        } // eslint-disable-line
        if (typedArray instanceof Float32Array) {
            return gl.FLOAT;
        } // eslint-disable-line
        throw 'unsupported typed array type';
    };
    // This is really just a guess. Though I can't really imagine using
    // anything else? Maybe for some compression?
    ShaderFactory.prototype.getNormalizationForTypedArray = function (typedArray) {
        if (typedArray instanceof Int8Array) {
            return true;
        } // eslint-disable-line
        if (typedArray instanceof Uint8Array) {
            return true;
        } // eslint-disable-line
        return false;
    };
    ShaderFactory.prototype.isArrayBuffer = function (a) {
        return a.buffer && a.buffer instanceof ArrayBuffer;
    };
    ShaderFactory.prototype.createBufferFromTypedArray = function (gl, array, type, drawType) {
        type = type || gl.ARRAY_BUFFER;
        var buffer = gl.createBuffer();
        gl.bindBuffer(type, buffer);
        gl.bufferData(type, array, drawType || gl.STATIC_DRAW);
        return buffer;
    };
    ShaderFactory.prototype.allButIndices = function (name) {
        return name !== 'indices';
    };
    ShaderFactory.prototype.createMapping = function (obj) {
        var mapping = {};
        Object.keys(obj).filter(this.allButIndices).forEach(function (key) {
            mapping['a_' + key] = key;
        });
        return mapping;
    };
    ShaderFactory.prototype.makeTypedArray = function (array, name) {
        if (this.isArrayBuffer(array)) {
            return array;
        }
        if (array.data && this.isArrayBuffer(array.data)) {
            return array.data;
        }
        if (Array.isArray(array)) {
            array = {
                data: array,
            };
        }
        if (!array.numComponents) {
            array.numComponents = this.guessNumComponentsFromName(name, array.length);
        }
        var type = array.type;
        if (!type) {
            if (name === 'indices') {
                type = Uint16Array;
            }
        }
        var typedArray = this.createAugmentedTypedArray(array.numComponents, array.data.length / array.numComponents | 0, type);
        typedArray.push(array.data);
        return typedArray;
    };
    ShaderFactory.prototype.createAttribsFromArrays = function (gl, arrays, opt_mapping) {
        var _this = this;
        var mapping = opt_mapping || this.createMapping(arrays);
        var attribs = {};
        Object.keys(mapping).forEach(function (attribName) {
            var bufferName = mapping[attribName];
            var origArray = arrays[bufferName];
            if (origArray.value) {
                attribs[attribName] = {
                    value: origArray.value,
                };
            }
            else {
                var array = _this.makeTypedArray(origArray, bufferName);
                attribs[attribName] = {
                    buffer: _this.createBufferFromTypedArray(gl, array),
                    numComponents: origArray.numComponents || array.numComponents || _this.guessNumComponentsFromName(bufferName),
                    type: _this.getGLTypeForTypedArray(gl, array),
                    normalize: _this.getNormalizationForTypedArray(array),
                };
            }
        });
        return attribs;
    };
    ShaderFactory.prototype.createBufferInfoFromArrays = function (arrays, opt_mapping) {
        var gl = this._gl;
        var bufferInfo = {
            attribs: this.createAttribsFromArrays(gl, arrays, opt_mapping),
        };
        var indices = arrays.indices;
        if (indices) {
            indices = this.makeTypedArray(indices, 'indices');
            bufferInfo.indices = this.createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);
            bufferInfo.numElements = indices.length;
        }
        else {
            bufferInfo.numElements = this.getNumElementsFromNonIndexedArrays(arrays);
        }
        return new BufferAttribsData(bufferInfo.attribs, bufferInfo.numElements, bufferInfo.indices);
    };
    return ShaderFactory;
}());
exports.G_ShaderFactory = new ShaderFactory();
var Shader = /** @class */ (function () {
    function Shader(gl, glID) {
        this.USE_NORMAL = false; //法线
        this.USE_LIGHT = false; //光照
        this.USE_SKYBOX = false; //天空盒
        this._gl = gl;
        this._spGLID = glID;
        this.onCreateShader();
    }
    /**
     * 创建一个shader
     * @param vert
     * @param frag
     */
    Shader.create = function (vert, frag) {
        var glID = exports.G_ShaderFactory.createShader(vert, frag);
        return new Shader(exports.G_ShaderFactory._gl, glID);
    };
    Shader.prototype.onCreateShader = function () {
        var shaderProgramGLID = this._spGLID;
        var gl = this._gl;
        this.a_position_loc = gl.getAttribLocation(shaderProgramGLID, "a_position" /* POSITION */);
        this.a_normal_loc = gl.getAttribLocation(shaderProgramGLID, "a_normal" /* NORMAL */);
        this.a_uv_loc = gl.getAttribLocation(shaderProgramGLID, "a_uv" /* UV */);
        this.a_tangent_loc = gl.getAttribLocation(shaderProgramGLID, "a_tangent" /* TANGENT */);
        this.u_color_loc = gl.getUniformLocation(shaderProgramGLID, "u_color" /* COLOR */);
        this.u_color_dir_loc = gl.getUniformLocation(shaderProgramGLID, "u_color_dir" /* COLOR_DIR */);
        this.u_MVMatrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_MVMatrix" /* MVMatrix */);
        this.u_PMatrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_PMatrix" /* PMatrix */);
        this.u_texCoord_loc = gl.getUniformLocation(shaderProgramGLID, "u_texCoord" /* TEX_COORD */);
        this.u_skybox_loc = gl.getUniformLocation(shaderProgramGLID, "u_skybox" /* SKYBOX */);
        this.u_pvm_matrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_PVM_Matrix" /* PMV_MATRIX */);
        this.u_pvm_matrix_inverse_loc = gl.getUniformLocation(shaderProgramGLID, "u_PVM_Matrix_Inverse" /* PMV_MATRIX_INVERSE */);
        this.u_MMatrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_MMatrix" /* MMatrix */);
        this.u_VMatrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_VMatrix" /* VMatrix */);
    };
    Shader.prototype.getCustomAttributeLocation = function (varName) {
        return this._gl.getAttribLocation(this._spGLID, varName);
    };
    Shader.prototype.getGLID = function () {
        return this._spGLID;
    };
    /**
     * 检查shader中变量的位置是否有效
     * @param loc
     */
    Shader.prototype.checklocValid = function (loc, tagName) {
        var result = !(loc == null || loc < 0);
        if (!result && this.isShowDebugLog) {
            console.error("err-------", loc, tagName);
        }
        return result;
    };
    Shader.prototype.checkGLIDValid = function (glID) {
        return (glID == null || glID <= 0) ? false : true;
    };
    //启用属性从缓冲区中获取数据的功能
    Shader.prototype.enableVertexAttribute = function () {
        if (this.checklocValid(this.a_position_loc, "a_position_loc")) { // 设定为数组类型的变量数据
            this._gl.enableVertexAttribArray(this.a_position_loc);
        }
        if (this.checklocValid(this.a_uv_loc, "a_uv_loc")) {
            this._gl.enableVertexAttribArray(this.a_uv_loc);
        }
        if (this.checklocValid(this.a_normal_loc, "a_normal_loc")) {
            this._gl.enableVertexAttribArray(this.a_normal_loc);
        }
    };
    //shader中所有的attributes变量
    Shader.prototype.updateAttributes = function (shaderProgramGLID) {
        var gl = this._gl;
        var numAttribs = gl.getProgramParameter(shaderProgramGLID, gl.ACTIVE_ATTRIBUTES);
        for (var ii = 0; ii < numAttribs; ++ii) {
            var attribInfo = gl.getActiveAttrib(shaderProgramGLID, ii);
            if (!attribInfo) {
                break;
            }
            console.log("attribInfo--", attribInfo.name);
            var index = gl.getAttribLocation(shaderProgramGLID, attribInfo.name);
        }
    };
    //激活shader
    Shader.prototype.active = function () {
        this.disableVertexAttribArray();
        this.enableVertexAttribute();
        this._gl.useProgram(this._spGLID);
    };
    /**
     *
     * @param color 光的颜色
     * @param direction 光的方向
     */
    Shader.prototype.setUseLight = function (color, direction) {
        if (color === void 0) { color = [0.2, 1, 0.2, 1]; }
        if (direction === void 0) { direction = [0.5, 0.7, 1]; }
        if (!this.USE_LIGHT || !this.checklocValid(this.u_color_loc, "u_color_loc") || !this.checklocValid(this.u_color_dir_loc, "u_color_dir_loc")) {
            return;
        }
        // Set the color to use
        this._gl.uniform4fv(this.u_color_loc, color); // green
        // set the light direction.
        this._gl.uniform3fv(this.u_color_dir_loc, direction);
    };
    Shader.prototype.setUseSkyBox = function (u_pvm_matrix_inverse) {
        var gl = this._gl;
        gl.enable(gl.CULL_FACE);
        gl.enable(gl.DEPTH_TEST);
        // Set the uniforms
        gl.uniformMatrix4fv(this.u_pvm_matrix_inverse_loc, false, u_pvm_matrix_inverse);
        // Tell the shader to use texture unit 0 for u_skybox
        gl.uniform1i(this.u_skybox_loc, 0);
        // let our quad pass the depth test at 1.0
        gl.depthFunc(gl.LEQUAL);
    };
    //设置使用投影视口模型矩阵
    Shader.prototype.setUseProjectViewModelMatrix = function (pvmMatrix) {
        if (this.checklocValid(this.u_pvm_matrix_loc, "u_pvm_matrix_loc")) {
            this._gl.uniformMatrix4fv(this.u_pvm_matrix_loc, false, pvmMatrix);
        }
    };
    //设置光照
    Shader.prototype.setUseColor = function (uColor) {
        if (this.checklocValid(this.u_color_loc, "u_color_loc")) {
            this._gl.uniform4fv(this.u_color_loc, uColor);
        }
    };
    //设置模型视口矩阵
    Shader.prototype.setUseModelViewMatrix = function (mvMatrix) {
        if (this.checklocValid(this.u_MVMatrix_loc, "u_MVMatrix_loc")) {
            this._gl.uniformMatrix4fv(this.u_MVMatrix_loc, false, mvMatrix);
        }
    };
    //设置透视投影矩阵
    Shader.prototype.setUseProjectionMatrix = function (projMatrix) {
        if (this.checklocValid(this.u_PMatrix_loc, "u_PMatrix_loc")) {
            this._gl.uniformMatrix4fv(this.u_PMatrix_loc, false, projMatrix);
        }
    };
    //设置顶点值
    Shader.prototype.setUseVertexAttribPointerForVertex = function (glID, itemSize) {
        if (!this.checkGLIDValid(glID))
            return;
        if (this.checklocValid(this.a_position_loc, "a_position_loc")) {
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, glID);
            this._gl.enableVertexAttribArray(this.a_position_loc);
            GLapi_1.GLapi.vertexAttribPointer(this.a_position_loc, itemSize, this._gl.FLOAT, false, 0, 0);
        }
    };
    //设置法线值
    Shader.prototype.setUseVertexAttriPointerForNormal = function (glID, itemSize) {
        if (!this.checkGLIDValid(glID))
            return;
        /**
         * localtion:shader中attribute声明变量的位置
         * size:每次迭代使用的单位数据
         * type:单位数据类型
         * normallize:单位化（【0-255】--》【0-1】）
         * stride:每次迭代跳多少个数据到下一个数据
         * offset:从绑定缓冲区的偏移位置
         */
        if (this.checklocValid(this.a_normal_loc, "a_normal_loc")) {
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, glID);
            this._gl.enableVertexAttribArray(this.a_normal_loc);
            this._gl.vertexAttribPointer(this.a_normal_loc, itemSize, this._gl.FLOAT, false, 0, 0);
        }
    };
    //设置uv值
    Shader.prototype.setUseVertexAttribPointerForUV = function (glID, itemSize) {
        if (!this.checkGLIDValid(glID))
            return;
        if (this.checklocValid(this.a_uv_loc, "a_uv_loc")) {
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, glID);
            this._gl.enableVertexAttribArray(this.a_uv_loc);
            this._gl.vertexAttribPointer(this.a_uv_loc, itemSize, this._gl.FLOAT, false, 0, 0);
        }
    };
    //设置使用的纹理
    //注意如果此处不重新设置使用的纹理，那么会默认使用上一次绘制时的纹理
    Shader.prototype.setUseTexture = function (glID, pos) {
        if (pos === void 0) { pos = 0; }
        if (!this.checkGLIDValid(glID))
            return;
        /**
          * activeTexture必须在bindTexture之前。如果没activeTexture就bindTexture，会默认绑定到0号纹理单元
        */
        if (this.checklocValid(this.u_texCoord_loc, "u_texCoord_loc")) {
            // 激活 0 号纹理单元
            this._gl.activeTexture(this._gl[GLEnums_1.glTEXTURE_UNIT_VALID[pos]]);
            // 指定当前操作的贴图
            this._gl.bindTexture(this._gl.TEXTURE_2D, glID);
            this._gl.uniform1i(this.u_texCoord_loc, pos);
        }
    };
    Shader.prototype.disableVertexAttribArray = function () {
        if (this.checklocValid(this.a_position_loc, "a_position_loc")) { // 设定为数组类型的变量数据
            this._gl.disableVertexAttribArray(this.a_position_loc);
        }
        if (this.checklocValid(this.a_uv_loc, "a_uv_loc")) {
            this._gl.disableVertexAttribArray(this.a_uv_loc);
        }
        if (this.checklocValid(this.a_normal_loc, "a_normal_loc")) {
            this._gl.disableVertexAttribArray(this.a_normal_loc);
        }
    };
    return Shader;
}());
exports.Shader = Shader;
},{"../gfx/GLEnums":19,"../gfx/GLapi":20}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MathUtils = void 0;
/**
 * 数学库工具类
 */
var MathUtils;
(function (MathUtils) {
    /**
     * 求弧度
     * @param deg 角度
     */
    function degToRad(deg) {
        return deg * Math.PI / 180;
    }
    MathUtils.degToRad = degToRad;
    function px(v) {
        return (v | 0) + "px";
    }
    MathUtils.px = px;
    function radToDeg(r) {
        return r * 180 / Math.PI;
    }
    MathUtils.radToDeg = radToDeg;
})(MathUtils = exports.MathUtils || (exports.MathUtils = {}));
},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
