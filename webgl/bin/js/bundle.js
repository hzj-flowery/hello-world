(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Matrix_1 = require("./core/Matrix");
var RenderData_1 = require("./core/renderer/base/RenderData");
var CameraModel_1 = require("./core/renderer/camera/CameraModel");
var GameMainCamera_1 = require("./core/renderer/camera/GameMainCamera");
var GLapi_1 = require("./core/renderer/gfx/GLapi");
var Shader_1 = require("./core/renderer/shader/Shader");
/**
* _attach
*/
function _attach(gl, location, attachment, face) {
    if (face === void 0) { face = 0; }
    // if (attachment instanceof Texture2D) {
    //     gl.framebufferTexture2D(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.TEXTURE_2D,
    //         attachment._glID,
    //         0
    //     );
    // } 
    // else if (attachment instanceof TextureCube) {
    //     gl.framebufferTexture2D(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.TEXTURE_CUBE_MAP_POSITIVE_X + face,
    //         attachment._glID,
    //         0
    //     );
    // } else {
    //     gl.framebufferRenderbuffer(
    //         gl.FRAMEBUFFER,
    //         location,
    //         gl.RENDERBUFFER,
    //         attachment._glID
    //     );
    // }
}
var Device = /** @class */ (function () {
    function Device() {
        this._width = 0;
        this._height = 0;
        this._isCapture = false;
        this._temp1Matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp2Matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._temp3Matrix = Matrix_1.glMatrix.mat4.identity(null);
        this._curGLID = -1;
        this._renderData = []; //绘制的数据
        //copy-------------------------------------------------------------------------------------------------
        this._caps = {
            maxVertexStreams: 4,
            maxVertexTextures: 0,
            maxFragUniforms: 0,
            maxTextureUnits: 0,
            maxVertexAttribs: 0,
            maxTextureSize: 0,
            maxDrawBuffers: 0,
            maxColorAttachments: 0
        };
        this._extensions = [];
    }
    ;
    Object.defineProperty(Device, "Instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new Device();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    Device.prototype.init = function () {
        var canvas = window["canvas"];
        var gl = this.createGLContext(canvas);
        this.gl = gl;
        this.canvas = canvas;
        GLapi_1.GLapi.bindGL(gl);
        canvas.onmousedown = this.onMouseDown.bind(this);
        canvas.onmousemove = this.onMouseMove.bind(this);
        canvas.onmouseup = this.onMouseUp.bind(this);
        this._width = canvas.clientWidth;
        this._height = canvas.clientHeight;
        console.log("画布的尺寸----", this._width, this._height);
        this.initExt();
        this.initMatrix();
    };
    //初始化矩阵
    Device.prototype.initMatrix = function () {
        this._temp_model_view_matrix = Matrix_1.glMatrix.mat4.identity(null);
    };
    Device.prototype.getWebglContext = function () {
        return this.canvas.getContext("webgl");
    };
    Object.defineProperty(Device.prototype, "Width", {
        get: function () {
            return this._width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "Height", {
        get: function () {
            return this._height;
        },
        enumerable: false,
        configurable: true
    });
    //获取webgl画笔的类型
    Device.prototype.getContextType = function () {
        if (this.gl instanceof WebGL2RenderingContext) {
            return "webgl2";
        }
        else if (this.gl instanceof WebGLRenderingContext) {
            return "webgl";
        }
    };
    //创建webgl画笔
    Device.prototype.createGLContext = function (canvas) {
        var names = ["webgl2", "webgl", "experimental-webgl"];
        var context = null;
        for (var i = 0; i < names.length; i++) {
            try {
                console.log("-names---", names[i]);
                context = canvas.getContext(names[i]);
            }
            catch (e) { }
            if (context) {
                break;
            }
        }
        if (context) {
            //添加动态属性记录画布的大小
            context.viewportWidth = canvas.width;
            context.viewportHeight = canvas.height;
        }
        else {
            alert("Failed to create WebGL context!");
        }
        return context;
    };
    Device.prototype.onMouseDown = function (ev) {
        this._isCapture = true;
    };
    Device.prototype.onMouseMove = function (ev) {
    };
    Device.prototype.onMouseUp = function (ev) {
        this._isCapture = false;
    };
    /**
     * 将结果绘制到UI上
     */
    Device.prototype.drawToUI = function (time, scene2D, scene3D) {
        this.gl.clearColor(0.50, 0.50, 0.50, 1.0);
        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, scene2D.getFrameBuffer());
        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
        scene3D.readyDraw(time);
        // scene2D.readyDraw(time);
    };
    //将结果绘制到窗口
    Device.prototype.draw2screen = function (time, scene2D, scene3D) {
        this._renderData = [];
        var gl = this.gl;
        gl.enable(gl.CULL_FACE);
        gl.enable(gl.DEPTH_TEST);
        gl.enable(gl.SCISSOR_TEST);
        this.setViewPort({ x: 0, y: 0, w: 0.5, h: 1 });
        gl.clearColor(0.8, 0.8, 0.8, 1.0);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        scene3D.readyDraw(time);
        // scene2D.readyDraw(time);
        this.triggerRender();
        this.setViewPort({ x: 0.5, y: 0, w: 0.5, h: 1 });
        this.triggerRender(true);
        if (this._isCapture) {
            this._isCapture = false;
            this.capture();
        }
        RenderData_1.RenderDataPool.return(this._renderData);
    };
    Device.prototype.triggerRender = function (isScene) {
        if (isScene === void 0) { isScene = false; }
        if (isScene) {
            var cameraMatrix = GameMainCamera_1.default.instance.getCamera(this._renderData[0]._cameraType).getModelViewMatrix();
            var projMatix = GameMainCamera_1.default.instance.getCamera(this._renderData[0]._cameraType).getProjectionMatrix();
            if (!this._cameraModel)
                this._cameraModel = new CameraModel_1.CameraModel(this.gl);
            this._cameraModel.draw(this._cameraModel.getSceneProjectMatrix(), this._cameraModel.getSceneCameraMatrix(), projMatix, cameraMatrix);
        }
        //提交数据给GPU 立即绘制
        for (var j = 0; j < this._renderData.length; j++) {
            this.draw(this._renderData[j], isScene);
        }
    };
    /**
     *
     * @param rData
     * @param projMatix 投影矩阵
     * @param viewMatrix 视口矩阵
     */
    Device.prototype._drawSY = function (rData, projMatix, viewMatrix) {
        //激活shader
        rData._shader.active();
        //给shader中的变量赋值
        rData._shader.setUseLight(rData._lightColor, rData._lightDirection);
        if (rData._u_pvm_matrix_inverse) {
            rData._shader.setUseSkyBox(rData._u_pvm_matrix_inverse);
        }
        Matrix_1.glMatrix.mat4.mul(this._temp_model_view_matrix, viewMatrix, rData._modelMatrix);
        rData._shader.setUseModelViewMatrix(this._temp_model_view_matrix);
        rData._shader.setUseProjectionMatrix(projMatix);
        rData._shader.setUseVertexAttribPointerForVertex(rData._vertGLID, rData._vertItemSize);
        rData._shader.setUseVertexAttribPointerForUV(rData._uvGLID, rData._uvItemSize);
        rData._shader.setUseVertexAttriPointerForNormal(rData._normalGLID, rData._normalItemSize);
        if (rData._textureGLIDArray.length > 0) {
            rData._shader.setUseTexture(rData._textureGLIDArray[0]);
        }
        var indexglID = rData._indexGLID;
        if (indexglID != -1) {
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, indexglID);
            this.gl.drawElements(rData._glPrimitiveType, rData._indexItemNums, this.gl.UNSIGNED_SHORT, 0);
        }
        else {
            this.gl.drawArrays(rData._glPrimitiveType, 0, rData._vertItemNums);
        }
        //解除缓冲区对于目标纹理的绑定
        this.gl.bindTexture(this.gl.TEXTURE_2D, null);
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        rData._shader.disableVertexAttribArray();
    };
    Device.prototype.draw = function (rData, isUseScene) {
        if (isUseScene === void 0) { isUseScene = false; }
        var cameraMatrix = GameMainCamera_1.default.instance.getCamera(rData._cameraType).getModelViewMatrix();
        var projMatix = GameMainCamera_1.default.instance.getCamera(rData._cameraType).getProjectionMatrix();
        Matrix_1.glMatrix.mat4.identity(this._temp1Matrix);
        if (rData._type == 1) {
            if (isUseScene) {
                projMatix = this._cameraModel.getSceneProjectMatrix();
                Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, this._cameraModel.getSceneCameraMatrix());
                this._drawSY(rData, projMatix, this._temp1Matrix);
            }
            else {
                Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, cameraMatrix);
                this._drawSY(rData, projMatix, this._temp1Matrix);
            }
        }
        else if (rData._type == 2) {
            if (isUseScene) {
                projMatix = this._cameraModel.getSceneProjectMatrix();
                Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, this._cameraModel.getSceneCameraMatrix());
                this._drawSpine(rData, projMatix, this._temp1Matrix);
            }
            else {
                Matrix_1.glMatrix.mat4.invert(this._temp1Matrix, cameraMatrix);
                this._drawSpine(rData, projMatix, this._temp1Matrix);
            }
        }
    };
    Device.prototype._drawSpine = function (sData, projMatix, viewMatrix) {
        if (this._curGLID != sData._shaderData.spGlID) {
            this.gl.useProgram(sData._shaderData.spGlID);
            this._curGLID == sData._shaderData.spGlID;
        }
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(sData._shaderData.attrSetters, sData._attrbufferInfo);
        for (var j = 0; j < sData._uniformInfors.length; j++) {
            Shader_1.G_ShaderFactory.setUniforms(sData._shaderData.uniSetters, sData._uniformInfors[j]);
        }
        var vleft = Matrix_1.glMatrix.mat4.multiply(null, viewMatrix, sData._extraViewLeftMatrix);
        var projData = {};
        projData[sData._projKey] = projMatix;
        Shader_1.G_ShaderFactory.setUniforms(sData._shaderData.uniSetters, projData);
        var viewData = {};
        viewData[sData._viewKey] = vleft;
        Shader_1.G_ShaderFactory.setUniforms(sData._shaderData.uniSetters, viewData);
        Shader_1.G_ShaderFactory.drawBufferInfo(sData._attrbufferInfo, sData._glPrimitiveType);
    };
    Device.prototype.collectData = function (rData) {
        this._renderData.push(rData);
    };
    /**
   * @method setFrameBuffer
   * @param {FrameBuffer} fb - null means use the backbuffer
   */
    Device.prototype.setFrameBuffer = function (fb) {
        if (this._framebuffer === fb) {
            return;
        }
        this._framebuffer = fb;
        var gl = this.gl;
        if (!fb) {
            console.log("绑定帧缓冲失败--------");
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            return;
        }
        else {
            console.log("绑定帧缓冲成功");
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, fb.getHandle());
        // let numColors = fb._colors.length;
        // for (let i = 0; i < numColors; ++i) {
        //     let colorBuffer = fb._colors[i];
        //     _attach(gl, gl.COLOR_ATTACHMENT0 + i, colorBuffer);
        //     // TODO: what about cubemap face??? should be the target parameter for colorBuffer
        // }
        // for (let i = numColors; i < this._caps.maxColorAttachments; ++i) {
        //     gl.framebufferTexture2D(
        //         gl.FRAMEBUFFER,
        //         gl.COLOR_ATTACHMENT0 + i,
        //         gl.TEXTURE_2D,
        //         null,
        //         0
        //     );
        // }
        // if (fb._depth) {
        //     _attach(gl, gl.DEPTH_ATTACHMENT, fb._depth);
        // }
        // if (fb._stencil) {
        //     _attach(gl, gl.STENCIL_ATTACHMENT, fb._stencil);
        // }
        // if (fb._depthStencil) {
        //     _attach(gl, gl.DEPTH_STENCIL_ATTACHMENT, fb._depthStencil);
        // }
    };
    /**
     *
     * @param object
     * {
     * x:
     * y:
     * w:
     * h:
     * }
     */
    Device.prototype.setViewPort = function (object) {
        var x = object.x * this.gl.canvas.width;
        var y = object.y * this.gl.canvas.height;
        var width = object.w * this.gl.canvas.width;
        var height = object.h * this.gl.canvas.height;
        this.gl.viewport(x, y, width, height);
        this.gl.scissor(x, y, width, height);
    };
    /**
     * Resize a canvas to match the size its displayed.
     * @param {HTMLCanvasElement} canvas The canvas to resize.
     * @param {number} [multiplier] amount to multiply by.
     *    Pass in window.devicePixelRatio for native pixels.
     * @return {boolean} true if the canvas was resized.
     * @memberOf module:webgl-utils
     */
    Device.prototype.resizeCanvasToDisplaySize = function (canvas, multiplier) {
        multiplier = multiplier || 1;
        var width = canvas.clientWidth * multiplier | 0;
        var height = canvas.clientHeight * multiplier | 0;
        if (canvas.width !== width || canvas.height !== height) {
            canvas.width = width;
            canvas.height = height;
            return true;
        }
        return false;
    };
    Device.prototype.initExt = function () {
        this._stats = {
            texture: 0,
            vb: 0,
            ib: 0,
            drawcalls: 0,
        };
        // https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Using_Extensions
        this._initExtensions([
            'EXT_texture_filter_anisotropic',
            'EXT_shader_texture_lod',
            'OES_standard_derivatives',
            'OES_texture_float',
            'OES_texture_float_linear',
            'OES_texture_half_float',
            'OES_texture_half_float_linear',
            'OES_vertex_array_object',
            'WEBGL_compressed_texture_atc',
            'WEBGL_compressed_texture_etc',
            'WEBGL_compressed_texture_etc1',
            'WEBGL_compressed_texture_pvrtc',
            'WEBGL_compressed_texture_s3tc',
            'WEBGL_depth_texture',
            'WEBGL_draw_buffers',
        ]);
        this._initCaps();
        // this._initStates();
        this.handlePrecision();
        console.log("拓展-----", this.gl.getSupportedExtensions());
        /**
         * 'EXT_color_buffer_float',
         * 'EXT_disjoint_timer_query_webgl2',
         * 'EXT_float_blend',
         * 'EXT_texture_compression_bptc',
         * 'EXT_texture_compression_rgtc',
         * 'EXT_texture_filter_anisotropic',
         * 'KHR_parallel_shader_compile',
         * 'OES_texture_float_linear',
         * 'WEBGL_compressed_texture_s3tc',
         * 'WEBGL_compressed_texture_s3tc_srgb',
         * 'WEBGL_debug_renderer_info',
         * 'WEBGL_debug_shaders',
         * 'WEBGL_lose_context',
         * 'WEBGL_multi_draw',
         * 'OVR_multiview2
         */
    };
    Device.prototype.handlePrecision = function () {
        var gl = this.gl;
        console.log("处理精度");
        var data1 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT);
        var data2 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT);
        var data3 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
        var data4 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT);
        var data5 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT);
        var data6 = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT);
        console.log("vertex 精度值---", data1, data2, data3, data4, data5, data6);
        var data1 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT);
        var data2 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT);
        var data3 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);
        var data4 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT);
        var data5 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT);
        var data6 = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT);
        console.log("fragment 精度值---", data1, data2, data3, data4, data5, data6);
    };
    /**
     * 初始化渲染状态
     */
    Device.prototype._initStates = function () {
        var gl = this.gl;
        // gl.frontFace(gl.CCW);这一句代码是多余的，webgl默认的就是逆时针为正面
        gl.disable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ZERO);
        gl.blendEquation(gl.FUNC_ADD);
        gl.blendColor(1, 1, 1, 1);
        gl.colorMask(true, true, true, true);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        gl.disable(gl.DEPTH_TEST);
        gl.depthFunc(gl.LESS);
        gl.depthMask(true);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.depthRange(0, 1);
        gl.disable(gl.STENCIL_TEST);
        gl.stencilFunc(gl.ALWAYS, 0, 0xFF);
        gl.stencilMask(0xFF);
        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
        gl.clearDepth(1);
        gl.clearColor(0, 0, 0, 0);
        gl.clearStencil(0);
        gl.disable(gl.SCISSOR_TEST);
    };
    Device.prototype._initExtensions = function (extensions) {
        var gl = this.gl;
        for (var i = 0; i < extensions.length; ++i) {
            var name_1 = extensions[i];
            var vendorPrefixes = ["", "WEBKIT_", "MOZ_"];
            for (var j = 0; j < vendorPrefixes.length; j++) {
                try {
                    var ext = gl.getExtension(vendorPrefixes[j] + name_1);
                    if (ext) {
                        this._extensions[name_1] = ext;
                        break;
                    }
                }
                catch (e) {
                    console.error(e);
                }
            }
        }
    };
    /**
* @method ext
* @param {string} name
*/
    Device.prototype.ext = function (name) {
        return this._extensions[name];
    };
    Device.prototype._initCaps = function () {
        var gl = this.gl;
        var extDrawBuffers = this.ext('WEBGL_draw_buffers');
        this._caps.maxVertexStreams = 4;
        this._caps.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        this._caps.maxFragUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
        this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        this._caps.maxVertexAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
        this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this._caps.maxDrawBuffers = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
        this._caps.maxColorAttachments = extDrawBuffers ? gl.getParameter(extDrawBuffers.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
        console.log("this._caps---", this._caps);
        localStorage.setItem("zm", "nihaoa");
    };
    /**
     * 截图
     */
    Device.prototype.capture = function () {
        var saveBlob = (function () {
            var a = document.createElement('a');
            document.body.appendChild(a);
            a.style.display = 'none';
            return function saveData(blob, fileName) {
                var url = window.URL.createObjectURL(blob);
                a.href = url;
                a.download = fileName;
                a.click();
            };
        }());
        var gl = this.gl;
        gl.canvas.toBlob(function (blob) {
            saveBlob(blob, "screencapture-" + gl.canvas.width + "x" + gl.canvas.height + ".png");
        });
    };
    //剔除某一个面
    /**
     *
     * @param back true 代表剔除背面 false 代表剔除前面
     * @param both 表示前后面都剔除
     */
    Device.prototype.cullFace = function (back, both) {
        if (back === void 0) { back = true; }
        var gl = this.gl;
        gl.enable(gl.CULL_FACE); //开启面剔除功能
        gl.frontFace(gl.CW); //逆时针绘制的代表正面 正常理解，看到的面是正面gl.FRONT，看不到的面是背面gl.BACK
        // gl.frontFace(gl.CCW);//顺时针绘制的代表正面  需要反过来理解，即我们看到的面是背面，看不到的面是正面
        if (both) {
            gl.cullFace(gl.FRONT_AND_BACK); //前后两个面都剔除
        }
        else if (back) {
            gl.cullFace(gl.BACK); //只剔除背面
        }
        else {
            gl.cullFace(gl.FRONT); //只剔除前面
        }
    };
    /**
     * 关闭面剔除功能
     */
    Device.prototype.closeCullFace = function () {
        var gl = this.gl;
        gl.disable(gl.CULL_FACE);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.FRONT);
        gl.disable(gl.CULL_FACE);
    };
    return Device;
}());
exports.default = Device;
},{"./core/Matrix":6,"./core/renderer/base/RenderData":17,"./core/renderer/camera/CameraModel":27,"./core/renderer/camera/GameMainCamera":28,"./core/renderer/gfx/GLapi":35,"./core/renderer/shader/Shader":37}],2:[function(require,module,exports){
"use strict";
/**
 * 加载管理员
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 var myHeaders = new Headers();
var myInit:any = { method: 'GET',
              headers: myHeaders,
              mode: 'cors',
              cache: 'default' };
var myRequest = new Request('http:localhost:3000//res/models/windmill/windmill.obj', myInit);

fetch(myRequest).then(function(response) {
   return response.text();
 }).then(function(myBlob) {
   console.log("myBlob-------",myBlob);
 });
 */
var CacheImageData = /** @class */ (function () {
    function CacheImageData(url, img) {
        this.url = "";
        this.url = url;
        this.img = img;
    }
    return CacheImageData;
}());
function loadFile(url, typeFunc) {
    return __awaiter(this, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetch(url)];
                case 1:
                    response = _a.sent();
                    if (!response.ok) {
                        throw new Error("could not load: " + url);
                    }
                    return [4 /*yield*/, response[typeFunc]()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function loadBinary(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, loadFile(url, 'arrayBuffer')];
        });
    });
}
function loadJSON(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, loadFile(url, 'json')];
        });
    });
}
function loadText(url) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, loadFile(url, 'text')];
        });
    });
}
var LoaderManager = /** @class */ (function () {
    function LoaderManager() {
        this._cacheImage = [];
        this._cache = new Map();
    }
    Object.defineProperty(LoaderManager, "instance", {
        get: function () {
            if (!this._instance)
                this._instance = new LoaderManager();
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    //加载gltf动画文件
    LoaderManager.prototype.loadGLTF = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var gltf, baseURL, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, loadJSON(path)];
                    case 1:
                        gltf = _b.sent();
                        baseURL = new URL(path, location.href);
                        _a = gltf;
                        return [4 /*yield*/, Promise.all(gltf.buffers.map(function (buffer) {
                                var url = new URL(buffer.uri, baseURL.href);
                                return loadBinary(url.href);
                            }))];
                    case 2:
                        _a.buffers = _b.sent();
                        this._cache.set(path, gltf);
                        return [2 /*return*/];
                }
            });
        });
    };
    //加载json格式的二进制
    //就是将json转为二进制 然后以二进制读取再转会json
    LoaderManager.prototype.loadJsonBlobData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        //以二进制方式读取数据,读取到的结果将放入Blob的一个对象中存放
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                fr.onload = function (e) {
                    console.log("bin file---", fr.result);
                    var rawData = new Float32Array(fr.result);
                    var str = "";
                    for (var i = 0; i < rawData.length; i++) {
                        str = str + String.fromCharCode((rawData[i]));
                    }
                    JSON.parse(str);
                    console.log("result --", str);
                    _this._cache.set(path, fr.result);
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result);
                };
            }
        };
    };
    /**
     * 加载obj
     */
    LoaderManager.prototype.loadObjData = function (path, callBackProgress, callBackFinish) {
    };
    //加载二进制数据
    LoaderManager.prototype.loadBlobData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                fr.onload = function (e) {
                    _this._cache.set(path, fr.result);
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result);
                };
            }
        };
    };
    //加载json数据
    LoaderManager.prototype.loadJsonData = function (path, callBackProgress, callBackFinish) {
        var request = new XMLHttpRequest();
        var _this = this;
        request.open("get", path);
        request.send(null);
        request.responseType = "json";
        request.onload = function () {
            if (request.status == 0) {
                var jsonData = request.response;
                _this._cache.set(path, jsonData);
                if (callBackFinish)
                    callBackFinish.call(null, jsonData);
            }
        };
    };
    //加载可以转化为json的数据
    LoaderManager.prototype.loadJsonStringData = function (path, callBackProgress, callBackFinish) {
        var request = new XMLHttpRequest();
        var _this = this;
        request.open("get", path);
        request.send(null);
        request.responseType = "text";
        request.onload = function () {
            if (request.status == 0) {
                var jsonData = JSON.parse(request.responseText);
                _this._cache.set(path, jsonData);
                if (callBackFinish)
                    callBackFinish.call(null, jsonData);
            }
        };
    };
    //加载骨骼数据
    LoaderManager.prototype.loadSkelData = function (path, callBackProgress, callBackFinish) {
        var _this = this;
        var request = new XMLHttpRequest();
        request.open("get", path);
        request.send(null);
        request.responseType = "blob";
        request.onload = function () {
            if (request.status == 0) {
                var fr = new FileReader(); //FileReader可以读取Blob内容  
                fr.readAsArrayBuffer(request.response); //二进制转换成ArrayBuffer
                // fr.readAsText(request.response);
                fr.onload = function (e) {
                    // console.log("加载二进制成功---",fr.result);
                    _this._cache.set(path, fr.result);
                    // var uint8_msg = new Uint8Array(fr.result as ArrayBuffer);
                    // // 解码成字符串
                    // var decodedString = String.fromCharCode.apply(null, uint8_msg);
                    // console.log("字符串--",decodedString); 
                    // // parse,转成json数据
                    // var data = JSON.parse(decodedString);
                    // console.log(data);
                    // let content = fr.result;//arraybuffer类型数据
                    // let resBlob = new Blob([content])
                    // let reader = new FileReader()
                    // reader.readAsText(resBlob, "utf-8")
                    // reader.onload = () => {
                    //     console.log("gagag---",reader.result);
                    //         let res = JSON.parse(reader.result as string)
                    //         console.log(res);
                    // }
                    if (callBackFinish)
                        callBackFinish.call(null, fr.result);
                };
            }
        };
    };
    //加载图片数据
    LoaderManager.prototype.loadImageData = function (path, callBackProgress, callBackFinish) {
        var img = new Image();
        img.onload = function (img) {
            if (!img) {
                console.log("加载的图片路径不存在---", path);
                return;
            }
            this._cacheImage.push(new CacheImageData(path, img));
            if (callBackFinish)
                callBackFinish.call(null, img);
        }.bind(this, img);
        img.src = path;
    };
    LoaderManager.prototype.getLoadFunc = function (path) {
        var strArr = path.split('.');
        var extName = strArr[strArr.length - 1];
        switch (extName) {
            case "jpg": return this.loadImageData;
            case "png": return this.loadImageData;
            case "bin": return this.loadBlobData;
            case "obj": return this.loadObjData;
            case "json": return this.loadJsonData;
            case "gltf": return this.loadJsonStringData;
            case "skel": return this.loadSkelData;
            default:
                console.log("发现未知后缀名的文件----", path);
                null;
                break;
        }
    };
    //加载数据
    LoaderManager.prototype.loadData = function (arr, callBackProgress, callBackFinish) {
        return __awaiter(this, void 0, void 0, function () {
            var count, j, path, loadFunc;
            var _this_1 = this;
            return __generator(this, function (_a) {
                count = 0;
                for (j = 0; j < arr.length; j++) {
                    path = arr[j];
                    loadFunc = this.getLoadFunc(path);
                    loadFunc.call(this, path, null, function (res) {
                        count++;
                        _this_1.onLoadProgress(count / arr.length);
                        if (count == arr.length) {
                            _this_1.onLoadFinish();
                            if (callBackFinish)
                                callBackFinish();
                        }
                    });
                }
                return [2 /*return*/];
            });
        });
    };
    //获取缓存中的数据
    LoaderManager.prototype.getCacheData = function (url) {
        console.log(url, this._cache.has(url));
        return this._cache.get(url);
    };
    /**
     * 获取缓存的纹理数据
     * @param url
     */
    LoaderManager.prototype.getCacheImage = function (url) {
        for (var j = 0; j < this._cacheImage.length; j++) {
            var data = this._cacheImage[j];
            if (data.url == url)
                return data.img;
        }
        return null;
    };
    /**
     * 移除CPU端内存中的图片缓存
     * @param url
     */
    LoaderManager.prototype.removeImage = function (url) {
        var index = -1;
        var img;
        for (var j = 0; j < this._cacheImage.length; j++) {
            var data = this._cacheImage[j];
            if (data.url == url) {
                index = j;
                img = data.img;
                break;
            }
        }
        if (index >= 0) {
            console.log("解除引用");
            this._cacheImage.splice(index, 1);
            this.releaseCPUMemoryForImageCache(img);
        }
        else {
            console.log("没找到----", img, index);
        }
    };
    /**
     *
     * @param img
     * 释放CPU端内存中的图片缓存
     */
    LoaderManager.prototype.releaseCPUMemoryForImageCache = function (img) {
        img.src = "";
        img = null;
    };
    LoaderManager.prototype.onLoadProgress = function (progress) {
        console.log("加载进度---------", progress);
    };
    LoaderManager.prototype.onLoadFinish = function () {
        console.log("加载完成啦");
    };
    return LoaderManager;
}());
exports.default = LoaderManager;
},{}],3:[function(require,module,exports){
"use strict";
//第1步 - 准备Canvas和获取WebGL的渲染上下文
Object.defineProperty(exports, "__esModule", { value: true });
var Device_1 = require("./Device");
var LoaderManager_1 = require("./LoaderManager");
var Shader_1 = require("./core/renderer/shader/Shader");
var RenderFlow_1 = require("./RenderFlow");
Device_1.default.Instance.init();
Shader_1.G_ShaderFactory.init(Device_1.default.Instance.gl);
//testWebl_Label.run();
//LightTest.run();
// skyBoxTest.run();
// SkinTes1.run();
var arr = [
    "res/models/killer_whale/whale.CYCLES.bin",
    "res/models/killer_whale/whale.CYCLES.gltf",
    "res/models/HeadData/head.json",
    "res/models/Robart/blockGuyNodeDescriptions.json",
    "res/8x8-font.png",
    "res/wood.jpg",
    "res/tree.jpg",
    "res/ground.jpg",
    "res/wicker.jpg"
];
// ThreeDTexture.run();
// LabelTest.run();
// ShaderShadowTest.run();
// Stage.run();
// EarthSunTest.run();
// RobartTest.run();
// CaptureTest.run();
// CameraTest.run();
// TextureTest.run();
// SpeedTest.run();
//  HaiTwn1.run();
// ThreeDLightTest.run();
// SpotLightTest.run();
// PointLightTest.run();
// FogTest.run();
LoaderManager_1.default.instance.loadData(arr, null, function () {
    new RenderFlow_1.default().startup();
    // RampTextureTest.run();
    // CameraTest.run();
    // RobartTest.run();
    // ObjTest.run();
    // Stage.run();
});
},{"./Device":1,"./LoaderManager":2,"./RenderFlow":5,"./core/renderer/shader/Shader":37}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Component = /** @class */ (function () {
    function Component() {
    }
    return Component;
}());
var Ref = /** @class */ (function () {
    function Ref() {
        this._referenceCount = 0;
        this._referenceCount = 1;
    }
    Ref.prototype.addReferenceCount = function () {
        this._referenceCount++;
    };
    Ref.prototype.reduceReferenceCount = function () {
        this._referenceCount--;
    };
    return Ref;
}());
exports.default = Ref;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Device_1 = require("./Device");
var Scene2D_1 = require("./core/renderer/base/Scene2D");
var Scene3D_1 = require("./core/renderer/base/Scene3D");
var GameMainCamera_1 = require("./core/renderer/camera/GameMainCamera");
var RenderFlow = /** @class */ (function () {
    function RenderFlow() {
        this.gl = Device_1.default.Instance.gl;
        this.canvas = Device_1.default.Instance.canvas;
    }
    RenderFlow.prototype.startup = function () {
        this._3dScene = new Scene3D_1.default();
        this._3dScene.init();
        this._2dScene = new Scene2D_1.default();
        this._2dScene.init();
        Device_1.default.Instance.setViewPort(GameMainCamera_1.default.instance.get2DCamera().rect);
        this.loopScale();
    };
    RenderFlow.prototype.loopScale = function () {
        this._add = 0.01;
        var loop = function (time) {
            // Device.Instance.drawToUI(time,this._2dScene,this._3dScene);
            Device_1.default.Instance.draw2screen(time, this._2dScene, this._3dScene);
            requestAnimationFrame(loop);
        }.bind(this);
        loop(0);
    };
    return RenderFlow;
}());
exports.default = RenderFlow;
},{"./Device":1,"./core/renderer/base/Scene2D":19,"./core/renderer/base/Scene3D":20,"./core/renderer/camera/GameMainCamera":28}],6:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.glMatrix = void 0;
var glMatrix;
(function (glMatrix_1) {
    /**
* Common utilities
* @module glMatrix
*/
    // Configuration Constants
    var EPSILON = 0.000001;
    var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
    var RANDOM = Math.random;
    /**
     * Sets the type of array used when creating new vectors and matrices
     *
     * @param {Type} type Array type, such as Float32Array or Array
     */
    function setMatrixArrayType(type) {
        ARRAY_TYPE = type;
    }
    var degree = Math.PI / 180;
    /**
     * Convert Degree To Radian
     *
     * @param {Number} a Angle in Degrees
     */
    function toRadian(a) {
        return a * degree;
    }
    /**
     * Tests whether or not the arguments have approximately the same value, within an absolute
     * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
     * than or equal to 1.0, and a relative tolerance is used for larger values)
     *
     * @param {Number} a The first number to test.
     * @param {Number} b The second number to test.
     * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
     */
    function equals(a, b) {
        return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
    }
    if (!Math.hypot)
        Math.hypot = function () {
            var y = 0, i = arguments.length;
            while (i--) {
                y += arguments[i] * arguments[i];
            }
            return Math.sqrt(y);
        };
    var MatType = Float32Array;
    var common = /*#__PURE__*/ Object.freeze({
        EPSILON: EPSILON,
        get ARRAY_TYPE() { return ARRAY_TYPE; },
        RANDOM: RANDOM,
        setMatrixArrayType: setMatrixArrayType,
        toRadian: toRadian,
        equals: equals
    });
    /**
     * 2x2 Matrix
     * @module mat2
     */
    /**
     * Creates a new identity mat2
     *
     * @returns {mat2} a new 2x2 matrix
     */
    function create() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
        }
        out[0] = 1;
        out[3] = 1;
        return out;
    }
    /**
     * Creates a new mat2 initialized with values from an existing matrix
     *
     * @param {mat2} a matrix to clone
     * @returns {mat2} a new 2x2 matrix
     */
    function clone(a) {
        var out = new ARRAY_TYPE(4);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Copy the values from one mat2 to another
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function copy(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Set a mat2 to the identity matrix
     *
     * @param {mat2} out the receiving matrix
     * @returns {mat2} out
     */
    function identity(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
    }
    /**
     * Create a new mat2 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m10 Component in column 1, row 0 position (index 2)
     * @param {Number} m11 Component in column 1, row 1 position (index 3)
     * @returns {mat2} out A new 2x2 matrix
     */
    function fromValues(m00, m01, m10, m11) {
        var out = new ARRAY_TYPE(4);
        out[0] = m00;
        out[1] = m01;
        out[2] = m10;
        out[3] = m11;
        return out;
    }
    /**
     * Set the components of a mat2 to the given values
     *
     * @param {mat2} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m10 Component in column 1, row 0 position (index 2)
     * @param {Number} m11 Component in column 1, row 1 position (index 3)
     * @returns {mat2} out
     */
    function set(out, m00, m01, m10, m11) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m10;
        out[3] = m11;
        return out;
    }
    /**
     * Transpose the values of a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function transpose(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache
        // some values
        if (out === a) {
            var a1 = a[1];
            out[1] = a[2];
            out[2] = a1;
        }
        else {
            out[0] = a[0];
            out[1] = a[2];
            out[2] = a[1];
            out[3] = a[3];
        }
        return out;
    }
    /**
     * adds 2 vectors3s
     * @param {Vector3} a a
     * @param {Vector3} b b
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function addVectors(dst, a, b) {
        dst = dst || new MatType(3);
        dst[0] = a[0] + b[0];
        dst[1] = a[1] + b[1];
        dst[2] = a[2] + b[2];
        return dst;
    }
    /**
     * subtracts 2 vectors3s
     * @param {Vector3} a a
     * @param {Vector3} b b
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function subtractVectors(dst, a, b) {
        dst = dst || new MatType(3);
        dst[0] = a[0] - b[0];
        dst[1] = a[1] - b[1];
        dst[2] = a[2] - b[2];
        return dst;
    }
    /**
     * scale vectors3
     * @param {Vector3} v vector
     * @param {Number} s scale
     * @param {Vector3} dst optional vector3 to store result
     * @return {Vector3} dst or new Vector3 if not provided
     * @memberOf module:webgl-3d-math
     */
    function scaleVector(dst, v, s) {
        dst = dst || new MatType(3);
        dst[0] = v[0] * s;
        dst[1] = v[1] * s;
        dst[2] = v[2] * s;
        return dst;
    }
    /**
     * Inverts a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function invert(out, a) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3]; // Calculate the determinant
        var det = a0 * a3 - a2 * a1;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = a3 * det;
        out[1] = -a1 * det;
        out[2] = -a2 * det;
        out[3] = a0 * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the source matrix
     * @returns {mat2} out
     */
    function adjoint(out, a) {
        // Caching this value is nessecary if out == a
        var a0 = a[0];
        out[0] = a[3];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a0;
        return out;
    }
    /**
     * Calculates the determinant of a mat2
     *
     * @param {mat2} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant(a) {
        return a[0] * a[3] - a[2] * a[1];
    }
    /**
     * Multiplies two mat2's
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function multiply(out, a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        out[0] = a0 * b0 + a2 * b1;
        out[1] = a1 * b0 + a3 * b1;
        out[2] = a0 * b2 + a2 * b3;
        out[3] = a1 * b2 + a3 * b3;
        return out;
    }
    /**
     * Rotates a mat2 by the given angle
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2} out
     */
    function rotate(out, a, rad) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = a0 * c + a2 * s;
        out[1] = a1 * c + a3 * s;
        out[2] = a0 * -s + a2 * c;
        out[3] = a1 * -s + a3 * c;
        return out;
    }
    /**
     * Scales the mat2 by the dimensions in the given vec2
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to rotate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat2} out
     **/
    function scale(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var v0 = v[0], v1 = v[1];
        out[0] = a0 * v0;
        out[1] = a1 * v0;
        out[2] = a2 * v1;
        out[3] = a3 * v1;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat2.identity(dest);
     *     mat2.rotate(dest, dest, rad);
     *
     * @param {mat2} out mat2 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2} out
     */
    function fromRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = -s;
        out[3] = c;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat2.identity(dest);
     *     mat2.scale(dest, dest, vec);
     *
     * @param {mat2} out mat2 receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat2} out
     */
    function fromScaling(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = v[1];
        return out;
    }
    /**
     * Returns a string representation of a mat2
     *
     * @param {mat2} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str(a) {
        return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Returns Frobenius norm of a mat2
     *
     * @param {mat2} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob(a) {
        return Math.hypot(a[0], a[1], a[2], a[3]);
    }
    /**
     * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
     * @param {mat2} L the lower triangular matrix
     * @param {mat2} D the diagonal matrix
     * @param {mat2} U the upper triangular matrix
     * @param {mat2} a the input matrix to factorize
     */
    function LDU(L, D, U, a) {
        L[2] = a[2] / a[0];
        U[0] = a[0];
        U[1] = a[1];
        U[3] = a[3] - L[2] * U[1];
        return [L, D, U];
    }
    /**
     * Adds two mat2's
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function add(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @returns {mat2} out
     */
    function subtract(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat2} a The first matrix.
     * @param {mat2} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat2} a The first matrix.
     * @param {mat2} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$1(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat2} out the receiving matrix
     * @param {mat2} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat2} out
     */
    function multiplyScalar(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        return out;
    }
    /**
     * Adds two mat2's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat2} out the receiving vector
     * @param {mat2} a the first operand
     * @param {mat2} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat2} out
     */
    function multiplyScalarAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        return out;
    }
    /**
     * Alias for {@link mat2.multiply}
     * @function
     */
    var mul = multiply;
    /**
     * Alias for {@link mat2.subtract}
     * @function
     */
    var sub = subtract;
    glMatrix_1.mat2 = Object.freeze({
        create: create,
        clone: clone,
        copy: copy,
        identity: identity,
        fromValues: fromValues,
        set: set,
        transpose: transpose,
        invert: invert,
        adjoint: adjoint,
        determinant: determinant,
        multiply: multiply,
        rotate: rotate,
        scale: scale,
        fromRotation: fromRotation,
        fromScaling: fromScaling,
        str: str,
        frob: frob,
        LDU: LDU,
        add: add,
        subtract: subtract,
        exactEquals: exactEquals,
        equals: equals$1,
        multiplyScalar: multiplyScalar,
        multiplyScalarAndAdd: multiplyScalarAndAdd,
        mul: mul,
        sub: sub
    });
    /**
     * 2x3 Matrix
     * @module mat2d
     *
     * @description
     * A mat2d contains six elements defined as:
     * <pre>
     * [a, c, tx,
     *  b, d, ty]
     * </pre>
     * This is a short form for the 3x3 matrix:
     * <pre>
     * [a, c, tx,
     *  b, d, ty,
     *  0, 0, 1]
     * </pre>
     * The last row is ignored so the array is shorter and operations are faster.
     */
    /**
     * Creates a new identity mat2d
     *
     * @returns {mat2d} a new 2x3 matrix
     */
    function create$1() {
        var out = new ARRAY_TYPE(6);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[4] = 0;
            out[5] = 0;
        }
        out[0] = 1;
        out[3] = 1;
        return out;
    }
    /**
     * Creates a new mat2d initialized with values from an existing matrix
     *
     * @param {mat2d} a matrix to clone
     * @returns {mat2d} a new 2x3 matrix
     */
    function clone$1(a) {
        var out = new ARRAY_TYPE(6);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        return out;
    }
    /**
     * Copy the values from one mat2d to another
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the source matrix
     * @returns {mat2d} out
     */
    function copy$1(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        return out;
    }
    /**
     * Set a mat2d to the identity matrix
     *
     * @param {mat2d} out the receiving matrix
     * @returns {mat2d} out
     */
    function identity$1(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Create a new mat2d with the given values
     *
     * @param {Number} a Component A (index 0)
     * @param {Number} b Component B (index 1)
     * @param {Number} c Component C (index 2)
     * @param {Number} d Component D (index 3)
     * @param {Number} tx Component TX (index 4)
     * @param {Number} ty Component TY (index 5)
     * @returns {mat2d} A new mat2d
     */
    function fromValues$1(a, b, c, d, tx, ty) {
        var out = new ARRAY_TYPE(6);
        out[0] = a;
        out[1] = b;
        out[2] = c;
        out[3] = d;
        out[4] = tx;
        out[5] = ty;
        return out;
    }
    /**
     * Set the components of a mat2d to the given values
     *
     * @param {mat2d} out the receiving matrix
     * @param {Number} a Component A (index 0)
     * @param {Number} b Component B (index 1)
     * @param {Number} c Component C (index 2)
     * @param {Number} d Component D (index 3)
     * @param {Number} tx Component TX (index 4)
     * @param {Number} ty Component TY (index 5)
     * @returns {mat2d} out
     */
    function set$1(out, a, b, c, d, tx, ty) {
        out[0] = a;
        out[1] = b;
        out[2] = c;
        out[3] = d;
        out[4] = tx;
        out[5] = ty;
        return out;
    }
    /**
     * Inverts a mat2d
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the source matrix
     * @returns {mat2d} out
     */
    function invert$1(out, a) {
        var aa = a[0], ab = a[1], ac = a[2], ad = a[3];
        var atx = a[4], aty = a[5];
        var det = aa * ad - ab * ac;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = ad * det;
        out[1] = -ab * det;
        out[2] = -ac * det;
        out[3] = aa * det;
        out[4] = (ac * aty - ad * atx) * det;
        out[5] = (ab * atx - aa * aty) * det;
        return out;
    }
    /**
     * Calculates the determinant of a mat2d
     *
     * @param {mat2d} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$1(a) {
        return a[0] * a[3] - a[1] * a[2];
    }
    /**
     * Multiplies two mat2d's
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function multiply$1(out, a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
        out[0] = a0 * b0 + a2 * b1;
        out[1] = a1 * b0 + a3 * b1;
        out[2] = a0 * b2 + a2 * b3;
        out[3] = a1 * b2 + a3 * b3;
        out[4] = a0 * b4 + a2 * b5 + a4;
        out[5] = a1 * b4 + a3 * b5 + a5;
        return out;
    }
    /**
     * Rotates a mat2d by the given angle
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2d} out
     */
    function rotate$1(out, a, rad) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out[0] = a0 * c + a2 * s;
        out[1] = a1 * c + a3 * s;
        out[2] = a0 * -s + a2 * c;
        out[3] = a1 * -s + a3 * c;
        out[4] = a4;
        out[5] = a5;
        return out;
    }
    /**
     * Scales the mat2d by the dimensions in the given vec2
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to translate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat2d} out
     **/
    function scale$1(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var v0 = v[0], v1 = v[1];
        out[0] = a0 * v0;
        out[1] = a1 * v0;
        out[2] = a2 * v1;
        out[3] = a3 * v1;
        out[4] = a4;
        out[5] = a5;
        return out;
    }
    /**
     * Translates the mat2d by the dimensions in the given vec2
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to translate
     * @param {vec2} v the vec2 to translate the matrix by
     * @returns {mat2d} out
     **/
    function translate(out, a, v) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var v0 = v[0], v1 = v[1];
        out[0] = a0;
        out[1] = a1;
        out[2] = a2;
        out[3] = a3;
        out[4] = a0 * v0 + a2 * v1 + a4;
        out[5] = a1 * v0 + a3 * v1 + a5;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.rotate(dest, dest, rad);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat2d} out
     */
    function fromRotation$1(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = -s;
        out[3] = c;
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.scale(dest, dest, vec);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat2d} out
     */
    function fromScaling$1(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = v[1];
        out[4] = 0;
        out[5] = 0;
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat2d.identity(dest);
     *     mat2d.translate(dest, dest, vec);
     *
     * @param {mat2d} out mat2d receiving operation result
     * @param {vec2} v Translation vector
     * @returns {mat2d} out
     */
    function fromTranslation(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = v[0];
        out[5] = v[1];
        return out;
    }
    /**
     * Returns a string representation of a mat2d
     *
     * @param {mat2d} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$1(a) {
        return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
    }
    /**
     * Returns Frobenius norm of a mat2d
     *
     * @param {mat2d} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$1(a) {
        return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
    }
    /**
     * Adds two mat2d's
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function add$1(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @returns {mat2d} out
     */
    function subtract$1(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat2d} out the receiving matrix
     * @param {mat2d} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat2d} out
     */
    function multiplyScalar$1(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        return out;
    }
    /**
     * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat2d} out the receiving vector
     * @param {mat2d} a the first operand
     * @param {mat2d} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat2d} out
     */
    function multiplyScalarAndAdd$1(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat2d} a The first matrix.
     * @param {mat2d} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$1(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat2d} a The first matrix.
     * @param {mat2d} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$2(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
    }
    /**
     * Alias for {@link mat2d.multiply}
     * @function
     */
    var mul$1 = multiply$1;
    /**
     * Alias for {@link mat2d.subtract}
     * @function
     */
    var sub$1 = subtract$1;
    glMatrix_1.mat2d = Object.freeze({
        create: create$1,
        clone: clone$1,
        copy: copy$1,
        identity: identity$1,
        fromValues: fromValues$1,
        set: set$1,
        invert: invert$1,
        determinant: determinant$1,
        multiply: multiply$1,
        rotate: rotate$1,
        scale: scale$1,
        translate: translate,
        fromRotation: fromRotation$1,
        fromScaling: fromScaling$1,
        fromTranslation: fromTranslation,
        str: str$1,
        frob: frob$1,
        add: add$1,
        subtract: subtract$1,
        multiplyScalar: multiplyScalar$1,
        multiplyScalarAndAdd: multiplyScalarAndAdd$1,
        exactEquals: exactEquals$1,
        equals: equals$2,
        mul: mul$1,
        sub: sub$1
    });
    /**
     * 3x3 Matrix
     * @module mat3
     */
    /**
     * Creates a new identity mat3
     *
     * @returns {mat3} a new 3x3 matrix
     */
    function create$2() {
        var out = new ARRAY_TYPE(9);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
        }
        out[0] = 1;
        out[4] = 1;
        out[8] = 1;
        return out;
    }
    /**
     * Copies the upper-left 3x3 values into the given mat3.
     *
     * @param {mat3} out the receiving 3x3 matrix
     * @param {mat4} a   the source 4x4 matrix
     * @returns {mat3} out
     */
    function fromMat4(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[4];
        out[4] = a[5];
        out[5] = a[6];
        out[6] = a[8];
        out[7] = a[9];
        out[8] = a[10];
        return out;
    }
    /**
     * Creates a new mat3 initialized with values from an existing matrix
     *
     * @param {mat3} a matrix to clone
     * @returns {mat3} a new 3x3 matrix
     */
    function clone$2(a) {
        var out = new ARRAY_TYPE(9);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Copy the values from one mat3 to another
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function copy$2(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Create a new mat3 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m10 Component in column 1, row 0 position (index 3)
     * @param {Number} m11 Component in column 1, row 1 position (index 4)
     * @param {Number} m12 Component in column 1, row 2 position (index 5)
     * @param {Number} m20 Component in column 2, row 0 position (index 6)
     * @param {Number} m21 Component in column 2, row 1 position (index 7)
     * @param {Number} m22 Component in column 2, row 2 position (index 8)
     * @returns {mat3} A new mat3
     */
    function fromValues$2(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        var out = new ARRAY_TYPE(9);
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m10;
        out[4] = m11;
        out[5] = m12;
        out[6] = m20;
        out[7] = m21;
        out[8] = m22;
        return out;
    }
    /**
     * Set the components of a mat3 to the given values
     *
     * @param {mat3} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m10 Component in column 1, row 0 position (index 3)
     * @param {Number} m11 Component in column 1, row 1 position (index 4)
     * @param {Number} m12 Component in column 1, row 2 position (index 5)
     * @param {Number} m20 Component in column 2, row 0 position (index 6)
     * @param {Number} m21 Component in column 2, row 1 position (index 7)
     * @param {Number} m22 Component in column 2, row 2 position (index 8)
     * @returns {mat3} out
     */
    function set$2(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m10;
        out[4] = m11;
        out[5] = m12;
        out[6] = m20;
        out[7] = m21;
        out[8] = m22;
        return out;
    }
    /**
     * Set a mat3 to the identity matrix
     *
     * @param {mat3} out the receiving matrix
     * @returns {mat3} out
     */
    function identity$2(out) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Transpose the values of a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function transpose$1(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
            var a01 = a[1], a02 = a[2], a12 = a[5];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a01;
            out[5] = a[7];
            out[6] = a02;
            out[7] = a12;
        }
        else {
            out[0] = a[0];
            out[1] = a[3];
            out[2] = a[6];
            out[3] = a[1];
            out[4] = a[4];
            out[5] = a[7];
            out[6] = a[2];
            out[7] = a[5];
            out[8] = a[8];
        }
        return out;
    }
    /**
     * Inverts a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function invert$2(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        var b01 = a22 * a11 - a12 * a21;
        var b11 = -a22 * a10 + a12 * a20;
        var b21 = a21 * a10 - a11 * a20; // Calculate the determinant
        var det = a00 * b01 + a01 * b11 + a02 * b21;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = b01 * det;
        out[1] = (-a22 * a01 + a02 * a21) * det;
        out[2] = (a12 * a01 - a02 * a11) * det;
        out[3] = b11 * det;
        out[4] = (a22 * a00 - a02 * a20) * det;
        out[5] = (-a12 * a00 + a02 * a10) * det;
        out[6] = b21 * det;
        out[7] = (-a21 * a00 + a01 * a20) * det;
        out[8] = (a11 * a00 - a01 * a10) * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the source matrix
     * @returns {mat3} out
     */
    function adjoint$1(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        out[0] = a11 * a22 - a12 * a21;
        out[1] = a02 * a21 - a01 * a22;
        out[2] = a01 * a12 - a02 * a11;
        out[3] = a12 * a20 - a10 * a22;
        out[4] = a00 * a22 - a02 * a20;
        out[5] = a02 * a10 - a00 * a12;
        out[6] = a10 * a21 - a11 * a20;
        out[7] = a01 * a20 - a00 * a21;
        out[8] = a00 * a11 - a01 * a10;
        return out;
    }
    /**
     * Calculates the determinant of a mat3
     *
     * @param {mat3} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$2(a) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
    }
    /**
     * Multiplies two mat3's
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function multiply$2(out, a, b) {
        var a00 = a[0], a01 = a[1], a02 = a[2];
        var a10 = a[3], a11 = a[4], a12 = a[5];
        var a20 = a[6], a21 = a[7], a22 = a[8];
        var b00 = b[0], b01 = b[1], b02 = b[2];
        var b10 = b[3], b11 = b[4], b12 = b[5];
        var b20 = b[6], b21 = b[7], b22 = b[8];
        out[0] = b00 * a00 + b01 * a10 + b02 * a20;
        out[1] = b00 * a01 + b01 * a11 + b02 * a21;
        out[2] = b00 * a02 + b01 * a12 + b02 * a22;
        out[3] = b10 * a00 + b11 * a10 + b12 * a20;
        out[4] = b10 * a01 + b11 * a11 + b12 * a21;
        out[5] = b10 * a02 + b11 * a12 + b12 * a22;
        out[6] = b20 * a00 + b21 * a10 + b22 * a20;
        out[7] = b20 * a01 + b21 * a11 + b22 * a21;
        out[8] = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
    }
    /**
     * Translate a mat3 by the given vector
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to translate
     * @param {vec2} v vector to translate by
     * @returns {mat3} out
     */
    function translate$1(out, a, v) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a10;
        out[4] = a11;
        out[5] = a12;
        out[6] = x * a00 + y * a10 + a20;
        out[7] = x * a01 + y * a11 + a21;
        out[8] = x * a02 + y * a12 + a22;
        return out;
    }
    /**
     * Rotates a mat3 by the given angle
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat3} out
     */
    function rotate$2(out, a, rad) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c * a00 + s * a10;
        out[1] = c * a01 + s * a11;
        out[2] = c * a02 + s * a12;
        out[3] = c * a10 - s * a00;
        out[4] = c * a11 - s * a01;
        out[5] = c * a12 - s * a02;
        out[6] = a20;
        out[7] = a21;
        out[8] = a22;
        return out;
    }
    /**
     * Scales the mat3 by the dimensions in the given vec2
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to rotate
     * @param {vec2} v the vec2 to scale the matrix by
     * @returns {mat3} out
     **/
    function scale$2(out, a, v) {
        var x = v[0], y = v[1];
        out[0] = x * a[0];
        out[1] = x * a[1];
        out[2] = x * a[2];
        out[3] = y * a[3];
        out[4] = y * a[4];
        out[5] = y * a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.translate(dest, dest, vec);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {vec2} v Translation vector
     * @returns {mat3} out
     */
    function fromTranslation$1(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 1;
        out[5] = 0;
        out[6] = v[0];
        out[7] = v[1];
        out[8] = 1;
        return out;
    }
    /**
     * Creates a matrix from a given angle
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.rotate(dest, dest, rad);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat3} out
     */
    function fromRotation$2(out, rad) {
        var s = Math.sin(rad), c = Math.cos(rad);
        out[0] = c;
        out[1] = s;
        out[2] = 0;
        out[3] = -s;
        out[4] = c;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat3.identity(dest);
     *     mat3.scale(dest, dest, vec);
     *
     * @param {mat3} out mat3 receiving operation result
     * @param {vec2} v Scaling vector
     * @returns {mat3} out
     */
    function fromScaling$2(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = v[1];
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 1;
        return out;
    }
    /**
     * Copies the values from a mat2d into a mat3
     *
     * @param {mat3} out the receiving matrix
     * @param {mat2d} a the matrix to copy
     * @returns {mat3} out
     **/
    function fromMat2d(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = 0;
        out[3] = a[2];
        out[4] = a[3];
        out[5] = 0;
        out[6] = a[4];
        out[7] = a[5];
        out[8] = 1;
        return out;
    }
    /**
    * Calculates a 3x3 matrix from the given quaternion
    *
    * @param {mat3} out mat3 receiving operation result
    * @param {quat} q Quaternion to create matrix from
    *
    * @returns {mat3} out
    */
    function fromQuat(out, q) {
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - yy - zz;
        out[3] = yx - wz;
        out[6] = zx + wy;
        out[1] = yx + wz;
        out[4] = 1 - xx - zz;
        out[7] = zy - wx;
        out[2] = zx - wy;
        out[5] = zy + wx;
        out[8] = 1 - xx - yy;
        return out;
    }
    /**
    * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
    *
    * @param {mat3} out mat3 receiving operation result
    * @param {mat4} a Mat4 to derive the normal matrix from
    *
    * @returns {mat3} out
    */
    function normalFromMat4(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        return out;
    }
    /**
     * Generates a 2D projection matrix with the given bounds
     *
     * @param {mat3} out mat3 frustum matrix will be written into
     * @param {number} width Width of your gl context
     * @param {number} height Height of gl context
     * @returns {mat3} out
     */
    function projection(out, width, height) {
        out[0] = 2 / width;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = -2 / height;
        out[5] = 0;
        out[6] = -1;
        out[7] = 1;
        out[8] = 1;
        return out;
    }
    /**
     * Returns a string representation of a mat3
     *
     * @param {mat3} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$2(a) {
        return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
    }
    /**
     * Returns Frobenius norm of a mat3
     *
     * @param {mat3} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$2(a) {
        return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
    }
    /**
     * Adds two mat3's
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function add$2(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        out[8] = a[8] + b[8];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @returns {mat3} out
     */
    function subtract$2(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        out[6] = a[6] - b[6];
        out[7] = a[7] - b[7];
        out[8] = a[8] - b[8];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat3} out the receiving matrix
     * @param {mat3} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat3} out
     */
    function multiplyScalar$2(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        out[8] = a[8] * b;
        return out;
    }
    /**
     * Adds two mat3's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat3} out the receiving vector
     * @param {mat3} a the first operand
     * @param {mat3} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat3} out
     */
    function multiplyScalarAndAdd$2(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        out[6] = a[6] + b[6] * scale;
        out[7] = a[7] + b[7] * scale;
        out[8] = a[8] + b[8] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat3} a The first matrix.
     * @param {mat3} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$2(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat3} a The first matrix.
     * @param {mat3} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$3(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
    }
    /**
     * Alias for {@link mat3.multiply}
     * @function
     */
    var mul$2 = multiply$2;
    /**
     * Alias for {@link mat3.subtract}
     * @function
     */
    var sub$2 = subtract$2;
    glMatrix_1.mat3 = Object.freeze({
        create: create$2,
        fromMat4: fromMat4,
        clone: clone$2,
        copy: copy$2,
        fromValues: fromValues$2,
        set: set$2,
        identity: identity$2,
        transpose: transpose$1,
        invert: invert$2,
        adjoint: adjoint$1,
        determinant: determinant$2,
        multiply: multiply$2,
        translate: translate$1,
        rotate: rotate$2,
        scale: scale$2,
        fromTranslation: fromTranslation$1,
        fromRotation: fromRotation$2,
        fromScaling: fromScaling$2,
        fromMat2d: fromMat2d,
        fromQuat: fromQuat,
        normalFromMat4: normalFromMat4,
        projection: projection,
        str: str$2,
        frob: frob$2,
        add: add$2,
        subtract: subtract$2,
        multiplyScalar: multiplyScalar$2,
        multiplyScalarAndAdd: multiplyScalarAndAdd$2,
        exactEquals: exactEquals$2,
        equals: equals$3,
        mul: mul$2,
        sub: sub$2
    });
    /**
     * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
     * @module mat4
     */
    /**
     * Creates a new identity mat4
     *
     * @returns {mat4} a new 4x4 matrix
     */
    function create$3() {
        var out = new ARRAY_TYPE(16);
        if (ARRAY_TYPE != Float32Array) {
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
        }
        out[0] = 1;
        out[5] = 1;
        out[10] = 1;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a new mat4 initialized with values from an existing matrix
     *
     * @param {mat4} a matrix to clone
     * @returns {mat4} a new 4x4 matrix
     */
    function clone$3(a) {
        var out = new ARRAY_TYPE(16);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Copy the values from one mat4 to another
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function copy$3(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Create a new mat4 with the given values
     *
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} A new mat4
     */
    function fromValues$3(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        var out = new ARRAY_TYPE(16);
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m03;
        out[4] = m10;
        out[5] = m11;
        out[6] = m12;
        out[7] = m13;
        out[8] = m20;
        out[9] = m21;
        out[10] = m22;
        out[11] = m23;
        out[12] = m30;
        out[13] = m31;
        out[14] = m32;
        out[15] = m33;
        return out;
    }
    /**
     * Set the components of a mat4 to the given values
     *
     * @param {mat4} out the receiving matrix
     * @param {Number} m00 Component in column 0, row 0 position (index 0)
     * @param {Number} m01 Component in column 0, row 1 position (index 1)
     * @param {Number} m02 Component in column 0, row 2 position (index 2)
     * @param {Number} m03 Component in column 0, row 3 position (index 3)
     * @param {Number} m10 Component in column 1, row 0 position (index 4)
     * @param {Number} m11 Component in column 1, row 1 position (index 5)
     * @param {Number} m12 Component in column 1, row 2 position (index 6)
     * @param {Number} m13 Component in column 1, row 3 position (index 7)
     * @param {Number} m20 Component in column 2, row 0 position (index 8)
     * @param {Number} m21 Component in column 2, row 1 position (index 9)
     * @param {Number} m22 Component in column 2, row 2 position (index 10)
     * @param {Number} m23 Component in column 2, row 3 position (index 11)
     * @param {Number} m30 Component in column 3, row 0 position (index 12)
     * @param {Number} m31 Component in column 3, row 1 position (index 13)
     * @param {Number} m32 Component in column 3, row 2 position (index 14)
     * @param {Number} m33 Component in column 3, row 3 position (index 15)
     * @returns {mat4} out
     */
    function set$3(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        out[0] = m00;
        out[1] = m01;
        out[2] = m02;
        out[3] = m03;
        out[4] = m10;
        out[5] = m11;
        out[6] = m12;
        out[7] = m13;
        out[8] = m20;
        out[9] = m21;
        out[10] = m22;
        out[11] = m23;
        out[12] = m30;
        out[13] = m31;
        out[14] = m32;
        out[15] = m33;
        return out;
    }
    /**
     * Set a mat4 to the identity matrix
     *
     * @param {mat4} out the receiving matrix
     * @returns {mat4} out
     */
    function identity$3(out) {
        out = out || new MatType(16);
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Transpose the values of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function transpose$2(out, a) {
        out = out || new MatType(16);
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
            var a01 = a[1], a02 = a[2], a03 = a[3];
            var a12 = a[6], a13 = a[7];
            var a23 = a[11];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a01;
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a02;
            out[9] = a12;
            out[11] = a[14];
            out[12] = a03;
            out[13] = a13;
            out[14] = a23;
        }
        else {
            out[0] = a[0];
            out[1] = a[4];
            out[2] = a[8];
            out[3] = a[12];
            out[4] = a[1];
            out[5] = a[5];
            out[6] = a[9];
            out[7] = a[13];
            out[8] = a[2];
            out[9] = a[6];
            out[10] = a[10];
            out[11] = a[14];
            out[12] = a[3];
            out[13] = a[7];
            out[14] = a[11];
            out[15] = a[15];
        }
        return out;
    }
    /**
     * creates a matrix from translation, quaternion, scale
     * @param {Number[]} translation [x, y, z] translation
     * @param {Number[]} quaternion [x, y, z, z] quaternion rotation
     * @param {Number[]} scale [x, y, z] scale
     * @param {Matrix4} [dst] optional matrix to store result
     * @return {Matrix4} dst or a new matrix if none provided
     */
    function compose(translation, quaternion, scale, dst) {
        dst = dst || new Float32Array(16);
        var x = quaternion[0];
        var y = quaternion[1];
        var z = quaternion[2];
        var w = quaternion[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = scale[0];
        var sy = scale[1];
        var sz = scale[2];
        dst[0] = (1 - (yy + zz)) * sx;
        dst[1] = (xy + wz) * sx;
        dst[2] = (xz - wy) * sx;
        dst[3] = 0;
        dst[4] = (xy - wz) * sy;
        dst[5] = (1 - (xx + zz)) * sy;
        dst[6] = (yz + wx) * sy;
        dst[7] = 0;
        dst[8] = (xz + wy) * sz;
        dst[9] = (yz - wx) * sz;
        dst[10] = (1 - (xx + yy)) * sz;
        dst[11] = 0;
        dst[12] = translation[0];
        dst[13] = translation[1];
        dst[14] = translation[2];
        dst[15] = 1;
        return dst;
    }
    function decompose(mat, translation, quaternion, scale) {
        var sx = length(mat.slice(0, 3));
        var sy = length(mat.slice(4, 7));
        var sz = length(mat.slice(8, 11));
        // if determinate is negative, we need to invert one scale
        var det = determinate(mat);
        if (det < 0) {
            sx = -sx;
        }
        translation[0] = mat[12];
        translation[1] = mat[13];
        translation[2] = mat[14];
        // scale the rotation part
        var matrix = glMatrix_1.mat4.create();
        glMatrix_1.mat4.copy(matrix, mat);
        var invSX = 1 / sx;
        var invSY = 1 / sy;
        var invSZ = 1 / sz;
        matrix[0] *= invSX;
        matrix[1] *= invSX;
        matrix[2] *= invSX;
        matrix[4] *= invSY;
        matrix[5] *= invSY;
        matrix[6] *= invSY;
        matrix[8] *= invSZ;
        matrix[9] *= invSZ;
        matrix[10] *= invSZ;
        quatFromRotationMatrix(matrix, quaternion);
        scale[0] = sx;
        scale[1] = sy;
        scale[2] = sz;
    }
    function determinate(m) {
        var m00 = m[0 * 4 + 0];
        var m01 = m[0 * 4 + 1];
        var m02 = m[0 * 4 + 2];
        var m03 = m[0 * 4 + 3];
        var m10 = m[1 * 4 + 0];
        var m11 = m[1 * 4 + 1];
        var m12 = m[1 * 4 + 2];
        var m13 = m[1 * 4 + 3];
        var m20 = m[2 * 4 + 0];
        var m21 = m[2 * 4 + 1];
        var m22 = m[2 * 4 + 2];
        var m23 = m[2 * 4 + 3];
        var m30 = m[3 * 4 + 0];
        var m31 = m[3 * 4 + 1];
        var m32 = m[3 * 4 + 2];
        var m33 = m[3 * 4 + 3];
        var tmp_0 = m22 * m33;
        var tmp_1 = m32 * m23;
        var tmp_2 = m12 * m33;
        var tmp_3 = m32 * m13;
        var tmp_4 = m12 * m23;
        var tmp_5 = m22 * m13;
        var tmp_6 = m02 * m33;
        var tmp_7 = m32 * m03;
        var tmp_8 = m02 * m23;
        var tmp_9 = m22 * m03;
        var tmp_10 = m02 * m13;
        var tmp_11 = m12 * m03;
        var t0 = (tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31) -
            (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);
        var t1 = (tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31) -
            (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);
        var t2 = (tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31) -
            (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);
        var t3 = (tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21) -
            (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);
        return 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);
    }
    function quatFromRotationMatrix(m, dst) {
        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
        var m11 = m[0];
        var m12 = m[4];
        var m13 = m[8];
        var m21 = m[1];
        var m22 = m[5];
        var m23 = m[9];
        var m31 = m[2];
        var m32 = m[6];
        var m33 = m[10];
        var trace = m11 + m22 + m33;
        if (trace > 0) {
            var s = 0.5 / Math.sqrt(trace + 1);
            dst[3] = 0.25 / s;
            dst[0] = (m32 - m23) * s;
            dst[1] = (m13 - m31) * s;
            dst[2] = (m21 - m12) * s;
        }
        else if (m11 > m22 && m11 > m33) {
            var s = 2 * Math.sqrt(1 + m11 - m22 - m33);
            dst[3] = (m32 - m23) / s;
            dst[0] = 0.25 * s;
            dst[1] = (m12 + m21) / s;
            dst[2] = (m13 + m31) / s;
        }
        else if (m22 > m33) {
            var s = 2 * Math.sqrt(1 + m22 - m11 - m33);
            dst[3] = (m13 - m31) / s;
            dst[0] = (m12 + m21) / s;
            dst[1] = 0.25 * s;
            dst[2] = (m23 + m32) / s;
        }
        else {
            var s = 2 * Math.sqrt(1 + m33 - m11 - m22);
            dst[3] = (m21 - m12) / s;
            dst[0] = (m13 + m31) / s;
            dst[1] = (m23 + m32) / s;
            dst[2] = 0.25 * s;
        }
    }
    /**
     * Inverts a mat4
     * 求一个矩阵的逆矩阵
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function invert$3(out, a) {
        out = out || new MatType(16);
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        if (!det) {
            return null;
        }
        det = 1.0 / det;
        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return out;
    }
    /**
     * Calculates the adjugate of a mat4
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the source matrix
     * @returns {mat4} out
     */
    function adjoint$2(out, a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
        out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
        out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
        out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
        out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
        out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
        out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
        out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
        out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
        out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
        out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
        out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
        out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
        out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
        out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
        out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
        return out;
    }
    /**
     * Calculates the determinant of a mat4
     *
     * @param {mat4} a the source matrix
     * @returns {Number} determinant of a
     */
    function determinant$3(a) {
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant
        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    }
    /**
     * Multiplies two mat4s
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */
    function multiply$3(out, a, b) {
        out = out || new MatType(16);
        var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
        var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
        var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
        var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15]; // Cache only the current line of the second matrix
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[4];
        b1 = b[5];
        b2 = b[6];
        b3 = b[7];
        out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[8];
        b1 = b[9];
        b2 = b[10];
        b3 = b[11];
        out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b[12];
        b1 = b[13];
        b2 = b[14];
        b3 = b[15];
        out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        return out;
    }
    /**
     * Translate a mat4 by the given vector
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to translate
     * @param {vec3} v vector to translate by
     * @returns {mat4} out
     */
    function translate$2(out, a, v) {
        out = out || new MatType(16);
        var x = v[0], y = v[1], z = v[2];
        var a00, a01, a02, a03;
        var a10, a11, a12, a13;
        var a20, a21, a22, a23;
        if (a === out) {
            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
        }
        else {
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a03;
            out[4] = a10;
            out[5] = a11;
            out[6] = a12;
            out[7] = a13;
            out[8] = a20;
            out[9] = a21;
            out[10] = a22;
            out[11] = a23;
            out[12] = a00 * x + a10 * y + a20 * z + a[12];
            out[13] = a01 * x + a11 * y + a21 * z + a[13];
            out[14] = a02 * x + a12 * y + a22 * z + a[14];
            out[15] = a03 * x + a13 * y + a23 * z + a[15];
        }
        return out;
    }
    /**
     * Makes a scale matrix
     * @param {number} sx x scale.
     * @param {number} sy y scale.
     * @param {number} sz z scale.
     * @param {Matrix4} [dst] optional matrix to store result
     * @return {Matrix4} dst or a new matrix if none provided
     * @memberOf module:webgl-3d-math
     */
    function scaling(dst, sx, sy, sz) {
        dst = dst || new MatType(16);
        dst[0] = sx;
        dst[1] = 0;
        dst[2] = 0;
        dst[3] = 0;
        dst[4] = 0;
        dst[5] = sy;
        dst[6] = 0;
        dst[7] = 0;
        dst[8] = 0;
        dst[9] = 0;
        dst[10] = sz;
        dst[11] = 0;
        dst[12] = 0;
        dst[13] = 0;
        dst[14] = 0;
        dst[15] = 1;
        return dst;
    }
    /**
     * Scales the mat4 by the dimensions in the given vec3 not using vectorization
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {vec3} v the vec3 to scale the matrix by
     * @returns {mat4} out
     **/
    function scale$3(out, a, v) {
        var x = v[0], y = v[1], z = v[2];
        out[0] = a[0] * x;
        out[1] = a[1] * x;
        out[2] = a[2] * x;
        out[3] = a[3] * x;
        out[4] = a[4] * y;
        out[5] = a[5] * y;
        out[6] = a[6] * y;
        out[7] = a[7] * y;
        out[8] = a[8] * z;
        out[9] = a[9] * z;
        out[10] = a[10] * z;
        out[11] = a[11] * z;
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    }
    /**
     * Rotates a mat4 by the given angle around the given axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @param {vec3} axis the axis to rotate around
     * @returns {mat4} out
     */
    function rotate$3(out, a, rad, axis) {
        var x = axis[0], y = axis[1], z = axis[2];
        var len = Math.hypot(x, y, z);
        var s, c, t;
        var a00, a01, a02, a03;
        var a10, a11, a12, a13;
        var a20, a21, a22, a23;
        var b00, b01, b02;
        var b10, b11, b12;
        var b20, b21, b22;
        if (len < EPSILON) {
            return null;
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(rad);
        c = Math.cos(rad);
        t = 1 - c;
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11]; // Construct the elements of the rotation matrix
        b00 = x * x * t + c;
        b01 = y * x * t + z * s;
        b02 = z * x * t - y * s;
        b10 = x * y * t - z * s;
        b11 = y * y * t + c;
        b12 = z * y * t + x * s;
        b20 = x * z * t + y * s;
        b21 = y * z * t - x * s;
        b22 = z * z * t + c; // Perform rotation-specific matrix multiplication
        out[0] = a00 * b00 + a10 * b01 + a20 * b02;
        out[1] = a01 * b00 + a11 * b01 + a21 * b02;
        out[2] = a02 * b00 + a12 * b01 + a22 * b02;
        out[3] = a03 * b00 + a13 * b01 + a23 * b02;
        out[4] = a00 * b10 + a10 * b11 + a20 * b12;
        out[5] = a01 * b10 + a11 * b11 + a21 * b12;
        out[6] = a02 * b10 + a12 * b11 + a22 * b12;
        out[7] = a03 * b10 + a13 * b11 + a23 * b12;
        out[8] = a00 * b20 + a10 * b21 + a20 * b22;
        out[9] = a01 * b20 + a11 * b21 + a21 * b22;
        out[10] = a02 * b20 + a12 * b21 + a22 * b22;
        out[11] = a03 * b20 + a13 * b21 + a23 * b22;
        if (a !== out) {
            // If the source and destination differ, copy the unchanged last row
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        }
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the X axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateX(out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[4] = a10 * c + a20 * s;
        out[5] = a11 * c + a21 * s;
        out[6] = a12 * c + a22 * s;
        out[7] = a13 * c + a23 * s;
        out[8] = a20 * c - a10 * s;
        out[9] = a21 * c - a11 * s;
        out[10] = a22 * c - a12 * s;
        out[11] = a23 * c - a13 * s;
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the Y axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateY(out, a, rad) {
        out = out || new MatType(16);
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[0] = a00 * c - a20 * s;
        out[1] = a01 * c - a21 * s;
        out[2] = a02 * c - a22 * s;
        out[3] = a03 * c - a23 * s;
        out[8] = a00 * s + a20 * c;
        out[9] = a01 * s + a21 * c;
        out[10] = a02 * s + a22 * c;
        out[11] = a03 * s + a23 * c;
        return out;
    }
    /**
     * Rotates a matrix by the given angle around the Z axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function rotateZ(out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged last row
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[0] = a00 * c + a10 * s;
        out[1] = a01 * c + a11 * s;
        out[2] = a02 * c + a12 * s;
        out[3] = a03 * c + a13 * s;
        out[4] = a10 * c - a00 * s;
        out[5] = a11 * c - a01 * s;
        out[6] = a12 * c - a02 * s;
        out[7] = a13 * c - a03 * s;
        return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {vec3} v Translation vector
     * @returns {mat4} out
     */
    function fromTranslation$2(out, v) {
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a vector scaling
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.scale(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {vec3} v Scaling vector
     * @returns {mat4} out
     */
    function fromScaling$3(out, v) {
        out[0] = v[0];
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = v[1];
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = v[2];
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a given angle around a given axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotate(dest, dest, rad, axis);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @param {vec3} axis the axis to rotate around
     * @returns {mat4} out
     */
    function fromRotation$3(out, rad, axis) {
        var x = axis[0], y = axis[1], z = axis[2];
        var len = Math.hypot(x, y, z);
        var s, c, t;
        if (len < EPSILON) {
            return null;
        }
        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        s = Math.sin(rad);
        c = Math.cos(rad);
        t = 1 - c; // Perform rotation-specific matrix multiplication
        out[0] = x * x * t + c;
        out[1] = y * x * t + z * s;
        out[2] = z * x * t - y * s;
        out[3] = 0;
        out[4] = x * y * t - z * s;
        out[5] = y * y * t + c;
        out[6] = z * y * t + x * s;
        out[7] = 0;
        out[8] = x * z * t + y * s;
        out[9] = y * z * t - x * s;
        out[10] = z * z * t + c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the X axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateX(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromXRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = 1;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = c;
        out[6] = s;
        out[7] = 0;
        out[8] = 0;
        out[9] = -s;
        out[10] = c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the Y axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateY(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromYRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = c;
        out[1] = 0;
        out[2] = -s;
        out[3] = 0;
        out[4] = 0;
        out[5] = 1;
        out[6] = 0;
        out[7] = 0;
        out[8] = s;
        out[9] = 0;
        out[10] = c;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from the given angle around the Z axis
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.rotateZ(dest, dest, rad);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    function fromZRotation(out, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad); // Perform axis-specific matrix multiplication
        out[0] = c;
        out[1] = s;
        out[2] = 0;
        out[3] = 0;
        out[4] = -s;
        out[5] = c;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 1;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation and vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @returns {mat4} out
     */
    function fromRotationTranslation(out, q, v) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - (yy + zz);
        out[1] = xy + wz;
        out[2] = xz - wy;
        out[3] = 0;
        out[4] = xy - wz;
        out[5] = 1 - (xx + zz);
        out[6] = yz + wx;
        out[7] = 0;
        out[8] = xz + wy;
        out[9] = yz - wx;
        out[10] = 1 - (xx + yy);
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a new mat4 from a dual quat.
     *
     * @param {mat4} out Matrix
     * @param {quat2} a Dual Quaternion
     * @returns {mat4} mat4 receiving operation result
     */
    function fromQuat2(out, a) {
        var translation = new ARRAY_TYPE(3);
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
        var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense
        if (magnitude > 0) {
            translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
            translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
            translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
        }
        else {
            translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
            translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
            translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
        }
        fromRotationTranslation(out, a, translation);
        return out;
    }
    /**
     * Returns the translation vector component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslation,
     *  the returned vector will be the same as the translation vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive translation component
     * @param  {mat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */
    function getTranslation(out, mat) {
        out[0] = mat[12];
        out[1] = mat[13];
        out[2] = mat[14];
        return out;
    }
    /**
     * Returns the scaling factor component of a transformation
     *  matrix. If a matrix is built with fromRotationTranslationScale
     *  with a normalized Quaternion paramter, the returned vector will be
     *  the same as the scaling vector
     *  originally supplied.
     * @param  {vec3} out Vector to receive scaling factor component
     * @param  {mat4} mat Matrix to be decomposed (input)
     * @return {vec3} out
     */
    function getScaling(out, mat) {
        var m11 = mat[0];
        var m12 = mat[1];
        var m13 = mat[2];
        var m21 = mat[4];
        var m22 = mat[5];
        var m23 = mat[6];
        var m31 = mat[8];
        var m32 = mat[9];
        var m33 = mat[10];
        out[0] = Math.hypot(m11, m12, m13);
        out[1] = Math.hypot(m21, m22, m23);
        out[2] = Math.hypot(m31, m32, m33);
        return out;
    }
    /**
     * Returns a quaternion representing the rotational component
     *  of a transformation matrix. If a matrix is built with
     *  fromRotationTranslation, the returned quaternion will be the
     *  same as the quaternion originally supplied.
     * @param {quat} out Quaternion to receive the rotation component
     * @param {mat4} mat Matrix to be decomposed (input)
     * @return {quat} out
     */
    function getRotation(out, mat) {
        var scaling = new ARRAY_TYPE(3);
        getScaling(scaling, mat);
        var is1 = 1 / scaling[0];
        var is2 = 1 / scaling[1];
        var is3 = 1 / scaling[2];
        var sm11 = mat[0] * is1;
        var sm12 = mat[1] * is2;
        var sm13 = mat[2] * is3;
        var sm21 = mat[4] * is1;
        var sm22 = mat[5] * is2;
        var sm23 = mat[6] * is3;
        var sm31 = mat[8] * is1;
        var sm32 = mat[9] * is2;
        var sm33 = mat[10] * is3;
        var trace = sm11 + sm22 + sm33;
        var S = 0;
        if (trace > 0) {
            S = Math.sqrt(trace + 1.0) * 2;
            out[3] = 0.25 * S;
            out[0] = (sm23 - sm32) / S;
            out[1] = (sm31 - sm13) / S;
            out[2] = (sm12 - sm21) / S;
        }
        else if (sm11 > sm22 && sm11 > sm33) {
            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
            out[3] = (sm23 - sm32) / S;
            out[0] = 0.25 * S;
            out[1] = (sm12 + sm21) / S;
            out[2] = (sm31 + sm13) / S;
        }
        else if (sm22 > sm33) {
            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
            out[3] = (sm31 - sm13) / S;
            out[0] = (sm12 + sm21) / S;
            out[1] = 0.25 * S;
            out[2] = (sm23 + sm32) / S;
        }
        else {
            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
            out[3] = (sm12 - sm21) / S;
            out[0] = (sm31 + sm13) / S;
            out[1] = (sm23 + sm32) / S;
            out[2] = 0.25 * S;
        }
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @param {vec3} s Scaling vector
     * @returns {mat4} out
     */
    function fromRotationTranslationScale(out, q, v, s) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s[0];
        var sy = s[1];
        var sz = s[2];
        out[0] = (1 - (yy + zz)) * sx;
        out[1] = (xy + wz) * sx;
        out[2] = (xz - wy) * sx;
        out[3] = 0;
        out[4] = (xy - wz) * sy;
        out[5] = (1 - (xx + zz)) * sy;
        out[6] = (yz + wx) * sy;
        out[7] = 0;
        out[8] = (xz + wy) * sz;
        out[9] = (yz - wx) * sz;
        out[10] = (1 - (xx + yy)) * sz;
        out[11] = 0;
        out[12] = v[0];
        out[13] = v[1];
        out[14] = v[2];
        out[15] = 1;
        return out;
    }
    /**
     * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, vec);
     *     mat4.translate(dest, origin);
     *     let quatMat = mat4.create();
     *     quat4.toMat4(quat, quatMat);
     *     mat4.multiply(dest, quatMat);
     *     mat4.scale(dest, scale)
     *     mat4.translate(dest, negativeOrigin);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat4} q Rotation quaternion
     * @param {vec3} v Translation vector
     * @param {vec3} s Scaling vector
     * @param {vec3} o The origin vector around which to scale and rotate
     * @returns {mat4} out
     */
    function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
        // Quaternion math
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s[0];
        var sy = s[1];
        var sz = s[2];
        var ox = o[0];
        var oy = o[1];
        var oz = o[2];
        var out0 = (1 - (yy + zz)) * sx;
        var out1 = (xy + wz) * sx;
        var out2 = (xz - wy) * sx;
        var out4 = (xy - wz) * sy;
        var out5 = (1 - (xx + zz)) * sy;
        var out6 = (yz + wx) * sy;
        var out8 = (xz + wy) * sz;
        var out9 = (yz - wx) * sz;
        var out10 = (1 - (xx + yy)) * sz;
        out[0] = out0;
        out[1] = out1;
        out[2] = out2;
        out[3] = 0;
        out[4] = out4;
        out[5] = out5;
        out[6] = out6;
        out[7] = 0;
        out[8] = out8;
        out[9] = out9;
        out[10] = out10;
        out[11] = 0;
        out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
        out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
        out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
        out[15] = 1;
        return out;
    }
    /**
     * Calculates a 4x4 matrix from the given quaternion
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {quat} q Quaternion to create matrix from
     *
     * @returns {mat4} out
     */
    function fromQuat$1(out, q) {
        var x = q[0], y = q[1], z = q[2], w = q[3];
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out[0] = 1 - yy - zz;
        out[1] = yx + wz;
        out[2] = zx - wy;
        out[3] = 0;
        out[4] = yx - wz;
        out[5] = 1 - xx - zz;
        out[6] = zy + wx;
        out[7] = 0;
        out[8] = zx + wy;
        out[9] = zy - wx;
        out[10] = 1 - xx - yy;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
        out[15] = 1;
        return out;
    }
    /**
     * Generates a frustum matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Number} left Left bound of the frustum
     * @param {Number} right Right bound of the frustum
     * @param {Number} bottom Bottom bound of the frustum
     * @param {Number} top Top bound of the frustum
     * @param {Number} near Near bound of the frustum
     * @param {Number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function frustum(out, left, right, bottom, top, near, far) {
        var rl = 1 / (right - left);
        var tb = 1 / (top - bottom);
        var nf = 1 / (near - far);
        out[0] = near * 2 * rl;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = near * 2 * tb;
        out[6] = 0;
        out[7] = 0;
        out[8] = (right + left) * rl;
        out[9] = (top + bottom) * tb;
        out[10] = (far + near) * nf;
        out[11] = -1;
        out[12] = 0;
        out[13] = 0;
        out[14] = far * near * 2 * nf;
        out[15] = 0;
        return out;
    }
    /**
     * Generates a perspective projection matrix with the given bounds.
     * Passing null/undefined/no value for far will generate infinite projection matrix.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} fovy Vertical field of view in radians
     * @param {number} aspect Aspect ratio. typically viewport width/height
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum, can be null or Infinity
     * @returns {mat4} out
     */
    function perspective(out, fovy, aspect, near, far) {
        out = out || new MatType(16);
        var f = 1.0 / Math.tan(fovy / 2), nf;
        out[0] = f / aspect;
        out[1] = 0;
        out[2] = 0; //x轴
        out[3] = 0;
        out[4] = 0;
        out[5] = f; //y轴
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0; //z轴
        out[11] = -1;
        out[12] = 0;
        out[13] = 0;
        out[15] = 0;
        if (far != null && far !== Infinity) {
            nf = 1 / (near - far);
            out[10] = (far + near) * nf;
            out[14] = 2 * far * near * nf;
        }
        else {
            out[10] = -1;
            out[14] = -2 * near;
        }
        return out;
    }
    /**
     * Generates a perspective projection matrix with the given field of view.
     * This is primarily useful for generating projection matrices to be used
     * with the still experiemental WebVR API.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function perspectiveFromFieldOfView(out, fov, near, far) {
        var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
        var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
        var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
        var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
        var xScale = 2.0 / (leftTan + rightTan);
        var yScale = 2.0 / (upTan + downTan);
        out[0] = xScale;
        out[1] = 0.0;
        out[2] = 0.0;
        out[3] = 0.0;
        out[4] = 0.0;
        out[5] = yScale;
        out[6] = 0.0;
        out[7] = 0.0;
        out[8] = -((leftTan - rightTan) * xScale * 0.5);
        out[9] = (upTan - downTan) * yScale * 0.5;
        out[10] = far / (near - far);
        out[11] = -1.0;
        out[12] = 0.0;
        out[13] = 0.0;
        out[14] = far * near / (near - far);
        out[15] = 0.0;
        return out;
    }
    /**
     * Generates a orthogonal projection matrix with the given bounds
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} left Left bound of the frustum
     * @param {number} right Right bound of the frustum
     * @param {number} bottom Bottom bound of the frustum
     * @param {number} top Top bound of the frustum
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */
    function ortho(out, left, right, bottom, top, near, far) {
        out = out || new MatType(16);
        var lr = 1 / (left - right);
        var bt = 1 / (bottom - top);
        var nf = 1 / (near - far);
        out[0] = -2 * lr;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[5] = -2 * bt;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[10] = 2 * nf;
        out[11] = 0;
        out[12] = (left + right) * lr;
        out[13] = (top + bottom) * bt;
        out[14] = (far + near) * nf;
        out[15] = 1;
        return out;
    }
    /**
     * Generates a look-at matrix with the given eye position, focal point, and up axis.
     * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {vec3} eye Position of the viewer
     * @param {vec3} center Point the viewer is looking at
     * @param {vec3} up vec3 pointing up
     * @returns {mat4} out
     */
    function lookAt(out, eye, center, up) {
        out = out || new MatType(16);
        var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
        var eyex = eye[0];
        var eyey = eye[1];
        var eyez = eye[2];
        var upx = up[0]; //0
        var upy = up[1]; //1
        var upz = up[2]; //0
        var centerx = center[0]; //0
        var centery = center[1]; //0
        var centerz = center[2]; //0
        if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
            return identity$3(out);
        }
        z0 = eyex - centerx;
        z1 = eyey - centery;
        z2 = eyez - centerz;
        //平方和的平方根
        len = 1 / Math.hypot(z0, z1, z2);
        z0 *= len;
        z1 *= len;
        z2 *= len;
        x0 = upy * z2 - upz * z1;
        x1 = upz * z0 - upx * z2;
        x2 = upx * z1 - upy * z0;
        len = Math.hypot(x0, x1, x2);
        if (!len) {
            x0 = 0;
            x1 = 0;
            x2 = 0;
        }
        else {
            len = 1 / len;
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        y0 = z1 * x2 - z2 * x1;
        y1 = z2 * x0 - z0 * x2;
        y2 = z0 * x1 - z1 * x0;
        len = Math.hypot(y0, y1, y2);
        if (!len) {
            y0 = 0;
            y1 = 0;
            y2 = 0;
        }
        else {
            len = 1 / len;
            y0 *= len;
            y1 *= len;
            y2 *= len;
        }
        out[0] = x0;
        out[1] = y0;
        out[2] = z0; //x轴
        out[3] = 0;
        out[4] = x1;
        out[5] = y1;
        out[6] = z1; //y轴
        out[7] = 0;
        out[8] = x2;
        out[9] = y2;
        out[10] = z2; //z轴
        out[11] = 0;
        out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
        out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
        out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
        out[15] = 1;
        return out;
    }
    /**
     * Creates a lookAt matrix.
     * This is a world matrix for a camera. In other words it will transform
     * from the origin to a place and orientation in the world. For a view
     * matrix take the inverse of this.
     * @param {Vector3} cameraPosition position of the camera
     * @param {Vector3} target position of the target
     * @param {Vector3} up direction
     * @param {Matrix4} [dst] optional matrix to store result
     * @return {Matrix4} dst or a new matrix if none provided
     * @memberOf module:webgl-3d-math
     */
    function lookAt2(dst, cameraPosition, target, up) {
        dst = dst || new MatType(16);
        var zAxis = [];
        var subR = [];
        normalize(zAxis, subtractVectors(subR, cameraPosition, target));
        var xAxis = [];
        var cross1 = [];
        normalize(xAxis, cross(cross1, up, zAxis));
        var yAxis = [];
        var cross2 = [];
        normalize(yAxis, cross(cross2, zAxis, xAxis));
        dst[0] = xAxis[0];
        dst[1] = xAxis[1];
        dst[2] = xAxis[2];
        dst[3] = 0;
        dst[4] = yAxis[0];
        dst[5] = yAxis[1];
        dst[6] = yAxis[2];
        dst[7] = 0;
        dst[8] = zAxis[0];
        dst[9] = zAxis[1];
        dst[10] = zAxis[2];
        dst[11] = 0;
        dst[12] = cameraPosition[0];
        dst[13] = cameraPosition[1];
        dst[14] = cameraPosition[2];
        dst[15] = 1;
        return dst;
    }
    /**
     * Generates a matrix that makes something look at something else.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {vec3} eye Position of the viewer
     * @param {vec3} center Point the viewer is looking at
     * @param {vec3} up vec3 pointing up
     * @returns {mat4} out
     */
    function targetTo(out, eye, target, up) {
        var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
        var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
        var len = z0 * z0 + z1 * z1 + z2 * z2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            z0 *= len;
            z1 *= len;
            z2 *= len;
        }
        var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
        len = x0 * x0 + x1 * x1 + x2 * x2;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
            x0 *= len;
            x1 *= len;
            x2 *= len;
        }
        out[0] = x0;
        out[1] = x1;
        out[2] = x2;
        out[3] = 0;
        out[4] = z1 * x2 - z2 * x1;
        out[5] = z2 * x0 - z0 * x2;
        out[6] = z0 * x1 - z1 * x0;
        out[7] = 0;
        out[8] = z0;
        out[9] = z1;
        out[10] = z2;
        out[11] = 0;
        out[12] = eyex;
        out[13] = eyey;
        out[14] = eyez;
        out[15] = 1;
        return out;
    }
    /**
     * Returns a string representation of a mat4
     *
     * @param {mat4} a matrix to represent as a string
     * @returns {String} string representation of the matrix
     */
    function str$3(a) {
        return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
    }
    /**
     * Returns Frobenius norm of a mat4
     *
     * @param {mat4} a the matrix to calculate Frobenius norm of
     * @returns {Number} Frobenius norm
     */
    function frob$3(a) {
        return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
    }
    /**
     * Adds two mat4's
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */
    function add$3(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        out[8] = a[8] + b[8];
        out[9] = a[9] + b[9];
        out[10] = a[10] + b[10];
        out[11] = a[11] + b[11];
        out[12] = a[12] + b[12];
        out[13] = a[13] + b[13];
        out[14] = a[14] + b[14];
        out[15] = a[15] + b[15];
        return out;
    }
    /**
     * Subtracts matrix b from matrix a
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @returns {mat4} out
     */
    function subtract$3(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        out[4] = a[4] - b[4];
        out[5] = a[5] - b[5];
        out[6] = a[6] - b[6];
        out[7] = a[7] - b[7];
        out[8] = a[8] - b[8];
        out[9] = a[9] - b[9];
        out[10] = a[10] - b[10];
        out[11] = a[11] - b[11];
        out[12] = a[12] - b[12];
        out[13] = a[13] - b[13];
        out[14] = a[14] - b[14];
        out[15] = a[15] - b[15];
        return out;
    }
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat4} out
     */
    function multiplyScalar$3(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        out[8] = a[8] * b;
        out[9] = a[9] * b;
        out[10] = a[10] * b;
        out[11] = a[11] * b;
        out[12] = a[12] * b;
        out[13] = a[13] * b;
        out[14] = a[14] * b;
        out[15] = a[15] * b;
        return out;
    }
    /**
     * Adds two mat4's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat4} out the receiving vector
     * @param {mat4} a the first operand
     * @param {mat4} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat4} out
     */
    function multiplyScalarAndAdd$3(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        out[4] = a[4] + b[4] * scale;
        out[5] = a[5] + b[5] * scale;
        out[6] = a[6] + b[6] * scale;
        out[7] = a[7] + b[7] * scale;
        out[8] = a[8] + b[8] * scale;
        out[9] = a[9] + b[9] * scale;
        out[10] = a[10] + b[10] * scale;
        out[11] = a[11] + b[11] * scale;
        out[12] = a[12] + b[12] * scale;
        out[13] = a[13] + b[13] * scale;
        out[14] = a[14] + b[14] * scale;
        out[15] = a[15] + b[15] * scale;
        return out;
    }
    /**
     * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
     *
     * @param {mat4} a The first matrix.
     * @param {mat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function exactEquals$3(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
    }
    /**
     * Returns whether or not the matrices have approximately the same elements in the same position.
     *
     * @param {mat4} a The first matrix.
     * @param {mat4} b The second matrix.
     * @returns {Boolean} True if the matrices are equal, false otherwise.
     */
    function equals$4(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
        var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
        var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
        var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
        var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
    }
    /**
     * Alias for {@link mat4.multiply}
     * @function
     */
    var mul$3 = multiply$3;
    /**
     * Alias for {@link mat4.subtract}
     * @function
     */
    var sub$3 = subtract$3;
    glMatrix_1.mat4 = Object.freeze({
        create: create$3,
        clone: clone$3,
        copy: copy$3,
        addVectors: addVectors,
        subtractVectors: subtractVectors,
        scaleVector: scaleVector,
        compose: compose,
        decompose: decompose,
        fromValues: fromValues$3,
        set: set$3,
        identity: identity$3,
        transpose: transpose$2,
        invert: invert$3,
        adjoint: adjoint$2,
        determinant: determinant$3,
        multiply: multiply$3,
        translate: translate$2,
        scale: scale$3,
        scaling: scaling,
        rotate: rotate$3,
        rotateX: rotateX,
        rotateY: rotateY,
        rotateZ: rotateZ,
        fromTranslation: fromTranslation$2,
        transformDirection: transformDirection,
        transformPoint: transformPoint,
        translation: translation,
        fromScaling: fromScaling$3,
        fromRotation: fromRotation$3,
        fromXRotation: fromXRotation,
        fromYRotation: fromYRotation,
        fromZRotation: fromZRotation,
        fromRotationTranslation: fromRotationTranslation,
        fromQuat2: fromQuat2,
        getTranslation: getTranslation,
        getScaling: getScaling,
        getRotation: getRotation,
        fromRotationTranslationScale: fromRotationTranslationScale,
        fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
        fromQuat: fromQuat$1,
        frustum: frustum,
        perspective: perspective,
        perspectiveFromFieldOfView: perspectiveFromFieldOfView,
        ortho: ortho,
        lookAt: lookAt,
        lookAt2: lookAt2,
        targetTo: targetTo,
        str: str$3,
        frob: frob$3,
        add: add$3,
        subtract: subtract$3,
        multiplyScalar: multiplyScalar$3,
        multiplyScalarAndAdd: multiplyScalarAndAdd$3,
        exactEquals: exactEquals$3,
        equals: equals$4,
        mul: mul$3,
        sub: sub$3
    });
    /**
    * Makes a translation matrix
    * 将单位矩阵移动到指定位置
    * @param {number} tx x translation.
    * @param {number} ty y translation.
    * @param {number} tz z translation.
    * @param {Matrix4} [dst] optional matrix to store result
    * @return {Matrix4} dst or a new matrix if none provided
    * @memberOf module:webgl-3d-math
    */
    function translation(dst, tx, ty, tz) {
        dst = dst || new MatType(16);
        dst[0] = 1;
        dst[1] = 0;
        dst[2] = 0;
        dst[3] = 0;
        dst[4] = 0;
        dst[5] = 1;
        dst[6] = 0;
        dst[7] = 0;
        dst[8] = 0;
        dst[9] = 0;
        dst[10] = 1;
        dst[11] = 0;
        dst[12] = tx;
        dst[13] = ty;
        dst[14] = tz;
        dst[15] = 1;
        return dst;
    }
    /**
    * Takes a 4-by-4 matrix and a vector with 3 entries,
    * interprets the vector as a point, transforms that point by the matrix, and
    * returns the result as a vector with 3 entries.
    * @param {Matrix4} m The matrix.
    * @param {Vector3} v The point.
    * @param {Vector4} dst optional vector4 to store result
    * @return {Vector4} dst or new Vector4 if not provided
    * @memberOf module:webgl-3d-math
    */
    function transformPoint(dst, m, v) {
        dst = dst || new MatType(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];
        dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;
        dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;
        dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;
        return dst;
    }
    /**
     * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a
     * direction, transforms that direction by the matrix, and returns the result;
     * assumes the transformation of 3-dimensional space represented by the matrix
     * is parallel-preserving, i.e. any combination of rotation, scaling and
     * translation, but not a perspective distortion. Returns a vector with 3
     * entries.
     * @param {Matrix4} m The matrix.
     * @param {Vector3} v The direction.
     * @param {Vector4} dst optional vector4 to store result
     * @return {Vector4} dst or new Vector4 if not provided
     * @memberOf module:webgl-3d-math
     */
    function transformDirection(m, v, dst) {
        dst = dst || new MatType(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];
        dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];
        dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];
        return dst;
    }
    /**
     * 3 Dimensional Vector
     * @module vec3
     */
    /**
     * Creates a new, empty vec3
     *
     * @returns {vec3} a new 3D vector
     */
    function create$4() {
        var out = new ARRAY_TYPE(3);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec3 initialized with values from an existing vector
     *
     * @param {vec3} a vector to clone
     * @returns {vec3} a new 3D vector
     */
    function clone$4(a) {
        var out = new ARRAY_TYPE(3);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
    }
    /**
     * Calculates the length of a vec3
     *
     * @param {vec3} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        return Math.hypot(x, y, z);
    }
    /**
     * Creates a new vec3 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} a new 3D vector
     */
    function fromValues$4(x, y, z) {
        var out = new ARRAY_TYPE(3);
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
    }
    /**
     * Copy the values from one vec3 to another
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the source vector
     * @returns {vec3} out
     */
    function copy$4(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        return out;
    }
    /**
     * Set the components of a vec3 to the given values
     *
     * @param {vec3} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @returns {vec3} out
     */
    function set$4(out, x, y, z) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        return out;
    }
    /**
     * Adds two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function add$4(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function subtract$4(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        return out;
    }
    /**
     * Multiplies two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function multiply$4(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        out[2] = a[2] * b[2];
        return out;
    }
    /**
     * Divides two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function divide(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        out[2] = a[2] / b[2];
        return out;
    }
    /**
     * Math.ceil the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to ceil
     * @returns {vec3} out
     */
    function ceil(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        return out;
    }
    /**
     * Math.floor the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to floor
     * @returns {vec3} out
     */
    function floor(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        return out;
    }
    /**
     * Returns the minimum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function min(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        out[2] = Math.min(a[2], b[2]);
        return out;
    }
    /**
     * Returns the maximum of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function max(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        out[2] = Math.max(a[2], b[2]);
        return out;
    }
    /**
     * Math.round the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to round
     * @returns {vec3} out
     */
    function round(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        return out;
    }
    /**
     * Scales a vec3 by a scalar number
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec3} out
     */
    function scale$4(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        return out;
    }
    /**
     * Adds two vec3's after scaling the second operand by a scalar value
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec3} out
     */
    function scaleAndAdd(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        return Math.hypot(x, y, z);
    }
    /**
     * Calculates the squared euclidian distance between two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        return x * x + y * y + z * z;
    }
    /**
     * Calculates the squared length of a vec3
     *
     * @param {vec3} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        return x * x + y * y + z * z;
    }
    /**
     * Negates the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to negate
     * @returns {vec3} out
     */
    function negate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to invert
     * @returns {vec3} out
     */
    function inverse(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        return out;
    }
    /**
     * Normalize a vec3
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a vector to normalize
     * @returns {vec3} out
     */
    function normalize(out, a) {
        out = out || new Float32Array(3);
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var len = x * x + y * y + z * z;
        if (len > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len = 1 / Math.sqrt(len);
        }
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec3's
     *
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    /**
     * Computes the cross product of two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @returns {vec3} out
     */
    function cross(out, a, b) {
        var ax = a[0], ay = a[1], az = a[2];
        var bx = b[0], by = b[1], bz = b[2];
        out[0] = ay * bz - az * by;
        out[1] = az * bx - ax * bz;
        out[2] = ax * by - ay * bx;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec3's
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function lerp(out, a, b, t) {
        var ax = a[0];
        var ay = a[1];
        var az = a[2];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        out[2] = az + t * (b[2] - az);
        return out;
    }
    /**
     * Performs a hermite interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {vec3} c the third operand
     * @param {vec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function hermite(out, a, b, c, d, t) {
        var factorTimes2 = t * t;
        var factor1 = factorTimes2 * (2 * t - 3) + 1;
        var factor2 = factorTimes2 * (t - 2) + t;
        var factor3 = factorTimes2 * (t - 1);
        var factor4 = factorTimes2 * (3 - 2 * t);
        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
        return out;
    }
    /**
     * Performs a bezier interpolation with two control points
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the first operand
     * @param {vec3} b the second operand
     * @param {vec3} c the third operand
     * @param {vec3} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec3} out
     */
    function bezier(out, a, b, c, d, t) {
        var inverseFactor = 1 - t;
        var inverseFactorTimesTwo = inverseFactor * inverseFactor;
        var factorTimes2 = t * t;
        var factor1 = inverseFactorTimesTwo * inverseFactor;
        var factor2 = 3 * t * inverseFactorTimesTwo;
        var factor3 = 3 * factorTimes2 * inverseFactor;
        var factor4 = factorTimes2 * t;
        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec3} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec3} out
     */
    function random(out, scale) {
        scale = scale || 1.0;
        var r = RANDOM() * 2.0 * Math.PI;
        var z = RANDOM() * 2.0 - 1.0;
        var zScale = Math.sqrt(1.0 - z * z) * scale;
        out[0] = Math.cos(r) * zScale;
        out[1] = Math.sin(r) * zScale;
        out[2] = z * scale;
        return out;
    }
    /**
     * Transforms the vec3 with a mat4.
     * 4th vector component is implicitly '1'
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec3} out
     */
    function transformMat4(out, a, m) {
        var x = a[0], y = a[1], z = a[2];
        var w = m[3] * x + m[7] * y + m[11] * z + m[15];
        w = w || 1.0;
        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
        return out;
    }
    /**
     * Transforms the vec3 with a mat3.
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {mat3} m the 3x3 matrix to transform with
     * @returns {vec3} out
     */
    function transformMat3(out, a, m) {
        var x = a[0], y = a[1], z = a[2];
        out[0] = x * m[0] + y * m[3] + z * m[6];
        out[1] = x * m[1] + y * m[4] + z * m[7];
        out[2] = x * m[2] + y * m[5] + z * m[8];
        return out;
    }
    /**
     * Transforms the vec3 with a quat
     * Can also be used for dual quaternions. (Multiply it with the real part)
     *
     * @param {vec3} out the receiving vector
     * @param {vec3} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec3} out
     */
    function transformQuat(out, a, q) {
        // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
        var x = a[0], y = a[1], z = a[2]; // var qvec = [qx, qy, qz];
        // var uv = vec3.cross([], qvec, a);
        var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);
        var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);
        var w2 = qw * 2;
        uvx *= w2;
        uvy *= w2;
        uvz *= w2; // vec3.scale(uuv, uuv, 2);
        uuvx *= 2;
        uuvy *= 2;
        uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));
        out[0] = x + uvx + uuvx;
        out[1] = y + uvy + uuvy;
        out[2] = z + uvz + uuvz;
        return out;
    }
    /**
     * Rotate a 3D vector around the x-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateX$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[0];
        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Rotate a 3D vector around the y-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateY$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
        r[1] = p[1];
        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Rotate a 3D vector around the z-axis
     * @param {vec3} out The receiving vec3
     * @param {vec3} a The vec3 point to rotate
     * @param {vec3} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec3} out
     */
    function rotateZ$1(out, a, b, c) {
        var p = [], r = []; //Translate point to the origin
        p[0] = a[0] - b[0];
        p[1] = a[1] - b[1];
        p[2] = a[2] - b[2]; //perform rotation
        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
        r[2] = p[2]; //translate to correct position
        out[0] = r[0] + b[0];
        out[1] = r[1] + b[1];
        out[2] = r[2] + b[2];
        return out;
    }
    /**
     * Get the angle between two 3D vectors
     * @param {vec3} a The first operand
     * @param {vec3} b The second operand
     * @returns {Number} The angle in radians
     */
    function angle(a, b) {
        var tempA = fromValues$4(a[0], a[1], a[2]);
        var tempB = fromValues$4(b[0], b[1], b[2]);
        normalize(tempA, tempA);
        normalize(tempB, tempB);
        var cosine = dot(tempA, tempB);
        if (cosine > 1.0) {
            return 0;
        }
        else if (cosine < -1.0) {
            return Math.PI;
        }
        else {
            return Math.acos(cosine);
        }
    }
    /**
     * Set the components of a vec3 to zero
     *
     * @param {vec3} out the receiving vector
     * @returns {vec3} out
     */
    function zero(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        out[2] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec3} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$4(a) {
        return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {vec3} a The first vector.
     * @param {vec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$4(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec3} a The first vector.
     * @param {vec3} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$5(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2];
        var b0 = b[0], b1 = b[1], b2 = b[2];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
    }
    /**
     * Alias for {@link vec3.subtract}
     * @function
     */
    var sub$4 = subtract$4;
    /**
     * Alias for {@link vec3.multiply}
     * @function
     */
    var mul$4 = multiply$4;
    /**
     * Alias for {@link vec3.divide}
     * @function
     */
    var div = divide;
    /**
     * Alias for {@link vec3.distance}
     * @function
     */
    var dist = distance;
    /**
     * Alias for {@link vec3.squaredDistance}
     * @function
     */
    var sqrDist = squaredDistance;
    /**
     * Alias for {@link vec3.length}
     * @function
     */
    var len = length;
    /**
     * Alias for {@link vec3.squaredLength}
     * @function
     */
    var sqrLen = squaredLength;
    /**
     * Perform some operation over an array of vec3s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach = function () {
        var vec = create$4();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 3;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                vec[2] = a[i + 2];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
                a[i + 2] = vec[2];
            }
            return a;
        };
    }();
    glMatrix_1.vec3 = Object.freeze({
        create: create$4,
        clone: clone$4,
        length: length,
        fromValues: fromValues$4,
        copy: copy$4,
        set: set$4,
        add: add$4,
        subtract: subtract$4,
        multiply: multiply$4,
        divide: divide,
        ceil: ceil,
        floor: floor,
        min: min,
        max: max,
        round: round,
        scale: scale$4,
        scaleAndAdd: scaleAndAdd,
        distance: distance,
        squaredDistance: squaredDistance,
        squaredLength: squaredLength,
        negate: negate,
        inverse: inverse,
        normalize: normalize,
        dot: dot,
        cross: cross,
        lerp: lerp,
        hermite: hermite,
        bezier: bezier,
        random: random,
        transformMat4: transformMat4,
        transformMat3: transformMat3,
        transformQuat: transformQuat,
        rotateX: rotateX$1,
        rotateY: rotateY$1,
        rotateZ: rotateZ$1,
        angle: angle,
        zero: zero,
        str: str$4,
        exactEquals: exactEquals$4,
        equals: equals$5,
        sub: sub$4,
        mul: mul$4,
        div: div,
        dist: dist,
        sqrDist: sqrDist,
        len: len,
        sqrLen: sqrLen,
        forEach: forEach
    });
    /**
     * 4 Dimensional Vector
     * @module vec4
     */
    /**
     * Creates a new, empty vec4
     *
     * @returns {vec4} a new 4D vector
     */
    function create$5() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec4 initialized with values from an existing vector
     *
     * @param {vec4} a vector to clone
     * @returns {vec4} a new 4D vector
     */
    function clone$5(a) {
        var out = new ARRAY_TYPE(4);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Creates a new vec4 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} a new 4D vector
     */
    function fromValues$5(x, y, z, w) {
        var out = new ARRAY_TYPE(4);
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    /**
     * Copy the values from one vec4 to another
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the source vector
     * @returns {vec4} out
     */
    function copy$5(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Set the components of a vec4 to the given values
     *
     * @param {vec4} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {vec4} out
     */
    function set$5(out, x, y, z, w) {
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = w;
        return out;
    }
    /**
     * Adds two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function add$5(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function subtract$5(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        out[2] = a[2] - b[2];
        out[3] = a[3] - b[3];
        return out;
    }
    /**
     * Multiplies two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function multiply$5(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        out[2] = a[2] * b[2];
        out[3] = a[3] * b[3];
        return out;
    }
    /**
     * Divides two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function divide$1(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        out[2] = a[2] / b[2];
        out[3] = a[3] / b[3];
        return out;
    }
    /**
     * Math.ceil the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to ceil
     * @returns {vec4} out
     */
    function ceil$1(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        out[2] = Math.ceil(a[2]);
        out[3] = Math.ceil(a[3]);
        return out;
    }
    /**
     * Math.floor the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to floor
     * @returns {vec4} out
     */
    function floor$1(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        out[2] = Math.floor(a[2]);
        out[3] = Math.floor(a[3]);
        return out;
    }
    /**
     * Returns the minimum of two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function min$1(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        out[2] = Math.min(a[2], b[2]);
        out[3] = Math.min(a[3], b[3]);
        return out;
    }
    /**
     * Returns the maximum of two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {vec4} out
     */
    function max$1(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        out[2] = Math.max(a[2], b[2]);
        out[3] = Math.max(a[3], b[3]);
        return out;
    }
    /**
     * Math.round the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to round
     * @returns {vec4} out
     */
    function round$1(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        out[2] = Math.round(a[2]);
        out[3] = Math.round(a[3]);
        return out;
    }
    /**
     * Scales a vec4 by a scalar number
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec4} out
     */
    function scale$5(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        return out;
    }
    /**
     * Adds two vec4's after scaling the second operand by a scalar value
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec4} out
     */
    function scaleAndAdd$1(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        out[2] = a[2] + b[2] * scale;
        out[3] = a[3] + b[3] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance$1(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        var w = b[3] - a[3];
        return Math.hypot(x, y, z, w);
    }
    /**
     * Calculates the squared euclidian distance between two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance$1(a, b) {
        var x = b[0] - a[0];
        var y = b[1] - a[1];
        var z = b[2] - a[2];
        var w = b[3] - a[3];
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Calculates the length of a vec4
     *
     * @param {vec4} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length$1(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        return Math.hypot(x, y, z, w);
    }
    /**
     * Calculates the squared length of a vec4
     *
     * @param {vec4} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength$1(a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        return x * x + y * y + z * z + w * w;
    }
    /**
     * Negates the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to negate
     * @returns {vec4} out
     */
    function negate$1(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = -a[3];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to invert
     * @returns {vec4} out
     */
    function inverse$1(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        out[2] = 1.0 / a[2];
        out[3] = 1.0 / a[3];
        return out;
    }
    /**
     * Normalize a vec4
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a vector to normalize
     * @returns {vec4} out
     */
    function normalize$1(out, a) {
        var x = a[0];
        var y = a[1];
        var z = a[2];
        var w = a[3];
        var len = x * x + y * y + z * z + w * w;
        if (len > 0) {
            len = 1 / Math.sqrt(len);
        }
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec4's
     *
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot$1(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    /**
     * Returns the cross-product of three vectors in a 4-dimensional space
     *
     * @param {vec4} result the receiving vector
     * @param {vec4} U the first vector
     * @param {vec4} V the second vector
     * @param {vec4} W the third vector
     * @returns {vec4} result
     */
    function cross$1(out, u, v, w) {
        var A = v[0] * w[1] - v[1] * w[0], B = v[0] * w[2] - v[2] * w[0], C = v[0] * w[3] - v[3] * w[0], D = v[1] * w[2] - v[2] * w[1], E = v[1] * w[3] - v[3] * w[1], F = v[2] * w[3] - v[3] * w[2];
        var G = u[0];
        var H = u[1];
        var I = u[2];
        var J = u[3];
        out[0] = H * F - I * E + J * D;
        out[1] = -(G * F) + I * C - J * B;
        out[2] = G * E - H * C + J * A;
        out[3] = -(G * D) + H * B - I * A;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec4's
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the first operand
     * @param {vec4} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec4} out
     */
    function lerp$1(out, a, b, t) {
        var ax = a[0];
        var ay = a[1];
        var az = a[2];
        var aw = a[3];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        out[2] = az + t * (b[2] - az);
        out[3] = aw + t * (b[3] - aw);
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec4} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec4} out
     */
    function random$1(out, scale) {
        scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
        // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
        // http://projecteuclid.org/euclid.aoms/1177692644;
        var v1, v2, v3, v4;
        var s1, s2;
        do {
            v1 = RANDOM() * 2 - 1;
            v2 = RANDOM() * 2 - 1;
            s1 = v1 * v1 + v2 * v2;
        } while (s1 >= 1);
        do {
            v3 = RANDOM() * 2 - 1;
            v4 = RANDOM() * 2 - 1;
            s2 = v3 * v3 + v4 * v4;
        } while (s2 >= 1);
        var d = Math.sqrt((1 - s1) / s2);
        out[0] = scale * v1;
        out[1] = scale * v2;
        out[2] = scale * v3 * d;
        out[3] = scale * v4 * d;
        return out;
    }
    /**
     * Transforms the vec4 with a mat4.
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec4} out
     */
    function transformMat4$1(out, a, m) {
        var x = a[0], y = a[1], z = a[2], w = a[3];
        out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
        out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
        out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
        out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
        return out;
    }
    /**
     * Transforms the vec4 with a quat
     *
     * @param {vec4} out the receiving vector
     * @param {vec4} a the vector to transform
     * @param {quat} q quaternion to transform with
     * @returns {vec4} out
     */
    function transformQuat$1(out, a, q) {
        var x = a[0], y = a[1], z = a[2];
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3]; // calculate quat * vec
        var ix = qw * x + qy * z - qz * y;
        var iy = qw * y + qz * x - qx * z;
        var iz = qw * z + qx * y - qy * x;
        var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat
        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
        out[3] = a[3];
        return out;
    }
    /**
     * Set the components of a vec4 to zero
     *
     * @param {vec4} out the receiving vector
     * @returns {vec4} out
     */
    function zero$1(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        out[2] = 0.0;
        out[3] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec4} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$5(a) {
        return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
     *
     * @param {vec4} a The first vector.
     * @param {vec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$5(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec4} a The first vector.
     * @param {vec4} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$6(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
    }
    /**
     * Alias for {@link vec4.subtract}
     * @function
     */
    var sub$5 = subtract$5;
    /**
     * Alias for {@link vec4.multiply}
     * @function
     */
    var mul$5 = multiply$5;
    /**
     * Alias for {@link vec4.divide}
     * @function
     */
    var div$1 = divide$1;
    /**
     * Alias for {@link vec4.distance}
     * @function
     */
    var dist$1 = distance$1;
    /**
     * Alias for {@link vec4.squaredDistance}
     * @function
     */
    var sqrDist$1 = squaredDistance$1;
    /**
     * Alias for {@link vec4.length}
     * @function
     */
    var len$1 = length$1;
    /**
     * Alias for {@link vec4.squaredLength}
     * @function
     */
    var sqrLen$1 = squaredLength$1;
    /**
     * Perform some operation over an array of vec4s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach$1 = function () {
        var vec = create$5();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 4;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                vec[2] = a[i + 2];
                vec[3] = a[i + 3];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
                a[i + 2] = vec[2];
                a[i + 3] = vec[3];
            }
            return a;
        };
    }();
    glMatrix_1.vec4 = Object.freeze({
        create: create$5,
        clone: clone$5,
        fromValues: fromValues$5,
        copy: copy$5,
        set: set$5,
        add: add$5,
        subtract: subtract$5,
        multiply: multiply$5,
        divide: divide$1,
        ceil: ceil$1,
        floor: floor$1,
        min: min$1,
        max: max$1,
        round: round$1,
        scale: scale$5,
        scaleAndAdd: scaleAndAdd$1,
        distance: distance$1,
        squaredDistance: squaredDistance$1,
        length: length$1,
        squaredLength: squaredLength$1,
        negate: negate$1,
        inverse: inverse$1,
        normalize: normalize$1,
        dot: dot$1,
        cross: cross$1,
        lerp: lerp$1,
        random: random$1,
        transformMat4: transformMat4$1,
        transformQuat: transformQuat$1,
        zero: zero$1,
        str: str$5,
        exactEquals: exactEquals$5,
        equals: equals$6,
        sub: sub$5,
        mul: mul$5,
        div: div$1,
        dist: dist$1,
        sqrDist: sqrDist$1,
        len: len$1,
        sqrLen: sqrLen$1,
        forEach: forEach$1
    });
    /**
     * Quaternion
     * @module quat
     */
    /**
     * Creates a new identity quat
     *
     * @returns {quat} a new quaternion
     */
    function create$6() {
        var out = new ARRAY_TYPE(4);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
        }
        out[3] = 1;
        return out;
    }
    /**
     * Set a quat to the identity quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */
    function identity$4(out) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
    }
    /**
     * Sets a quat from the given angle and rotation axis,
     * then returns it.
     *
     * @param {quat} out the receiving quaternion
     * @param {vec3} axis the axis around which to rotate
     * @param {Number} rad the angle in radians
     * @returns {quat} out
     **/
    function setAxisAngle(out, axis, rad) {
        rad = rad * 0.5;
        var s = Math.sin(rad);
        out[0] = s * axis[0];
        out[1] = s * axis[1];
        out[2] = s * axis[2];
        out[3] = Math.cos(rad);
        return out;
    }
    /**
     * Gets the rotation axis and angle for a given
     *  quaternion. If a quaternion is created with
     *  setAxisAngle, this method will return the same
     *  values as providied in the original parameter list
     *  OR functionally equivalent values.
     * Example: The quaternion formed by axis [0, 0, 1] and
     *  angle -90 is the same as the quaternion formed by
     *  [0, 0, 1] and 270. This method favors the latter.
     * @param  {vec3} out_axis  Vector receiving the axis of rotation
     * @param  {quat} q     Quaternion to be decomposed
     * @return {Number}     Angle, in radians, of the rotation
     */
    function getAxisAngle(out_axis, q) {
        var rad = Math.acos(q[3]) * 2.0;
        var s = Math.sin(rad / 2.0);
        if (s > EPSILON) {
            out_axis[0] = q[0] / s;
            out_axis[1] = q[1] / s;
            out_axis[2] = q[2] / s;
        }
        else {
            // If s is zero, return any axis (no rotation - axis does not matter)
            out_axis[0] = 1;
            out_axis[1] = 0;
            out_axis[2] = 0;
        }
        return rad;
    }
    /**
     * Multiplies two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {quat} out
     */
    function multiply$6(out, a, b) {
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = b[0], by = b[1], bz = b[2], bw = b[3];
        out[0] = ax * bw + aw * bx + ay * bz - az * by;
        out[1] = ay * bw + aw * by + az * bx - ax * bz;
        out[2] = az * bw + aw * bz + ax * by - ay * bx;
        out[3] = aw * bw - ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the X axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateX$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw + aw * bx;
        out[1] = ay * bw + az * bx;
        out[2] = az * bw - ay * bx;
        out[3] = aw * bw - ax * bx;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Y axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateY$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var by = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw - az * by;
        out[1] = ay * bw + aw * by;
        out[2] = az * bw + ax * by;
        out[3] = aw * bw - ay * by;
        return out;
    }
    /**
     * Rotates a quaternion by the given angle about the Z axis
     *
     * @param {quat} out quat receiving operation result
     * @param {quat} a quat to rotate
     * @param {number} rad angle (in radians) to rotate
     * @returns {quat} out
     */
    function rotateZ$2(out, a, rad) {
        rad *= 0.5;
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bz = Math.sin(rad), bw = Math.cos(rad);
        out[0] = ax * bw + ay * bz;
        out[1] = ay * bw - ax * bz;
        out[2] = az * bw + aw * bz;
        out[3] = aw * bw - az * bz;
        return out;
    }
    /**
     * Calculates the W component of a quat from the X, Y, and Z components.
     * Assumes that quaternion is 1 unit in length.
     * Any existing W component will be ignored.
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate W component of
     * @returns {quat} out
     */
    function calculateW(out, a) {
        var x = a[0], y = a[1], z = a[2];
        out[0] = x;
        out[1] = y;
        out[2] = z;
        out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
        return out;
    }
    /**
     * Performs a spherical linear interpolation between two quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */
    function slerp(out, a, b, t) {
        // benchmarks:
        //    http://jsperf.com/quaternion-slerp-implementations
        var ax = a[0], ay = a[1], az = a[2], aw = a[3];
        var bx = b[0], by = b[1], bz = b[2], bw = b[3];
        var omega, cosom, sinom, scale0, scale1; // calc cosine
        cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)
        if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
        } // calculate coefficients
        if (1.0 - cosom > EPSILON) {
            // standard case (slerp)
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        }
        else {
            // "from" and "to" quaternions are very close
            //  ... so we can do a linear interpolation
            scale0 = 1.0 - t;
            scale1 = t;
        } // calculate final values
        out[0] = scale0 * ax + scale1 * bx;
        out[1] = scale0 * ay + scale1 * by;
        out[2] = scale0 * az + scale1 * bz;
        out[3] = scale0 * aw + scale1 * bw;
        return out;
    }
    /**
     * Generates a random quaternion
     *
     * @param {quat} out the receiving quaternion
     * @returns {quat} out
     */
    function random$2(out) {
        // Implementation of http://planning.cs.uiuc.edu/node198.html
        // TODO: Calling random 3 times is probably not the fastest solution
        var u1 = RANDOM();
        var u2 = RANDOM();
        var u3 = RANDOM();
        var sqrt1MinusU1 = Math.sqrt(1 - u1);
        var sqrtU1 = Math.sqrt(u1);
        out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
        out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
        out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
        out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
        return out;
    }
    /**
     * Calculates the inverse of a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate inverse of
     * @returns {quat} out
     */
    function invert$4(out, a) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
        var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
        var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
        out[0] = -a0 * invDot;
        out[1] = -a1 * invDot;
        out[2] = -a2 * invDot;
        out[3] = a3 * invDot;
        return out;
    }
    /**
     * Calculates the conjugate of a quat
     * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quat to calculate conjugate of
     * @returns {quat} out
     */
    function conjugate(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a[3];
        return out;
    }
    /**
     * Creates a quaternion from the given 3x3 rotation matrix.
     *
     * NOTE: The resultant quaternion is not normalized, so you should be sure
     * to renormalize the quaternion yourself where necessary.
     *
     * @param {quat} out the receiving quaternion
     * @param {mat3} m rotation matrix
     * @returns {quat} out
     * @function
     */
    function fromMat3(out, m) {
        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
        // article "Quaternion Calculus and Fast Animation".
        var fTrace = m[0] + m[4] + m[8];
        var fRoot;
        if (fTrace > 0.0) {
            // |w| > 1/2, may as well choose w > 1/2
            fRoot = Math.sqrt(fTrace + 1.0); // 2w
            out[3] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot; // 1/(4w)
            out[0] = (m[5] - m[7]) * fRoot;
            out[1] = (m[6] - m[2]) * fRoot;
            out[2] = (m[1] - m[3]) * fRoot;
        }
        else {
            // |w| <= 1/2
            var i = 0;
            if (m[4] > m[0])
                i = 1;
            if (m[8] > m[i * 3 + i])
                i = 2;
            var j = (i + 1) % 3;
            var k = (i + 2) % 3;
            fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
            out[i] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot;
            out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
            out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
            out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
        }
        return out;
    }
    /**
     * Creates a quaternion from the given euler angle x, y, z.
     *
     * @param {quat} out the receiving quaternion
     * @param {x} Angle to rotate around X axis in degrees.
     * @param {y} Angle to rotate around Y axis in degrees.
     * @param {z} Angle to rotate around Z axis in degrees.
     * @returns {quat} out
     * @function
     */
    function fromEuler(out, x, y, z) {
        var halfToRad = 0.5 * Math.PI / 180.0;
        x *= halfToRad;
        y *= halfToRad;
        z *= halfToRad;
        var sx = Math.sin(x);
        var cx = Math.cos(x);
        var sy = Math.sin(y);
        var cy = Math.cos(y);
        var sz = Math.sin(z);
        var cz = Math.cos(z);
        out[0] = sx * cy * cz - cx * sy * sz;
        out[1] = cx * sy * cz + sx * cy * sz;
        out[2] = cx * cy * sz - sx * sy * cz;
        out[3] = cx * cy * cz + sx * sy * sz;
        return out;
    }
    /**
     * Returns a string representation of a quatenion
     *
     * @param {quat} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$6(a) {
        return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {quat} a quaternion to clone
     * @returns {quat} a new quaternion
     * @function
     */
    var clone$6 = clone$5;
    /**
     * Creates a new quat initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} a new quaternion
     * @function
     */
    var fromValues$6 = fromValues$5;
    /**
     * Copy the values from one quat to another
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the source quaternion
     * @returns {quat} out
     * @function
     */
    var copy$6 = copy$5;
    /**
     * Set the components of a quat to the given values
     *
     * @param {quat} out the receiving quaternion
     * @param {Number} x X component
     * @param {Number} y Y component
     * @param {Number} z Z component
     * @param {Number} w W component
     * @returns {quat} out
     * @function
     */
    var set$6 = set$5;
    /**
     * Adds two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {quat} out
     * @function
     */
    var add$6 = add$5;
    /**
     * Alias for {@link quat.multiply}
     * @function
     */
    var mul$6 = multiply$6;
    /**
     * Scales a quat by a scalar number
     *
     * @param {quat} out the receiving vector
     * @param {quat} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {quat} out
     * @function
     */
    var scale$6 = scale$5;
    /**
     * Calculates the dot product of two quat's
     *
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */
    var dot$2 = dot$1;
    /**
     * Performs a linear interpolation between two quat's
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     * @function
     */
    var lerp$2 = lerp$1;
    /**
     * Calculates the length of a quat
     *
     * @param {quat} a vector to calculate length of
     * @returns {Number} length of a
     */
    var length$2 = length$1;
    /**
     * Alias for {@link quat.length}
     * @function
     */
    var len$2 = length$2;
    /**
     * Calculates the squared length of a quat
     *
     * @param {quat} a vector to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */
    var squaredLength$2 = squaredLength$1;
    /**
     * Alias for {@link quat.squaredLength}
     * @function
     */
    var sqrLen$2 = squaredLength$2;
    /**
     * Normalize a quat
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a quaternion to normalize
     * @returns {quat} out
     * @function
     */
    var normalize$2 = normalize$1;
    /**
     * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {quat} a The first quaternion.
     * @param {quat} b The second quaternion.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    var exactEquals$6 = exactEquals$5;
    /**
     * Returns whether or not the quaternions have approximately the same elements in the same position.
     *
     * @param {quat} a The first vector.
     * @param {quat} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    var equals$7 = equals$6;
    /**
     * Sets a quaternion to represent the shortest rotation from one
     * vector to another.
     *
     * Both vectors are assumed to be unit length.
     *
     * @param {quat} out the receiving quaternion.
     * @param {vec3} a the initial vector
     * @param {vec3} b the destination vector
     * @returns {quat} out
     */
    var rotationTo = function () {
        var tmpvec3 = create$4();
        var xUnitVec3 = fromValues$4(1, 0, 0);
        var yUnitVec3 = fromValues$4(0, 1, 0);
        return function (out, a, b) {
            var dot$1 = dot(a, b);
            if (dot$1 < -0.999999) {
                cross(tmpvec3, xUnitVec3, a);
                if (len(tmpvec3) < 0.000001)
                    cross(tmpvec3, yUnitVec3, a);
                normalize(tmpvec3, tmpvec3);
                setAxisAngle(out, tmpvec3, Math.PI);
                return out;
            }
            else if (dot$1 > 0.999999) {
                out[0] = 0;
                out[1] = 0;
                out[2] = 0;
                out[3] = 1;
                return out;
            }
            else {
                cross(tmpvec3, a, b);
                out[0] = tmpvec3[0];
                out[1] = tmpvec3[1];
                out[2] = tmpvec3[2];
                out[3] = 1 + dot$1;
                return normalize$2(out, out);
            }
        };
    }();
    /**
     * Performs a spherical linear interpolation with two control points
     *
     * @param {quat} out the receiving quaternion
     * @param {quat} a the first operand
     * @param {quat} b the second operand
     * @param {quat} c the third operand
     * @param {quat} d the fourth operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat} out
     */
    var sqlerp = function () {
        var temp1 = create$6();
        var temp2 = create$6();
        return function (out, a, b, c, d, t) {
            slerp(temp1, a, d, t);
            slerp(temp2, b, c, t);
            slerp(out, temp1, temp2, 2 * t * (1 - t));
            return out;
        };
    }();
    /**
     * Sets the specified quaternion with values corresponding to the given
     * axes. Each axis is a vec3 and is expected to be unit length and
     * perpendicular to all other specified axes.
     *
     * @param {vec3} view  the vector representing the viewing direction
     * @param {vec3} right the vector representing the local "right" direction
     * @param {vec3} up    the vector representing the local "up" direction
     * @returns {quat} out
     */
    var setAxes = function () {
        var matr = create$2();
        return function (out, view, right, up) {
            matr[0] = right[0];
            matr[3] = right[1];
            matr[6] = right[2];
            matr[1] = up[0];
            matr[4] = up[1];
            matr[7] = up[2];
            matr[2] = -view[0];
            matr[5] = -view[1];
            matr[8] = -view[2];
            return normalize$2(out, fromMat3(out, matr));
        };
    }();
    glMatrix_1.quat = Object.freeze({
        create: create$6,
        identity: identity$4,
        setAxisAngle: setAxisAngle,
        getAxisAngle: getAxisAngle,
        multiply: multiply$6,
        rotateX: rotateX$2,
        rotateY: rotateY$2,
        rotateZ: rotateZ$2,
        calculateW: calculateW,
        slerp: slerp,
        random: random$2,
        invert: invert$4,
        conjugate: conjugate,
        fromMat3: fromMat3,
        fromEuler: fromEuler,
        str: str$6,
        clone: clone$6,
        fromValues: fromValues$6,
        copy: copy$6,
        set: set$6,
        add: add$6,
        mul: mul$6,
        scale: scale$6,
        dot: dot$2,
        lerp: lerp$2,
        length: length$2,
        len: len$2,
        squaredLength: squaredLength$2,
        sqrLen: sqrLen$2,
        normalize: normalize$2,
        exactEquals: exactEquals$6,
        equals: equals$7,
        rotationTo: rotationTo,
        sqlerp: sqlerp,
        setAxes: setAxes
    });
    /**
     * Dual Quaternion<br>
     * Format: [real, dual]<br>
     * Quaternion format: XYZW<br>
     * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
     * @module quat2
     */
    /**
     * Creates a new identity dual quat
     *
     * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
     */
    function create$7() {
        var dq = new ARRAY_TYPE(8);
        if (ARRAY_TYPE != Float32Array) {
            dq[0] = 0;
            dq[1] = 0;
            dq[2] = 0;
            dq[4] = 0;
            dq[5] = 0;
            dq[6] = 0;
            dq[7] = 0;
        }
        dq[3] = 1;
        return dq;
    }
    /**
     * Creates a new quat initialized with values from an existing quaternion
     *
     * @param {quat2} a dual quaternion to clone
     * @returns {quat2} new dual quaternion
     * @function
     */
    function clone$7(a) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = a[0];
        dq[1] = a[1];
        dq[2] = a[2];
        dq[3] = a[3];
        dq[4] = a[4];
        dq[5] = a[5];
        dq[6] = a[6];
        dq[7] = a[7];
        return dq;
    }
    /**
     * Creates a new dual quat initialized with the given values
     *
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component
     * @param {Number} y2 Y component
     * @param {Number} z2 Z component
     * @param {Number} w2 W component
     * @returns {quat2} new dual quaternion
     * @function
     */
    function fromValues$7(x1, y1, z1, w1, x2, y2, z2, w2) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = x1;
        dq[1] = y1;
        dq[2] = z1;
        dq[3] = w1;
        dq[4] = x2;
        dq[5] = y2;
        dq[6] = z2;
        dq[7] = w2;
        return dq;
    }
    /**
     * Creates a new dual quat from the given values (quat and translation)
     *
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component (translation)
     * @param {Number} y2 Y component (translation)
     * @param {Number} z2 Z component (translation)
     * @returns {quat2} new dual quaternion
     * @function
     */
    function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
        var dq = new ARRAY_TYPE(8);
        dq[0] = x1;
        dq[1] = y1;
        dq[2] = z1;
        dq[3] = w1;
        var ax = x2 * 0.5, ay = y2 * 0.5, az = z2 * 0.5;
        dq[4] = ax * w1 + ay * z1 - az * y1;
        dq[5] = ay * w1 + az * x1 - ax * z1;
        dq[6] = az * w1 + ax * y1 - ay * x1;
        dq[7] = -ax * x1 - ay * y1 - az * z1;
        return dq;
    }
    /**
     * Creates a dual quat from a quaternion and a translation
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {quat} q a normalized quaternion
     * @param {vec3} t tranlation vector
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromRotationTranslation$1(out, q, t) {
        var ax = t[0] * 0.5, ay = t[1] * 0.5, az = t[2] * 0.5, bx = q[0], by = q[1], bz = q[2], bw = q[3];
        out[0] = bx;
        out[1] = by;
        out[2] = bz;
        out[3] = bw;
        out[4] = ax * bw + ay * bz - az * by;
        out[5] = ay * bw + az * bx - ax * bz;
        out[6] = az * bw + ax * by - ay * bx;
        out[7] = -ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Creates a dual quat from a translation
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {vec3} t translation vector
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromTranslation$3(out, t) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = t[0] * 0.5;
        out[5] = t[1] * 0.5;
        out[6] = t[2] * 0.5;
        out[7] = 0;
        return out;
    }
    /**
     * Creates a dual quat from a quaternion
     *
     * @param {quat2} dual quaternion receiving operation result
     * @param {quat} q the quaternion
     * @returns {quat2} dual quaternion receiving operation result
     * @function
     */
    function fromRotation$4(out, q) {
        out[0] = q[0];
        out[1] = q[1];
        out[2] = q[2];
        out[3] = q[3];
        out[4] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        return out;
    }
    /**
     * Creates a new dual quat from a matrix (4x4)
     *
     * @param {quat2} out the dual quaternion
     * @param {mat4} a the matrix
     * @returns {quat2} dual quat receiving operation result
     * @function
     */
    function fromMat4$1(out, a) {
        //TODO Optimize this
        var outer = create$6();
        getRotation(outer, a);
        var t = new ARRAY_TYPE(3);
        getTranslation(t, a);
        fromRotationTranslation$1(out, outer, t);
        return out;
    }
    /**
     * Copy the values from one dual quat to another
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the source dual quaternion
     * @returns {quat2} out
     * @function
     */
    function copy$7(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        return out;
    }
    /**
     * Set a dual quat to the identity dual quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @returns {quat2} out
     */
    function identity$5(out) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        out[4] = 0;
        out[5] = 0;
        out[6] = 0;
        out[7] = 0;
        return out;
    }
    /**
     * Set the components of a dual quat to the given values
     *
     * @param {quat2} out the receiving quaternion
     * @param {Number} x1 X component
     * @param {Number} y1 Y component
     * @param {Number} z1 Z component
     * @param {Number} w1 W component
     * @param {Number} x2 X component
     * @param {Number} y2 Y component
     * @param {Number} z2 Z component
     * @param {Number} w2 W component
     * @returns {quat2} out
     * @function
     */
    function set$7(out, x1, y1, z1, w1, x2, y2, z2, w2) {
        out[0] = x1;
        out[1] = y1;
        out[2] = z1;
        out[3] = w1;
        out[4] = x2;
        out[5] = y2;
        out[6] = z2;
        out[7] = w2;
        return out;
    }
    /**
     * Gets the real part of a dual quat
     * @param  {quat} out real part
     * @param  {quat2} a Dual Quaternion
     * @return {quat} real part
     */
    var getReal = copy$6;
    /**
     * Gets the dual part of a dual quat
     * @param  {quat} out dual part
     * @param  {quat2} a Dual Quaternion
     * @return {quat} dual part
     */
    function getDual(out, a) {
        out[0] = a[4];
        out[1] = a[5];
        out[2] = a[6];
        out[3] = a[7];
        return out;
    }
    /**
     * Set the real component of a dual quat to the given quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat} q a quaternion representing the real part
     * @returns {quat2} out
     * @function
     */
    var setReal = copy$6;
    /**
     * Set the dual component of a dual quat to the given quaternion
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat} q a quaternion representing the dual part
     * @returns {quat2} out
     * @function
     */
    function setDual(out, q) {
        out[4] = q[0];
        out[5] = q[1];
        out[6] = q[2];
        out[7] = q[3];
        return out;
    }
    /**
     * Gets the translation of a normalized dual quat
     * @param  {vec3} out translation
     * @param  {quat2} a Dual Quaternion to be decomposed
     * @return {vec3} translation
     */
    function getTranslation$1(out, a) {
        var ax = a[4], ay = a[5], az = a[6], aw = a[7], bx = -a[0], by = -a[1], bz = -a[2], bw = a[3];
        out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
        out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
        out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
        return out;
    }
    /**
     * Translates a dual quat by the given vector
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to translate
     * @param {vec3} v vector to translate by
     * @returns {quat2} out
     */
    function translate$3(out, a, v) {
        var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3], bx1 = v[0] * 0.5, by1 = v[1] * 0.5, bz1 = v[2] * 0.5, ax2 = a[4], ay2 = a[5], az2 = a[6], aw2 = a[7];
        out[0] = ax1;
        out[1] = ay1;
        out[2] = az1;
        out[3] = aw1;
        out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
        out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
        out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
        out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
        return out;
    }
    /**
     * Rotates a dual quat around the X axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateX$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateX$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat around the Y axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateY$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateY$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat around the Z axis
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {number} rad how far should the rotation be
     * @returns {quat2} out
     */
    function rotateZ$3(out, a, rad) {
        var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
        rotateZ$2(out, a, rad);
        bx = out[0];
        by = out[1];
        bz = out[2];
        bw = out[3];
        out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        return out;
    }
    /**
     * Rotates a dual quat by a given quaternion (a * q)
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {quat} q quaternion to rotate by
     * @returns {quat2} out
     */
    function rotateByQuatAppend(out, a, q) {
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3], ax = a[0], ay = a[1], az = a[2], aw = a[3];
        out[0] = ax * qw + aw * qx + ay * qz - az * qy;
        out[1] = ay * qw + aw * qy + az * qx - ax * qz;
        out[2] = az * qw + aw * qz + ax * qy - ay * qx;
        out[3] = aw * qw - ax * qx - ay * qy - az * qz;
        ax = a[4];
        ay = a[5];
        az = a[6];
        aw = a[7];
        out[4] = ax * qw + aw * qx + ay * qz - az * qy;
        out[5] = ay * qw + aw * qy + az * qx - ax * qz;
        out[6] = az * qw + aw * qz + ax * qy - ay * qx;
        out[7] = aw * qw - ax * qx - ay * qy - az * qz;
        return out;
    }
    /**
     * Rotates a dual quat by a given quaternion (q * a)
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat} q quaternion to rotate by
     * @param {quat2} a the dual quaternion to rotate
     * @returns {quat2} out
     */
    function rotateByQuatPrepend(out, q, a) {
        var qx = q[0], qy = q[1], qz = q[2], qw = q[3], bx = a[0], by = a[1], bz = a[2], bw = a[3];
        out[0] = qx * bw + qw * bx + qy * bz - qz * by;
        out[1] = qy * bw + qw * by + qz * bx - qx * bz;
        out[2] = qz * bw + qw * bz + qx * by - qy * bx;
        out[3] = qw * bw - qx * bx - qy * by - qz * bz;
        bx = a[4];
        by = a[5];
        bz = a[6];
        bw = a[7];
        out[4] = qx * bw + qw * bx + qy * bz - qz * by;
        out[5] = qy * bw + qw * by + qz * bx - qx * bz;
        out[6] = qz * bw + qw * bz + qx * by - qy * bx;
        out[7] = qw * bw - qx * bx - qy * by - qz * bz;
        return out;
    }
    /**
     * Rotates a dual quat around a given axis. Does the normalisation automatically
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the dual quaternion to rotate
     * @param {vec3} axis the axis to rotate around
     * @param {Number} rad how far the rotation should be
     * @returns {quat2} out
     */
    function rotateAroundAxis(out, a, axis, rad) {
        //Special case for rad = 0
        if (Math.abs(rad) < EPSILON) {
            return copy$7(out, a);
        }
        var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
        rad = rad * 0.5;
        var s = Math.sin(rad);
        var bx = s * axis[0] / axisLength;
        var by = s * axis[1] / axisLength;
        var bz = s * axis[2] / axisLength;
        var bw = Math.cos(rad);
        var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3];
        out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
        out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
        out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
        out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
        var ax = a[4], ay = a[5], az = a[6], aw = a[7];
        out[4] = ax * bw + aw * bx + ay * bz - az * by;
        out[5] = ay * bw + aw * by + az * bx - ax * bz;
        out[6] = az * bw + aw * bz + ax * by - ay * bx;
        out[7] = aw * bw - ax * bx - ay * by - az * bz;
        return out;
    }
    /**
     * Adds two dual quat's
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {quat2} out
     * @function
     */
    function add$7(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        out[2] = a[2] + b[2];
        out[3] = a[3] + b[3];
        out[4] = a[4] + b[4];
        out[5] = a[5] + b[5];
        out[6] = a[6] + b[6];
        out[7] = a[7] + b[7];
        return out;
    }
    /**
     * Multiplies two dual quat's
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {quat2} out
     */
    function multiply$7(out, a, b) {
        var ax0 = a[0], ay0 = a[1], az0 = a[2], aw0 = a[3], bx1 = b[4], by1 = b[5], bz1 = b[6], bw1 = b[7], ax1 = a[4], ay1 = a[5], az1 = a[6], aw1 = a[7], bx0 = b[0], by0 = b[1], bz0 = b[2], bw0 = b[3];
        out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
        out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
        out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
        out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
        out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
        out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
        out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
        out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
        return out;
    }
    /**
     * Alias for {@link quat2.multiply}
     * @function
     */
    var mul$7 = multiply$7;
    /**
     * Scales a dual quat by a scalar number
     *
     * @param {quat2} out the receiving dual quat
     * @param {quat2} a the dual quat to scale
     * @param {Number} b amount to scale the dual quat by
     * @returns {quat2} out
     * @function
     */
    function scale$7(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        out[2] = a[2] * b;
        out[3] = a[3] * b;
        out[4] = a[4] * b;
        out[5] = a[5] * b;
        out[6] = a[6] * b;
        out[7] = a[7] * b;
        return out;
    }
    /**
     * Calculates the dot product of two dual quat's (The dot product of the real parts)
     *
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @returns {Number} dot product of a and b
     * @function
     */
    var dot$3 = dot$2;
    /**
     * Performs a linear interpolation between two dual quats's
     * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
     *
     * @param {quat2} out the receiving dual quat
     * @param {quat2} a the first operand
     * @param {quat2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {quat2} out
     */
    function lerp$3(out, a, b, t) {
        var mt = 1 - t;
        if (dot$3(a, b) < 0)
            t = -t;
        out[0] = a[0] * mt + b[0] * t;
        out[1] = a[1] * mt + b[1] * t;
        out[2] = a[2] * mt + b[2] * t;
        out[3] = a[3] * mt + b[3] * t;
        out[4] = a[4] * mt + b[4] * t;
        out[5] = a[5] * mt + b[5] * t;
        out[6] = a[6] * mt + b[6] * t;
        out[7] = a[7] * mt + b[7] * t;
        return out;
    }
    /**
     * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a dual quat to calculate inverse of
     * @returns {quat2} out
     */
    function invert$5(out, a) {
        var sqlen = squaredLength$3(a);
        out[0] = -a[0] / sqlen;
        out[1] = -a[1] / sqlen;
        out[2] = -a[2] / sqlen;
        out[3] = a[3] / sqlen;
        out[4] = -a[4] / sqlen;
        out[5] = -a[5] / sqlen;
        out[6] = -a[6] / sqlen;
        out[7] = a[7] / sqlen;
        return out;
    }
    /**
     * Calculates the conjugate of a dual quat
     * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
     *
     * @param {quat2} out the receiving quaternion
     * @param {quat2} a quat to calculate conjugate of
     * @returns {quat2} out
     */
    function conjugate$1(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        out[2] = -a[2];
        out[3] = a[3];
        out[4] = -a[4];
        out[5] = -a[5];
        out[6] = -a[6];
        out[7] = a[7];
        return out;
    }
    /**
     * Calculates the length of a dual quat
     *
     * @param {quat2} a dual quat to calculate length of
     * @returns {Number} length of a
     * @function
     */
    var length$3 = length$2;
    /**
     * Alias for {@link quat2.length}
     * @function
     */
    var len$3 = length$3;
    /**
     * Calculates the squared length of a dual quat
     *
     * @param {quat2} a dual quat to calculate squared length of
     * @returns {Number} squared length of a
     * @function
     */
    var squaredLength$3 = squaredLength$2;
    /**
     * Alias for {@link quat2.squaredLength}
     * @function
     */
    var sqrLen$3 = squaredLength$3;
    /**
     * Normalize a dual quat
     *
     * @param {quat2} out the receiving dual quaternion
     * @param {quat2} a dual quaternion to normalize
     * @returns {quat2} out
     * @function
     */
    function normalize$3(out, a) {
        var magnitude = squaredLength$3(a);
        if (magnitude > 0) {
            magnitude = Math.sqrt(magnitude);
            var a0 = a[0] / magnitude;
            var a1 = a[1] / magnitude;
            var a2 = a[2] / magnitude;
            var a3 = a[3] / magnitude;
            var b0 = a[4];
            var b1 = a[5];
            var b2 = a[6];
            var b3 = a[7];
            var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
            out[0] = a0;
            out[1] = a1;
            out[2] = a2;
            out[3] = a3;
            out[4] = (b0 - a0 * a_dot_b) / magnitude;
            out[5] = (b1 - a1 * a_dot_b) / magnitude;
            out[6] = (b2 - a2 * a_dot_b) / magnitude;
            out[7] = (b3 - a3 * a_dot_b) / magnitude;
        }
        return out;
    }
    /**
     * Returns a string representation of a dual quatenion
     *
     * @param {quat2} a dual quaternion to represent as a string
     * @returns {String} string representation of the dual quat
     */
    function str$7(a) {
        return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';
    }
    /**
     * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
     *
     * @param {quat2} a the first dual quaternion.
     * @param {quat2} b the second dual quaternion.
     * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
     */
    function exactEquals$7(a, b) {
        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
    }
    /**
     * Returns whether or not the dual quaternions have approximately the same elements in the same position.
     *
     * @param {quat2} a the first dual quat.
     * @param {quat2} b the second dual quat.
     * @returns {Boolean} true if the dual quats are equal, false otherwise.
     */
    function equals$8(a, b) {
        var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
        var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));
    }
    glMatrix_1.quat2 = Object.freeze({
        create: create$7,
        clone: clone$7,
        fromValues: fromValues$7,
        fromRotationTranslationValues: fromRotationTranslationValues,
        fromRotationTranslation: fromRotationTranslation$1,
        fromTranslation: fromTranslation$3,
        fromRotation: fromRotation$4,
        fromMat4: fromMat4$1,
        copy: copy$7,
        identity: identity$5,
        set: set$7,
        getReal: getReal,
        getDual: getDual,
        setReal: setReal,
        setDual: setDual,
        getTranslation: getTranslation$1,
        translate: translate$3,
        rotateX: rotateX$3,
        rotateY: rotateY$3,
        rotateZ: rotateZ$3,
        rotateByQuatAppend: rotateByQuatAppend,
        rotateByQuatPrepend: rotateByQuatPrepend,
        rotateAroundAxis: rotateAroundAxis,
        add: add$7,
        multiply: multiply$7,
        mul: mul$7,
        scale: scale$7,
        dot: dot$3,
        lerp: lerp$3,
        invert: invert$5,
        conjugate: conjugate$1,
        length: length$3,
        len: len$3,
        squaredLength: squaredLength$3,
        sqrLen: sqrLen$3,
        normalize: normalize$3,
        str: str$7,
        exactEquals: exactEquals$7,
        equals: equals$8
    });
    /**
     * 2 Dimensional Vector
     * @module vec2
     */
    /**
     * Creates a new, empty vec2
     *
     * @returns {vec2} a new 2D vector
     */
    function create$8() {
        var out = new ARRAY_TYPE(2);
        if (ARRAY_TYPE != Float32Array) {
            out[0] = 0;
            out[1] = 0;
        }
        return out;
    }
    /**
     * Creates a new vec2 initialized with values from an existing vector
     *
     * @param {vec2} a vector to clone
     * @returns {vec2} a new 2D vector
     */
    function clone$8(a) {
        var out = new ARRAY_TYPE(2);
        out[0] = a[0];
        out[1] = a[1];
        return out;
    }
    /**
     * Creates a new vec2 initialized with the given values
     *
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} a new 2D vector
     */
    function fromValues$8(x, y) {
        var out = new ARRAY_TYPE(2);
        out[0] = x;
        out[1] = y;
        return out;
    }
    /**
     * Copy the values from one vec2 to another
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the source vector
     * @returns {vec2} out
     */
    function copy$8(out, a) {
        out[0] = a[0];
        out[1] = a[1];
        return out;
    }
    /**
     * Set the components of a vec2 to the given values
     *
     * @param {vec2} out the receiving vector
     * @param {Number} x X component
     * @param {Number} y Y component
     * @returns {vec2} out
     */
    function set$8(out, x, y) {
        out[0] = x;
        out[1] = y;
        return out;
    }
    /**
     * Adds two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function add$8(out, a, b) {
        out[0] = a[0] + b[0];
        out[1] = a[1] + b[1];
        return out;
    }
    /**
     * Subtracts vector b from vector a
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function subtract$6(out, a, b) {
        out[0] = a[0] - b[0];
        out[1] = a[1] - b[1];
        return out;
    }
    /**
     * Multiplies two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function multiply$8(out, a, b) {
        out[0] = a[0] * b[0];
        out[1] = a[1] * b[1];
        return out;
    }
    /**
     * Divides two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function divide$2(out, a, b) {
        out[0] = a[0] / b[0];
        out[1] = a[1] / b[1];
        return out;
    }
    /**
     * Math.ceil the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to ceil
     * @returns {vec2} out
     */
    function ceil$2(out, a) {
        out[0] = Math.ceil(a[0]);
        out[1] = Math.ceil(a[1]);
        return out;
    }
    /**
     * Math.floor the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to floor
     * @returns {vec2} out
     */
    function floor$2(out, a) {
        out[0] = Math.floor(a[0]);
        out[1] = Math.floor(a[1]);
        return out;
    }
    /**
     * Returns the minimum of two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function min$2(out, a, b) {
        out[0] = Math.min(a[0], b[0]);
        out[1] = Math.min(a[1], b[1]);
        return out;
    }
    /**
     * Returns the maximum of two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec2} out
     */
    function max$2(out, a, b) {
        out[0] = Math.max(a[0], b[0]);
        out[1] = Math.max(a[1], b[1]);
        return out;
    }
    /**
     * Math.round the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to round
     * @returns {vec2} out
     */
    function round$2(out, a) {
        out[0] = Math.round(a[0]);
        out[1] = Math.round(a[1]);
        return out;
    }
    /**
     * Scales a vec2 by a scalar number
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to scale
     * @param {Number} b amount to scale the vector by
     * @returns {vec2} out
     */
    function scale$8(out, a, b) {
        out[0] = a[0] * b;
        out[1] = a[1] * b;
        return out;
    }
    /**
     * Adds two vec2's after scaling the second operand by a scalar value
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @param {Number} scale the amount to scale b by before adding
     * @returns {vec2} out
     */
    function scaleAndAdd$2(out, a, b, scale) {
        out[0] = a[0] + b[0] * scale;
        out[1] = a[1] + b[1] * scale;
        return out;
    }
    /**
     * Calculates the euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} distance between a and b
     */
    function distance$2(a, b) {
        var x = b[0] - a[0], y = b[1] - a[1];
        return Math.hypot(x, y);
    }
    /**
     * Calculates the squared euclidian distance between two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} squared distance between a and b
     */
    function squaredDistance$2(a, b) {
        var x = b[0] - a[0], y = b[1] - a[1];
        return x * x + y * y;
    }
    /**
     * Calculates the length of a vec2
     *
     * @param {vec2} a vector to calculate length of
     * @returns {Number} length of a
     */
    function length$4(a) {
        var x = a[0], y = a[1];
        return Math.hypot(x, y);
    }
    /**
     * Calculates the squared length of a vec2
     *
     * @param {vec2} a vector to calculate squared length of
     * @returns {Number} squared length of a
     */
    function squaredLength$4(a) {
        var x = a[0], y = a[1];
        return x * x + y * y;
    }
    /**
     * Negates the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to negate
     * @returns {vec2} out
     */
    function negate$2(out, a) {
        out[0] = -a[0];
        out[1] = -a[1];
        return out;
    }
    /**
     * Returns the inverse of the components of a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to invert
     * @returns {vec2} out
     */
    function inverse$2(out, a) {
        out[0] = 1.0 / a[0];
        out[1] = 1.0 / a[1];
        return out;
    }
    /**
     * Normalize a vec2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a vector to normalize
     * @returns {vec2} out
     */
    function normalize$4(out, a) {
        var x = a[0], y = a[1];
        var len = x * x + y * y;
        if (len > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len = 1 / Math.sqrt(len);
        }
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        return out;
    }
    /**
     * Calculates the dot product of two vec2's
     *
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {Number} dot product of a and b
     */
    function dot$4(a, b) {
        return a[0] * b[0] + a[1] * b[1];
    }
    /**
     * Computes the cross product of two vec2's
     * Note that the cross product must by definition produce a 3D vector
     *
     * @param {vec3} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @returns {vec3} out
     */
    function cross$2(out, a, b) {
        var z = a[0] * b[1] - a[1] * b[0];
        out[0] = out[1] = 0;
        out[2] = z;
        return out;
    }
    /**
     * Performs a linear interpolation between two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the first operand
     * @param {vec2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec2} out
     */
    function lerp$4(out, a, b, t) {
        var ax = a[0], ay = a[1];
        out[0] = ax + t * (b[0] - ax);
        out[1] = ay + t * (b[1] - ay);
        return out;
    }
    /**
     * Generates a random vector with the given scale
     *
     * @param {vec2} out the receiving vector
     * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
     * @returns {vec2} out
     */
    function random$3(out, scale) {
        scale = scale || 1.0;
        var r = RANDOM() * 2.0 * Math.PI;
        out[0] = Math.cos(r) * scale;
        out[1] = Math.sin(r) * scale;
        return out;
    }
    /**
     * Transforms the vec2 with a mat2
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat2} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat2(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[2] * y;
        out[1] = m[1] * x + m[3] * y;
        return out;
    }
    /**
     * Transforms the vec2 with a mat2d
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat2d} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat2d(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[2] * y + m[4];
        out[1] = m[1] * x + m[3] * y + m[5];
        return out;
    }
    /**
     * Transforms the vec2 with a mat3
     * 3rd vector component is implicitly '1'
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat3} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat3$1(out, a, m) {
        var x = a[0], y = a[1];
        out[0] = m[0] * x + m[3] * y + m[6];
        out[1] = m[1] * x + m[4] * y + m[7];
        return out;
    }
    /**
     * Transforms the vec2 with a mat4
     * 3rd vector component is implicitly '0'
     * 4th vector component is implicitly '1'
     *
     * @param {vec2} out the receiving vector
     * @param {vec2} a the vector to transform
     * @param {mat4} m matrix to transform with
     * @returns {vec2} out
     */
    function transformMat4$2(out, a, m) {
        var x = a[0];
        var y = a[1];
        out[0] = m[0] * x + m[4] * y + m[12];
        out[1] = m[1] * x + m[5] * y + m[13];
        return out;
    }
    /**
     * Rotate a 2D vector
     * @param {vec2} out The receiving vec2
     * @param {vec2} a The vec2 point to rotate
     * @param {vec2} b The origin of the rotation
     * @param {Number} c The angle of rotation
     * @returns {vec2} out
     */
    function rotate$4(out, a, b, c) {
        //Translate point to the origin
        var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(c), cosC = Math.cos(c); //perform rotation and translate to correct position
        out[0] = p0 * cosC - p1 * sinC + b[0];
        out[1] = p0 * sinC + p1 * cosC + b[1];
        return out;
    }
    /**
     * Get the angle between two 2D vectors
     * @param {vec2} a The first operand
     * @param {vec2} b The second operand
     * @returns {Number} The angle in radians
     */
    function angle$1(a, b) {
        var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1];
        var len1 = x1 * x1 + y1 * y1;
        if (len1 > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len1 = 1 / Math.sqrt(len1);
        }
        var len2 = x2 * x2 + y2 * y2;
        if (len2 > 0) {
            //TODO: evaluate use of glm_invsqrt here?
            len2 = 1 / Math.sqrt(len2);
        }
        var cosine = (x1 * x2 + y1 * y2) * len1 * len2;
        if (cosine > 1.0) {
            return 0;
        }
        else if (cosine < -1.0) {
            return Math.PI;
        }
        else {
            return Math.acos(cosine);
        }
    }
    /**
     * Set the components of a vec2 to zero
     *
     * @param {vec2} out the receiving vector
     * @returns {vec2} out
     */
    function zero$2(out) {
        out[0] = 0.0;
        out[1] = 0.0;
        return out;
    }
    /**
     * Returns a string representation of a vector
     *
     * @param {vec2} a vector to represent as a string
     * @returns {String} string representation of the vector
     */
    function str$8(a) {
        return 'vec2(' + a[0] + ', ' + a[1] + ')';
    }
    /**
     * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
     *
     * @param {vec2} a The first vector.
     * @param {vec2} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function exactEquals$8(a, b) {
        return a[0] === b[0] && a[1] === b[1];
    }
    /**
     * Returns whether or not the vectors have approximately the same elements in the same position.
     *
     * @param {vec2} a The first vector.
     * @param {vec2} b The second vector.
     * @returns {Boolean} True if the vectors are equal, false otherwise.
     */
    function equals$9(a, b) {
        var a0 = a[0], a1 = a[1];
        var b0 = b[0], b1 = b[1];
        return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
    }
    /**
     * Alias for {@link vec2.length}
     * @function
     */
    var len$4 = length$4;
    /**
     * Alias for {@link vec2.subtract}
     * @function
     */
    var sub$6 = subtract$6;
    /**
     * Alias for {@link vec2.multiply}
     * @function
     */
    var mul$8 = multiply$8;
    /**
     * Alias for {@link vec2.divide}
     * @function
     */
    var div$2 = divide$2;
    /**
     * Alias for {@link vec2.distance}
     * @function
     */
    var dist$2 = distance$2;
    /**
     * Alias for {@link vec2.squaredDistance}
     * @function
     */
    var sqrDist$2 = squaredDistance$2;
    /**
     * Alias for {@link vec2.squaredLength}
     * @function
     */
    var sqrLen$4 = squaredLength$4;
    /**
     * Perform some operation over an array of vec2s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */
    var forEach$2 = function () {
        var vec = create$8();
        return function (a, stride, offset, count, fn, arg) {
            var i, l;
            if (!stride) {
                stride = 2;
            }
            if (!offset) {
                offset = 0;
            }
            if (count) {
                l = Math.min(count * stride + offset, a.length);
            }
            else {
                l = a.length;
            }
            for (i = offset; i < l; i += stride) {
                vec[0] = a[i];
                vec[1] = a[i + 1];
                fn(vec, vec, arg);
                a[i] = vec[0];
                a[i + 1] = vec[1];
            }
            return a;
        };
    }();
    glMatrix_1.vec2 = Object.freeze({
        create: create$8,
        clone: clone$8,
        fromValues: fromValues$8,
        copy: copy$8,
        set: set$8,
        add: add$8,
        subtract: subtract$6,
        multiply: multiply$8,
        divide: divide$2,
        ceil: ceil$2,
        floor: floor$2,
        min: min$2,
        max: max$2,
        round: round$2,
        scale: scale$8,
        scaleAndAdd: scaleAndAdd$2,
        distance: distance$2,
        squaredDistance: squaredDistance$2,
        length: length$4,
        squaredLength: squaredLength$4,
        negate: negate$2,
        inverse: inverse$2,
        normalize: normalize$4,
        dot: dot$4,
        cross: cross$2,
        lerp: lerp$4,
        random: random$3,
        transformMat2: transformMat2,
        transformMat2d: transformMat2d,
        transformMat3: transformMat3$1,
        transformMat4: transformMat4$2,
        rotate: rotate$4,
        angle: angle$1,
        zero: zero$2,
        str: str$8,
        exactEquals: exactEquals$8,
        equals: equals$9,
        len: len$4,
        sub: sub$6,
        mul: mul$8,
        div: div$2,
        dist: dist$2,
        sqrDist: sqrDist$2,
        sqrLen: sqrLen$4,
        forEach: forEach$2
    });
    glMatrix_1.glMatrix = common;
    glMatrix_1.mat2 = glMatrix_1.mat2;
    glMatrix_1.mat2d = glMatrix_1.mat2d;
    glMatrix_1.mat3 = glMatrix_1.mat3;
    glMatrix_1.mat4 = glMatrix_1.mat4;
    glMatrix_1.quat = glMatrix_1.quat;
    glMatrix_1.quat2 = glMatrix_1.quat2;
    glMatrix_1.vec2 = glMatrix_1.vec2;
    glMatrix_1.vec3 = glMatrix_1.vec3;
    glMatrix_1.vec4 = glMatrix_1.vec4;
})(glMatrix = exports.glMatrix || (exports.glMatrix = {}));
},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderSprite = void 0;
var Sprite_1 = require("../base/Sprite");
var RenderTexture_1 = require("../assets/RenderTexture");
var Device_1 = require("../../../Device");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MVMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_MVMatrix * vec4(a_position, 1.0);' +
    'vTextureCoordinates =vec2(a_uv.x,a_uv.y);' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var RenderSprite = /** @class */ (function (_super) {
    __extends(RenderSprite, _super);
    function RenderSprite(gl) {
        var _this = _super.call(this, gl) || this;
        _this._cameraType = 1;
        return _this;
    }
    RenderSprite.prototype.onInit = function () {
        this.setContentSize(Device_1.default.Instance.Width / 4, Device_1.default.Instance.Height / 4);
        this._texture = new RenderTexture_1.RenderTexture(this.gl);
        this.setShader(vertextBaseCode, fragBaseCode);
    };
    return RenderSprite;
}(Sprite_1.SY.Sprite2D));
exports.RenderSprite = RenderSprite;
},{"../../../Device":1,"../assets/RenderTexture":15,"../base/Sprite":21}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var CubeData_1 = require("../data/CubeData");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MVMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_MVMatrix * vec4(a_position, 1.0);' +
    'vTextureCoordinates = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var Cube = /** @class */ (function (_super) {
    __extends(Cube, _super);
    function Cube(gl) {
        return _super.call(this, gl) || this;
    }
    Cube.prototype.onInit = function () {
        var rd = CubeData_1.CubeData.getData();
        this.createVertexsBuffer(rd.vertex, rd.dF.vertex_item_size);
        this.createUVsBuffer(rd.uvData, rd.dF.uv_item_size);
        this.createIndexsBuffer(rd.indexs);
        this.setShader(vertextBaseCode, fragBaseCode);
    };
    return Cube;
}(Sprite_1.SY.Sprite));
exports.default = Cube;
},{"../base/Sprite":21,"../data/CubeData":32}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MVMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_MVMatrix * vec4(a_position, 1.0);' +
    'vTextureCoordinates = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var CustomTextureCube = /** @class */ (function (_super) {
    __extends(CustomTextureCube, _super);
    function CustomTextureCube(gl) {
        return _super.call(this, gl) || this;
    }
    CustomTextureCube.prototype.onInit = function () {
        var positions = [
            -0.5, -0.5, -0.5,
            -0.5, 0.5, -0.5,
            0.5, -0.5, -0.5,
            //背面是个矩形 竖着放 斜角切开
            -0.5, 0.5, -0.5,
            0.5, 0.5, -0.5,
            0.5, -0.5, -0.5,
            -0.5, -0.5, 0.5,
            0.5, -0.5, 0.5,
            -0.5, 0.5, 0.5,
            //前面是个矩形 竖着放 斜角切开
            -0.5, 0.5, 0.5,
            0.5, -0.5, 0.5,
            0.5, 0.5, 0.5,
            -0.5, 0.5, -0.5,
            -0.5, 0.5, 0.5,
            0.5, 0.5, -0.5,
            //上面是个矩形 平铺  斜角切开（/）
            -0.5, 0.5, 0.5,
            0.5, 0.5, 0.5,
            0.5, 0.5, -0.5,
            -0.5, -0.5, -0.5,
            0.5, -0.5, -0.5,
            -0.5, -0.5, 0.5,
            //下面是个矩形 平铺 斜角切开（/）
            -0.5, -0.5, 0.5,
            0.5, -0.5, -0.5,
            0.5, -0.5, 0.5,
            -0.5, -0.5, -0.5,
            -0.5, -0.5, 0.5,
            -0.5, 0.5, -0.5,
            //左面是个矩形 面朝左右 斜角切开
            -0.5, -0.5, 0.5,
            -0.5, 0.5, 0.5,
            -0.5, 0.5, -0.5,
            0.5, -0.5, -0.5,
            0.5, 0.5, -0.5,
            0.5, -0.5, 0.5,
            //右面是个矩形 面朝左右 斜角切开
            0.5, -0.5, 0.5,
            0.5, 0.5, -0.5,
            0.5, 0.5, 0.5,
        ];
        positions.forEach(function (v, index) {
            positions[index] = positions[index] * 2;
        });
        var uvs = [
            0, 0,
            0, 1,
            1, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 0,
            1, 0,
            0, 1,
            1, 1,
            0, 0,
            0, 1,
            1, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 0,
            1, 0,
            0, 1,
            1, 1,
            0, 0,
            0, 1,
            1, 0,
            0, 1,
            1, 1,
            1, 0,
            0, 0,
            0, 1,
            1, 0,
            1, 0,
            0, 1,
            1, 1,
        ];
        this.createVertexsBuffer(positions, 3);
        this.createUVsBuffer(uvs, 2);
        this._glPrimitiveType = 4 /* TRIANGLES */;
        this.setShader(vertextBaseCode, fragBaseCode);
    };
    return CustomTextureCube;
}(Sprite_1.SY.Sprite));
exports.default = CustomTextureCube;
},{"../base/Sprite":21}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MVMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 vTextureCoordinates;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_MVMatrix * vec4(a_position, 1.0);' +
    'vTextureCoordinates = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 vTextureCoordinates;' +
    'uniform sampler2D u_texCoord;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, vTextureCoordinates);' +
    '}';
var Ground = /** @class */ (function (_super) {
    __extends(Ground, _super);
    function Ground(gl) {
        return _super.call(this, gl) || this;
    }
    Ground.prototype.onInit = function () {
        // 顶点数据
        var floorVertexPosition = [
            // Plane in y=0
            5.0, 0.0, 5.0,
            5.0, 0.0, -5.0,
            -5.0, 0.0, -5.0,
            -5.0, 0.0, 5.0
        ]; //v3
        this.createVertexsBuffer(floorVertexPosition, 3);
        //uv 数据
        var floorVertexTextureCoordinates = [
            2.0, 0.0,
            2.0, 2.0,
            0.0, 2.0,
            0.0, 0.0
        ];
        this.createUVsBuffer(floorVertexTextureCoordinates, 2);
        // 索引数据
        var floorVertexIndices = [0, 1, 2, 3];
        this.createIndexsBuffer(floorVertexIndices);
        this.setShader(vertextBaseCode, fragBaseCode);
    };
    return Ground;
}(Sprite_1.SY.Sprite));
exports.default = Ground;
},{"../base/Sprite":21}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var CubeData_1 = require("../data/CubeData");
/**
 * 如果将三维物体的朝向和光的方向点乘， 结果为 1 则物体朝向和光照方向相同，为 -1 则物体朝向和光照方向相反
 * 所以应该是发现和光的反向相乘，再乘以光的颜色，就是光反射的颜色，
 */
var vertexshader3d = 'attribute vec4 a_position;' +
    'attribute vec3 a_normal;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MVMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec2 v_uv;' +
    'varying vec3 v_normal;' +
    'void main() {' +
    // Multiply the position by the matrix.
    'gl_Position = u_PMatrix *u_MVMatrix* a_position;' +
    // Pass the normal to the fragment shader
    'v_normal = a_normal;' +
    'v_uv = a_uv;' +
    '}';
var fragmentshader3d = 'precision mediump float;' +
    // Passed in from the vertex shader.
    'varying vec3 v_normal;' + //法线
    'uniform vec3 u_color_dir;' + //光的方向
    'uniform vec4 u_color;' + //光照
    'uniform sampler2D u_texCoord;' + //纹理
    'varying vec2 v_uv;' +
    'void main() {' +
    'vec4 colorSource = texture2D(u_texCoord, v_uv);' +
    // because v_normal is a varying it's interpolated
    // so it will not be a unit vector. Normalizing it
    // will make it a unit vector again
    'vec3 normal = normalize(v_normal);' +
    'float light = dot(normal, u_color_dir);' +
    'gl_FragColor = u_color*colorSource;' +
    // Lets multiply just the color portion (not the alpha)
    // by the light
    'gl_FragColor.rgb *= light;' +
    '}';
/**
 * 光照立方体
 */
var LightCube = /** @class */ (function (_super) {
    __extends(LightCube, _super);
    function LightCube(gl) {
        var _this = _super.call(this, gl) || this;
        _this.name = "LightCube";
        return _this;
    }
    LightCube.prototype.onInit = function () {
        var rd = CubeData_1.CubeData.getData();
        this.createVertexsBuffer(rd.vertex, rd.dF.vertex_item_size);
        this.createUVsBuffer(rd.uvData, rd.dF.uv_item_size);
        this.createIndexsBuffer(rd.indexs);
        this.createNormalsBuffer(rd.normals, rd.dF.normal_item_size);
        this.setShader(vertexshader3d, fragmentshader3d);
        this._shader.USE_LIGHT = true;
    };
    LightCube.prototype.readyDraw = function (time) {
        _super.prototype.readyDraw.call(this, time);
    };
    return LightCube;
}(Sprite_1.SY.Sprite));
exports.default = LightCube;
},{"../base/Sprite":21,"../data/CubeData":32}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var GameMainCamera_1 = require("../camera/GameMainCamera");
var CubeData_1 = require("../data/CubeData");
var vertexshader3d = 'attribute vec4 a_position;' +
    'varying vec4 v_position;' +
    'void main() {' +
    'v_position = a_position;' +
    'gl_Position = a_position;' +
    'gl_Position.z = 1.0;' +
    '}';
var fragmentshader3d = 'precision mediump float;' +
    'uniform samplerCube u_skybox;' +
    'uniform mat4 u_PVM_Matrix_Inverse;' +
    'varying vec4 v_position;' +
    'void main() {' +
    'vec4 t = u_PVM_Matrix_Inverse * v_position;' +
    'vec3 pos = normalize(t.xyz / t.w);' +
    'vec4 color =  textureCube(u_skybox,pos);' +
    'gl_FragColor = color;' +
    '}';
var SkyBox = /** @class */ (function (_super) {
    __extends(SkyBox, _super);
    function SkyBox(gl) {
        var _this = _super.call(this, gl) || this;
        _this.defaultPath = [
            'res/skybox/2/right+x.png',
            'res/skybox/2/left-x.png',
            'res/skybox/2/up-y.png',
            'res/skybox/2/down+y.png',
            'res/skybox/2/back-z.png',
            'res/skybox/2/front+z.png'
        ];
        return _this;
    }
    SkyBox.prototype.onInit = function () {
        var rd = CubeData_1.CubeData.getData();
        this.createVertexsBuffer(rd.vertex, rd.dF.vertex_item_size);
        this.createIndexsBuffer(rd.indexs);
        this.setShader(vertexshader3d, fragmentshader3d);
        this._shader.USE_SKYBOX = true;
    };
    SkyBox.prototype.setDefaultUrl = function () {
        this.url = this.defaultPath;
    };
    SkyBox.prototype.updateCamera = function (time) {
        return GameMainCamera_1.default.instance.getCamera(this._cameraType).updateLookAt(time);
    };
    return SkyBox;
}(Sprite_1.SY.Sprite));
exports.default = SkyBox;
},{"../base/Sprite":21,"../camera/GameMainCamera":28,"../data/CubeData":32}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sprite_1 = require("../base/Sprite");
var vertextBaseCode = 'precision highp float;' +
    'attribute vec3 a_position;' +
    'uniform mat4 u_MVMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'varying vec4 color;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_MVMatrix * vec4(a_position, 1.0);' +
    'color=vec4(gl_Position.x,gl_Position.y,gl_Position.z,0.8);' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec4 color;' +
    'void main() {' +
    'gl_FragColor = color;' +
    '}';
var Sphere = /** @class */ (function (_super) {
    __extends(Sphere, _super);
    function Sphere() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Sphere.prototype.drawQiu02 = function (r, m) {
        var arr = new Array();
        var bufR = -r;
        var getMaxY = function (a, z, r) {
            var angle = 0;
            var addAng = 360 / a;
            var d = new Array();
            for (var i = 0; i < a; i++) {
                d.push(Math.sin(Math.PI / 180 * angle) * r, Math.cos(Math.PI / 180 * angle) * r, z);
                angle += addAng;
            }
            return d;
        };
        var addAng = 360 / m;
        var angle = 0;
        bufR = r;
        for (var i = 0; i < m / 2; i++) {
            if (i >= m / 4) {
                var z = Math.sin(Math.PI / 180 * angle) * -r;
            }
            else {
                var z = Math.sin(Math.PI / 180 * angle) * -r;
            }
            console.log(z);
            angle += addAng;
            var arr1 = getMaxY(m, z, bufR);
            if (i >= m / 4) {
                z = Math.sin(Math.PI / 180 * angle) * -r;
            }
            else {
                z = -Math.sin(Math.PI / 180 * angle) * -r;
            }
            bufR = Math.sqrt(r * r - r * Math.sin(Math.PI / 180 * angle) * r * Math.sin(Math.PI / 180 * angle));
            var arr2 = getMaxY(m, z, bufR);
            for (var q = 0; q < arr1.length; q += 3) {
                if (q == 0) {
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr1[arr1.length - 3], arr1[arr1.length - 2], arr1[arr1.length - 1]);
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr2[q + 3], arr2[q + 4], arr2[q + 5]);
                }
                else if (q == arr1.length - 3) {
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr1[q - 3], arr1[q - 2], arr1[q - 1]);
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr2[0], arr2[1], arr2[2]);
                }
                else {
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr1[q - 3], arr1[q - 2], arr1[q - 1]);
                    arr.push(arr1[q], arr1[q + 1], arr1[q + 2]);
                    arr.push(arr2[q], arr2[q + 1], arr2[q + 2]);
                    arr.push(arr2[q + 3], arr2[q + 4], arr2[q + 5]);
                }
            }
        }
        return arr;
    };
    Sphere.prototype.onInit = function () {
        var data = this.drawQiu02(1, 18);
        this.createVertexsBuffer(data, 3);
        this.setShader(vertextBaseCode, fragBaseCode);
        this._glPrimitiveType = this.gl.LINE_STRIP;
    };
    Sphere.prototype.readyDraw = function (time) {
        // this.rotate(0.5,0.5,0.5);
        _super.prototype.readyDraw.call(this, time);
    };
    return Sphere;
}(Sprite_1.SY.Sprite));
exports.default = Sphere;
},{"../base/Sprite":21}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Matrix_1 = require("../../Matrix");
var Texture2D_1 = require("../base/Texture2D");
var LoaderManager_1 = require("../../../LoaderManager");
var Sprite_1 = require("../base/Sprite");
var Shader_1 = require("../shader/Shader");
var Device_1 = require("../../../Device");
var RenderData_1 = require("../base/RenderData");
var skinVS = 'attribute vec4 a_POSITION;' + //顶点位置
    'attribute vec3 a_NORMAL;' + //法线
    'attribute vec4 a_WEIGHTS_0;' + //权重
    'attribute vec4 a_JOINTS_0;' +
    'attribute vec2 a_TEXCOORD_0;' +
    'uniform mat4 u_projection;' + //投影
    'uniform mat4 u_view;' + //观察空间
    'uniform mat4 u_world;' + //世界空间
    'uniform sampler2D u_jointTexture;' + //骨骼矩阵纹理
    'uniform float u_numJoints;' + //[6,7,8,9,10,11]
    'varying vec3 v_normal;' +
    'varying vec2 a_uv;' +
    //获取骨骼矩阵
    //一共有6个骨骼矩阵
    //0 1 2 3 4 5
    //每个顶点受到4个骨骼矩阵的影响
    /**
    RGBA RGBA RGBA RGBA  --矩阵1  16
    RGBA RGBA RGBA RGBA  --矩阵2  16
    RGBA RGBA RGBA RGBA  --矩阵3  16
    RGBA RGBA RGBA RGBA  --矩阵4  16
    RGBA RGBA RGBA RGBA  --矩阵5  16
    RGBA RGBA RGBA RGBA  --矩阵6  16
     */
    'mat4 getBoneMatrix(float jointNdx) {' +
    'float v = (jointNdx + 0.5) / u_numJoints;' + //算出行
    'return mat4(' + //s      
    'texture2D(u_jointTexture, vec2(((0.5 + 0.0) / 4.), v)),' + //0.125 
    'texture2D(u_jointTexture, vec2(((0.5 + 1.0) / 4.), v)),' + //0.375 
    'texture2D(u_jointTexture, vec2(((0.5 + 2.0) / 4.), v)),' + //0.625 
    'texture2D(u_jointTexture, vec2(((0.5 + 3.0) / 4.), v)));' + //0.875 
    '}' +
    'void main() {' +
    'mat4 skinMatrix =   getBoneMatrix(a_JOINTS_0[0]) * a_WEIGHTS_0[0] +' +
    'getBoneMatrix(a_JOINTS_0[1]) * a_WEIGHTS_0[1] +' +
    'getBoneMatrix(a_JOINTS_0[2]) * a_WEIGHTS_0[2] +' +
    'getBoneMatrix(a_JOINTS_0[3]) * a_WEIGHTS_0[3];' +
    'mat4 world = u_world * skinMatrix;' +
    'gl_Position = u_projection * u_view * world * a_POSITION;' +
    'v_normal = mat3(world) * a_NORMAL;' +
    'a_uv = a_TEXCOORD_0;' +
    '}';
var meshVS = 'attribute vec4 a_POSITION;' +
    'attribute vec3 a_NORMAL;' +
    'uniform mat4 u_projection;' +
    'uniform mat4 u_view;' +
    'uniform mat4 u_world;' +
    'varying vec3 v_normal;' +
    'void main() {' +
    'gl_Position = u_projection * u_view * u_world * a_POSITION;' +
    'v_normal = mat3(u_world) * a_NORMAL;' +
    '}';
var fs = 'precision mediump float;' + //精度
    'varying vec3 v_normal;' + //法线
    'uniform vec4 u_diffuse;' + //漫反射
    'uniform sampler2D u_texCoord;' + //骨骼矩阵纹理
    'uniform vec3 u_lightDirection;' + //光的方向
    'varying vec2 a_uv;' +
    'void main () {' +
    'vec3 normal = normalize(v_normal);' +
    'float light = dot(u_lightDirection,normal) * .5 + .5;' +
    'vec4 color = texture2D(u_texCoord,normalize(a_uv)); ' +
    'gl_FragColor = color+vec4(u_diffuse.rgb * light, u_diffuse.a);' +
    '}';
var skeleton_Skin = /** @class */ (function () {
    //inverseBindMatrixData Float32Array(96)
    function skeleton_Skin(joints, inverseBindMatrixData, gl) {
        this.gl = gl;
        this.joints = joints;
        this.inverseBindMatrices = [];
        this.jointMatrices = [];
        this.jointData = new Float32Array(joints.length * 16);
        // create views for each joint and inverseBindMatrix
        for (var i = 0; i < joints.length; ++i) {
            this.inverseBindMatrices.push(new Float32Array(inverseBindMatrixData.buffer, inverseBindMatrixData.byteOffset + Float32Array.BYTES_PER_ELEMENT * 16 * i, 16));
            this.jointMatrices.push(new Float32Array(this.jointData.buffer, Float32Array.BYTES_PER_ELEMENT * 16 * i, 16));
        }
        // create a texture to hold the joint matrices
        this.jointTexture = this.gl.createTexture();
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.jointTexture);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
        if (Device_1.default.Instance.getContextType() == "webgl2") {
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA32F, 4, this.joints.length, 0, this.gl.RGBA, this.gl.FLOAT, this.jointData);
        }
        else {
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 4, this.joints.length, 0, this.gl.RGBA, this.gl.FLOAT, this.jointData);
        }
        this.gl.bindTexture(this.gl.TEXTURE_2D, null);
        this._texture = new Texture2D_1.Texture2D(this.gl);
        this.createTexture2DBuffer("res/wicker.jpg");
    }
    //创建一个纹理buffer
    skeleton_Skin.prototype.createTexture2DBuffer = function (url) {
        // (this._texture as TextureCustom).url = CustomTextureData.getRandomData(30,50, gltex_format.RGB8);
        this._texture.url = url;
        return this._texture;
    };
    skeleton_Skin.prototype.update = function (node) {
        var globalWorldInverse = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.invert(globalWorldInverse, node.worldMatrix);
        // go through each joint and get its current worldMatrix
        // apply the inverse bind matrices and store the
        // entire result in the texture
        for (var j = 0; j < this.joints.length; ++j) {
            var joint = this.joints[j];
            var dst = this.jointMatrices[j];
            Matrix_1.glMatrix.mat4.multiply(dst, globalWorldInverse, joint.worldMatrix);
            Matrix_1.glMatrix.mat4.multiply(dst, dst, this.inverseBindMatrices[j]);
        }
        this.gl.bindTexture(this.gl.TEXTURE_2D, this.jointTexture);
        if (Device_1.default.Instance.getContextType() == "webgl2") {
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA32F, 4, this.joints.length, 0, this.gl.RGBA, this.gl.FLOAT, this.jointData);
        }
        else {
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, 4, this.joints.length, 0, this.gl.RGBA, this.gl.FLOAT, this.jointData);
        }
    };
    return skeleton_Skin;
}());
//transforms
//位置 旋转 缩放
var skeleton_Transform = /** @class */ (function () {
    function skeleton_Transform(position, rotation, scale) {
        if (position === void 0) { position = [0, 0, 0]; }
        if (rotation === void 0) { rotation = [0, 0, 0, 1]; }
        if (scale === void 0) { scale = [1, 1, 1]; }
        this.position = position;
        this.rotation = rotation;
        this.scale = scale;
    }
    skeleton_Transform.prototype.getMatrix = function (dst) {
        dst = dst || new Float32Array(16);
        Matrix_1.glMatrix.mat4.compose(this.position, this.rotation, this.scale, dst);
        return dst;
    };
    return skeleton_Transform;
}());
//节点
var skeleton_Node = /** @class */ (function () {
    function skeleton_Node(transform, name) {
        this.mesh_Drawables = [];
        this.skin_Drawables = [];
        this.name = name;
        this.transform = transform;
        this.parent = null;
        this.children = [];
        // this.localMatrix = m4.identity();
        // this.worldMatrix = m4.identity();
        this.localMatrix = Matrix_1.glMatrix.mat4.create();
        this.worldMatrix = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.identity(this.localMatrix);
        Matrix_1.glMatrix.mat4.identity(this.worldMatrix);
        this.mesh_Drawables = [];
        this.skin_Drawables = [];
    }
    skeleton_Node.prototype.setParent = function (parent) {
        if (this.parent) {
            this.parent._removeChild(this);
            this.parent = null;
        }
        if (parent) {
            parent._addChild(this);
            this.parent = parent;
        }
    };
    skeleton_Node.prototype.updateWorldMatrix = function (parentWorldMatrix) {
        var transform = this.transform;
        if (transform) {
            transform.getMatrix(this.localMatrix);
        }
        if (parentWorldMatrix) {
            // a matrix was passed in so do the math
            Matrix_1.glMatrix.mat4.multiply(this.worldMatrix, parentWorldMatrix, this.localMatrix);
        }
        else {
            // no matrix was passed in so just copy local to world
            Matrix_1.glMatrix.mat4.copy(this.localMatrix, this.worldMatrix);
        }
        // now process all the children
        var worldMatrix = this.worldMatrix;
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            child.updateWorldMatrix(worldMatrix);
        }
    };
    skeleton_Node.prototype.traverse = function (fn) {
        fn(this);
        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
            var child = _a[_i];
            child.traverse(fn);
        }
    };
    skeleton_Node.prototype._addChild = function (child) {
        this.children.push(child);
    };
    skeleton_Node.prototype._removeChild = function (child) {
        var ndx = this.children.indexOf(child);
        this.children.splice(ndx, 1);
    };
    return skeleton_Node;
}());
//皮肤渲染
var skeleton_SkinRenderer = /** @class */ (function () {
    function skeleton_SkinRenderer(mesh, skin, gl) {
        this.mesh = mesh;
        this.skin = skin;
        this.gl = gl;
        this.skinProgramInfo = Shader_1.G_ShaderFactory.createProgramInfo(skinVS, fs);
    }
    skeleton_SkinRenderer.prototype.render = function (node, extViewLeftMatrix, sharedUniforms) {
        this.skin.update(node);
        for (var _i = 0, _a = this.mesh.primitives; _i < _a.length; _i++) {
            var primitive = _a[_i];
            var renderData = RenderData_1.RenderDataPool.get(RenderData_1.RenderDataType.Spine);
            renderData._shaderData = this.skinProgramInfo;
            renderData._uniformInfors.push({
                u_world: node.worldMatrix,
                u_texCoord: this.skin._texture._glID,
                u_jointTexture: this.skin.jointTexture,
                u_numJoints: this.skin.joints.length,
            });
            renderData._extraViewLeftMatrix = extViewLeftMatrix;
            renderData._projKey = "u_projection";
            renderData._viewKey = "u_view";
            renderData._uniformInfors.push(primitive.material.uniforms);
            renderData._uniformInfors.push(sharedUniforms);
            renderData._attrbufferInfo = primitive.bufferInfo;
            Device_1.default.Instance.collectData(renderData);
        }
    };
    return skeleton_SkinRenderer;
}());
//网格渲染
var skeleton_MeshRenderer = /** @class */ (function () {
    function skeleton_MeshRenderer(mesh, gl) {
        this.mesh = mesh;
        this.gl = gl;
        this.meshProgramInfo = Shader_1.G_ShaderFactory.createProgramInfo(meshVS, fs);
    }
    skeleton_MeshRenderer.prototype.render = function (node, ext, sharedUniforms) {
        for (var _i = 0, _a = this.mesh.primitives; _i < _a.length; _i++) {
            var primitive = _a[_i];
            var renderData = RenderData_1.RenderDataPool.get(RenderData_1.RenderDataType.Spine);
            renderData._extraViewLeftMatrix = ext;
            renderData._projKey = "u_projection";
            renderData._viewKey = "u_view";
            renderData._shaderData = this.meshProgramInfo;
            renderData._attrbufferInfo = primitive.bufferInfo;
            renderData._uniformInfors.push({ u_world: node.worldMatrix });
            renderData._uniformInfors.push(primitive.material.uniforms);
            renderData._uniformInfors.push(sharedUniforms);
            Device_1.default.Instance.collectData(renderData);
        }
    };
    return skeleton_MeshRenderer;
}());
//骨骼解析器
var skeleton_Parse = /** @class */ (function () {
    function skeleton_Parse() {
    }
    //https://webglfundamentals.org/webgl/resources/models/killer_whale/whale.CYCLES.gltf
    /**
     * 骨骼文件解析
     * 变量accessors
     *     bufferView:存储的是bufferviews的索引
     *     componentType：元素的类型，具体可查看glTypeToTypedArrayMap
     *     count：元素的数量
     *     max:单位元素每一位元素的最大值
     *     min:单位元素每一位元素的最小值
     *     type：单位元素的数目，具体可查看accessorTypeToNumComponentsMap
     *变量bufferviews
           buffer:在buffer中的起始位置
           byteLength：bufferview的字节长度
           byteOffset:在buffer中的偏移位置
           target:目标缓冲
    *变量nodes
           节点，包含所有可是节点，比如相机，灯光，物体，骨骼等
           name：节点的名字
           rotation：节点的旋转
           scale：节点的缩放
           translation:节点的平移
           children：节点的孩子节点列表
     *变量skins
           inverseBindMatrices:存储的是accessors的索引
           joints:骨骼节点数组，存储的是nodes的索引

     根据上面的shader代码：我们需要下面这些数据
     顶点：
     法线：
     切线：
     权重：
     骨骼关节矩阵:
     */
    skeleton_Parse.throwNoKey = function (key) {
        throw new Error("no key: " + key);
    };
    //27420
    //4  2285  3
    skeleton_Parse.accessorTypeToNumComponents = function (type) {
        return this.accessorTypeToNumComponentsMap[type] || this.throwNoKey(type);
    };
    // Given a GL type return the TypedArray needed
    skeleton_Parse.glTypeToTypedArray = function (type) {
        return this.glTypeToTypedArrayMap[type] || this.throwNoKey(type);
    };
    // given an accessor index return both the accessor and
    // a TypedArray for the correct portion of the buffer
    skeleton_Parse.getAccessorTypedArrayAndStride = function (gl, gltf, accessorIndex) {
        //gltf.accessors是bufferView的数组
        var accessor = gltf.accessors[accessorIndex];
        //gltf.bufferViews存储了每个bufferview的在顶点数组中的存放位置以及大小
        var bufferView = gltf.bufferViews[accessor.bufferView];
        var TypedArray = this.glTypeToTypedArray(accessor.componentType); //Float32Array
        var buffer = gltf.buffers[bufferView.buffer];
        console.log(gltf.buffers);
        var array = new TypedArray(buffer, bufferView.byteOffset + (accessor.byteOffset || 0), accessor.count * this.accessorTypeToNumComponents(accessor.type));
        return {
            accessor: accessor,
            array: array,
            stride: bufferView.byteStride || 0,
        };
    };
    // Given an accessor index return a WebGLBuffer and a stride
    skeleton_Parse.getAccessorAndWebGLBuffer = function (gl, gltf, accessorIndex, attribName) {
        if (attribName === void 0) { attribName = ""; }
        var accessor = gltf.accessors[accessorIndex];
        var bufferView = gltf.bufferViews[accessor.bufferView];
        if (!bufferView.webglBuffer) {
            var buffer = gl.createBuffer();
            var target = bufferView.target || gl.ARRAY_BUFFER;
            var arrayBuffer = gltf.buffers[bufferView.buffer];
            var data = new Uint8Array(arrayBuffer, bufferView.byteOffset, bufferView.byteLength);
            //绑定缓冲
            gl.bindBuffer(target, buffer);
            //上传数据
            gl.bufferData(target, data, gl.STATIC_DRAW);
            bufferView.webglBuffer = buffer;
            if (attribName == "JOINTS_0" || attribName == "WEIGHTS_0") {
                var pData = [];
                data.forEach(function (value, index, array) {
                    pData.push(value);
                });
            }
        }
        return {
            accessor: accessor,
            buffer: bufferView.webglBuffer,
            stride: bufferView.stride || 0,
        };
    };
    //解析骨骼动画数据
    skeleton_Parse.parseGLTF = function (gl, gltfPath, bufferPath) {
        var _this = this;
        if (gltfPath === void 0) { gltfPath = "res/models/killer_whale/whale.CYCLES.gltf"; }
        if (bufferPath === void 0) { bufferPath = "res/models/killer_whale/whale.CYCLES.bin"; }
        var gltf = LoaderManager_1.default.instance.getCacheData(gltfPath);
        gltf.buffers = [LoaderManager_1.default.instance.getCacheData(bufferPath)];
        console.log(gltf);
        //缺省的材质
        var defaultMaterial = {
            uniforms: {
                u_diffuse: [0.5, 0, 0, 1],
            },
        };
        // setup meshes
        // 创建网格
        gltf.meshes.forEach(function (mesh) {
            mesh.primitives.forEach(function (primitive) {
                var attribs = {};
                var numElements;
                for (var _i = 0, _a = Object.entries(primitive.attributes); _i < _a.length; _i++) {
                    var _b = _a[_i], attribName = _b[0], index = _b[1];
                    var _c = _this.getAccessorAndWebGLBuffer(gl, gltf, index, attribName), accessor = _c.accessor, buffer = _c.buffer, stride = _c.stride;
                    numElements = accessor.count;
                    attribs["a_" + attribName] = {
                        buffer: buffer,
                        type: accessor.componentType,
                        numComponents: _this.accessorTypeToNumComponents(accessor.type),
                        stride: stride,
                        offset: accessor.byteOffset | 0,
                    };
                }
                var bufferInfo = {
                    attribs: attribs,
                    numElements: numElements,
                };
                if (primitive.indices !== undefined) {
                    var _d = _this.getAccessorAndWebGLBuffer(gl, gltf, primitive.indices), accessor = _d.accessor, buffer = _d.buffer;
                    bufferInfo.numElements = accessor.count;
                    bufferInfo.indices = buffer;
                    bufferInfo.elementType = accessor.componentType;
                }
                //设置缓冲信息
                primitive.bufferInfo = bufferInfo;
                // save the material info for this primitive
                primitive.material = gltf.materials && gltf.materials[primitive.material] || defaultMaterial;
            });
        });
        var skinNodes = [];
        var origNodes = gltf.nodes;
        gltf.nodes = gltf.nodes.map(function (n) {
            var name = n.name, skin = n.skin, mesh = n.mesh, translation = n.translation, rotation = n.rotation, scale = n.scale;
            var trs = new skeleton_Transform(translation, rotation, scale);
            var node = new skeleton_Node(trs, name);
            var realMesh = gltf.meshes[mesh];
            if (skin !== undefined) {
                skinNodes.push({ node: node, mesh: realMesh, skinNdx: skin });
            }
            else if (realMesh) {
                node.mesh_Drawables.push(new skeleton_MeshRenderer(realMesh, gl));
            }
            return node;
        });
        // setup skins
        gltf.skins = gltf.skins.map(function (skin) {
            var joints = skin.joints.map(function (ndx) { return gltf.nodes[ndx]; });
            //96个元素 每个元素四个字节
            //一个矩阵4x4 16个元素 可以组成6个矩阵
            var array = _this.getAccessorTypedArrayAndStride(gl, gltf, skin.inverseBindMatrices).array;
            return new skeleton_Skin(joints, array, gl);
        });
        // Add SkinRenderers to nodes with skins
        for (var _i = 0, skinNodes_1 = skinNodes; _i < skinNodes_1.length; _i++) {
            var _a = skinNodes_1[_i], node = _a.node, mesh = _a.mesh, skinNdx = _a.skinNdx;
            node.skin_Drawables.push(new skeleton_SkinRenderer(mesh, gltf.skins[skinNdx], gl));
        }
        /**
     * 设置节点的父子关系
     * @param nodes 骨骼动画中的源节点数组
     * @param node 父节点
     * @param childIndices 骨骼动画中源节点索引
     */
        function addChildren(nodes, node, childIndices) {
            childIndices.forEach(function (childNdx) {
                var child = nodes[childNdx];
                child.setParent(node);
            });
        }
        // arrange nodes into graph
        // 在骨骼动画的配置中,nodes是一个包含所有节点的对象
        //遍历nodes,就是遍历所有节点
        gltf.nodes.forEach(function (node, ndx) {
            var children = origNodes[ndx].children;
            if (children) {
                addChildren(gltf.nodes, node, children);
            }
        });
        // setup scenes
        // 创建场景
        for (var _b = 0, _c = gltf.scenes; _b < _c.length; _b++) {
            var scene = _c[_b];
            scene.root = new skeleton_Node(new skeleton_Transform(), scene.name);
            addChildren(gltf.nodes, scene.root, scene.nodes);
        }
        return gltf;
    };
    //变量类型占用的元素个数
    skeleton_Parse.accessorTypeToNumComponentsMap = {
        'SCALAR': 1,
        'VEC2': 2,
        'VEC3': 3,
        'VEC4': 4,
        'MAT2': 4,
        'MAT3': 9,
        'MAT4': 16,
    };
    //元素数组类型
    skeleton_Parse.glTypeToTypedArrayMap = {
        '5120': Int8Array,
        '5121': Uint8Array,
        '5122': Int16Array,
        '5123': Uint16Array,
        '5124': Int32Array,
        '5125': Uint32Array,
        '5126': Float32Array,
    };
    return skeleton_Parse;
}());
//骨骼节点
var Spine = /** @class */ (function (_super) {
    __extends(Spine, _super);
    function Spine(gl) {
        var _this = _super.call(this, gl) || this;
        _this.origMatrices = new Map();
        _this._cameraType = 0;
        _this.gltf = skeleton_Parse.parseGLTF(gl);
        return _this;
    }
    Spine.prototype.onInit = function () {
        this.localFunc();
    };
    Spine.prototype.animSkin = function (skin, a) {
        for (var i = 0; i < skin.joints.length; ++i) {
            var joint = skin.joints[i];
            // if there is no matrix saved for this joint
            if (!this.origMatrices.has(joint)) {
                // save a matrix for joint
                this.origMatrices.set(joint, joint.transform.getMatrix());
            }
            // get the original matrix
            var origMatrix = this.origMatrices.get(joint);
            // rotate it
            var m = Matrix_1.glMatrix.mat4.create();
            Matrix_1.glMatrix.mat4.rotateX(m, origMatrix, a);
            // decompose it back into position, rotation, scale
            // into the joint
            Matrix_1.glMatrix.mat4.decompose(m, joint.transform.position, joint.transform.rotation, joint.transform.scale);
        }
    };
    Spine.prototype.localFunc = function () {
        var cameraPosition = [5, 0, -5];
        var target = [0, 0, -10];
        // for debugging .. see article
        // const cameraPosition = [5, 0, 5];
        // const target = [0, 0, 0];
        var up = [0, 1, 0];
        // Compute the camera's matrix using look at.
        this.spineMatrix = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.lookAt(this.spineMatrix, cameraPosition, target, up);
        this._glMatrix.mat4.mul(this._modelMatrix, this._modelMatrix, this.spineMatrix);
    };
    Spine.prototype.renderDrawables = function (node) {
        var msMatrix = this._glMatrix.mat4.multiply(null, this._modelMatrix, this.spineMatrix);
        //渲染网格
        for (var _i = 0, _a = node.mesh_Drawables; _i < _a.length; _i++) {
            var drawable = _a[_i];
            drawable.render(node, msMatrix, this.sharedUniforms);
        }
        //渲染皮肤
        for (var _b = 0, _c = node.skin_Drawables; _b < _c.length; _b++) {
            var drawable = _c[_b];
            drawable.render(node, msMatrix, this.sharedUniforms);
        }
    };
    Spine.prototype.draw = function (time) {
        time *= 0.001; // convert to seconds
        this.animSkin(this.gltf.skins[0], Math.sin(time) * .5);
        var lightDirection = Matrix_1.glMatrix.vec3.create();
        Matrix_1.glMatrix.vec3.normalize(lightDirection, [-1, 3, 5]);
        this.sharedUniforms = {
            u_lightDirection: lightDirection,
        };
        for (var _i = 0, _a = this.gltf.scenes; _i < _a.length; _i++) {
            var scene = _a[_i];
            // updatte all world matices in the scene.
            scene.root.updateWorldMatrix();
            // walk the scene and render all renderables
            scene.root.traverse(this.renderDrawables.bind(this));
        }
    };
    return Spine;
}(Sprite_1.SY.Sprite));
exports.default = Spine;
},{"../../../Device":1,"../../../LoaderManager":2,"../../Matrix":6,"../base/RenderData":17,"../base/Sprite":21,"../base/Texture2D":23,"../shader/Shader":37}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderTexture = void 0;
var GLEnums_1 = require("../gfx/GLEnums");
var Texture2D_1 = require("../base/Texture2D");
/**
 * !#en The depth buffer and stencil buffer format for RenderTexture.
 * !#zh RenderTexture 的深度缓冲以及模板缓冲格式。
 * @enum RenderTexture.DepthStencilFormat
 */
var DepthStencilFormat = {
    /**
     * !#en 24 bit depth buffer and 8 bit stencil buffer
     * !#zh 24 位深度缓冲和 8 位模板缓冲
     * @property RB_FMT_D24S8
     * @readonly
     * @type {number}
     */
    RB_FMT_D24S8: GLEnums_1.glrender_buffer_format.D24S8,
    /**
     * !#en Only 8 bit stencil buffer
     * !#zh 只申请 8 位模板缓冲
     * @property RB_FMT_S8
     * @readonly
     * @type {number}
     */
    RB_FMT_S8: GLEnums_1.glrender_buffer_format.S8,
    /**
     * !#en Only 16 bit depth buffer
     * !#zh 只申请 16 位深度缓冲
     * @property RB_FMT_D16
     * @readonly
     * @type {number}
     */
    RB_FMT_D16: GLEnums_1.glrender_buffer_format.D16
};
/**
 * Render textures are textures that can be rendered to.
 * @class RenderTexture
 * @extends Texture2D
 */
var RenderTexture = /** @class */ (function (_super) {
    __extends(RenderTexture, _super);
    function RenderTexture(gl) {
        var _this = _super.call(this, gl) || this;
        _this.intFBRuffers();
        return _this;
    }
    RenderTexture.prototype.intFBRuffers = function () {
        var gl = this._gl;
        /**
         * 将窗口的宽高赋值给当前的渲染缓冲区
         * 因为如果我们不设置帧缓冲的话，屏幕就是帧缓冲的指向
         */
        this.gl_width = gl.canvas.width;
        this.gl_height = gl.canvas.height;
        //创建帧缓冲并绑定
        this._frameBuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
        //创建渲染缓冲并绑定以及初始化存储
        this._renderBuffer = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, this._renderBuffer);
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.gl_width, this.gl_height);
        //创建纹理
        gl.bindTexture(gl.TEXTURE_2D, this._glID);
        // Y 轴取反
        this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, false);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
        //设置纹理格式，作为帧缓冲的颜色附件
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.gl_width, this.gl_height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
        //设置上面创建纹理作为颜色附件
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._glID, 0);
        //设置渲染缓冲对象作为深度附件
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._renderBuffer);
        // 检测帧缓冲区对象的配置状态是否成功
        var e = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
        if (gl.FRAMEBUFFER_COMPLETE !== e) {
            console.log('Frame buffer object is incomplete: ' + e.toString());
            return;
        }
        else {
            console.log("创建帧缓存成功----------");
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.bindTexture(gl.TEXTURE_2D, null);
        gl.bindRenderbuffer(gl.RENDERBUFFER, null);
        this.loaded = true;
    };
    // public _framebuffer: FrameBuffer;
    // private _depthStencilBuffer:RenderBuffer;
    // private _packable: boolean;
    // private loaded: boolean;
    // private _texture:Texture2D;
    // /**
    //  * !#en
    //  * Init the render texture with size.
    //  * !#zh
    //  * 初始化 render texture 
    //  * @param {Number} [width] 
    //  * @param {Number} [height]
    //  * @param {Number} [depthStencilFormat]
    //  * @method initWithSize
    //  */
    // initWithSize(width, height, depthStencilFormat) {
    //     this._width = Math.floor(width || 256);
    //     this._height = Math.floor(height || 256);
    //     this._resetUnderlyingMipmaps();
    //     let opts = {
    //         depthStencil:null,
    //         stencil:null,
    //         depth:null,
    //         colors: [this._texture],
    //     };
    //     if (this._depthStencilBuffer) this._depthStencilBuffer.destroy();
    //     let depthStencilBuffer;
    //     if (depthStencilFormat) {
    //         depthStencilBuffer = new RenderBuffer(this._gl, depthStencilFormat, width, height);
    //         if (depthStencilFormat === glrender_buffer_format.D24S8) {
    //             opts.depthStencil = depthStencilBuffer;
    //         }
    //         else if (depthStencilFormat === glrender_buffer_format.S8) {
    //             opts.stencil = depthStencilBuffer;
    //         }
    //         else if (depthStencilFormat === glrender_buffer_format.D16) {
    //             opts.depth = depthStencilBuffer;
    //         }
    //     }
    //     this._depthStencilBuffer = depthStencilBuffer;
    //     if (this._framebuffer) this._framebuffer.destroy();
    //     this._framebuffer = new FrameBuffer(this._gl, width, height, opts);
    //     this._packable = false;
    //     this.loaded = true;
    //     // this.emit("load");
    // }
    // updateSize(width, height) {
    //     this._width = Math.floor(width || 256);
    //     this._height = Math.floor(height || 256);
    //     this._resetUnderlyingMipmaps();
    //     let rbo = this._depthStencilBuffer;
    //     if (rbo) rbo.update(this._width, this._height);
    //     this._framebuffer._width = width;
    //     this._framebuffer._height = height;
    // }
    // /**
    //  * !#en Draw a texture to the specified position
    //  * !#zh 将指定的图片渲染到指定的位置上
    //  * @param {Texture2D} texture 
    //  * @param {Number} x 
    //  * @param {Number} y 
    //  */
    // drawTextureAt(texture, x, y) {
    //     if (!texture._image || texture._image.width === 0) return;
    //     // this._texture.updateSubImage({
    //     //     x, y,
    //     //     image: texture._image,
    //     //     width: texture.width,
    //     //     height: texture.height,
    //     //     level: 0,
    //     //     flipY: false,
    //     //     premultiplyAlpha: texture._premultiplyAlpha
    //     // })
    // }
    // /**
    //  * !#en
    //  * Get pixels from render texture, the pixels data stores in a RGBA Uint8Array.
    //  * It will return a new (width * height * 4) length Uint8Array by default。
    //  * You can specify a data to store the pixels to reuse the data, 
    //  * you and can specify other params to specify the texture region to read.
    //  * !#zh
    //  * 从 render texture 读取像素数据，数据类型为 RGBA 格式的 Uint8Array 数组。
    //  * 默认每次调用此函数会生成一个大小为 （长 x 高 x 4） 的 Uint8Array。
    //  * 你可以通过传入 data 来接收像素数据，也可以通过传参来指定需要读取的区域的像素。
    //  * @method readPixels
    //  * @param {Uint8Array} [data]
    //  * @param {Number} [x] 
    //  * @param {Number} [y] 
    //  * @param {Number} [w] 
    //  * @param {Number} [h] 
    //  * @return {Uint8Array}
    //  */
    // readPixels(data, x, y, w, h) {
    //     if (!this._framebuffer || !this._texture) return data;
    //     x = x || 0;
    //     y = y || 0;
    //     let width = w || this._width;
    //     let height = h || this._height
    //     data = data || new Uint8Array(width * height * 4);
    //     let gl = this._gl;
    //     let oldFBO = gl.getParameter(gl.FRAMEBUFFER_BINDING);
    //     gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer.getHandle());
    //     gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
    //     gl.bindFramebuffer(gl.FRAMEBUFFER, oldFBO);
    //     return data;
    // }
    RenderTexture.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        // if (this._framebuffer) {
        //     this._framebuffer.destroy();
        //     this._framebuffer = null;
        // }
    };
    RenderTexture.prototype._resetUnderlyingMipmaps = function () {
    };
    return RenderTexture;
}(Texture2D_1.Texture2D));
exports.RenderTexture = RenderTexture;
},{"../base/Texture2D":23,"../gfx/GLEnums":34}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = void 0;
var Ref_1 = require("../../../Ref");
var Matrix_1 = require("../../Matrix");
var Node = /** @class */ (function (_super) {
    __extends(Node, _super);
    function Node() {
        var _this = _super.call(this) || this;
        _this.x = 0;
        _this.y = 0;
        _this.z = 0;
        _this.scaleX = 1;
        _this.scaleY = 1;
        _this.scaleZ = 1;
        _this.rotateX = 0;
        _this.rotateY = 0;
        _this.rotateZ = 0;
        _this.width = 0; //宽度
        _this.height = 0; //高度
        _this.anchorX = 0.5; //x轴锚点
        _this.anchorY = 0.5; //y轴锚点
        _this._glMatrix = Matrix_1.glMatrix; //矩阵操作api
        _this.initBaseNode();
        return _this;
    }
    Node.prototype.initBaseNode = function () {
        this.name = "defaultName";
        this._children = [];
        this._worldMatrix = this._glMatrix.mat4.identity(null);
        this._modelMatrix = this._glMatrix.mat4.identity(null);
    };
    Object.defineProperty(Node.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (node) {
            this._parent = node;
        },
        enumerable: false,
        configurable: true
    });
    /**
     *
     * @param node
     */
    Node.prototype.addChild = function (node) {
        this._children.push(node);
        node.parent = this;
    };
    /**
     * 移除孩子节点
     * @param node
     */
    Node.prototype.removeChild = function (node) {
        var index = this._children.indexOf(node);
        if (index >= 0) {
            this._children.splice(index, 1);
            node.parent = null;
        }
    };
    //更新世界矩阵
    Node.prototype.updateWorldMatrix = function () {
        if (this._parent) {
            //二处调用
            this.setFatherMatrix(this._parent.getModelViewMatrix());
            return;
        }
        //否则这就是场景节点，不需要变换
    };
    //绘制之前
    Node.prototype.onDrawBefore = function () {
    };
    Node.prototype.onDrawAfter = function () {
    };
    Node.prototype.drawBefore = function () {
        //更新矩阵数据
    };
    Node.prototype.drawAfter = function () {
    };
    //开启绘制
    Node.prototype.readyDraw = function (time) {
        //更新世界节点
        this.updateWorldMatrix();
        //更新当前节点的矩阵数据
        this.updateMatrixData();
        //开始绘制
        this.draw(time);
        for (var j = 0; j < this._children.length; j++) {
            this._children[j].readyDraw(time);
        }
    };
    Node.prototype.draw = function (time) {
    };
    /**
     *
     * @param mvMatrix 设置父节点矩阵
     */
    Node.prototype.setFatherMatrix = function (mvMatrix) {
        this._worldMatrix = this.mat4Clone$3(mvMatrix);
    };
    /**
    * 更新2D矩阵
    * 将此节点的数据更新到这个矩阵中
    *
    * 世界坐标变换要先缩放、后旋转、再平移的原因
    *
    * 缩放变换不改变坐标轴的走向，也不改变原点的位置，所以两个坐标系仍然重合。
      旋转变换改变坐标轴的走向，但不改变原点的位置，所以两个坐标系坐标轴不再处于相同走向。
      平移变换不改变坐标轴走向，但改变原点位置，两个坐标系原点不再重合
    */
    Node.prototype.updateMatrixData = function () {
        //初始化模型矩阵
        Matrix_1.glMatrix.mat4.identity(this._modelMatrix);
        //先缩放
        this.mat4Scale$3(this._modelMatrix, this._modelMatrix, [this.scaleX, this.scaleY, this.scaleZ]);
        //再旋转
        this.matrix4RotateX(this._modelMatrix, this._modelMatrix, this.rotateX * (Math.PI / 180));
        this.matrix4RotateY(this._modelMatrix, this._modelMatrix, this.rotateY * (Math.PI / 180));
        this.matrix4RotateZ(this._modelMatrix, this._modelMatrix, this.rotateZ * (Math.PI / 180));
        //最后平移
        this.mat4Translate$2(this._modelMatrix, this._modelMatrix, [this.x, this.y, this.z]);
        Matrix_1.glMatrix.mat4.multiply(this._modelMatrix, this._worldMatrix, this._modelMatrix);
    };
    /**
     * 模型世界矩阵
     */
    Node.prototype.getModelViewMatrix = function () {
        return this._modelMatrix;
    };
    Node.prototype.setPosition = function (x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    };
    Node.prototype.setScale = function (x, y, z) {
        this.scaleX = x;
        this.scaleY = y;
        this.scaleZ = z;
    };
    Node.prototype.setRotation = function (x, y, z) {
        this.rotateX = x;
        this.rotateY = y;
        this.rotateZ = z;
    };
    Node.prototype.rotate = function (x, y, z) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (z === void 0) { z = 0; }
        this.rotateX = this.rotateX + x;
        this.rotateY = this.rotateY + y;
        this.rotateZ = this.rotateZ + z;
    };
    //矩阵运算---------------------------------------------------------------------
    /**
     * Rotates a matrix by the given angle around the Y axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    Node.prototype.matrix4RotateY = function (out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        /**
         *  【0  4  8   12】
         *  【1  5  9   13】
         *  【2  6  10  14】
         *  【3  7  11  15】
         *   x轴 y轴 z轴
         *  【1  0  0   0】
         *  【0  1  0   0】
         *  【0  0  1   0】
         *  【0  1  0   1】
         */
        out[0] = a00 * c - a20 * s; //x轴的x坐标在世界坐标系下的投影
        out[1] = a01 * c - a21 * s; //
        out[2] = a02 * c - a22 * s;
        out[3] = a03 * c - a23 * s;
        out[8] = a00 * s + a20 * c;
        out[9] = a01 * s + a21 * c;
        out[10] = a02 * s + a22 * c;
        out[11] = a03 * s + a23 * c;
        return out;
    };
    /**
     * Rotates a matrix by the given angle around the X axis
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @returns {mat4} out
     */
    Node.prototype.matrix4RotateX = function (out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        var a20 = a[8];
        var a21 = a[9];
        var a22 = a[10];
        var a23 = a[11];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged rows
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[4] = a10 * c + a20 * s;
        out[5] = a11 * c + a21 * s;
        out[6] = a12 * c + a22 * s;
        out[7] = a13 * c + a23 * s;
        out[8] = a20 * c - a10 * s;
        out[9] = a21 * c - a11 * s;
        out[10] = a22 * c - a12 * s;
        out[11] = a23 * c - a13 * s;
        return out;
    };
    /**
    * Rotates a matrix by the given angle around the Z axis
    *
    * @param {mat4} out the receiving matrix
    * @param {mat4} a the matrix to rotate
    * @param {Number} rad the angle to rotate the matrix by
    * @returns {mat4} out
    */
    Node.prototype.matrix4RotateZ = function (out, a, rad) {
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var a00 = a[0];
        var a01 = a[1];
        var a02 = a[2];
        var a03 = a[3];
        var a10 = a[4];
        var a11 = a[5];
        var a12 = a[6];
        var a13 = a[7];
        if (a !== out) {
            // If the source and destination differ, copy the unchanged last row
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
        } // Perform axis-specific matrix multiplication
        out[0] = a00 * c + a10 * s;
        out[1] = a01 * c + a11 * s;
        out[2] = a02 * c + a12 * s;
        out[3] = a03 * c + a13 * s;
        out[4] = a10 * c - a00 * s;
        out[5] = a11 * c - a01 * s;
        out[6] = a12 * c - a02 * s;
        out[7] = a13 * c - a03 * s;
        return out;
    };
    /**
     * Translate a mat4 by the given vector
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to translate
     * @param {vec3} v vector to translate by
     * @returns {mat4} out
     */
    Node.prototype.mat4Translate$2 = function (out, a, v) {
        var x = v[0], y = v[1], z = v[2];
        var a00, a01, a02, a03;
        var a10, a11, a12, a13;
        var a20, a21, a22, a23;
        /**
        *  【0  4  8   12】
        *  【1  5  9   13】
        *  【2  6  10  14】
        *  【3  7  11  15】
        *   x轴 y轴 z轴
        *  【1  0  0   0】  [x]
        *  【0  1  0   0】  [y]
        *  【0  0  1   0】  [z]
        *  【0  1  0   1】
        *   解析
        *   世界空间坐标系属于右手坐标系，右手手背背着屏幕，大拇指向右+x,食指向上+y,中指指向自己+z
        *   一个向量可以构成一个线，两个向量可以构成一个面，三个向量可以构成一个空间
        *   x轴向量：【1，0，0】
        *   y轴向量：【0，1，0】
        *   z轴向量：【0，0，1】
        *
        *   特别规定1，这三个坐标轴都是两两互相垂直的
        *   特别规定2，世界空间坐标系是以一个参照物，是不允许发生任何改变的，比如旋转 缩放，平移
        *
        *   空间坐标系的长度单位就是【1，1，1】，三个轴两两互相垂直
        *   这个长度单位很重要，不可以忽视，它其实起到了一个缩放的作用，我们在外界会有一个长度，这个长度映射到空间坐标系中就需要和这个单位相乘
        *   举个例子，对于一个存在于世界空间坐标系中的点，我们对于它的坐标的定义为（x1,y1,z1）,那他的位置究竟在哪呢，由于它直接位于世界空间坐标系
        *   系中，所以它的坐标位置就是（x1,y1,z1）,其实这个结果是基于下面这个运算方法：
        *   （x1和x轴向量相乘，y1和y轴坐标相乘，z1和z轴向量相乘），只是他们是基于原点，并且长度单位为1，所以结果就是（x1,y1,z1）
        *   关于这个
        *   对于实际的渲染运算中，我们通常会构造一个矩阵来和世界坐标系相对应，虽然他是4维矩阵，但是这只是构造出来的而已，前面三列指的是坐标轴，
        *   就是和世界空间坐标系的那个坐标轴一样的，只是它允许缩放，旋转，和平移，后面的一列其实是记录这个矩阵的坐标系的位置
        *   我们通常会用一个摄像机来干这样的事情，摄像机的位置（x,y,z）,就可以构造出来这么一个对应的矩阵坐标系，如果摄像机的位置为【0，0，0】，说明这个摄像机构造出来
        *   的摄像机坐标系位于世界坐标系的原点，如果摄像机坐标系的长度单位是【1，1，1】，旋转【0，0，0】，那说明这个摄像机所构造的空间坐标系就是世界空间坐标系
        *   然而事实上我们不会这样做，摄像机作为一个节点存在，它可以进行任何变换，这里的变换指的是缩放，旋转，平移，缩放变换修改的是每个坐标轴的长度单位
        *   旋转变换修改的是坐标轴向量的（x,y,z）值，平移变换修改的是整个节点空间坐标系的位置，那么我们为什么会构造一个四维方针矩阵呢，就是用第四列来存放当前坐标系的位置用的
        *
        *   空间坐标系推演
        *
        *   世界空间坐标系
        *
        *   相机，它作为一个节点存在于世界空间坐标系中，它会构造一个相机的节点坐标系，这个节点的位置记录在第四列向量中，它的前三列记录的是当前相机节点是如何修改这个节点坐标系的
        *   修改的行为包含了缩放和旋转，其实就是修改三个坐标轴的向量，凡是位于这个节点坐标系下的顶点乘以这个矩阵都可以得出来世界空间坐标系下的位置
        *
        *    宏观上看，一个节点坐标系，不过是对世界坐标系进行变换
        *
        *    在相机的节点坐标系中，又包含很多节点，比如场景节点，同样场景作为一个节点存在，他也会去构造一个节点坐标系，
        *
        *    场景中也会包含很多节点，每个节点也会去构造自己的节点坐标系
        *
        *    节点本身也是可以包含很多节点，这些节点都有自己的节点坐标系
        *
        *
        *    相机是世界坐标系的节点，把相机看成一个点，由于世界坐标系不会生任何变换，所以这个点就处在世界坐标系空间中
        *    但是相机不是吃醋的，他要生根发芽，所以它也会构造一个空间坐标系出来，这个坐标系起初和世界坐标系是完全吻合的，但由于相机天生好动，它会缩放，旋转，平移
        *    这会造成这个空间坐标系不同于世界坐标系，相机的空间坐标系里包含了很多点，那这些点如果想转换为世界空间坐标系下，就需要乘以相机这个空间坐标系
        *
        *    场景是相机空间坐标系下的一个节点，把场景看成一个点，只要乘以相机的空间坐标系就可以转换到世界坐标系下的点
        *    但场景也不是吃醋的，它也要生根发芽，所以它也要造一个空间坐标系出来，起初这个坐标系和相机坐标系完全吻合的，但由于场景天生好动，它也会缩放，旋转，平移
        *    这会造成这个空间坐标系不同与相机的坐标系，场景的空间坐标系里包含了很多点，那这些点如果要想转换为相机空间坐标下的点，就需要乘以场景这个空间坐标系
        *
        *    节点是场景空间坐标系下的一个节点，把节点看成一个点，只要乘以场景的空间坐标系就可以转换到相机的坐标系下的点
        *    但节点也不是吃醋的，它也要生根发芽，所以它也要造一个节点坐标系，起初这个节点坐标系和场景的节点坐标系完全吻合的，但由于这个节点天生好动，它也会缩放，旋转，平移
        *    这会造成这个节点坐标系不同于场景的空间坐标系，对于节点中的点，如果它要想变为场景空间坐标系下的点，就需要乘以这个节点坐标系
        *
        *    。。。接下来就是节点的各种继承了
        *
        *    对于旋转和缩放，我们制定了一个前三列向量分别用来记录，当前节点对于它构造的空间坐标系的变换，其实这个前三列向量就是指的是x轴，y轴，z轴
        *    对于第四列，我们用来保存当前节点将自己的空间坐标系平移变换的位置
        */
        if (a === out) {
            out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
            out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
            out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
            out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
        }
        else {
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a03;
            out[4] = a10;
            out[5] = a11;
            out[6] = a12;
            out[7] = a13;
            out[8] = a20;
            out[9] = a21;
            out[10] = a22;
            out[11] = a23;
            out[12] = a00 * x + a10 * y + a20 * z + a[12];
            out[13] = a01 * x + a11 * y + a21 * z + a[13];
            out[14] = a02 * x + a12 * y + a22 * z + a[14];
            out[15] = a03 * x + a13 * y + a23 * z + a[15];
        }
        return out;
    };
    /**
     * Scales the mat4 by the dimensions in the given vec3 not using vectorization
     *
     * @param {mat4} out the receiving matrix
     * @param {mat4} a the matrix to scale
     * @param {vec3} v the vec3 to scale the matrix by
     * @returns {mat4} out
     **/
    Node.prototype.mat4Scale$3 = function (out, a, v) {
        var x = v[0], y = v[1], z = v[2];
        out[0] = a[0] * x;
        out[1] = a[1] * x;
        out[2] = a[2] * x;
        out[3] = a[3] * x;
        out[4] = a[4] * y;
        out[5] = a[5] * y;
        out[6] = a[6] * y;
        out[7] = a[7] * y;
        out[8] = a[8] * z;
        out[9] = a[9] * z;
        out[10] = a[10] * z;
        out[11] = a[11] * z;
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    };
    /**
    * Creates a new mat4 initialized with values from an existing matrix
    *
    * @param {mat4} a matrix to clone
    * @returns {mat4} a new 4x4 matrix
    */
    Node.prototype.mat4Clone$3 = function (a) {
        var out = new Float32Array(16);
        out[0] = a[0];
        out[1] = a[1];
        out[2] = a[2];
        out[3] = a[3];
        out[4] = a[4];
        out[5] = a[5];
        out[6] = a[6];
        out[7] = a[7];
        out[8] = a[8];
        out[9] = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
        return out;
    };
    return Node;
}(Ref_1.default));
exports.Node = Node;
},{"../../../Ref":4,"../../Matrix":6}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderDataPool = exports.SpineRenderData = exports.RenderData = exports.RenderDataType = void 0;
var Matrix_1 = require("../../Matrix");
var renderDataId = 0;
var RenderDataType;
(function (RenderDataType) {
    RenderDataType[RenderDataType["Base"] = 1] = "Base";
    RenderDataType[RenderDataType["Spine"] = 2] = "Spine";
})(RenderDataType = exports.RenderDataType || (exports.RenderDataType = {}));
/**
 * 定义渲染数据
 */
var RenderData = /** @class */ (function () {
    function RenderData() {
        this._type = RenderDataType.Base;
        this._isUse = false; //使用状态
        this.id = renderDataId++;
        this.reset();
    }
    RenderData.prototype.reset = function () {
        this._cameraType = 0; //默认情况下是透视投影
        this._shader = null;
        this._vertGLID = null;
        this._vertItemSize = -1;
        this._indexGLID = null;
        this._indexItemSize = -1;
        this._uvGLID = null;
        this._uvItemSize = -1;
        this._normalGLID = null;
        this._normalItemSize = -1;
        this._lightColor = [];
        this._lightDirection = [];
        this._textureGLIDArray = [];
        this._modelMatrix = null;
        this._u_pvm_matrix_inverse = null;
        this._time = 0;
        this._glPrimitiveType = 6 /* TRIANGLE_FAN */;
        this._isUse = false;
    };
    return RenderData;
}());
exports.RenderData = RenderData;
var SpineRenderData = /** @class */ (function (_super) {
    __extends(SpineRenderData, _super);
    function SpineRenderData() {
        var _this = _super.call(this) || this;
        _this._extraViewLeftMatrix = Matrix_1.glMatrix.mat4.identity(null);
        _this._tempMatrix1 = Matrix_1.glMatrix.mat4.identity(null);
        _this.reset();
        return _this;
    }
    SpineRenderData.prototype.reset = function () {
        _super.prototype.reset.call(this);
        this._uniformInfors = [];
        this._shaderData = null;
        this._attrbufferInfo = null;
        this._projKey = "";
        this._viewKey = "";
        this._type = RenderDataType.Spine;
        this._glPrimitiveType = 4 /* TRIANGLES */;
        Matrix_1.glMatrix.mat4.identity(this._extraViewLeftMatrix);
        Matrix_1.glMatrix.mat4.identity(this._tempMatrix1);
    };
    return SpineRenderData;
}(RenderData));
exports.SpineRenderData = SpineRenderData;
/**
 * 渲染数据缓存池
 */
var RenderDataPool = /** @class */ (function () {
    function RenderDataPool() {
    }
    RenderDataPool.get = function (type) {
        var pool = RenderDataPool._pool;
        var retItem;
        for (var j = 0; j < pool.length; j++) {
            var item = pool[j];
            if (item._type == type && item._isUse == false) {
                retItem = item;
                break;
            }
        }
        switch (type) {
            case RenderDataType.Base:
                retItem = new RenderData();
                pool.push(retItem);
                break;
            case RenderDataType.Spine:
                retItem = new SpineRenderData();
                pool.push(retItem);
                break;
        }
        retItem._isUse = true;
        return retItem;
    };
    RenderDataPool.return = function (retData) {
        if (retData instanceof Array) {
            var arr = retData;
            for (var j = 0; j < arr.length; j++) {
                arr[j].reset();
            }
        }
        else {
            retData.reset();
        }
    };
    RenderDataPool._pool = [];
    return RenderDataPool;
}());
exports.RenderDataPool = RenderDataPool;
},{"../../Matrix":6}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Node_1 = require("./Node");
/**
 * 场景的根节点
 */
var Scene = /** @class */ (function (_super) {
    __extends(Scene, _super);
    function Scene() {
        return _super.call(this) || this;
    }
    return Scene;
}(Node_1.Node));
exports.default = Scene;
},{"./Node":16}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene_1 = require("./Scene");
var Device_1 = require("../../../Device");
var RenderSprite_1 = require("../2d/RenderSprite");
var GameMainCamera_1 = require("../camera/GameMainCamera");
var enums_1 = require("../camera/enums");
var Scene2D = /** @class */ (function (_super) {
    __extends(Scene2D, _super);
    function Scene2D() {
        return _super.call(this) || this;
    }
    Scene2D.prototype.init = function () {
        var gl = Device_1.default.Instance.gl;
        this._2dCamera = GameMainCamera_1.default.instance.setCamera(enums_1.default.PROJ_ORTHO, gl.canvas.width / gl.canvas.height);
        this._2dCamera.lookAt([0, 0, 0]);
        this.setFatherMatrix(this._2dCamera.getModelViewMatrix());
        // this._rectangle = new Rectangle(gl);
        // this._rectangle.setPosition(0.5, 0, 0);
        // this._rectangle.url = "res/tree.jpg";
        // this.addChild(this._rectangle);
        // this._firstSprite = new FirstSprite(gl);
        // this._firstSprite.setPosition(0,1,0);
        // this.addChild(this._firstSprite);
        // this._twoSprite = new TwoSprite(gl);
        // this._twoSprite.setScale(0.2,0.2,0.2);
        // this.addChild(this._twoSprite);
        this._renderSprite = new RenderSprite_1.RenderSprite(gl);
        this._renderSprite.setPosition(0.6, 0.8, 0);
        this.addChild(this._renderSprite);
        this._2dCamera.targetTexture = this._renderSprite.texture;
        ;
        // this._label = new Label(gl);
        // this._label.setPosition(0.0,0.0,0);
        // this._label.url = "res/8x8-font.png";
        // this._label.content = "zm5"
        // this.addChild(this._label);
    };
    Scene2D.prototype.getFrameBuffer = function () {
        return this._2dCamera.getFramebuffer();
    };
    return Scene2D;
}(Scene_1.default));
exports.default = Scene2D;
},{"../../../Device":1,"../2d/RenderSprite":7,"../camera/GameMainCamera":28,"../camera/enums":31,"./Scene":18}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Scene_1 = require("./Scene");
var Ground_1 = require("../3d/Ground");
var Cube_1 = require("../3d/Cube");
var LightCube_1 = require("../3d/LightCube");
var SkyBox_1 = require("../3d/SkyBox");
var Device_1 = require("../../../Device");
var Node_1 = require("./Node");
var CustomTextureCube_1 = require("../3d/CustomTextureCube");
var CustomTextureData_1 = require("../data/CustomTextureData");
var GameMainCamera_1 = require("../camera/GameMainCamera");
var enums_1 = require("../camera/enums");
var Sphere_1 = require("../3d/Sphere");
var Spine_1 = require("../3d/Spine");
var Scene3D = /** @class */ (function (_super) {
    __extends(Scene3D, _super);
    function Scene3D() {
        var _this = _super.call(this) || this;
        _this.settings = {
            posX: 0,
            posY: 0,
            posZ: 0,
            rotation: 150,
            cam1FieldOfView: 60,
            cam1PosX: 0,
            cam1PosY: 0,
            cam1PosZ: 20,
            cam1RotX: 0,
            cam1RotY: 0,
            cam1RotZ: 0,
            cam1Near: 1,
            cam1Far: 200,
            cam1Ortho: false,
            cam1OrthoUnits: 120,
        };
        return _this;
    }
    Scene3D.prototype.init = function () {
        this.setUI();
        var gl = Device_1.default.Instance.gl;
        this._centerNode = new Node_1.Node();
        this._centerNode.setPosition(0, 1.1, 0);
        this.addChild(this._centerNode);
        var spNode = new Node_1.Node();
        this._sphere = new Sphere_1.default(gl);
        spNode.setPosition(0, 5, 0);
        spNode.addChild(this._sphere);
        this._centerNode.addChild(spNode);
        this._floorNode = new Ground_1.default(gl);
        this._floorNode.url = "res/ground.jpg";
        this.addChild(this._floorNode);
        this._spineNode = new Spine_1.default(gl);
        this._spineNode.x = 0;
        this.addChild(this._spineNode);
        this._customTexture = new CustomTextureCube_1.default(gl);
        this._customTexture.url = CustomTextureData_1.default.getRandomData(3, 5, 15 /* RGB8 */);
        this._customTexture.setPosition(0, 3.1, 0);
        this._centerNode.addChild(this._customTexture);
        this._tableNode = new Cube_1.default(gl);
        this._tableNode.url = "res/wood.jpg";
        this._tableNode.setPosition(0, 1, 0);
        this._tableNode.setScale(2.0, 0.1, 2.0);
        this._centerNode.addChild(this._tableNode);
        this._cubeNode = new Cube_1.default(gl);
        this._cubeNode.url = "res/wicker.jpg";
        this._cubeNode.setPosition(0, 1.7, 0);
        this._cubeNode.setScale(0.5, 0.5, 0.5);
        this._centerNode.addChild(this._cubeNode);
        // 绘制 4 个腿
        for (var i = -1; i <= 1; i += 2) {
            for (var j = -1; j <= 1; j += 2) {
                var node = new Cube_1.default(gl);
                node.setPosition(i * 19, -0.1, j * 19);
                node.setScale(0.1, 1.0, 0.1);
                node.url = "res/wood.jpg";
                this._centerNode.addChild(node);
            }
        }
        this._lightCube = new LightCube_1.default(gl);
        this._lightCube.url = "res/wicker.jpg";
        this._lightCube.setPosition(1, 2.7, 0);
        this._lightCube.setScale(0.5, 0.5, 0.5);
        this._centerNode.addChild(this._lightCube);
        this._skybox = new SkyBox_1.default(gl);
        this._skybox.setDefaultUrl();
        this.addChild(this._skybox);
        this.setPosition(0, 0, 0);
        setTimeout(this.rotateCenterNode.bind(this), 20);
    };
    // //初始化UI
    Scene3D.prototype.setUI = function () {
        var render = this.render.bind(this);
        var webglLessonsUI = window["webglLessonsUI"];
        webglLessonsUI.setupUI(document.querySelector('#ui'), this.settings, [
            { type: 'slider', key: 'rotation', min: 0, max: 360, change: render, precision: 2, step: 0.001, },
            { type: 'slider', key: 'posX', min: -200, max: 200, change: render, },
            { type: 'slider', key: 'posY', min: -200, max: 200, change: render, },
            { type: 'slider', key: 'posZ', min: -200, max: 200, change: render, },
            { type: 'slider', key: 'cam1FieldOfView', min: 0, max: 180, change: render, },
            { type: 'slider', key: 'cam1PosX', min: -50, max: 50, change: render, },
            { type: 'slider', key: 'cam1PosY', min: -50, max: 50, change: render, },
            { type: 'slider', key: 'cam1PosZ', min: -50, max: 50, change: render, },
            { type: 'slider', key: 'cam1RotX', min: 0, max: 360, change: render, },
            { type: 'slider', key: 'cam1RotY', min: 0, max: 360, change: render, },
            { type: 'slider', key: 'cam1RotZ', min: 0, max: 360, change: render, },
            { type: 'slider', key: 'cam1Near', min: 1, max: 300, change: render, },
            { type: 'slider', key: 'cam1Far', min: 1, max: 300, change: render, },
            { type: 'checkbox', key: 'cam1Ortho', change: render, },
            { type: 'slider', key: 'cam1OrthoUnits', min: 1, max: 150, change: render, },
        ]);
        this.render();
    };
    Scene3D.prototype.render = function () {
        var gl = Device_1.default.Instance.gl;
        this._3dCamera = GameMainCamera_1.default.instance.setCamera(enums_1.default.PROJ_PERSPECTIVE, gl.canvas.width / gl.canvas.height, this.settings.cam1FieldOfView, this.settings.cam1Near, this.settings.cam1Far);
        this._3dCamera.setPosition(this.settings.cam1PosX, this.settings.cam1PosY, this.settings.cam1PosZ);
        this._3dCamera.setRotation(this.settings.cam1RotX, this.settings.cam1RotY, this.settings.cam1RotZ);
        this.setPosition(this.settings.posX, this.settings.posY, this.settings.posZ);
        // this._3dCamera.setPosition(0,0,20);
        // this._3dCamera.setRotation(0,0,0);
    };
    Scene3D.prototype.rotateCenterNode = function () {
        this._centerNode.rotate(0, 1, 0);
        setTimeout(this.rotateCenterNode.bind(this), 20);
    };
    Scene3D.prototype.readyRenderDraw = function () {
    };
    Scene3D.prototype.deleteGPUTexture = function () {
        var _this = this;
        setTimeout(function () {
            _this._floorNode.destroy();
            _this._cubeNode.destroy();
            _this._tableNode.destroy();
        }, 5000);
        setTimeout(function () {
            _this._floorNode.url = "res/ground.jpg";
            _this._cubeNode.url = "res/wicker.jpg";
            _this._tableNode.url = "res/wood.jpg";
        }, 7000);
    };
    //获取摄像机
    Scene3D.prototype.getCamera = function () {
        return this._3dCamera;
    };
    Scene3D.prototype.readyDraw = function (time) {
        // this._3dCamera.rotate(0,0,1);
        this._3dCamera.readyDraw(time);
        _super.prototype.readyDraw.call(this, time);
    };
    return Scene3D;
}(Scene_1.default));
exports.default = Scene3D;
},{"../../../Device":1,"../3d/Cube":8,"../3d/CustomTextureCube":9,"../3d/Ground":10,"../3d/LightCube":11,"../3d/SkyBox":12,"../3d/Sphere":13,"../3d/Spine":14,"../camera/GameMainCamera":28,"../camera/enums":31,"../data/CustomTextureData":33,"./Node":16,"./Scene":18}],21:[function(require,module,exports){
"use strict";
/**
 * 字节数组的使用
 * 整型：这个可以是一个字节Uint8Array,Int8Array,也可是双字节Uint16Array,Int16Array,
 * 也可是四字节Unit32Array,Int32Array
 * 浮点型：这个要四个字节，适用于float类型，例如Float32Array,当然也只有这一种类型
 * 双精度型：这个要八个字节，适用于double类型，例如Float64Array,当然也只有这一种类型
 *
 * 使用
 *  // From a length
var float32 = new Float32Array(2);
float32[0] = 42;
console.log(float32[0]); // 42
console.log(float32.length); // 2
console.log(float32.BYTES_PER_ELEMENT); // 4

// From an array
var arr = new Float32Array([21,31]);
console.log(arr[1]); // 31

// From another TypedArray
var x = new Float32Array([21, 31]);
var y = new Float32Array(x);
console.log(y[0]); // 21

// From an ArrayBuffer
// var buffer = new ArrayBuffer(16);
var buffer = new ArrayBuffer(16);
// buffer[0] = 10;
// buffer[1] = 20;
// buffer[2] = 30;
// buffer[3] = 40;
// buffer[4] = 50;
var z = new Float32Array(buffer, 0, 4);
console.log(z);
// z.forEach(function(value,index,arr){
//     console.log(value,index,arr);
// })

 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SY = void 0;
/**
 * 现阶段 核心渲染计算都要放在此类中
 */
var Shader_1 = require("../shader/Shader");
var Node_1 = require("./Node");
var Texture2D_1 = require("./Texture2D");
var TextureCube_1 = require("./TextureCube");
var TextureCustom_1 = require("./TextureCustom");
var Device_1 = require("../../../Device");
var RenderData_1 = require("./RenderData");
/**
 * 缓冲区中的数据就是一个二进制流，一般我们会按照字节处理，八个二进制为一个字节，又称字节流
 * 我们用字节流来表示数据，一个数据可以用若干个字节来表示
 * 一般用下面这几个数组来组织字节流
 * Int8Array：每个数据占1个字节
 * Uint8Array：每个数据占1个字节
 * Int16Array：每个数据占2个字节
 * Uint16Array：每个数据占2个字节
 * Float32Array：每个数据占4个字节
 */
var glBaseBuffer = /** @class */ (function () {
    function glBaseBuffer(gl, data, itemSize) {
        this.itemSize = 0; //在缓冲区中，一个单位数据有几个数据组成
        this.itemNums = 0; //在缓冲区中，单位数据的数目
        this.itemBytes = 2; //每个数据的存储字节数
        this._glID = gl.createBuffer();
        this.sourceData = data;
        this.itemSize = itemSize;
        this.itemNums = data.length / itemSize;
        this.gl = gl;
    }
    //上传数据到GPU显存
    glBaseBuffer.prototype.uploadData2GPU = function () {
        this.bindBuffer();
        this.bindData();
    };
    /**
   * @method destroy
   */
    glBaseBuffer.prototype.destroy = function () {
        if (this._glID === -1) {
            console.error('The buffer already destroyed');
            return;
        }
        this.gl.deleteBuffer(this._glID);
        this._glID = -1;
    };
    return glBaseBuffer;
}());
//顶点buffer
var VertexsBuffer = /** @class */ (function (_super) {
    __extends(VertexsBuffer, _super);
    function VertexsBuffer(gl, vertexs, itemSize) {
        return _super.call(this, gl, vertexs, itemSize) || this;
    }
    VertexsBuffer.prototype.bindBuffer = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._glID);
    };
    VertexsBuffer.prototype.bindData = function () {
        this.itemBytes = 32 / 8;
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.sourceData), this.gl.STATIC_DRAW);
    };
    return VertexsBuffer;
}(glBaseBuffer));
//索引buffer
var IndexsBuffer = /** @class */ (function (_super) {
    __extends(IndexsBuffer, _super);
    function IndexsBuffer(gl, indexs, itemSize) {
        return _super.call(this, gl, indexs, itemSize) || this;
    }
    IndexsBuffer.prototype.bindBuffer = function () {
        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this._glID);
    };
    IndexsBuffer.prototype.bindData = function () {
        this.itemBytes = 16 / 8;
        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.sourceData), this.gl.STATIC_DRAW);
    };
    return IndexsBuffer;
}(glBaseBuffer));
//uvbuffer
var UVsBuffer = /** @class */ (function (_super) {
    __extends(UVsBuffer, _super);
    function UVsBuffer(gl, uvs, itemSize) {
        return _super.call(this, gl, uvs, itemSize) || this;
    }
    UVsBuffer.prototype.bindBuffer = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._glID);
    };
    UVsBuffer.prototype.bindData = function () {
        this.itemBytes = 32 / 8;
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.sourceData), this.gl.STATIC_DRAW);
    };
    return UVsBuffer;
}(glBaseBuffer));
//法线buffer
var NormalBuffer = /** @class */ (function (_super) {
    __extends(NormalBuffer, _super);
    function NormalBuffer(gl, normals, itemSize) {
        return _super.call(this, gl, normals, itemSize) || this;
    }
    NormalBuffer.prototype.bindBuffer = function () {
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._glID);
    };
    NormalBuffer.prototype.bindData = function () {
        this.itemBytes = 32 / 8;
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(this.sourceData), this.gl.STATIC_DRAW);
    };
    return NormalBuffer;
}(glBaseBuffer));
/**
 * 显示节点
 * author:hzj
 */
var SY;
(function (SY) {
    var GLID_TYPE;
    (function (GLID_TYPE) {
        GLID_TYPE[GLID_TYPE["VERTEX"] = 1] = "VERTEX";
        GLID_TYPE[GLID_TYPE["INDEX"] = 2] = "INDEX";
        GLID_TYPE[GLID_TYPE["NORMAL"] = 3] = "NORMAL";
        GLID_TYPE[GLID_TYPE["UV"] = 4] = "UV";
        GLID_TYPE[GLID_TYPE["TEXTURE_2D"] = 5] = "TEXTURE_2D";
        GLID_TYPE[GLID_TYPE["TEXTURE_CUBE"] = 6] = "TEXTURE_CUBE"; //立方体纹理
    })(GLID_TYPE = SY.GLID_TYPE || (SY.GLID_TYPE = {}));
    var Sprite = /** @class */ (function (_super) {
        __extends(Sprite, _super);
        function Sprite(gl) {
            var _this = _super.call(this) || this;
            _this._cameraType = 0; //相机的类型(0表示透视1表示正交)
            _this.gl = gl;
            _this._glPrimitiveType = 6 /* TRIANGLE_FAN */;
            _this._renderData = RenderData_1.RenderDataPool.get(RenderData_1.RenderDataType.Base);
            _this.init();
            return _this;
        }
        Sprite.prototype.init = function () {
            this.onInit();
        };
        Sprite.prototype.onInit = function () {
        };
        Object.defineProperty(Sprite.prototype, "shader", {
            //获取shader
            get: function () {
                return this._shader;
            },
            enumerable: false,
            configurable: true
        });
        Sprite.prototype.setShader = function (vert, frag) {
            this._shader = Shader_1.Shader.create(vert, frag);
        };
        //创建顶点缓冲
        Sprite.prototype.createVertexsBuffer = function (vertexs, itemSize) {
            this._vertexsBuffer = new VertexsBuffer(this.gl, vertexs, itemSize);
            this._vertexsBuffer.uploadData2GPU();
            return this._vertexsBuffer;
        };
        //创建法线缓冲
        Sprite.prototype.createNormalsBuffer = function (normals, itemSize) {
            this._normalsBuffer = new NormalBuffer(this.gl, normals, itemSize);
            this._normalsBuffer.uploadData2GPU();
            return this._normalsBuffer;
        };
        //创建索引缓冲
        //索引缓冲的单位数据个数肯定为1
        Sprite.prototype.createIndexsBuffer = function (indexs) {
            this._indexsBuffer = new IndexsBuffer(this.gl, indexs, 1);
            this._indexsBuffer.uploadData2GPU();
            return this._indexsBuffer;
        };
        //创建uv缓冲
        Sprite.prototype.createUVsBuffer = function (uvs, itemSize) {
            this._uvsBuffer = new UVsBuffer(this.gl, uvs, itemSize);
            this._uvsBuffer.uploadData2GPU();
            return this._uvsBuffer;
        };
        //创建一个纹理buffer
        Sprite.prototype.createTexture2DBuffer = function (url) {
            this._texture = new Texture2D_1.Texture2D(this.gl);
            this._texture.url = url;
            return this._texture;
        };
        Sprite.prototype.createTextureCubeBuffer = function (arr) {
            this._texture = new TextureCube_1.default(this.gl);
            this._texture.url = arr;
            return this._texture;
        };
        Sprite.prototype.createCustomTextureBuffer = function (data) {
            this._texture = new TextureCustom_1.default(this.gl);
            this._texture.url = data;
            return this._texture;
        };
        Object.defineProperty(Sprite.prototype, "url", {
            set: function (url) {
                //普通图片
                if (typeof url == "string") {
                    this.createTexture2DBuffer(url);
                }
                //天空盒
                else if (url instanceof Array && url.length == 6) {
                    this.createTextureCubeBuffer(url);
                }
                //自定义纹理
                else if (typeof (url) == "object") {
                    this.createCustomTextureBuffer(url);
                }
            },
            enumerable: false,
            configurable: true
        });
        Sprite.prototype.getGLID = function (type) {
            switch (type) {
                case GLID_TYPE.INDEX: return this._indexsBuffer ? this._indexsBuffer._glID : -1;
                case GLID_TYPE.TEXTURE_2D: return this._texture ? this._texture._glID : -1;
                case GLID_TYPE.TEXTURE_CUBE: return this._texture ? this._texture._glID : -1;
                case GLID_TYPE.UV: return this._uvsBuffer ? this._uvsBuffer._glID : -1;
                case GLID_TYPE.NORMAL: return this._normalsBuffer ? this._normalsBuffer._glID : -1;
                case GLID_TYPE.VERTEX: return this._vertexsBuffer ? this._vertexsBuffer._glID : -1;
                default: return -1; //未知
            }
        };
        Sprite.prototype.getBuffer = function (type) {
            switch (type) {
                case GLID_TYPE.INDEX: return this._indexsBuffer;
                case GLID_TYPE.UV: return this._uvsBuffer;
                case GLID_TYPE.NORMAL: return this._normalsBuffer;
                case GLID_TYPE.VERTEX: return this._vertexsBuffer;
                default: return null; //未知
            }
        };
        Sprite.prototype.getBufferItemSize = function (type) {
            var buffer = this.getBuffer(type);
            return buffer ? buffer.itemSize : -1;
        };
        Sprite.prototype.updateCamera = function (time) {
        };
        /**
         *
         * @param texture 纹理的GLID
         */
        Sprite.prototype.draw = function (time) {
            if (this._texture && this._texture.loaded == false) {
                return;
            }
            this._renderData._cameraType = this._cameraType; //默认情况下是透视投影
            this._renderData._shader = this._shader;
            this._renderData._vertGLID = this.getGLID(SY.GLID_TYPE.VERTEX);
            this._renderData._vertItemSize = this.getBufferItemSize(SY.GLID_TYPE.VERTEX);
            this._renderData._vertItemNums = this.getBuffer(SY.GLID_TYPE.VERTEX).itemNums;
            this._renderData._indexGLID = this.getGLID(SY.GLID_TYPE.INDEX);
            if (this._renderData._indexGLID != -1) {
                this._renderData._indexItemSize = this.getBuffer(SY.GLID_TYPE.INDEX).itemSize;
                this._renderData._indexItemNums = this.getBuffer(SY.GLID_TYPE.INDEX).itemNums;
            }
            this._renderData._uvGLID = this.getGLID(SY.GLID_TYPE.UV);
            this._renderData._uvItemSize = this.getBufferItemSize(SY.GLID_TYPE.UV);
            this._renderData._normalGLID = this.getGLID(SY.GLID_TYPE.NORMAL);
            this._renderData._normalItemSize = this.getBufferItemSize(SY.GLID_TYPE.NORMAL);
            this._renderData._lightColor = [0.0, 1, 1.0, 1];
            this._renderData._modelMatrix = this._modelMatrix;
            this._renderData._time = time;
            this._renderData._lightDirection = this._glMatrix.vec3.normalize(null, [8, 5, -10]);
            if (this._shader.USE_SKYBOX) {
                this._renderData._u_pvm_matrix_inverse = (this).updateCamera(time);
            }
            if (this._texture && this._texture._glID && !this._shader.USE_SKYBOX) {
                this._renderData._textureGLIDArray.push(this.getGLID(SY.GLID_TYPE.TEXTURE_2D));
            }
            this._renderData._glPrimitiveType = this._glPrimitiveType;
            Device_1.default.Instance.collectData(this._renderData);
        };
        Object.defineProperty(Sprite.prototype, "texture", {
            get: function () {
                return this._texture;
            },
            enumerable: false,
            configurable: true
        });
        Sprite.prototype.destroy = function () {
            this._texture.destroy();
        };
        return Sprite;
    }(Node_1.Node));
    SY.Sprite = Sprite;
    //2d显示节点
    var Sprite2D = /** @class */ (function (_super) {
        __extends(Sprite2D, _super);
        function Sprite2D(gl) {
            var _this = _super.call(this, gl) || this;
            _this._lt = []; //左上
            _this._lb = []; //左下
            _this._rt = []; //右上
            _this._rb = []; //右下
            return _this;
        }
        Sprite2D.prototype.updateUV = function () {
            //uv 数据
            var floorVertexTextureCoordinates = [
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0,
            ];
            this.createUVsBuffer(floorVertexTextureCoordinates, 2);
            // 索引数据
            var floorVertexIndices = [0, 1, 2, 3];
            this.createIndexsBuffer(floorVertexIndices);
        };
        /**
        *
        * @param width
        * @param height
        */
        Sprite2D.prototype.setContentSize = function (width, height) {
            this.width = width;
            this.height = height;
            var clipW = this.width / Device_1.default.Instance.Width;
            var clipH = this.height / Device_1.default.Instance.Height;
            var z = -0.1;
            //[-1,1] = >[0,1]
            var w = 2 * clipW;
            var h = 2 * clipH;
            this._lb = [];
            this._lb.push(-this.anchorX * w);
            this._lb.push(-this.anchorY * h);
            this._lb.push(z); //左下
            this._rb = [];
            this._rb.push(w - this.anchorX * w); //右下
            this._rb.push(-this.anchorY * h);
            this._rb.push(z);
            this._rt = [];
            this._rt.push(w - this.anchorX * w); //右上
            this._rt.push(h - this.anchorY * h);
            this._rt.push(z);
            this._lt = [];
            this._lt.push(-this.anchorX * w);
            this._lt.push(h - this.anchorY * h); //左上
            this._lt.push(z);
            var floorVertexPosition = [].concat(this._lb, this._rb, this._rt, this._lt);
            this.createVertexsBuffer(floorVertexPosition, 3);
            this.updateUV();
        };
        return Sprite2D;
    }(SY.Sprite));
    SY.Sprite2D = Sprite2D;
})(SY = exports.SY || (exports.SY = {}));
},{"../../../Device":1,"../shader/Shader":37,"./Node":16,"./RenderData":17,"./Texture2D":23,"./TextureCube":24,"./TextureCustom":25}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture = exports.TextureUpdateOpts = void 0;
var GLEnums_1 = require("../gfx/GLEnums");
/**
 * 创建一个纹理的一些设置参数
 */
var TextureUpdateOpts = /** @class */ (function () {
    function TextureUpdateOpts() {
        this.width = 1;
        this.height = 1;
        this.genMipmaps = false; //是否开启mipmap技术
        this.compressed = false; //纹理是否是压缩的
        this.anisotropy = 1; //设置纹理所有方向的最大值
        this.minFilter = GLEnums_1.gltex_filter.LINEAR; //纹理缩小过滤模式
        this.magFilter = GLEnums_1.gltex_filter.LINEAR; //纹理放大过滤模式
        this.mipFilter = GLEnums_1.gltex_filter.LINEAR_MIPMAP_LINEAR; //设置纹理缩小过滤的模式为特殊的线性过滤GL_LINEAR_MIPMAP_NEAREST
        this.wrapS = 33648 /* MIRROR */; //设置s方向上的贴图模式为镜像对称重复
        this.wrapT = 33648 /* MIRROR */; //设置t方向上的贴图模式为镜像对称重复
        this.format = 16 /* RGBA8 */; //纹理的格式
    }
    return TextureUpdateOpts;
}());
exports.TextureUpdateOpts = TextureUpdateOpts;
var _nullWebGLTexture = null;
var _textureID = 0;
var Texture = /** @class */ (function () {
    function Texture(gl) {
        this.loaded = false; //是否加载到内存
        this._bites = 0; //纹理在GPU端所占的内存
        this._gl = gl;
        this._target = -1;
        this._id = _textureID++;
        this._glID = gl.createTexture();
        this._bites = 0;
        this.loaded = false;
        console.log("-_id-------", this._id);
    }
    Texture.prototype.updateOptions = function (options) {
        this._width = options.width;
        this._height = options.height;
        this._genMipmaps = options.genMipmaps;
        this._anisotropy = options.anisotropy;
        this._minFilter = options.minFilter;
        this._magFilter = options.magFilter;
        this._mipFilter = options.mipFilter;
        this._wrapS = options.wrapS;
        this._wrapT = options.wrapT;
        // wrapR available in webgl2
        // this._wrapR = enums.WRAP_REPEAT;
        this._format = options.format;
        this._format = options.format;
        this._compressed =
            (this._format >= 0 /* RGB_DXT1 */ && this._format <= 8 /* RGBA_PVRTC_4BPPV1 */) ||
                (this._format >= 28 /* RGB_ETC2 */ && this._format <= 29 /* RGBA_ETC2 */);
        this.updateNormalBytes();
    };
    //更新字节数
    Texture.prototype.updateNormalBytes = function () {
        if (this._compressed == false) {
            this._bites = (this._width * this._height * GLEnums_1.glTextureChanelTotalBytes(this._format)) / 1024;
        }
    };
    //更新由于开启了mipmap而造成的纹理内存增大的字节数
    Texture.prototype.updateGenMipMapsAddBites = function () {
        //（1/）
        this.updateNormalBytes();
        this._bites = this._bites * (4 / 3);
    };
    /**
     * @method destroy
     */
    Texture.prototype.destroy = function () {
        if (this._glID === _nullWebGLTexture) {
            console.error('The texture already destroyed');
            return;
        }
        this._gl.deleteTexture(this._glID);
        this._glID = _nullWebGLTexture;
    };
    return Texture;
}());
exports.Texture = Texture;
},{"../gfx/GLEnums":34}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Texture2D = void 0;
var LoaderManager_1 = require("../../../LoaderManager");
var GLEnums_1 = require("../gfx/GLEnums");
var Texture_1 = require("./Texture");
/*

//gl.texImage2D将 pixels 指定给绑定的纹理对象
// WebGL1:
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);
void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);
void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);

// WebGL2:
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);
void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);

参数值解析
internalformat        type            通道数 通道字节数
RGBA         	 UNSIGNED_BYTE	        4	    4
RGB	             UNSIGNED_BYTE	        3	    3
RGBA             UNSIGNED_SHORT_4_4_4_4	4	    2
RGBA         	 UNSIGNED_SHORT_5_5_5_1	4	    2
RGB	             UNSIGNED_SHORT_5_6_5   3	    2
LUMINANCE_ALPHA	 UNSIGNED_BYTE       	2	    2
LUMINANCE   	 UNSIGNED_BYTE      	1	    1
ALPHA       	 UNSIGNED_BYTE       	1	    1
注意internalformat的值必须和format值保持一致


//gl.texParameteri设置纹理参数
gl.texParameteri(target, pname, param) ，将param的值赋给绑定到目标的纹理对象的pname参数上。
参数：
target: gl.TEXTURE_2D 或 gl.TEXTURE_CUBE_MAP
pname: 可指定4个纹理参数

放大（gl.TEXTURE_MAP_FILTER）:当纹理的绘制范围比纹理本身更大时，如何获取纹理颜色。比如，将16*16的纹理图像映射到32*32像素的空间时，纹理的尺寸变为原始的两倍。默认值为gl.LINEAR。
缩小（gl.TEXTURE_MIN_FILTER）: 当纹理的绘制返回比纹理本身更小时，如何获取纹素颜色。比如，将32*32的纹理图像映射到16*16像素空间里，纹理的尺寸就只有原始的一般。默认值为gl.NEAREST_MIPMAP_LINEAR。
水平填充（gl.TEXTURE_WRAP_S）: 表示如何对纹理图像左侧或右侧区域进行填充。默认值为gl.REPEAT。
垂直填充（gl.TEXTURE_WRAP_T）: 表示如何对纹理图像上方和下方的区域进行填充。默认值为gl.REPEAT。
param: 纹理参数的值

可赋给 gl.TEXTURE_MAP_FILTER 和 gl.TEXTURE_MIN_FILTER 参数的值

gl.NEAREST: 使用原纹理上距离映射后像素中心最近的那个像素的颜色值，作为新像素的值。

gl.LINEAR: 使用距离新像素中心最近的四个像素的颜色值的加权平均，作为新像素的值（和gl.NEAREST相比，该方法图像质量更好，但也会有较大的开销。）

可赋给 gl.TEXTURE_WRAP_S 和 gl.TEXTURE_WRAP_T 的常量：

gl.REPEAT: 平铺式的重复纹理

gl.MIRRORED_REPEAT: 镜像对称的重复纹理

gl.CLAMP_TO_EDGE: 使用纹理图像边缘值
*/
var Texture2D = /** @class */ (function (_super) {
    __extends(Texture2D, _super);
    function Texture2D(gl) {
        var _this = _super.call(this, gl) || this;
        _this._target = gl.TEXTURE_2D;
        return _this;
    }
    Object.defineProperty(Texture2D.prototype, "url", {
        set: function (soucePath) {
            var image = LoaderManager_1.default.instance.getCacheImage(soucePath);
            this._url = soucePath;
            var options = new Texture_1.TextureUpdateOpts();
            options.image = image;
            options.width = image.width;
            options.height = image.height;
            this.updateOptions(options);
            this.onLoadImageFinish(image);
            console.log("bytes----------", this._bites);
        },
        enumerable: false,
        configurable: true
    });
    //加载图片完成
    Texture2D.prototype.onLoadImageFinish = function (image) {
        this.loaded = true;
        // 指定当前操作的贴图
        this._gl.bindTexture(this._target, this._glID);
        // Y 轴取反
        this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, true);
        var formatInfo = GLEnums_1.glTextureFmtInfor(this._format);
        // 创建贴图, 绑定对应的图像并设置数据格式
        // this._gl.texImage2D(
        //      this._target,
        //      0, // 就是这个参数指定几级 Mipmap
        //      this._gl.RGBA, 
        //      this._gl.RGBA, 
        //      this._gl.UNSIGNED_BYTE, 
        //      image);
        //256*256   p(gpu内存) = width * height * 4 /1024 = 256k
        this._gl.texImage2D(this._target, 0, formatInfo.format, formatInfo.internalFormat, formatInfo.pixelType, image);
        //256*256  p(gpu内存) = width * height * 3 /1024 =342 - 342/4 = 192k 相当于内存减少1/4
        //this._gl.texImage2D(this._target, 0, this._gl.RGB,this._gl.RGB, this._gl.UNSIGNED_BYTE, image);
        //   this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, true);
        // 生成 MipMap 映射
        // 首先要调用此方法
        // 要在texImage2D 后调用，否则会报错error:GL_INVALID_OPERATION  gl.generateMipmap(this._target)
        //如果开启此技术对于256*256这个贴图 它的内存占用会比原来多出三分之一
        //256*256 p(gpu内存) = (width * height * 4 /1024)*(4/3) =342
        //能够使用这个技术的图片的宽高必须是2的幂
        //此技术开启以后，会生成以下级别的图片，256*256这个是0级
        //级别：128*128（1）,64*64（1）,32*32（1）,16*16（1）,8*8（1）,4*4（1）,2*2（1）,1*1（1）
        //实时渲染时，根据采样密度选择其中的某一级纹理，以此避免运行时的大量计算
        if (this._genMipmaps && this.isPow2(image.width) && this.isPow2(image.height)) {
            //  this._gl.hint(this._gl.GENERATE_MIPMAP_HINT, this._gl.NICEST);
            this._gl.generateMipmap(this._target);
            this.updateGenMipMapsAddBites();
        }
        else if (this._genMipmaps) {
            console.warn('NPOT textures do not support mipmap filter');
            this._genMipmaps = false;
        }
        //特别注意
        if (this.isPow2(image.width) == false || this.isPow2(image.height) == false) {
            console.warn('WebGL1 doesn\'t support all wrap modes with NPOT textures');
        }
        /**
         * MIN_FILTER 和 MAG_FILTER
         * -------------对于纹理的放大
         * 一个纹理是由离散的数据组成的，比如一个 2x2 的纹理是由 4 个像素组成的，使用 (0,0)、(0, 1) 等四个坐标去纹理上取样，自然可以取到对应的像素颜色；
         * 但是，如果使用非整数坐标到这个纹理上去取色。比如，当这个纹理被「拉近」之后，在屏幕上占据了 4x4 一共 16 个像素，
         * 那么就会使用 (0.33,0) 之类的坐标去取值，如何根据离散的 4 个像素颜色去计算 (0.33,0) 处的颜色，就取决于参数 MAG_FILTER
         * MAG_FILTER（放大） 有两个可选项，NEAREST 和 LINEAR。
         * 顾名思义，NEAREST 就是去取距离当前坐标最近的那个像素的颜色，而 LINEAR 则会根据距离当前坐标最近的 4 个点去内插计算出一个数值
         * NEAREST：速度快，但图片被放的比较大的时候,图片的颗粒感会比较明显
         * LINEAR： 速度慢点，但图片会显示的更顺滑一点
         * -------------对于纹理的缩小
         * MIN_FILTER（缩小） 有以下 6 个可选配置项：
         * NEAREST
         * LINEAR
         * NEAREST_MIPMAP_NEAREST
         * NEAREST_MIPMAP_LINEAR
         * LINEAR_MIPMAP_NEAREST
         * LINEAR_MIPMAP_LINEAR
         * 前两个配置项和 MAG_FILTER 的含义和作用是完全一样的。
         * 但问题是，当纹理被缩小时，原纹理中并不是每一个像素周围都会落上采样点，这就导致了某些像素，完全没有参与纹理的计算，新纹理丢失了一些信息。
         * 假设一种极端的情况，就是一个纹理彻底缩小为了一个点，那么这个点的值应当是纹理上所有像素颜色的平均值，这才比较合理。
         * 但是 NEAREST 只会从纹理中取一个点，而 LINEAR 也只是从纹理中取了四个点计算了一下而已。这时候，就该用上 MIPMAP 了
         *
         * 为了在纹理缩小也获得比较好的效果，需要按照采样密度，选择一定数量（通常大于 LINEAR 的 4 个，极端情况下为原纹理上所有像素）的像素进行计算。
         * 实时进行计算的开销是很大的，所有有一种称为 MIPMAP（金字塔）的技术。
         * 在纹理创建之初，就为纹理创建好 MIPMAP，比如对 512x512 的纹理，依次建立 256x256（称为 1 级 Mipmap）、128x128（称为 2 级 Mipmap） 乃至 2x2、1x1 的纹理。
         * 实时渲染时，根据采样密度选择其中的某一级纹理，以此避免运行时的大量计算
         */
        // 设定参数, 放大滤镜和缩小滤镜的采样方式
        //放大
        this._gl.texParameteri(this._target, this._gl.TEXTURE_MAG_FILTER, GLEnums_1.gltex_filter.LINEAR);
        //缩小
        //一旦使用(NEAREST_MIPMAP_NEAREST，NEAREST_MIPMAP_LINEAR，LINEAR_MIPMAP_NEAREST，LINEAR_MIPMAP_LINEAR)
        if (this._genMipmaps) {
            //说明就要使用mipmap了啊
            this._gl.texParameteri(this._target, this._gl.TEXTURE_MIN_FILTER, GLEnums_1.gltex_filter.LINEAR_MIPMAP_LINEAR);
        }
        else {
            this._gl.texParameteri(this._target, this._gl.TEXTURE_MIN_FILTER, GLEnums_1.gltex_filter.LINEAR);
        }
        // 设定参数, x 轴和 y 轴为镜面重复绘制
        //纹理的填充模式
        /**
         * gl.REPEAT
         * gl.CLAMP_TO_EDGE
         * gl.MIRRORED_REPEAT
         */
        //水平方向
        this._gl.texParameteri(this._target, this._gl.TEXTURE_WRAP_S, this._wrapS);
        //垂直方向
        this._gl.texParameteri(this._target, this._gl.TEXTURE_WRAP_T, this._wrapT);
        // 清除当前操作的贴图
        this._gl.bindTexture(this._target, null);
    };
    Texture2D.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    //判断当前数是不是2的幂
    Texture2D.prototype.isPow2 = function (v) {
        return !(v & (v - 1)) && (!!v);
    };
    return Texture2D;
}(Texture_1.Texture));
exports.Texture2D = Texture2D;
},{"../../../LoaderManager":2,"../gfx/GLEnums":34,"./Texture":22}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Texture_1 = require("./Texture");
var GLEnums_1 = require("../gfx/GLEnums");
/**
 * 立方体纹理
 */
var TextureCube = /** @class */ (function (_super) {
    __extends(TextureCube, _super);
    function TextureCube(gl) {
        var _this = _super.call(this, gl) || this;
        _this._target = gl.TEXTURE_CUBE_MAP;
        return _this;
    }
    Object.defineProperty(TextureCube.prototype, "url", {
        /**
         * @param path
         * 0:right
         * 1:left
         * 2:up
         * 3:down
         * 4:back
         * 5:front
         */
        set: function (path) {
            this.faceInfos = [
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_X,
                    url: path[0],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
                    url: path[1],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
                    url: path[2],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
                    url: path[3],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
                    url: path[4],
                },
                {
                    target: this._gl.TEXTURE_CUBE_MAP_NEGATIVE_Z,
                    url: path[5],
                },
            ];
            this.loadFaceInfor();
        },
        enumerable: false,
        configurable: true
    });
    //加载各个面信息
    TextureCube.prototype.loadFaceInfor = function () {
        var _this = this;
        var gl = this._gl;
        var texture = this._glID;
        gl.bindTexture(this._target, texture);
        var loadedCount = 0;
        this.faceInfos.forEach(function (faceInfo) {
            var target = faceInfo.target, url = faceInfo.url;
            // Upload the canvas to the cubemap face.
            var level = 0;
            var internalFormat = gl.RGBA;
            var format = gl.RGBA;
            var type = gl.UNSIGNED_BYTE;
            var width = 512;
            var height = 512;
            // setup each face so it's immediately renderable
            gl.texImage2D(target, level, format, width, height, 0, internalFormat, type, null);
            // Asynchronously load an image
            var image = new Image();
            image.src = url;
            image.addEventListener('load', function () {
                console.log("加载图片成功啦---");
                // Now that the image has loaded make copy it to the texture.
                gl.bindTexture(this._target, texture);
                // Y 轴取反
                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
                gl.texImage2D(target, level, format, internalFormat, type, image);
                loadedCount++;
                if (loadedCount == 6)
                    this.loaded = true;
                //   gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
            }.bind(_this));
        });
        //gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
        //放大
        gl.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, GLEnums_1.gltex_filter.LINEAR);
        //缩小
        gl.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, GLEnums_1.gltex_filter.LINEAR);
        //水平方向
        gl.texParameteri(this._target, gl.TEXTURE_WRAP_S, 33648 /* MIRROR */);
        //垂直方向
        gl.texParameteri(this._target, gl.TEXTURE_WRAP_T, 33648 /* MIRROR */);
    };
    return TextureCube;
}(Texture_1.Texture));
exports.default = TextureCube;
},{"../gfx/GLEnums":34,"./Texture":22}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Texture_1 = require("./Texture");
var GLapi_1 = require("../gfx/GLapi");
/**
 * 自定义纹理
 */
var TextureCustom = /** @class */ (function (_super) {
    __extends(TextureCustom, _super);
    function TextureCustom(gl) {
        var _this = _super.call(this, gl) || this;
        _this._target = gl.TEXTURE_2D;
        return _this;
    }
    Object.defineProperty(TextureCustom.prototype, "url", {
        /**
         * @param {level,internalFormat,width,height,border,format,type,data,alignment} urlData
         */
        set: function (urlData) {
            this.initTexture(urlData);
        },
        enumerable: false,
        configurable: true
    });
    TextureCustom.prototype.initTexture = function (urlData) {
        this.loaded = true;
        var gl = this._gl;
        gl.bindTexture(this._target, this._glID);
        // fill texture with 3x2 pixels
        var level = urlData.level || 0;
        var internalFormat = urlData.internalFormat;
        var width = urlData.width;
        var height = urlData.height;
        var border = urlData.border || 0;
        var format = urlData.format;
        var type = urlData.type || gl.UNSIGNED_BYTE;
        var data = urlData.data;
        var alignment = urlData.alignment || 1;
        GLapi_1.GLapi.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);
        GLapi_1.GLapi.texImage2D(this._target, level, internalFormat, width, height, border, format, type, data);
        // set the filtering so we don't need mips and it's not filtered
        GLapi_1.GLapi.texParameteri(this._target, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        GLapi_1.GLapi.texParameteri(this._target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        GLapi_1.GLapi.texParameteri(this._target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        GLapi_1.GLapi.texParameteri(this._target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    };
    return TextureCustom;
}(Texture_1.Texture));
exports.default = TextureCustom;
},{"../gfx/GLapi":35,"./Texture":22}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("./enums");
var Node_1 = require("../base/Node");
var Matrix_1 = require("../../Matrix");
/**
 *
 * 【0  4  8   12】
 * 【1  5  9   13】
 * 【2  6  10  14】
 * 【3  7  11  15】
 *
 * 基础理解1：
 * 摄像机会造一个模型矩阵和一个透视矩阵
 * 模型矩阵VM
 *
 * 平移----------------------------------------------------
 * 只有（12，13，14，15）参与运算
 *  out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
 *    (4x4)          (4x1)
 *   x  y  z  w
 * 【1  0  0  0】    【x1】                 【x1】                 【1  0  0  x1】
 * 【0  1  0  0】    【y1】                 【y1】trnslate         【0  1  0  y1】
 * 【0  0  1  0】--->【z1】-->两个矩阵相乘-->【z1】------------->   【0  0  1  z1】
 * 【0  0  0  1】    【1 】                 【1 】  self build     【0  0  0  1 】
 *
 * 缩放---------------------------------------------------------
 *  out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;

    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;

    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
 * 【1  0  0  0】    【x2】                 【x2】                 【x2  0   0   x1】
 * 【0  1  0  0】    【y2】                 【y2】scale            【0   y2  0   y1】
 * 【0  0  1  0】--->【z2】-->两个矩阵相乘-->【z2】------------->   【0   0   z2  z1】
 * 【0  0  0  1】    【1 】                 【1 】  self build     【0   0   0    1】
 *
 * 旋转-------------------------------------------------------------
 *
 * 这是一个非常干净的模型矩阵，任何一个向量乘以这个矩阵都等于它自身
 * 相机的位置pos 【x1,y1,z1】
 * 相机的缩放scal【x2,y2,z2】
 * 相机的平移tras【x3,y3,z3】
 * 假设相机放在世界坐标系的正中心【0,0,0】[1,1,1][0,0,0]
 *
 * 场景会从相机哪里继承这个矩阵VM
 * 场景也继承节点Node 他也有这个位置 缩放 平移的变化
 */
/**
 * 坐标系：
 * 笛卡尔坐标系：X轴为水平方向，Y轴为垂直方向
 * 视口坐标:左下角为(0,0),右上角为（1,1)
 * 屏幕坐标:屏幕的左下角为(0,0),但右上角为(screen.width,screen.height)，screen.width表示屏幕宽度，screen.height表示屏幕高度
 * UI坐标系:这个坐标系与屏幕坐标系相似，左下角为（0，0）点，右上角为（Screen.width，Screen.height）
 * uv坐标系：左下角为【0，0】，右上角为【1,1】
 * 齐次裁切坐标:屏幕正中心为原点（0,0），坐标范围是【-1,1】
 *
 * 左手坐标系：大拇指向右（+x）,食指向上（+y）,中指向前（+z）
 * 右手坐标系：大拇指向左（+x）,食指向上（+y）,中指向前（+z）
 *
 * 一:opengl属于右手坐标系
 * 二：设备坐标系属于左手坐标系
 * 三：unity属于左手坐标系
 * 四：Direct3D使用的是左手坐标系
 */
/**
 * !#en Values for Camera.clearFlags, determining what to clear when rendering a Camera.
 * !#zh 摄像机清除标记位，决定摄像机渲染时会清除哪些状态
 * @enum Camera.ClearFlags
 */
var ClearFlags;
(function (ClearFlags) {
    /**
    * !#en
    * Clear the background color.
    * !#zh
    * 清除背景颜色
    * @property COLOR
    */
    ClearFlags[ClearFlags["COLOR"] = 1] = "COLOR";
    /**
     * !#en
     * Clear the depth buffer.
     * !#zh
     * 清除深度缓冲区
     * @property DEPTH
     */
    ClearFlags[ClearFlags["DEPTH"] = 2] = "DEPTH";
    /**
     * !#en
     * Clear the stencil.
     * !#zh
     * 清除模板缓冲区
     * @property STENCIL
     */
    ClearFlags[ClearFlags["STENCIL"] = 4] = "STENCIL";
})(ClearFlags || (ClearFlags = {}));
var StageFlags;
(function (StageFlags) {
    StageFlags[StageFlags["OPAQUE"] = 1] = "OPAQUE";
    StageFlags[StageFlags["TRANSPARENT"] = 2] = "TRANSPARENT";
})(StageFlags || (StageFlags = {}));
var Camera = /** @class */ (function (_super) {
    __extends(Camera, _super);
    /**
     *
     * @param fovy    //相机张开的角度
     * @param aspect //宽高横纵比
     * @param near   //最近能看到的距离
     * @param far    //最远能看到的距离
     * @param type   //相机的类型
     */
    function Camera(fovy, aspect, near, far, type) {
        var _this = _super.call(this) || this;
        /**
         * 清除标志
         * 在GPU的一次绘制过程中，会在在帧缓冲区产生三个附件
         * 颜色缓冲附件:存储RGB
         * 深度附件:存储深度z值
         * 模板缓冲附件：存储模板值，用于测试，比如我们只绘制某一些具有特定模板值的像素
         * 我们将像素信息绘制到屏幕，都是依靠这三个附件的，
         * 绘制结束后，我们需要及时清理
         */
        _this._clearFlags = enums_1.default.CLEAR_COLOR | enums_1.default.CLEAR_DEPTH;
        /**
         * 清理屏幕时使用的颜色
         * 当我们把帧缓冲的附件置空的时候，那么就会出现黑屏，原因是GPU从帧缓冲取不到颜色数据用于渲染
         * 这个时候需要我们指定一种颜色来更换帧缓冲的颜色附件中的像素信息
         */
        _this._clearColor = [];
        // ortho properties
        /**
         * 下面这个值将会影响齐次裁切空间的高度的范围大小
         * 【-_orthoHeight,_orthoHeight】
         * 非常重要，相当于视口的宽和屏幕宽的比例
         * 这个一般用于2D渲染
         * 屏幕空间--》齐次裁切空间--》屏幕空间
         */
        _this._orthoHeight = 1;
        /**
         * 下面这个值将会影响齐次裁切空间的宽度的范围大小
         * 【-_orthoWidth,_orthoWidth】
         * 非常重要，相当于视口的高和屏幕高的比例
         */
        _this._orthoWidth = 1;
        // priority. the smaller one will be rendered first
        //当场景有多个相机时，决定那个相机先渲染
        _this._priority = 0;
        /**
         * 视口与屏幕的对齐设置
         * 笛卡尔坐标系
         * x:表示视口的x轴方向的起始位置
         * y:表示视口的y轴方向的起始位置
         * w:表示视口的宽度和屏幕的宽度的比值
         * h:表示视口的高度和屏幕的高度的比值
         */
        _this._rect = {
            x: 0, y: 0, w: 1, h: 1
        };
        _this._type = enums_1.default.PROJ_PERSPECTIVE;
        _this._fovy = fovy;
        _this._aspect = aspect;
        _this._near = near;
        _this._far = far;
        //创建透视矩阵
        _this._projectionMatrix = _this._glMatrix.mat4.create();
        _this._type = type;
        _this._center = [0, 0, 0]; //看向原点
        _this._up = [0, 1, 0]; //向上看
        _this._eye = [0, 0, 0]; //默认看向原点
        _this._footMatrix = Matrix_1.glMatrix.mat4.identity(null);
        _this.updateCameraMatrix();
        return _this;
    }
    Object.defineProperty(Camera.prototype, "Fovy", {
        /**
         * 弧度
         */
        get: function () {
            return this._fovy;
        },
        /**
         * 弧度
         */
        set: function (fov) {
            this._fovy = fov;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Aspect", {
        get: function () {
            return this._aspect;
        },
        set: function (aspect) {
            this._aspect = aspect;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Near", {
        get: function () {
            return this._near;
        },
        set: function (near) {
            this._near = near;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Camera.prototype, "Far", {
        get: function () {
            return this._far;
        },
        set: function (far) {
            this._far = far;
        },
        enumerable: false,
        configurable: true
    });
    Camera.prototype.setRect = function (x, y, w, h) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (w === void 0) { w = 1; }
        if (h === void 0) { h = 1; }
        this._rect.x = x;
        this._rect.y = y;
        this._rect.w = w;
        this._rect.h = h;
    };
    Object.defineProperty(Camera.prototype, "rect", {
        //获取视口
        get: function () {
            return this._rect;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * 透视矩阵
     */
    Camera.prototype.getProjectionMatrix = function () {
        return this._projectionMatrix;
    };
    /**
     * Get the clearing flags of the camera
     * @returns {number} camera clearing flags
     */
    Camera.prototype.getClearFlags = function () {
        return this._clearFlags;
    };
    /**
     * Set the clearing flags of the camera
     * @param {number} flags camera clearing flags
     */
    Camera.prototype.setClearFlags = function (flags) {
        this._clearFlags = flags;
    };
    /**
     * 更新相机矩阵
     * 主要是投影矩阵和模型矩阵
     */
    Camera.prototype.updateCameraMatrix = function () {
        if (this._type == enums_1.default.PROJ_PERSPECTIVE) {
            this._glMatrix.mat4.perspective(this._projectionMatrix, this._fovy, this._aspect, this._near, this._far);
        }
        else {
            var x = this._orthoWidth;
            var y = this._orthoHeight;
            /**
             * 下面将会构造一个正交投影矩阵
             * 可以把齐次裁切坐标的位置想象成屏幕正中心
             * x的范围是【-x,x】
             * y的范围是【-y,y】
             * 这个将会映射到屏幕坐标系上，而屏幕坐标的范围是【0,1】
             * 这里就会存在映射关系
             * 对于2d，在我们的逻辑中，通常是把物体放在屏幕坐标系下，我们只关心这个屏幕坐标系下的坐标
             * 但其实齐次裁切坐标它的正中心确是视口的中心，并非左下角，所以这里边的映射就需要注意
             * 最后：
             * 1可以提供给用户，就让他去使用屏幕坐标系，只是最后上传渲染数据的时候，我们把它映射到齐次裁切空间下
             * 屏幕--》齐次裁切
             * 【0,1】->【-x,x】
             * 【0,1】->【-y,y】
             * 2渲染完成以后，我们再把它从齐次裁切空间映射到屏幕坐标系
             * 齐次裁切 --》屏幕
             * 【-x,x】->【0,1】
             * 【-y,y】->【0,1】
             */
            this._glMatrix.mat4.ortho(this._projectionMatrix, -x, x, -y, y, this._near, this._far);
        }
        this.updateMatrixData();
    };
    Camera.prototype.updateMatrixData = function () {
        //初始化模型矩阵
        Matrix_1.glMatrix.mat4.identity(this._modelMatrix);
        Matrix_1.glMatrix.mat4.identity(this._footMatrix);
        //先缩放
        this.mat4Scale$3(this._modelMatrix, this._modelMatrix, [this.scaleX, this.scaleY, this.scaleZ]);
        //再旋转
        this.matrix4RotateX(this._modelMatrix, this._modelMatrix, this.rotateX * (Math.PI / 180));
        this.matrix4RotateY(this._modelMatrix, this._modelMatrix, this.rotateY * (Math.PI / 180));
        this.matrix4RotateZ(this._modelMatrix, this._modelMatrix, this.rotateZ * (Math.PI / 180));
        //最后平移
        this.mat4Translate$2(this._footMatrix, this._footMatrix, [this.x, this.y, this.z]);
        //
        Matrix_1.glMatrix.mat4.multiply(this._modelMatrix, this._footMatrix, this._modelMatrix);
        Matrix_1.glMatrix.mat4.multiply(this._modelMatrix, this._worldMatrix, this._modelMatrix);
    };
    Camera.prototype.getInversModelViewMatrix = function () {
        var invers = this._glMatrix.mat4.create();
        this._glMatrix.mat4.invert(invers, this._modelMatrix);
        return invers;
    };
    /**
     * 此函数务必调用
     * @param eye  相机的位置
     * @param center 相机看向的位置
     * @param up
     * 按照我设定的默认参数，
     * 看向原点，此处的原点指的是屏幕的中心，
     * 相机正着摆放，可以把自己的头当做摄像机
     * eye.z>=0,正面看屏幕的中心
     * eye.z<0,背面看屏幕的中心
     */
    Camera.prototype.lookAt = function (eye, center, up) {
        if (center === void 0) { center = [0, 0, 0]; }
        if (up === void 0) { up = [0, 1, 0]; }
        this._eye = eye;
        this._center = center;
        this._up = up;
        // //摄像机的位置
        this._glMatrix.mat4.lookAt(this._modelMatrix, this._eye, this._center, this._up);
    };
    Object.defineProperty(Camera.prototype, "targetTexture", {
        get: function () {
            return this._targetTexture;
        },
        /**
         * !#en
         * Destination render texture.
         * Usually cameras render directly to screen, but for some effects it is useful to make a camera render into a texture.
         * !#zh
         * 摄像机渲染的目标 RenderTexture。
         * 一般摄像机会直接渲染到屏幕上，但是有一些效果可以使用摄像机渲染到 RenderTexture 上再对 RenderTexture 进行处理来实现。
         * @property {RenderTexture} targetTexture
         */
        set: function (targetTexture) {
            this._targetTexture = targetTexture;
            this._updateTargetTexture();
        },
        enumerable: false,
        configurable: true
    });
    Camera.prototype._updateTargetTexture = function () {
        var texture = this._targetTexture;
        this.setFrameBuffer(texture ? texture._frameBuffer : null);
    };
    /**
    * Get the framebuffer of the camera
    * @returns {FrameBuffer} camera framebuffer
    */
    Camera.prototype.getFramebuffer = function () {
        return this._framebuffer;
    };
    /**
     * Set the framebuffer of the camera
     * @param {FrameBuffer} framebuffer camera framebuffer
     */
    Camera.prototype.setFrameBuffer = function (framebuffer) {
        this._framebuffer = framebuffer;
    };
    return Camera;
}(Node_1.Node));
exports.default = Camera;
},{"../../Matrix":6,"../base/Node":16,"./enums":31}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraModel = void 0;
var Device_1 = require("../../../Device");
var Matrix_1 = require("../../Matrix");
var MathUtils_1 = require("../../utils/MathUtils");
var Primitives_1 = require("../shader/Primitives");
var Shader_1 = require("../shader/Shader");
var baseVertexShader = 'attribute vec4 a_position;' +
    'attribute vec4 a_color;' +
    'uniform mat4 u_worldViewProjection;' +
    'uniform mat4 u_exampleWorldViewProjection;' +
    'varying vec4 v_color;' +
    'varying vec4 v_position;' +
    'void main() {' +
    'gl_Position = u_worldViewProjection * a_position;' +
    'v_position = u_exampleWorldViewProjection * a_position;' +
    'v_position = v_position / v_position.w;' +
    'v_color = a_color;' +
    '}';
var colorFragmentShader = 'precision mediump float;' +
    'varying vec4 v_color;' +
    'varying vec4 v_position;' +
    'uniform vec4 u_color;' +
    'void main() {' +
    'bool blend = (v_position.x < -1.0 || v_position.x > 1.0 ||' +
    'v_position.y < -1.0 || v_position.y > 1.0 ||' +
    'v_position.z < -1.0 || v_position.z > 1.0);' +
    'vec4 blendColor = blend ? vec4(0.35, 0.35, 0.35, 1.0) : vec4(1, 1, 1, 1);' +
    'gl_FragColor = v_color * u_color * blendColor;' +
    '}';
/**
 *
 */
var Graphic = /** @class */ (function () {
    function Graphic(gl) {
        this.vert = 'attribute vec4 a_position;' +
            'attribute vec4 a_color;' +
            'uniform mat4 u_worldViewProjection;' +
            'varying vec4 v_color;' +
            'void main() {' +
            'gl_Position = u_worldViewProjection * a_position;' +
            'gl_PointSize = 5.0;' +
            'v_color = a_color;' +
            '}';
        this.frag = 'precision mediump float;' +
            'uniform vec4 u_color;' +
            'varying vec4 v_color;' +
            'void main() {' +
            'gl_FragColor = u_color * v_color;' +
            '}';
        this._coordinateArrays = {
            position: [
                0, 0, 0,
                1, 0, 0,
                0, 1, 0,
                0, 0, 1,
                0, 0, 0,
                0, 0, 0,
                0, 0, 0,
                1.2, 0, 0,
                0, 1.2, 0,
                0, 0, 1.2,
                0, 0, 0, 0,
                0, 1, 1, 0
            ],
            color: [
                0, 0, 0, 1,
                1, 0, 0, 1,
                0, 1, 0, 1,
                0, 0, 1, 1,
                1, 0, 0, 1,
                0, 1, 0, 1,
                0, 0, 1, 1,
                0, 0, 0, 1,
                0, 0, 0, 1,
                0, 0, 0, 1,
                1, 1, 0, 0,
                1, 1, 0, 0 // 13
            ],
            indices: [
                4, 1, 5, 2, 6, 3, 1, 7, 2, 8, 3, 9, 10, 11 //11 12 13
            ]
        };
        this._pointArrays = {
            position: [
                0, 0, 0,
                1, 0, 0,
                0, 1, 0,
                0, 0, 1 //11
            ],
            color: [
                0, 0, 0, 1,
                1, 0, 0, 1,
                0, 1, 0, 1,
                0, 0, 1, 1
            ]
        };
        this.gl = gl;
        this.init();
    }
    Graphic.prototype.init = function () {
        var scale = 6;
        for (var j = 0; j < this._coordinateArrays.position.length; j++) {
            this._coordinateArrays.position[j] = this._coordinateArrays.position[j] * scale;
        }
        this._pointBufferInfor = Shader_1.G_ShaderFactory.createBufferInfoFromArrays(this._pointArrays);
        //创建shader
        this._programInfor = Shader_1.G_ShaderFactory.createProgramInfo(this.vert, this.frag);
        //创建attribuffer
        this._coordinateBufferInfo = Shader_1.G_ShaderFactory.createBufferInfoFromArrays(this._coordinateArrays);
    };
    /**
     * 绘制世界坐标系
     * 你想在上面位置来观察世界坐标系
     * @param proj 投影矩阵
     * @param camera 相机矩阵
     * @param world 世界矩阵  当前模型中的点需要乘以这个矩阵转换到世界坐标系下
     *
     */
    Graphic.prototype.drawLine = function (proj, camera, world) {
        if (world === void 0) { world = Matrix_1.glMatrix.mat4.identity(null); }
        var view = Matrix_1.glMatrix.mat4.invert(null, camera);
        var pv = Matrix_1.glMatrix.mat4.multiply(null, proj, view);
        Matrix_1.glMatrix.mat4.multiply(pv, pv, world);
        this.gl.useProgram(this._programInfor.spGlID);
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(this._programInfor.attrSetters, this._coordinateBufferInfo);
        Shader_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, { u_worldViewProjection: pv });
        Shader_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, { u_color: [1, 1, 1, 1] });
        Shader_1.G_ShaderFactory.drawBufferInfo(this._coordinateBufferInfo, this.gl.LINES);
    };
    Graphic.prototype.updatePoint = function () {
        var change = 0.1;
        this._pointArrays.position[3] = this._pointArrays.position[3] + change; //眼睛的位置
        this._pointArrays.position[7] = this._pointArrays.position[7] + change;
        this._pointArrays.position[11] = this._pointArrays.position[11] + change;
        this._pointBufferInfor = Shader_1.G_ShaderFactory.createBufferInfoFromArrays(this._pointArrays);
    };
    Graphic.prototype.drawPoint = function (proj, camera, world) {
        if (world === void 0) { world = Matrix_1.glMatrix.mat4.identity(null); }
        this.updatePoint();
        var view = Matrix_1.glMatrix.mat4.invert(null, camera);
        var vp = Matrix_1.glMatrix.mat4.multiply(null, proj, view);
        Matrix_1.glMatrix.mat4.multiply(vp, vp, world);
        this.gl.useProgram(this._programInfor.spGlID);
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(this._programInfor.attrSetters, this._pointBufferInfor);
        Shader_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, { u_worldViewProjection: vp });
        Shader_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, { u_color: [1, 1, 1, 1] });
        Shader_1.G_ShaderFactory.drawBufferInfo(this._pointBufferInfor, this.gl.POINTS);
    };
    return Graphic;
}());
var CameraModel = /** @class */ (function () {
    function CameraModel(gl) {
        // uniforms.
        this.sharedUniforms = {};
        this._frustumCubeUniforms = {
            u_color: [1, 1, 1, 0.4],
            u_worldViewProjection: new Float32Array(16),
            u_exampleWorldViewProjection: new Float32Array(16),
        };
        this.solidcolorvertexshader = 'attribute vec4 a_position;' +
            'uniform mat4 u_matrix;' +
            'void main() {' +
            'gl_Position = u_matrix * a_position;' +
            '}';
        this.solidcolorfragmentshader = 'precision mediump float;' +
            'uniform vec4 u_color;' +
            'void main() {' +
            'gl_FragColor = u_color;' +
            '}';
        this.gl = gl;
        this.init();
    }
    CameraModel.prototype.init = function () {
        this._programInfor = Shader_1.G_ShaderFactory.createProgramInfo(this.solidcolorvertexshader, this.solidcolorfragmentshader);
        this._frustumCube = Shader_1.G_ShaderFactory.createProgramInfo(baseVertexShader, colorFragmentShader);
        this._modelBuffer = this.createCameraBufferInfo();
        this._clipSpaceBuffer = this.createClipspaceCubeBufferInfo();
        this._coordinate = new Graphic(this.gl); //绘制线
        this._worldTemp = Matrix_1.glMatrix.mat4.identity(null);
        this._worldTemp1 = Matrix_1.glMatrix.mat4.identity(null);
        this._worldTemp2 = Matrix_1.glMatrix.mat4.identity(null);
        this._loacalInvertProj = Matrix_1.glMatrix.mat4.identity(null);
        this._pvTemp1 = Matrix_1.glMatrix.mat4.identity(null);
        this._viewMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._sceneCameraMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._sceneCameraProjectMatrix = Matrix_1.glMatrix.mat4.identity(null);
        this._originPos = [0, 0, 0];
        var faceColors = [
            [1, 0, 0, 1,],
            [0, 1, 0, 1,],
            [1, 1, 0, 1,],
            [0, 0, 1, 1,],
            [1, 0, 1, 1,],
            [0, 1, 1, 1,],
        ];
        var colorVerts = [];
        for (var f = 0; f < 6; ++f) {
            for (var v = 0; v < 4; ++v) {
                colorVerts.push.apply(colorVerts, faceColors[f]);
            }
        }
        var cubeArrays = Primitives_1.syPrimitives.createCubeVertices(2);
        delete cubeArrays.normal;
        delete cubeArrays.texcoord;
        cubeArrays.color = colorVerts;
        this._cubeBufferInfo = Shader_1.G_ShaderFactory.createBufferInfoFromArrays(cubeArrays);
        this.setSceneCamera();
    };
    CameraModel.prototype.createClipspaceCubeBufferInfo = function () {
        // first let's add a cube. It goes from 1 to 3
        // because cameras look down -Z so we want
        // the camera to start at Z = 0. We'll put a
        // a cone in front of this cube opening
        // toward -Z
        var positions = [
            -1, -1, -1,
            1, -1, -1,
            -1, 1, -1,
            1, 1, -1,
            -1, -1, 1,
            1, -1, 1,
            -1, 1, 1,
            1, 1, 1,
            0, 0, -1,
            0, 0, 1 //前节点 9
        ];
        var indices = [
            0, 1, 1, 3, 3, 2, 2, 0,
            4, 5, 5, 7, 7, 6, 6, 4,
            0, 4, 1, 5, 3, 7, 2, 6,
            8, 9, 9, 8
        ];
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays({
            position: positions,
            indices: indices,
        });
    };
    // create geometry for a camera
    CameraModel.prototype.createCameraBufferInfo = function (scale) {
        if (scale === void 0) { scale = 1; }
        // first let's add a cube. It goes from 1 to 3
        // because cameras look down -Z so we want
        // the camera to start at Z = 0.
        // We'll put a cone in front of this cube opening
        // toward -Z
        var positions = [
            -1, -1, 1,
            1, -1, 1,
            -1, 1, 1,
            1, 1, 1,
            -1, -1, 3,
            1, -1, 3,
            -1, 1, 3,
            1, 1, 3,
            0, 0, 1,
        ];
        var indices = [
            0, 1, 1, 3, 3, 2, 2, 0,
            4, 5, 5, 7, 7, 6, 6, 4,
            0, 4, 1, 5, 3, 7, 2, 6,
        ];
        // add cone segments
        var numSegments = 6;
        var coneBaseIndex = positions.length / 3;
        var coneTipIndex = coneBaseIndex - 1;
        for (var i = 0; i < numSegments; ++i) {
            var u = i / numSegments;
            var angle = u * Math.PI * 2;
            var x = Math.cos(angle);
            var y = Math.sin(angle);
            positions.push(x, y, 0);
            // line from tip to edge
            indices.push(coneTipIndex, coneBaseIndex + i);
            // line from point on edge to next point on edge
            indices.push(coneBaseIndex + i, coneBaseIndex + (i + 1) % numSegments);
        }
        positions.forEach(function (v, ndx) {
            positions[ndx] *= scale;
        });
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays({
            position: positions,
            indices: indices,
        });
    };
    /**
    * 这个函数的目的就是用一个相机去看目标相机
    * 目标相机有两个东西要绘制 一个是相机模型 一个是齐次裁切空间
    * @param projMatrix 当前摄像机的投影矩阵
    * @param cameraMatrix 当前摄像机的相机矩阵
    * @param targetProjMatrix 目标摄像机的投影矩阵
    * @param targetCameraMatrix 目标摄像机的相机矩阵
    */
    CameraModel.prototype.draw = function (projMatrix, cameraMatrix, targetProjMatrix, targetCameraMatrix) {
        var gl = this.gl;
        // draw object to represent first camera
        // Make a view matrix from the camera matrix.
        Matrix_1.glMatrix.mat4.invert(this._viewMatrix, cameraMatrix);
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp1, projMatrix, this._viewMatrix); //投影矩阵X视口矩阵
        // use the first's camera's matrix as the matrix to position
        // the camera's representative in the scene
        //可以这么理解，第一台摄像机上的点乘以它得相机矩阵，可以将位置转换到世界坐标系下
        //通过世界坐标系这个枢纽，再将点转换到其他的视口坐标系下，进行投影
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp1, this._worldTemp1, targetCameraMatrix); //投影矩阵xs视口矩阵x第一个摄像机的相机矩阵
        gl.useProgram(this._programInfor.spGlID);
        // ------ Draw the Camera Representation --------绘制相机模型
        // Setup all the needed attributes.
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(this._programInfor.attrSetters, this._modelBuffer);
        // Set the uniforms
        Shader_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, {
            u_matrix: this._worldTemp1,
            u_color: [1, 0, 0, 1],
        });
        Shader_1.G_ShaderFactory.drawBufferInfo(this._modelBuffer, gl.LINES);
        // ----- Draw the frustum ------- 绘制齐次裁切空间坐标系
        //一个正方体乘以这个矩阵的逆矩阵可以变成一个棱台
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp1, this._worldTemp1, Matrix_1.glMatrix.mat4.invert(null, targetProjMatrix));
        // Setup all the needed attributes.
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(this._programInfor.attrSetters, this._clipSpaceBuffer);
        // Set the uniforms
        Shader_1.G_ShaderFactory.setUniforms(this._programInfor.uniSetters, {
            u_matrix: this._worldTemp1,
            u_color: [0, 1, 0, 1],
        });
        Shader_1.G_ShaderFactory.drawBufferInfo(this._clipSpaceBuffer, gl.LINES);
        //原点
        Matrix_1.glMatrix.mat4.identity(this._worldTemp2);
        //转换到相机坐标系下
        //你可以理解为相机中的点乘以相机坐标系可以转换到世界坐标系
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp2, this._worldTemp2, targetCameraMatrix); //投影矩阵xs视口矩阵x第一个摄像机的相机矩阵
        this._coordinate.drawLine(projMatrix, cameraMatrix, this._worldTemp2);
        this._coordinate.drawLine(projMatrix, cameraMatrix);
        this._coordinate.drawPoint(projMatrix, cameraMatrix, this._worldTemp2);
        this._coordinate.drawPoint(projMatrix, cameraMatrix);
        this.drawFrustumCube(projMatrix, cameraMatrix, targetProjMatrix, targetCameraMatrix);
    };
    // Draw Frustum Cube behind
    CameraModel.prototype.drawFrustumCube = function (projMatrix, cameraMatrix, targetProjMatrix, targetCameraMatrix) {
        //绘制齐次裁切空间 六个面
        Matrix_1.glMatrix.mat4.invert(this._viewMatrix, cameraMatrix);
        Matrix_1.glMatrix.mat4.multiply(this._pvTemp1, projMatrix, this._viewMatrix);
        Matrix_1.glMatrix.mat4.multiply(this._pvTemp1, this._pvTemp1, targetCameraMatrix);
        Matrix_1.glMatrix.mat4.invert(this._loacalInvertProj, targetProjMatrix);
        var gl = this.gl;
        Device_1.default.Instance.cullFace(false);
        gl.useProgram(this._frustumCube.spGlID);
        Shader_1.G_ShaderFactory.setBuffersAndAttributes(this._frustumCube.attrSetters, this._cubeBufferInfo);
        Matrix_1.glMatrix.mat4.translation(this._worldTemp, this._originPos[0], this._originPos[1], this._originPos[2]);
        Matrix_1.glMatrix.mat4.multiply(this._worldTemp, this._loacalInvertProj, this._worldTemp);
        Matrix_1.glMatrix.mat4.multiply(this._frustumCubeUniforms.u_worldViewProjection, this._pvTemp1, this._worldTemp); //pvm
        Shader_1.G_ShaderFactory.setUniforms(this._frustumCube.uniSetters, this.sharedUniforms);
        Shader_1.G_ShaderFactory.setUniforms(this._frustumCube.uniSetters, this._frustumCubeUniforms);
        Shader_1.G_ShaderFactory.drawBufferInfo(this._cubeBufferInfo);
        Device_1.default.Instance.closeCullFace();
    };
    //设置场景相机
    CameraModel.prototype.setSceneCamera = function () {
        var gl = this.gl;
        var effectiveWidth = gl.canvas.width / 2;
        var aspect = effectiveWidth / gl.canvas.height;
        var near = 1;
        var far = 2000;
        Matrix_1.glMatrix.mat4.perspective(this._sceneCameraProjectMatrix, MathUtils_1.MathUtils.degToRad(60), aspect, near, far);
        // Compute the camera's matrix using look at.
        var cameraPosition2 = [-70, 10, 10];
        var target2 = [0, 0, 0];
        var up2 = [0, 1, 0];
        Matrix_1.glMatrix.mat4.lookAt2(this._sceneCameraMatrix, cameraPosition2, target2, up2);
    };
    CameraModel.prototype.getSceneCameraMatrix = function () {
        return this._sceneCameraMatrix;
    };
    CameraModel.prototype.getSceneProjectMatrix = function () {
        return this._sceneCameraProjectMatrix;
    };
    return CameraModel;
}());
exports.CameraModel = CameraModel;
},{"../../../Device":1,"../../Matrix":6,"../../utils/MathUtils":38,"../shader/Primitives":36,"../shader/Shader":37}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Device_1 = require("../../../Device");
var MathUtils_1 = require("../../utils/MathUtils");
var enums_1 = require("./enums");
var OrthoCamera_1 = require("./OrthoCamera");
var PerspectiveCamera_1 = require("./PerspectiveCamera");
/**
 * 游戏主相机
 */
var GameMainCamera = /** @class */ (function () {
    function GameMainCamera() {
        //ui部分----------------------------------------------------------------------------
        this.zNear = 10; //相机最近能看到的距离
        this.zFar = 50; //相机最远能看到的距离
        this.fieldOfView = 30; //相机张开的角度
        this.zPosition = -25; //场景的位置
        this.eyePosition = new Float32Array([31, 17, 15]); //相机的位置
        this.eyeRotation = new Float32Array([0, 0, 0]); //相机的旋转
    }
    Object.defineProperty(GameMainCamera, "instance", {
        get: function () {
            if (!this._instance) {
                var gl = Device_1.default.Instance.gl;
                this._instance = new GameMainCamera();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    GameMainCamera.prototype.setCamera = function (type, aspect, angle, near, far) {
        if (angle === void 0) { angle = 60; }
        if (near === void 0) { near = 0.1; }
        if (far === void 0) { far = 50; }
        this._cameraType = type;
        if (type == enums_1.default.PROJ_PERSPECTIVE) {
            this._3dCamera = new PerspectiveCamera_1.default(angle * Math.PI / 180, aspect, near, far);
            // this.createUI();
            // this._3dCamera.showFrustum();
            return this._3dCamera;
        }
        else if (type == enums_1.default.PROJ_ORTHO) {
            this._2dCamera = new OrthoCamera_1.default(angle * Math.PI / 180, aspect, near, far);
            return this._2dCamera;
        }
    };
    GameMainCamera.prototype.getCamera = function (type) {
        return type == enums_1.default.PROJ_PERSPECTIVE ? this._3dCamera : this._2dCamera;
    };
    GameMainCamera.prototype.get3DCamera = function () {
        return this._3dCamera;
    };
    GameMainCamera.prototype.get2DCamera = function () {
        return this._2dCamera;
    };
    GameMainCamera.prototype.updateFieldOfView = function (event, ui) {
        this.fieldOfView = ui.value;
    };
    GameMainCamera.prototype.updateZNear = function (event, ui) {
        this.zNear = ui.value;
    };
    GameMainCamera.prototype.updateZFar = function (event, ui) {
        this.zFar = ui.value;
    };
    GameMainCamera.prototype.updateZPosition = function (event, ui) {
        this.zPosition = ui.value;
    };
    GameMainCamera.prototype.updateCamearXPos = function (event, ui) {
        this.eyePosition[0] = ui.value;
    };
    GameMainCamera.prototype.updateCamearYPos = function (event, ui) {
        this.eyePosition[1] = ui.value;
    };
    GameMainCamera.prototype.updateCamearZPos = function (event, ui) {
        this.eyePosition[2] = ui.value;
    };
    GameMainCamera.prototype.updateCamearXRotation = function (event, ui) {
        this.eyeRotation[0] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    GameMainCamera.prototype.updateCamearYRotation = function (event, ui) {
        this.eyeRotation[1] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    GameMainCamera.prototype.updateCamearZRotation = function (event, ui) {
        this.eyeRotation[2] = MathUtils_1.MathUtils.degToRad(ui.value);
    };
    //创建相机UI
    GameMainCamera.prototype.createUI = function () {
        var webglLessonsUI = window["webglLessonsUI"];
        webglLessonsUI.setupSlider("#fieldOfView", { value: this.fieldOfView, slide: this.updateFieldOfView.bind(this), max: 179 });
        webglLessonsUI.setupSlider("#zNear", { value: this.zNear, slide: this.updateZNear.bind(this), min: 1, max: 50 });
        webglLessonsUI.setupSlider("#zFar", { value: this.zFar, slide: this.updateZFar.bind(this), min: 1, max: 50 });
        webglLessonsUI.setupSlider("#zPosition", { value: this.zPosition, slide: this.updateZPosition.bind(this), min: -60, max: 0 });
        webglLessonsUI.setupSlider("#cameraPosX", { value: this.eyePosition[0], slide: this.updateCamearXPos.bind(this), min: 1, max: 50 }); //31
        webglLessonsUI.setupSlider("#cameraPosY", { value: this.eyePosition[1], slide: this.updateCamearYPos.bind(this), min: 1, max: 50 }); //17
        webglLessonsUI.setupSlider("#cameraPosZ", { value: this.eyePosition[2], slide: this.updateCamearZPos.bind(this), min: 1, max: 50 }); //15
        webglLessonsUI.setupSlider("#cameraRotateX", { value: this.eyeRotation[0], slide: this.updateCamearXRotation.bind(this), min: 0, max: 360 }); //31
        webglLessonsUI.setupSlider("#cameraRotateY", { value: this.eyeRotation[1], slide: this.updateCamearYRotation.bind(this), min: 0, max: 360 }); //17
        webglLessonsUI.setupSlider("#cameraRotateZ", { value: this.eyeRotation[2], slide: this.updateCamearZRotation.bind(this), min: 0, max: 360 }); //15
    };
    return GameMainCamera;
}());
exports.default = GameMainCamera;
},{"../../../Device":1,"../../utils/MathUtils":38,"./OrthoCamera":29,"./PerspectiveCamera":30,"./enums":31}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Camera_1 = require("./Camera");
var enums_1 = require("./enums");
var OrthoCamera = /** @class */ (function (_super) {
    __extends(OrthoCamera, _super);
    function OrthoCamera(fovy, aspect, near, far) {
        return _super.call(this, fovy, aspect, near, far, enums_1.default.PROJ_ORTHO) || this;
    }
    return OrthoCamera;
}(Camera_1.default));
exports.default = OrthoCamera;
},{"./Camera":26,"./enums":31}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Matrix_1 = require("../../Matrix");
var Camera_1 = require("./Camera");
var enums_1 = require("./enums");
var PerspectiveCamera = /** @class */ (function (_super) {
    __extends(PerspectiveCamera, _super);
    function PerspectiveCamera(fovy, aspect, near, far) {
        var _this = _super.call(this, fovy, aspect, near, far, enums_1.default.PROJ_PERSPECTIVE) || this;
        _this.test();
        return _this;
    }
    PerspectiveCamera.prototype.test = function () {
        this.setRect(0, 0, 1, 1);
    };
    PerspectiveCamera.prototype.readyDraw = function (time) {
        _super.prototype.readyDraw.call(this, time);
    };
    PerspectiveCamera.prototype.getVP = function () {
        return Matrix_1.glMatrix.mat4.multiply(null, this._projectionMatrix, this._modelMatrix);
    };
    /**
     * @param time in seconds
     */
    PerspectiveCamera.prototype.updateLookAt = function (time) {
        // convert to seconds
        time *= 0.001;
        // camera going in circle 2 units from origin looking at origin
        var m4 = this._glMatrix.mat4;
        var cameraPosition = [Math.cos(time * 0.1), 0, Math.sin(time * 0.1)];
        var target = [0, 0, 0];
        var up = [0, 1, 0];
        // Compute the camera's matrix using look at.
        var cameraMatrix = m4.create();
        m4.lookAt(cameraMatrix, cameraPosition, target, up);
        // Make a view matrix from the camera matrix.
        var viewMatrix = m4.create();
        m4.invert(viewMatrix, cameraMatrix);
        // We only care about direciton so remove the translation
        viewMatrix[12] = 0;
        viewMatrix[13] = 0;
        viewMatrix[14] = 0;
        var viewDirectionProjectionMatrix = m4.create();
        m4.multiply(viewDirectionProjectionMatrix, this._projectionMatrix, viewMatrix);
        var viewDirectionProjectionInverseMatrix = m4.create();
        m4.invert(viewDirectionProjectionInverseMatrix, viewDirectionProjectionMatrix);
        return viewDirectionProjectionInverseMatrix;
    };
    return PerspectiveCamera;
}(Camera_1.default));
exports.default = PerspectiveCamera;
},{"../../Matrix":6,"./Camera":26,"./enums":31}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    // projection
    PROJ_PERSPECTIVE: 0,
    PROJ_ORTHO: 1,
    // lights
    LIGHT_DIRECTIONAL: 0,
    LIGHT_POINT: 1,
    LIGHT_SPOT: 2,
    LIGHT_AMBIENT: 3,
    // shadows
    SHADOW_NONE: 0,
    SHADOW_HARD: 1,
    SHADOW_SOFT: 2,
    // parameter type
    // PARAM_INT:             typeMap.int,
    // PARAM_INT2:            typeMap.ivec2,
    // PARAM_INT3:            typeMap.ivec3,
    // PARAM_INT4:            typeMap.ivec4,
    // PARAM_FLOAT:           typeMap.float,
    // PARAM_FLOAT2:          typeMap.vec2,
    // PARAM_FLOAT3:          typeMap.vec3,
    // PARAM_FLOAT4:          typeMap.vec4,
    // PARAM_MAT2:            typeMap.mat2,
    // PARAM_MAT3:            typeMap.mat3,
    // PARAM_MAT4:            typeMap.mat4,
    // PARAM_TEXTURE_2D:      typeMap.sampler2D,
    // PARAM_TEXTURE_CUBE:    typeMap.samplerCube,
    // clear flags
    CLEAR_COLOR: 1,
    CLEAR_DEPTH: 2,
    CLEAR_STENCIL: 4,
    CLEAR_SKYBOX: 8,
    //
    BUFFER_VIEW_INT8: 0,
    BUFFER_VIEW_UINT8: 1,
    BUFFER_VIEW_INT16: 2,
    BUFFER_VIEW_UINT16: 3,
    BUFFER_VIEW_INT32: 4,
    BUFFER_VIEW_UINT32: 5,
    BUFFER_VIEW_FLOAT32: 6,
};
},{}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CubeData = exports.CubeFaceData = exports.CubeFace = void 0;
//立方体的面
var CubeFace;
(function (CubeFace) {
    CubeFace[CubeFace["FRONT"] = 0] = "FRONT";
    CubeFace[CubeFace["BACK"] = 1] = "BACK";
    CubeFace[CubeFace["LEFT"] = 2] = "LEFT";
    CubeFace[CubeFace["RIGHT"] = 3] = "RIGHT";
    CubeFace[CubeFace["UP"] = 4] = "UP";
    CubeFace[CubeFace["DOWN"] = 5] = "DOWN";
})(CubeFace = exports.CubeFace || (exports.CubeFace = {}));
//立方体的面的数据
var CubeFaceData = /** @class */ (function () {
    function CubeFaceData(face, vArr, uvArr, indexArr, normals) {
        this.face = CubeFace.FRONT;
        this.normals = [];
        this.uv = [];
        this.vertex = [];
        this.indexs = [];
        this.vertex_item_size = 0;
        this.vertex_item_nums = 4;
        this.normal_item_size = 0;
        this.normal_item_nums = 4;
        this.uv_item_size = 0;
        this.uv_item_nums = 4;
        this.indexs_item_size = 0;
        this.indexs_item_nums = 1;
        this.face = face;
        this.vertex = vArr;
        this.vertex_item_size = vArr.length / this.vertex_item_nums;
        this.uv = uvArr;
        this.uv_item_size = uvArr.length / this.uv_item_nums;
        this.indexs = indexArr;
        this.indexs_item_size = indexArr.length / this.indexs_item_nums;
        this.normals = normals;
        this.normal_item_size = normals.length / this.normal_item_nums;
    }
    Object.defineProperty(CubeFaceData.prototype, "Face", {
        get: function () {
            return this.face;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CubeFaceData.prototype, "Vertex", {
        //默认情况 一个面有四个点
        get: function () {
            return this.vertex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CubeFaceData.prototype, "UV", {
        get: function () {
            return this.uv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CubeFaceData.prototype, "Indexs", {
        get: function () {
            return this.indexs;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CubeFaceData.prototype, "Normals", {
        get: function () {
            return this.normals;
        },
        enumerable: false,
        configurable: true
    });
    return CubeFaceData;
}());
exports.CubeFaceData = CubeFaceData;
var CubeData = /** @class */ (function () {
    function CubeData() {
    }
    CubeData.getFaceData = function (face) {
        var cFData = function (key) {
            return new CubeFaceData(CubeFace.FRONT, CubeData.verPos.slice(3 * 4 * key, 3 * 4 * (key + 1)), CubeData.texUV.slice(2 * 4 * key, 2 * 4 * (key + 1)), CubeData.verIndex.slice(1 * 6 * key, 1 * 6 * (key + 1)), CubeData.normals.slice(3 * 4 * key, 3 * 4 * (key + 1)));
        };
        switch (face) {
            case CubeFace.FRONT:
                return cFData(CubeFace.FRONT);
            case CubeFace.BACK:
                return cFData(CubeFace.BACK);
            case CubeFace.LEFT:
                return cFData(CubeFace.LEFT);
            case CubeFace.RIGHT:
                return cFData(CubeFace.RIGHT);
            case CubeFace.UP:
                return cFData(CubeFace.UP);
            case CubeFace.DOWN:
                return cFData(CubeFace.DOWN);
        }
    };
    CubeData.getData = function () {
        var faceFrontData = CubeData.getFaceData(CubeFace.FRONT);
        var faceBackData = CubeData.getFaceData(CubeFace.BACK);
        var faceLeftData = CubeData.getFaceData(CubeFace.LEFT);
        var faceRightData = CubeData.getFaceData(CubeFace.RIGHT);
        var faceUpData = CubeData.getFaceData(CubeFace.UP);
        var faceDownData = CubeData.getFaceData(CubeFace.DOWN);
        var concatData = function (key) {
            return [].concat(faceFrontData[key], faceBackData[key], faceLeftData[key], faceRightData[key], faceUpData[key], faceDownData[key]);
        };
        var vertex = concatData("Vertex");
        var uvData = concatData("UV");
        var indexs = concatData("Indexs");
        var normals = concatData("Normals");
        return {
            vertex: vertex,
            uvData: uvData,
            indexs: indexs,
            normals: normals,
            dF: faceFrontData
        };
    };
    CubeData.getData2 = function () {
        var faceFrontData = CubeData.getFaceData(CubeFace.FRONT);
        var faceBackData = CubeData.getFaceData(CubeFace.BACK);
        var faceLeftData = CubeData.getFaceData(CubeFace.LEFT);
        var faceRightData = CubeData.getFaceData(CubeFace.RIGHT);
        var faceUpData = CubeData.getFaceData(CubeFace.UP);
        var faceDownData = CubeData.getFaceData(CubeFace.DOWN);
        var concatData = function (key) {
            return [].concat(faceRightData[key], faceLeftData[key], faceUpData[key], faceDownData[key], faceBackData[key], faceFrontData[key]);
        };
        var vertex = concatData("Vertex");
        var uvData = concatData("UV");
        var indexs = concatData("Indexs");
        var normals = concatData("Normals");
        return {
            vertex: vertex,
            uvData: uvData,
            indexs: indexs,
            normals: normals,
            dF: faceFrontData
        };
    };
    // 顶点数据
    CubeData.verPos = [
        // Front face
        1.0, 1.0, 1.0,
        -1.0, 1.0, 1.0,
        -1.0, -1.0, 1.0,
        1.0, -1.0, 1.0,
        // Back face
        1.0, 1.0, -1.0,
        -1.0, 1.0, -1.0,
        -1.0, -1.0, -1.0,
        1.0, -1.0, -1.0,
        // Left face
        -1.0, 1.0, 1.0,
        -1.0, 1.0, -1.0,
        -1.0, -1.0, -1.0,
        -1.0, -1.0, 1.0,
        // Right face
        1.0, 1.0, 1.0,
        1.0, -1.0, 1.0,
        1.0, -1.0, -1.0,
        1.0, 1.0, -1.0,
        // Top face
        1.0, 1.0, 1.0,
        1.0, 1.0, -1.0,
        -1.0, 1.0, -1.0,
        -1.0, 1.0, 1.0,
        // Bottom face
        1.0, -1.0, 1.0,
        1.0, -1.0, -1.0,
        -1.0, -1.0, -1.0,
        -1.0, -1.0, 1.0,
    ];
    // uv 数据
    CubeData.texUV = [
        //Front face
        0.0, 0.0,
        1.0, 0.0,
        1.0, 1.0,
        0.0, 1.0,
        // Back face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
        // Left face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
        // Right face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
        // Top face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
        // Bottom face
        0.0, 1.0,
        1.0, 1.0,
        1.0, 0.0,
        0.0, 0.0,
    ];
    // 索引数据
    CubeData.verIndex = [
        0, 1, 2, 0, 2, 3,
        4, 6, 5, 4, 7, 6,
        8, 9, 10, 8, 10, 11,
        12, 13, 14, 12, 14, 15,
        16, 17, 18, 16, 18, 19,
        20, 22, 21, 20, 23, 22 // Bottom face
    ];
    CubeData.normals = [
        // front face
        0, 0, 1,
        0, 0, 1,
        0, 0, 1,
        0, 0, 1,
        // back face
        0, 0, -1,
        0, 0, -1,
        0, 0, -1,
        0, 0, -1,
        // left face
        -1, 0, 0,
        -1, 0, 0,
        -1, 0, 0,
        -1, 0, 0,
        // right face
        1, 0, 0,
        1, 0, 0,
        1, 0, 0,
        1, 0, 0,
        // top face
        0, 1, 0,
        0, 1, 0,
        0, 1, 0,
        0, 1, 0,
        // bottom face
        0, -1, 0,
        0, -1, 0,
        0, -1, 0,
        0, -1, 0
    ];
    return CubeData;
}());
exports.CubeData = CubeData;
},{}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GLEnums_1 = require("../gfx/GLEnums");
var CustomTextureData = /** @class */ (function () {
    function CustomTextureData() {
    }
    CustomTextureData.getRandomData = function (width, height, format) {
        var formatInfo = GLEnums_1.glTextureFmtInfor(format);
        var chanels = GLEnums_1.glTextureTotalChanels(format);
        var urlData = {
            level: 0,
            internalFormat: formatInfo.internalFormat,
            width: width,
            height: height,
            border: 0,
            format: formatInfo.format,
            type: formatInfo.pixelType,
            alignment: 1,
        };
        var getRandomColor = function () {
            var ret = [];
            for (var i_1 = 1; i_1 <= chanels; i_1++) {
                ret.push(Math.random() * 256);
            }
            return ret;
        };
        var retData = [];
        for (var j = 1; j <= height; j++) {
            var curColor = getRandomColor();
            for (var i = 1; i <= width; i++) {
                retData = [].concat(retData, curColor);
            }
        }
        urlData.data = new Uint8Array(retData);
        console.log(urlData);
        return urlData;
    };
    return CustomTextureData;
}());
exports.default = CustomTextureData;
},{"../gfx/GLEnums":34}],34:[function(require,module,exports){
"use strict";
//texture 取值
Object.defineProperty(exports, "__esModule", { value: true });
exports.glTextureChanelTotalBytes = exports.glTextureTotalChanels = exports.glTextureFmtInfor = exports.glFilter = exports.glblend = exports.glblend_func = exports.glbuffer_usage = exports.glindex_buffer_format = exports.gldepth_stencil_func = exports.glstencil_operation = exports.glcull = exports.glrender_buffer_format = exports.glTEXTURE_UNIT_VALID = exports.gltex_filter = void 0;
// texture filter
exports.gltex_filter = {
    NEAREST: 9728,
    LINEAR: 9729,
    //下面是针对缩小的是采用mipmap技术
    NEAREST_MIPMAP_NEAREST: 9984,
    LINEAR_MIPMAP_NEAREST: 9985,
    NEAREST_MIPMAP_LINEAR: 9986,
    LINEAR_MIPMAP_LINEAR: 9987,
};
var _filterGL = [
    [exports.gltex_filter.NEAREST, exports.gltex_filter.NEAREST_MIPMAP_NEAREST, exports.gltex_filter.NEAREST_MIPMAP_LINEAR],
    [exports.gltex_filter.LINEAR, exports.gltex_filter.LINEAR_MIPMAP_NEAREST, exports.gltex_filter.LINEAR_MIPMAP_LINEAR],
];
var _textureFmtGL = [
    // RGB_DXT1: 0
    { format: 6407 /* RGB */, internalFormat: 33776 /* RGB_S3TC_DXT1_EXT */, pixelType: null },
    // RGBA_DXT1: 1
    { format: 6408 /* RGBA */, internalFormat: 33777 /* RGBA_S3TC_DXT1_EXT */, pixelType: null },
    // RGBA_DXT3: 2
    { format: 6408 /* RGBA */, internalFormat: 33778 /* RGBA_S3TC_DXT3_EXT */, pixelType: null },
    // RGBA_DXT5: 3
    { format: 6408 /* RGBA */, internalFormat: 33779 /* RGBA_S3TC_DXT5_EXT */, pixelType: null },
    // RGB_ETC1: 4
    { format: 6407 /* RGB */, internalFormat: 36196 /* RGB_ETC1_WEBGL */, pixelType: null },
    // RGB_PVRTC_2BPPV1: 5
    { format: 6407 /* RGB */, internalFormat: 35841 /* RGB_PVRTC_2BPPV1_IMG */, pixelType: null },
    // RGBA_PVRTC_2BPPV1: 6
    { format: 6408 /* RGBA */, internalFormat: 35843 /* RGBA_PVRTC_2BPPV1_IMG */, pixelType: null },
    // RGB_PVRTC_4BPPV1: 7
    { format: 6407 /* RGB */, internalFormat: 35840 /* RGB_PVRTC_4BPPV1_IMG */, pixelType: null },
    // RGBA_PVRTC_4BPPV1: 8
    { format: 6408 /* RGBA */, internalFormat: 35842 /* RGBA_PVRTC_4BPPV1_IMG */, pixelType: null },
    // A8: 9
    { format: 6406 /* ALPHA */, internalFormat: 6406 /* ALPHA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // L8: 10
    { format: 6409 /* LUMINANCE */, internalFormat: 6409 /* LUMINANCE */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // L8_A8: 11
    { format: 6410 /* LUMINANCE_ALPHA */, internalFormat: 6410 /* LUMINANCE_ALPHA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // R5_G6_B5: 12
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 33635 /* UNSIGNED_SHORT_5_6_5 */ },
    // R5_G5_B5_A1: 13
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 32820 /* UNSIGNED_SHORT_5_5_5_1 */ },
    // R4_G4_B4_A4: 14
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 32819 /* UNSIGNED_SHORT_4_4_4_4 */ },
    // RGB8: 15
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // RGBA8: 16
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 5121 /* UNSIGNED_BYTE */ },
    // RGB16F: 17
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 36193 /* HALF_FLOAT_OES */ },
    // RGBA16F: 18
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 36193 /* HALF_FLOAT_OES */ },
    // RGB32F: 19
    { format: 6407 /* RGB */, internalFormat: 6407 /* RGB */, pixelType: 5126 /* FLOAT */ },
    // RGBA32F: 20
    { format: 6408 /* RGBA */, internalFormat: 6408 /* RGBA */, pixelType: 5126 /* FLOAT */ },
    // R32F: 21
    { format: null, internalFormat: null, pixelType: null },
    // _111110F: 22
    { format: null, internalFormat: null, pixelType: null },
    // SRGB: 23
    { format: null, internalFormat: null, pixelType: null },
    // SRGBA: 24
    { format: null, internalFormat: null, pixelType: null },
    // D16: 25
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5123 /* UNSIGNED_SHORT */ },
    // D32: 26
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5125 /* UNSIGNED_INT */ },
    // D24S8: 27
    { format: 6402 /* DEPTH_COMPONENT */, internalFormat: 6402 /* DEPTH_COMPONENT */, pixelType: 5125 /* UNSIGNED_INT */ },
    // RGB_ETC2: 28
    { format: 6407 /* RGB */, internalFormat: 37492 /* RGB8_ETC2 */, pixelType: null },
    // RGBA_ETC2: 29
    { format: 6408 /* RGBA */, internalFormat: 37496 /* RGBA8_ETC2_EAC */, pixelType: null },
];
/**
 * webgl有效的纹理单元
 * 经过测试最大的纹理单元数目是32个
 */
exports.glTEXTURE_UNIT_VALID = [
    "TEXTURE0", "TEXTURE1", "TEXTURE2", "TEXTURE3", "TEXTURE4", "TEXTURE5", "TEXTURE6", "TEXTURE7",
    "TEXTURE8", "TEXTURE9", "TEXTURE10", "TEXTURE11", "TEXTURE12", "TEXTURE13", "TEXTURE14", "TEXTURE15",
    "TEXTURE16", "TEXTURE17", "TEXTURE18", "TEXTURE19", "TEXTURE20", "TEXTURE21", "TEXTURE22", "TEXTURE23",
    "TEXTURE24", "TEXTURE25", "TEXTURE26", "TEXTURE27", "TEXTURE28", "TEXTURE29", "TEXTURE30", "TEXTURE31",
];
// render-buffer format
exports.glrender_buffer_format = {
    RGBA4: 32854,
    RGB5_A1: 32855,
    RGB565: 36194,
    D16: 33189,
    S8: 36168,
    D24S8: 34041,
};
// cull
exports.glcull = {
    NONE: 0,
    FRONT: 1028,
    BACK: 1029,
    FRONT_AND_BACK: 1032,
};
// stencil operation
exports.glstencil_operation = {
    DISABLE: 0,
    ENABLE: 1,
    INHERIT: 2,
    OP_KEEP: 7680,
    OP_ZERO: 0,
    OP_REPLACE: 7681,
    OP_INCR: 7682,
    OP_INCR_WRAP: 34055,
    OP_DECR: 7683,
    OP_DECR_WRAP: 34056,
    OP_INVERT: 5386,
};
// depth and stencil function
// 简写"ds"
exports.gldepth_stencil_func = {
    NEVER: 512,
    LESS: 513,
    EQUAL: 514,
    LEQUAL: 515,
    GREATER: 516,
    NOTEQUAL: 517,
    GEQUAL: 518,
    ALWAYS: 519,
};
// index buffer format
exports.glindex_buffer_format = {
    INDEX_FMT_UINT8: 5121,
    INDEX_FMT_UINT16: 5123,
    INDEX_FMT_UINT32: 5125,
};
// buffer usage
exports.glbuffer_usage = {
    USAGE_STATIC: 35044,
    USAGE_DYNAMIC: 35048,
    USAGE_STREAM: 35040,
};
// blend-func
exports.glblend_func = {
    ADD: 32774,
    SUBTRACT: 32778,
    REVERSE_SUBTRACT: 32779,
};
// blend
exports.glblend = {
    ZERO: 0,
    ONE: 1,
    SRC_COLOR: 768,
    ONE_MINUS_SRC_COLOR: 769,
    DST_COLOR: 774,
    ONE_MINUS_DST_COLOR: 775,
    SRC_ALPHA: 770,
    ONE_MINUS_SRC_ALPHA: 771,
    DST_ALPHA: 772,
    ONE_MINUS_DST_ALPHA: 773,
    CONSTANT_COLOR: 32769,
    ONE_MINUS_CONSTANT_COLOR: 32770,
    CONSTANT_ALPHA: 32771,
    ONE_MINUS_CONSTANT_ALPHA: 32772,
    SRC_ALPHA_SATURATE: 776,
};
/**
 * @method glFilter
 * @param {WebGLContext} gl
 * @param {FILTER_*} filter
 * @param {FILTER_*} mipFilter
 */
function glFilter(gl, filter, mipFilter) {
    if (mipFilter === void 0) { mipFilter = -1; }
    var result = _filterGL[filter][mipFilter + 1];
    if (result === undefined) {
        console.warn("Unknown FILTER: " + filter);
        return mipFilter === -1 ? exports.gltex_filter.LINEAR : exports.gltex_filter.LINEAR_MIPMAP_LINEAR;
    }
    return result;
}
exports.glFilter = glFilter;
/**
 * @method glTextureFmt
 * @param {gltex_format} fmt
 * @return {format,internalFormat,pixelType} result
 */
function glTextureFmtInfor(fmt) {
    var result = _textureFmtGL[fmt];
    if (result === undefined) {
        console.warn("Unknown TEXTURE_FMT: " + fmt);
        return _textureFmtGL[16 /* RGBA8 */];
    }
    return result;
}
exports.glTextureFmtInfor = glTextureFmtInfor;
/*
format                type            通道数 通道总字节数
RGBA         	 UNSIGNED_BYTE	        4	    4
RGB	             UNSIGNED_BYTE	        3	    3
RGBA             UNSIGNED_SHORT_4_4_4_4	4	    2
RGBA         	 UNSIGNED_SHORT_5_5_5_1	4	    2
RGB	             UNSIGNED_SHORT_5_6_5   3	    2
LUMINANCE_ALPHA	 UNSIGNED_BYTE       	2	    2
LUMINANCE   	 UNSIGNED_BYTE      	1	    1
ALPHA       	 UNSIGNED_BYTE       	1	    1
*/
var glformat_type_bytes = {};
glformat_type_bytes[6408 /* RGBA */] = {};
glformat_type_bytes[6407 /* RGB */] = {};
glformat_type_bytes[6410 /* LUMINANCE_ALPHA */] = {};
glformat_type_bytes[6409 /* LUMINANCE */] = {};
glformat_type_bytes[6406 /* ALPHA */] = {};
glformat_type_bytes[6408 /* RGBA */][5121 /* UNSIGNED_BYTE */] = 4;
glformat_type_bytes[6407 /* RGB */][5121 /* UNSIGNED_BYTE */] = 3;
glformat_type_bytes[6408 /* RGBA */][32819 /* UNSIGNED_SHORT_4_4_4_4 */] = 2;
glformat_type_bytes[6408 /* RGBA */][32820 /* UNSIGNED_SHORT_5_5_5_1 */] = 2;
glformat_type_bytes[6407 /* RGB */][33635 /* UNSIGNED_SHORT_5_6_5 */] = 2;
glformat_type_bytes[6410 /* LUMINANCE_ALPHA */][5121 /* UNSIGNED_BYTE */] = 2;
glformat_type_bytes[6409 /* LUMINANCE */][5121 /* UNSIGNED_BYTE */] = 1;
glformat_type_bytes[6406 /* ALPHA */][5121 /* UNSIGNED_BYTE */] = 1;
var glformat_type_chanels = {};
glformat_type_chanels[6408 /* RGBA */] = {};
glformat_type_chanels[6407 /* RGB */] = {};
glformat_type_chanels[6410 /* LUMINANCE_ALPHA */] = {};
glformat_type_chanels[6409 /* LUMINANCE */] = {};
glformat_type_chanels[6406 /* ALPHA */] = {};
glformat_type_chanels[6408 /* RGBA */][5121 /* UNSIGNED_BYTE */] = 4;
glformat_type_chanels[6407 /* RGB */][5121 /* UNSIGNED_BYTE */] = 3;
glformat_type_chanels[6408 /* RGBA */][32819 /* UNSIGNED_SHORT_4_4_4_4 */] = 4;
glformat_type_chanels[6408 /* RGBA */][32820 /* UNSIGNED_SHORT_5_5_5_1 */] = 4;
glformat_type_chanels[6407 /* RGB */][33635 /* UNSIGNED_SHORT_5_6_5 */] = 3;
glformat_type_chanels[6410 /* LUMINANCE_ALPHA */][5121 /* UNSIGNED_BYTE */] = 2;
glformat_type_chanels[6409 /* LUMINANCE */][5121 /* UNSIGNED_BYTE */] = 1;
glformat_type_chanels[6406 /* ALPHA */][5121 /* UNSIGNED_BYTE */] = 1;
/**
 * 获取纹理的通道数
 * @method glTextureChanelTotalBytes
 * @param {gltex_format} fmt
 */
function glTextureTotalChanels(fmt) {
    var result = glTextureFmtInfor(fmt);
    var re = glformat_type_chanels[result.format][result.pixelType];
    if (!re) {
        console.warn("glTextureTotalChanels 报错,", result);
        re = 0;
    }
    return re;
}
exports.glTextureTotalChanels = glTextureTotalChanels;
/**
 * 获取纹理的通道字节数
 * @method glTextureChanelTotalBytes
 * @param {gltex_format} fmt
 */
function glTextureChanelTotalBytes(fmt) {
    var result = glTextureFmtInfor(fmt);
    var re = glformat_type_bytes[result.format][result.pixelType];
    if (!re) {
        console.warn("glTextureChanelTotalBytes 报错,", result);
        re = 0;
    }
    return re;
}
exports.glTextureChanelTotalBytes = glTextureChanelTotalBytes;
},{}],35:[function(require,module,exports){
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GLapi = exports.glEnums = exports.glErrors = void 0;
exports.glErrors = (_a = {},
    _a[1] = { error: "failed to compile shader: ERROR: 0:1 : No prceision specified for (float)",
        reason: "没有在片元着色器中指定float的精度" },
    _a[2] = { error: "类型不匹配", reason: "编程的时候，如果浮点数刚好是0、1等整数值，要注意书写为0.0,1.0，\
    不能省略点，如果直接写0、1等形式，系统会识别为整型数，进行运算的过程中，如果把数据类型搞错可能会报错" },
    _a[3] = { error: "WebGL: INVALID_OPERATION: texImage2D: ArrayBufferView not big enough for request",
        reason: "我们传入的纹理数据和纹理格式不匹配，纹理数据有宽高,纹理格式会决定每一个像素取几个纹理数据" },
    _a);
/**
 * enums
 */
exports.glEnums = {
    // buffer usage
    USAGE_STATIC: 35044,
    USAGE_DYNAMIC: 35048,
    USAGE_STREAM: 35040,
    // index buffer format
    INDEX_FMT_UINT8: 5121,
    INDEX_FMT_UINT16: 5123,
    INDEX_FMT_UINT32: 5125,
    // vertex attribute semantic
    ATTR_POSITION: 'a_position',
    ATTR_NORMAL: 'a_normal',
    ATTR_TANGENT: 'a_tangent',
    ATTR_BITANGENT: 'a_bitangent',
    ATTR_WEIGHTS: 'a_weights',
    ATTR_JOINTS: 'a_joints',
    ATTR_COLOR: 'a_color',
    ATTR_COLOR0: 'a_color0',
    ATTR_COLOR1: 'a_color1',
    ATTR_UV: 'a_uv',
    ATTR_UV0: 'a_uv0',
    ATTR_UV1: 'a_uv1',
    ATTR_UV2: 'a_uv2',
    ATTR_UV3: 'a_uv3',
    ATTR_UV4: 'a_uv4',
    ATTR_UV5: 'a_uv5',
    ATTR_UV6: 'a_uv6',
    ATTR_UV7: 'a_uv7',
    ATTR_TEX_COORD: 'a_texCoord',
    ATTR_TEX_COORD1: 'a_texCoord1',
    ATTR_TEX_COORD2: 'a_texCoord2',
    ATTR_TEX_COORD3: 'a_texCoord3',
    ATTR_TEX_COORD4: 'a_texCoord4',
    ATTR_TEX_COORD5: 'a_texCoord5',
    ATTR_TEX_COORD6: 'a_texCoord6',
    ATTR_TEX_COORD7: 'a_texCoord7',
    ATTR_TEX_COORD8: 'a_texCoord8',
    // vertex attribute type
    ATTR_TYPE_INT8: 5120,
    ATTR_TYPE_UINT8: 5121,
    ATTR_TYPE_INT16: 5122,
    ATTR_TYPE_UINT16: 5123,
    ATTR_TYPE_INT32: 5124,
    ATTR_TYPE_UINT32: 5125,
    ATTR_TYPE_FLOAT32: 5126,
    // texture filter
    FILTER_NEAREST: 0,
    FILTER_LINEAR: 1,
    // texture wrap mode
    WRAP_REPEAT: 10497,
    WRAP_CLAMP: 33071,
    WRAP_MIRROR: 33648,
    // texture format
    // compress formats
    TEXTURE_FMT_RGB_DXT1: 0,
    TEXTURE_FMT_RGBA_DXT1: 1,
    TEXTURE_FMT_RGBA_DXT3: 2,
    TEXTURE_FMT_RGBA_DXT5: 3,
    TEXTURE_FMT_RGB_ETC1: 4,
    TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
    TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
    TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
    TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
    // normal formats
    TEXTURE_FMT_A8: 9,
    TEXTURE_FMT_L8: 10,
    TEXTURE_FMT_L8_A8: 11,
    TEXTURE_FMT_R5_G6_B5: 12,
    TEXTURE_FMT_R5_G5_B5_A1: 13,
    TEXTURE_FMT_R4_G4_B4_A4: 14,
    TEXTURE_FMT_RGB8: 15,
    TEXTURE_FMT_RGBA8: 16,
    TEXTURE_FMT_RGB16F: 17,
    TEXTURE_FMT_RGBA16F: 18,
    TEXTURE_FMT_RGB32F: 19,
    TEXTURE_FMT_RGBA32F: 20,
    TEXTURE_FMT_R32F: 21,
    TEXTURE_FMT_111110F: 22,
    TEXTURE_FMT_SRGB: 23,
    TEXTURE_FMT_SRGBA: 24,
    // depth formats
    TEXTURE_FMT_D16: 25,
    TEXTURE_FMT_D32: 26,
    TEXTURE_FMT_D24S8: 27,
    // etc2 format
    TEXTURE_FMT_RGB_ETC2: 28,
    TEXTURE_FMT_RGBA_ETC2: 29,
    // depth and stencil function
    DS_FUNC_NEVER: 512,
    DS_FUNC_LESS: 513,
    DS_FUNC_EQUAL: 514,
    DS_FUNC_LEQUAL: 515,
    DS_FUNC_GREATER: 516,
    DS_FUNC_NOTEQUAL: 517,
    DS_FUNC_GEQUAL: 518,
    DS_FUNC_ALWAYS: 519,
    // render-buffer format
    RB_FMT_RGBA4: 32854,
    RB_FMT_RGB5_A1: 32855,
    RB_FMT_RGB565: 36194,
    RB_FMT_D16: 33189,
    RB_FMT_S8: 36168,
    RB_FMT_D24S8: 34041,
    // blend-equation
    BLEND_FUNC_ADD: 32774,
    BLEND_FUNC_SUBTRACT: 32778,
    BLEND_FUNC_REVERSE_SUBTRACT: 32779,
    // blend
    BLEND_ZERO: 0,
    BLEND_ONE: 1,
    BLEND_SRC_COLOR: 768,
    BLEND_ONE_MINUS_SRC_COLOR: 769,
    BLEND_DST_COLOR: 774,
    BLEND_ONE_MINUS_DST_COLOR: 775,
    BLEND_SRC_ALPHA: 770,
    BLEND_ONE_MINUS_SRC_ALPHA: 771,
    BLEND_DST_ALPHA: 772,
    BLEND_ONE_MINUS_DST_ALPHA: 773,
    BLEND_CONSTANT_COLOR: 32769,
    BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
    BLEND_CONSTANT_ALPHA: 32771,
    BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
    BLEND_SRC_ALPHA_SATURATE: 776,
    // stencil operation
    STENCIL_DISABLE: 0,
    STENCIL_ENABLE: 1,
    STENCIL_INHERIT: 2,
    STENCIL_OP_KEEP: 7680,
    STENCIL_OP_ZERO: 0,
    STENCIL_OP_REPLACE: 7681,
    STENCIL_OP_INCR: 7682,
    STENCIL_OP_INCR_WRAP: 34055,
    STENCIL_OP_DECR: 7683,
    STENCIL_OP_DECR_WRAP: 34056,
    STENCIL_OP_INVERT: 5386,
    // cull
    CULL_NONE: 0,
    CULL_FRONT: 1028,
    CULL_BACK: 1029,
    CULL_FRONT_AND_BACK: 1032,
    // primitive type
    PT_POINTS: 0,
    PT_LINES: 1,
    PT_LINE_LOOP: 2,
    PT_LINE_STRIP: 3,
    PT_TRIANGLES: 4,
    PT_TRIANGLE_STRIP: 5,
    PT_TRIANGLE_FAN: 6,
};
var GLapi;
(function (GLapi) {
    //本地opegl上下文
    var gl;
    //此函数务必调用
    function bindGL(glT) {
        gl = glT;
        GLapi.glTEXTURE_MAG_FILTER = gl.TEXTURE_MAG_FILTER;
        GLapi.glTEXTURE_MIN_FILTER = gl.TEXTURE_MIN_FILTER;
    }
    GLapi.bindGL = bindGL;
    /**
 * @method attrTypeBytes
 * @param {ATTR_TYPE_*} attrType
 */
    function attrTypeBytes(attrType) {
        if (attrType === exports.glEnums.ATTR_TYPE_INT8) {
            return 1;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT8) {
            return 1;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_INT16) {
            return 2;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT16) {
            return 2;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_INT32) {
            return 4;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_UINT32) {
            return 4;
        }
        else if (attrType === exports.glEnums.ATTR_TYPE_FLOAT32) {
            return 4;
        }
        console.warn("Unknown ATTR_TYPE: " + attrType);
        return 0;
    }
    GLapi.attrTypeBytes = attrTypeBytes;
    /**
     * 将buffer绑定到目标缓冲区
     * @param target
     * GLenum指定结合点（目标）。可能的值：
        gl.ARRAY_BUFFER：包含顶点属性的缓冲区，例如顶点坐标，纹理坐标数据或顶点颜色数据。
        gl.ELEMENT_ARRAY_BUFFER：用于元素索引的缓冲区。
        使用WebGL 2上下文时，还可以使用以下值：
        gl.COPY_READ_BUFFER：用于从一个缓冲区对象复制到另一个缓冲区对象的缓冲区。
        gl.COPY_WRITE_BUFFER：用于从一个缓冲区对象复制到另一个缓冲区对象的缓冲区。
        gl.TRANSFORM_FEEDBACK_BUFFER：用于变换反馈操作的缓冲区。
        gl.UNIFORM_BUFFER：用于存储统一块的缓冲区。
        gl.PIXEL_PACK_BUFFER：用于像素传输操作的缓冲区。
        gl.PIXEL_UNPACK_BUFFER：用于像素传输操作的缓冲区。
     * @param buffer
     */
    function bindBuffer(target, buffer) {
        gl.bindBuffer(target, buffer);
    }
    GLapi.bindBuffer = bindBuffer;
    /**
     * @param mode
     * 枚举类型 指定要渲染的图元类型。可以是以下类型:
        gl.POINTS: 画单独的点。
        gl.LINE_STRIP: 画一条直线到下一个顶点。
        gl.LINE_LOOP: 绘制一条直线到下一个顶点，并将最后一个顶点返回到第一个顶点.
        gl.LINES: 在一对顶点之间画一条线.
        gl.TRIANGLE_STRIP
        gl.TRIANGLE_FAN
        gl.TRIANGLES: 为一组三个顶点绘制一个三角形.
     * @param count
        整数型 指定要渲染的元素数量
     * @param type
        枚举类型 指定元素数组缓冲区中的值的类型。可能的值是:
        gl.UNSIGNED_BYTE
        gl.UNSIGNED_SHORT
        当使用 OES_element_index_uint 扩展时:
        gl.UNSIGNED_INT
     * @param offset
         字节单位 指定元素数组缓冲区中的偏移量。必须是给定类型大小的有效倍数
        @returns
        none
        @error
        如果 mode 不是正确值,  gl.INVALID_ENUM 将会抛出错误异常.
        如果offset 不是给定类型大小的有效倍数, gl.INVALID_OPERATION 将会抛出错误异常.
        如果 count 是负的,  gl.INVALID_VALUE 将会抛出错误异常.
     */
    function drawElements(mode, count, type, offset) {
        gl.drawElements(mode, count, type, offset);
    }
    GLapi.drawElements = drawElements;
    /**
     *
     * @param mode
     * GLenum 类型，指定绘制图元的方式，可能值如下。
        gl.POINTS: 绘制一系列点。
        gl.LINE_STRIP: 绘制一个线条。即，绘制一系列线段，上一点连接下一点。
        gl.LINE_LOOP: 绘制一个线圈。即，绘制一系列线段，上一点连接下一点，并且最后一点与第一个点相连。
        gl.LINES: 绘制一系列单独线段。每两个点作为端点，线段之间不连接。
        gl.TRIANGLE_STRIP：绘制一个三角带。
        gl.TRIANGLE_FAN：绘制一个三角扇。
        gl.TRIANGLES: 绘制一系列三角形。每三个点作为顶点
     * @param first
        GLint 类型 ，指定从哪个点开始绘制
     * @param count
        GLsizei 类型，指定绘制需要使用到多少个点
     @returns
     none
     @error
        如果 mode 不是一个可接受值，将会抛出 gl.INVALID_ENUM 异常。
        如果 first 或者 count 是负值，会抛出 gl.INVALID_VALUE 异常。
        如果 gl.CURRENT_PROGRAM 为 null，会抛出 gl.INVALID_OPERATION 异常
     */
    function drawArrays(mode, first, count) {
        gl.drawArrays(mode, first, count);
    }
    GLapi.drawArrays = drawArrays;
    /*
        // WebGL1:
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);
    void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);
    // WebGL2:
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);
    void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);
    */
    /**
     *
     * @param target
     *    GLenum 指定纹理的绑定对象.可能的值:
             gl.TEXTURE_2D: 二维纹理贴图.
             gl.TEXTURE_CUBE_MAP_POSITIVE_X:立方体映射纹理的正X面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_X: 立方体映射纹理的负X面。
             gl.TEXTURE_CUBE_MAP_POSITIVE_Y: 立方体映射纹理的正Y面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_Y: 立方体映射纹理的负Y面。
             gl.TEXTURE_CUBE_MAP_POSITIVE_Z: 立方体映射纹理的正Z面。
             gl.TEXTURE_CUBE_MAP_NEGATIVE_Z: 立方体映射纹理的负Z面。
     * @param level
     *  GLint 指定详细级别. 0级是基本图像等级，n级是第n个金字塔简化级.
     * @param internalformat
     * @param width
     *  GLsizei 指定纹理的宽度
     * @param height
     * GLsizei 指定纹理的高度
     * @param border
     * GLint 指定纹理的边框宽度。必须为 0
     * @param format
     *  GLenum 指定texel数据格式。在 WebGL 1中，它必须与 internalformat 相同（查看上面). 在WebGL 2中, 这张表中列出了这些组合
     * @param type
     * GLenum 指定texel数据的数据类型。可能的值:
         gl.UNSIGNED_BYTE:  gl.RGBA每个通道8位
         gl.UNSIGNED_SHORT_5_6_5: 5 bits红, 6 bits绿, 5 bits蓝
         gl.UNSIGNED_SHORT_4_4_4_4: 4 bits红, 4 bits绿, 4 bits蓝, 4 alpha bits.
         gl.UNSIGNED_SHORT_5_5_5_1: 5 bits红, 5 bits绿, 5 bits蓝, 1 alpha bit.
         当使用 WEBGL_depth_texture 扩展:
         gl.UNSIGNED_SHORT
         gl.UNSIGNED_INT
         ext.UNSIGNED_INT_24_8_WEBGL (constant provided by the extension)
         当使用 OES_texture_float扩展 :
         gl.FLOAT
         当使用 OES_texture_half_float 扩展:
         ext.HALF_FLOAT_OES (constant provided by the extension)
         当使用 WebGL 2 context,下面的值也是可用的:
         gl.BYTE
         gl.UNSIGNED_SHORT
         gl.SHORT
         gl.UNSIGNED_INT
         gl.INT
         gl.HALF_FLOAT
         gl.FLOAT
         gl.UNSIGNED_INT_2_10_10_10_REV
         gl.UNSIGNED_INT_10F_11F_11F_REV
         gl.UNSIGNED_INT_5_9_9_9_REV
         gl.UNSIGNED_INT_24_8
         gl.FLOAT_32_UNSIGNED_INT_24_8_REV (pixels must be null)
     * @param pixels
     * 下列对象之一可以用作纹理的像素源:
         ArrayBufferView,
         Uint8Array  如果 type 是 gl.UNSIGNED_BYTE则必须使用
         Uint16Array 如果 type 是 gl.UNSIGNED_SHORT_5_6_5, gl.UNSIGNED_SHORT_4_4_4_4, gl.UNSIGNED_SHORT_5_5_5_1, gl.UNSIGNED_SHORT 或ext.HALF_FLOAT_OES则必须使用
         Uint32Array 如果type 是 gl.UNSIGNED_INT 或ext.UNSIGNED_INT_24_8_WEBGL则必须使用
     */
    function texImage2D(target, level, internalformat, width, height, border, format, type, pixels) {
        gl.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    }
    GLapi.texImage2D = texImage2D;
    /**
     * 图像预处理函数
     * 规定了图像如何从内存中读出，又或者如何从显存读入内存
     * @param pname
     *  Glenum 类型 ，表示处理的方式。关于该参数可选值，请见下面表格
     * @param param
     *  GLint  类型，表示 pname 处理方式的参数。关于该参数可选值，请见下面表格
     * 支持的平台webgl 1.0,opengl es 2.0
     * pname                                   default            param          des
     * gl.PACK_ALIGNMENT                         4             1, 2, 4, 8       将像素数据打包到内存中（从显存将数据发往内存）
     * gl.UNPACK_ALIGNMENT                       4             1, 2, 4, 8       从内存中解包像素数据(接完以后发往显存)
     * gl.UNPACK_FLIP_Y_WEBGL                    false         true,false       如果为true，则把图片上下对称翻转坐标轴(图片本身不变)
     * gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL         false         true, false      将alpha通道乘以其他颜色通道
     * gl.UNPACK_COLORSPACE_CONVERSION_WEBGL  (gl.BROWSER_DEFAULT_WEBGL) (gl.BROWSER_DEFAULT_WEBGL, gl.NONE) 默认颜色空间转换或无颜色空间转换
     *
     */
    function pixelStorei(pname, param) {
        gl.pixelStorei(pname, param);
    }
    GLapi.pixelStorei = pixelStorei;
    function texParameterf(target, pname, param) {
        gl.texParameterf(target, pname, param);
    }
    GLapi.texParameterf = texParameterf;
    /**
     * 设置纹理过滤的属性
     * 当图片进行一些变换诸如放大缩小等，如何从纹理中取数据
     * @param target
     * GLenum 指定绑定点(目标)。可能的值：
                gl.TEXTURE_2D: 二维纹理.
                gl.TEXTURE_CUBE_MAP: 立方体纹理.
                当使用 WebGL 2 context 时,还可以使用以下值
                gl.TEXTURE_3D: 三维贴图.
                gl.TEXTURE_2D_ARRAY: 二维数组贴图.
     * @param pname
     * @param param
     *
     *  gl.TEXTURE_MAG_FILTER	纹理放大滤波器	gl.LINEAR (默认值), gl.NEAREST.
        gl.TEXTURE_MIN_FILTER	纹理缩小滤波器	gl.LINEAR, gl.NEAREST, gl.NEAREST_MIPMAP_NEAREST, gl.LINEAR_MIPMAP_NEAREST, gl.NEAREST_MIPMAP_LINEAR (默认值), gl.LINEAR_MIPMAP_LINEAR.
        gl.TEXTURE_WRAP_S	纹理坐标水平填充 s	gl.REPEAT (默认值),gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        gl.TEXTURE_WRAP_T	纹理坐标垂直填充 t	gl.REPEAT (默认值),gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        Additionally available when using the EXT_texture_filter_anisotropic extension
        ext.TEXTURE_MAX_ANISOTROPY_EXT	纹理最大向异性	 GLfloat 值.
        Additionally available when using a WebGL 2 context
        gl.TEXTURE_BASE_LEVEL	纹理映射等级	任何整型值.
        gl.TEXTURE_COMPARE_FUNC	纹理对比函数	gl.LEQUAL (默认值), gl.GEQUAL, gl.LESS, gl.GREATER, gl.EQUAL, gl.NOTEQUAL, gl.ALWAYS, gl.NEVER.
        gl.TEXTURE_COMPARE_MODE	纹理对比模式	gl.NONE (默认值), gl.COMPARE_REF_TO_TEXTURE.
        gl.TEXTURE_MAX_LEVEL	最大纹理映射数组等级	任何整型值.
        gl.TEXTURE_MAX_LOD	纹理最大细节层次值	任何整型值.
        gl.TEXTURE_MIN_LOD	纹理最小细节层次值	任何浮点型值.
        gl.TEXTURE_WRAP_R	纹理坐标r包装功能	gl.REPEAT (默认值), gl.CLAMP_TO_EDGE, gl.MIRRORED_REPEAT.
        @error
        INVALID_ENUM target不是合法的值。
        INVALID_OPRATION 当前目标上没有绑定纹理对象
     */
    function texParameteri(target, pname, param) {
        gl.texParameteri(target, pname, param);
    }
    GLapi.texParameteri = texParameteri;
    /**
     * 获取shader中attribute下对应的属性位置
     * @param program shader的glID
     * @param name 属性的名字
     * @returns
     * 表明属性位置的下标 GLint 数字，如果找不到该属性则返回-1
     */
    function getAttribLocation(program, name) {
        return gl.getAttribLocation(program, name);
    }
    GLapi.getAttribLocation = getAttribLocation;
    /**
     * 激活顶点属性
     * @param index
     * 类型为GLuint 的索引，指向要激活的顶点属性。如果您只知道属性的名称，不知道索引，
     * 您可以使用以下方法来获取索引getAttribLocation()
     *
     * 特别说明
     * 在WebGL中，作用于顶点的数据会先储存在attributes。
     * 这些数据仅对JavaScript代码和顶点着色器可用。
     * 属性由索引号引用到GPU维护的属性列表中。在不同的平台或GPU上，某些顶点属性索引可能具有预定义的值。
     * 创建属性时，WebGL层会分配其他属性。
       无论怎样，都需要你使用enableVertexAttribArray()方法，来激活每一个属性以便使用，不被激活的属性是不会被使用的。
       一旦激活，以下其他方法就可以获取到属性的值了，
       包括vertexAttribPointer()，vertexAttrib*()，和 getVertexAttrib()
       @error
       您可以使用getError()方法，来检查使用enableVertexAttribArray()时发生的错误。
       WebGLRenderingContext.INVALID_VALUE 非法的 index 。
       一般是 index 大于或等于了顶点属性列表允许的最大值。该值可以通过 WebGLRenderingContext.MAX_VERTEX_ATTRIBS获取
     */
    function enableVertexAttribArray(index) {
        gl.enableVertexAttribArray(index);
    }
    GLapi.enableVertexAttribArray = enableVertexAttribArray;
    /**
     * 方法在给定的索引位置关闭通用顶点属性数组
     * @param index
     * shader 变量的位置
     */
    function disableVertexAttribArray(index) {
        gl.disableVertexAttribArray(index);
    }
    GLapi.disableVertexAttribArray = disableVertexAttribArray;
    /**
     * 告诉显卡从当前绑定的缓冲区（bindBuffer()指定的缓冲区）中读取顶点数据。
       WebGL API 的WebGLRenderingContext.vertexAttribPointer()方法绑定当前缓冲区范围到gl.ARRAY_BUFFER,
       成为当前顶点缓冲区对象的通用顶点属性并指定它的布局(缓冲区对象中的偏移量)
     * @param index
       指定要修改的顶点属性的索引 其实就是某个attribute变量在shader中的位置
     * @param size
       指定每个顶点属性的组成数量，必须是1，2，3或4
     * @param type
        指定数组中每个元素的数据类型可能是：
            gl.BYTE: signed 8-bit integer, with values in [-128, 127]
            有符号的8位整数，范围[-128, 127]
            gl.SHORT: signed 16-bit integer, with values in [-32768, 32767]
            有符号的16位整数，范围[-32768, 32767]
            gl.UNSIGNED_BYTE: unsigned 8-bit integer, with values in [0, 255]
            无符号的8位整数，范围[0, 255]
            gl.UNSIGNED_SHORT: unsigned 16-bit integer, with values in [0, 65535]
            无符号的16位整数，范围[0, 65535]
            gl.FLOAT: 32-bit IEEE floating point number
            32位IEEE标准的浮点数
            When using a WebGL 2 context, the following values are available additionally:
            使用WebGL2版本的还可以使用以下值：
            gl.HALF_FLOAT: 16-bit IEEE floating point number
            16位IEEE标准的浮点数
     * @param normalized
        当转换为浮点数时是否应该将整数数值归一化到特定的范围。
            For types gl.BYTE and gl.SHORT, normalizes the values to [-1, 1] if true.
            对于类型gl.BYTE和gl.SHORT，如果是true则将值归一化为[-1, 1]
            For types gl.UNSIGNED_BYTE and gl.UNSIGNED_SHORT, normalizes the values to [0, 1] if true.
            对于类型gl.UNSIGNED_BYTE和gl.UNSIGNED_SHORT，如果是true则将值归一化为[0, 1]
            For types gl.FLOAT and gl.HALF_FLOAT, this parameter has no effect.
            对于类型gl.FLOAT和gl.HALF_FLOAT，此参数无效
     * @param stride
        一个GLsizei，以字节为单位指定连续顶点属性开始之间的偏移量(即数组中一行长度)。
        不能大于255。如果stride为0，则假定该属性是紧密打包的，即不交错属性，
        每个属性在一个单独的块中，下一个顶点的属性紧跟当前顶点之后
     * @param offset
         GLintptr指定顶点属性数组中第一部分的字节偏移量。必须是类型的字节长度的倍数

        @error
        A gl.INVALID_VALUE error is thrown if offset is negative.
        如果偏移量为负，则抛出gl.INVALID_VALUE错误。
        A gl.INVALID_OPERATION error is thrown if stride and offset are not multiples of the size of the data type.
        如果stride和offset不是数据类型大小的倍数，则抛出gl.INVALID_OPERATION错误。
        A gl.INVALID_OPERATION error is thrown if no WebGLBuffer is bound to the ARRAY_BUFFER target.
        如果没有将WebGLBuffer绑定到ARRAY_BUFFER目标，则抛出gl.INVALID_OPERATION错误。
        When using a WebGL 2 context
        a gl.INVALID_OPERATION error is thrown if this vertex attribute is defined as a integer in the vertex shader (e.g. uvec4 or ivec4, instead of vec4).
     */
    function vertexAttribPointer(index, size, type, normalized, stride, offset) {
        gl.vertexAttribPointer(index, size, type, normalized, stride, offset);
    }
    GLapi.vertexAttribPointer = vertexAttribPointer;
    /**
     * 设置缓冲区大小
     * @param target
     * @param size
     * GLsizeiptr 设定Buffer对象的数据存储区大小
     * @param usage
     */
    function bufferDataLength(target, size, usage) {
        gl.bufferData(target, size, usage);
    }
    GLapi.bufferDataLength = bufferDataLength;
    function bufferData(target, srcData, usage) {
        gl.bufferData(target, srcData, usage);
    }
    GLapi.bufferData = bufferData;
    function bufferSubData(target, offset, srcData) {
        gl.bufferSubData(target, offset, srcData);
    }
    GLapi.bufferSubData = bufferSubData;
    /**
     *
     * @param target
     * GLenum 指定Buffer绑定点（目标）。可取以下值：
        gl.ARRAY_BUFFER: 包含顶点属性的Buffer，如顶点坐标，纹理坐标数据或顶点颜色数据。
        gl.ELEMENT_ARRAY_BUFFER: 用于元素索引的Buffer。
        当使用 WebGL 2 context 时，可以使用以下值：
        gl.COPY_READ_BUFFER: 从一个Buffer对象复制到另一个Buffer对象。
        gl.COPY_WRITE_BUFFER: 从一个Buffer对象复制到另一个Buffer对象。
        gl.TRANSFORM_FEEDBACK_BUFFER: 用于转换反馈操作的Buffer。
        gl.UNIFORM_BUFFER: 用于存储统一块的Buffer。
        gl.PIXEL_PACK_BUFFER: 用于像素转换操作的Buffer。
        gl.PIXEL_UNPACK_BUFFER: 用于像素转换操作的Buffer
     * @param srcData
        一个ArrayBuffer，SharedArrayBuffer 或者 ArrayBufferView 类型的数组对象，将被复制到Buffer的数据存储区。
         如果为null，数据存储区仍会被创建，但是不会进行初始化和定义
     * @param usage
         GLenum 指定数据存储区的使用方法。可取以下值：
            gl.STATIC_DRAW: 缓冲区的内容可能经常使用，而不会经常更改。内容被写入缓冲区，但不被读取。
            gl.DYNAMIC_DRAW: 缓冲区的内容可能经常被使用，并且经常更改。内容被写入缓冲区，但不被读取。
            gl.STREAM_DRAW: 缓冲区的内容可能不会经常使用。内容被写入缓冲区，但不被读取。
            当使用 WebGL 2 context 时，可以使用以下值：
            gl.STATIC_READ: 缓冲区的内容可能经常使用，而不会经常更改。内容从缓冲区读取，但不写入。
            gl.DYNAMIC_READ: 缓冲区的内容可能经常使用，并且经常更改。内容从缓冲区读取，但不写入。
            gl.STREAM_READ: 缓冲区的内容可能不会经常使用。内容从缓冲区读取，但不写入。
            gl.STATIC_COPY: 缓冲区的内容可能经常使用，而不会经常更改。用户不会从缓冲区读取内容，也不写入。
            gl.DYNAMIC_COPY: 缓冲区的内容可能经常使用，并且经常更改。用户不会从缓冲区读取内容，也不写入。
            gl.STREAM_COPY: 缓冲区的内容可能不会经常使用。用户不会从缓冲区读取内容，也不写入
     * @param srcOffset
           GLuint 指定读取缓冲时的初始元素索引偏移量
     * @param length
            GLuint 默认为0
        @error
            如果无法创建size指定大小的数据存储区，则会抛出gl.OUT_OF_MEMORY异常。
            如果size是负值，则会抛出gl.INVALID_VALUE异常。
            如果target或usage不属于枚举值之列，则会抛出gl.INVALID_ENUM异常
     */
    function bufferDataForWebgl2(target, srcData, usage, srcOffset, length) {
        //gl.bufferData(target, srcData, usage, srcOffset, length)
    }
    GLapi.bufferDataForWebgl2 = bufferDataForWebgl2;
})(GLapi = exports.GLapi || (exports.GLapi = {}));
},{}],36:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.syPrimitives = void 0;
var Matrix_1 = require("../../Matrix");
var Shader_1 = require("./Shader");
/**
 * 绘制中心
 */
var syPrimitives;
(function (syPrimitives) {
    function applyFuncToV3Array(array, matrix, fn) {
        var len = array.length;
        var tmp = new Float32Array(3);
        for (var ii = 0; ii < len; ii += 3) {
            fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);
            array[ii] = tmp[0];
            array[ii + 1] = tmp[1];
            array[ii + 2] = tmp[2];
        }
    }
    function transformNormal(mi, v, dst) {
        dst = dst || new Float32Array(3);
        var v0 = v[0];
        var v1 = v[1];
        var v2 = v[2];
        dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];
        dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];
        dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];
        return dst;
    }
    /**
     * Reorients directions by the given matrix..
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientDirections(array, matrix) {
        applyFuncToV3Array(array, matrix, Matrix_1.glMatrix.mat4.transformDirection);
        return array;
    }
    /**
     * Reorients normals by the inverse-transpose of the given
     * matrix..
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientNormals(array, matrix) {
        var invertM = Matrix_1.glMatrix.mat4.create();
        Matrix_1.glMatrix.mat4.invert(invertM, matrix);
        applyFuncToV3Array(array, invertM, transformNormal);
        return array;
    }
    /**
     * Reorients positions by the given matrix. In other words, it
     * multiplies each vertex by the given matrix.
     * @param {number[]|TypedArray} array The array. Assumes value floats per element.
     * @param {Matrix} matrix A matrix to multiply by.
     * @return {number[]|TypedArray} the same array that was passed in
     * @memberOf module:primitives
     */
    function reorientPositions(array, matrix) {
        applyFuncToV3Array(array, matrix, Matrix_1.glMatrix.mat4.transformPoint);
        return array;
    }
    /**
     * Reorients arrays by the given matrix. Assumes arrays have
     * names that contains 'pos' could be reoriented as positions,
     * 'binorm' or 'tan' as directions, and 'norm' as normals.
     *
     * @param {Object.<string, (number[]|TypedArray)>} arrays The vertices to reorient
     * @param {Matrix} matrix matrix to reorient by.
     * @return {Object.<string, (number[]|TypedArray)>} same arrays that were passed in.
     * @memberOf module:primitives
     */
    function reorientVertices(arrays, matrix) {
        Object.keys(arrays).forEach(function (name) {
            var array = arrays[name];
            if (name.indexOf('pos') >= 0) {
                reorientPositions(array, matrix);
            }
            else if (name.indexOf('tan') >= 0 || name.indexOf('binorm') >= 0) {
                reorientDirections(array, matrix);
            }
            else if (name.indexOf('norm') >= 0) {
                reorientNormals(array, matrix);
            }
        });
        return arrays;
    }
    /**
     * creates a random integer between 0 and range - 1 inclusive.
     * @param {number} range
     * @return {number} random value between 0 and range - 1 inclusive.
     */
    function randInt(range) {
        return Math.random() * range | 0;
    }
    /**
     * Creates XZ plane vertices.
     * The created plane has position, normal and uv streams.
     *
     * @param {number} [width] Width of the plane. Default = 1
     * @param {number} [depth] Depth of the plane. Default = 1
     * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1
     * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1
     * @param {Matrix4} [matrix] A matrix by which to multiply all the vertices.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {
        if (!matrix) {
            matrix = Matrix_1.glMatrix.mat4.create();
            Matrix_1.glMatrix.mat4.identity(matrix);
        }
        width = width || 1;
        depth = depth || 1;
        subdivisionsWidth = subdivisionsWidth || 1;
        subdivisionsDepth = subdivisionsDepth || 1;
        var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);
        var positions = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texcoords = Shader_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        for (var z = 0; z <= subdivisionsDepth; z++) {
            for (var x = 0; x <= subdivisionsWidth; x++) {
                var u = x / subdivisionsWidth;
                var v = z / subdivisionsDepth;
                positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);
                normals.push(0, 1, 0);
                texcoords.push(u, v);
            }
        }
        var numVertsAcross = subdivisionsWidth + 1;
        var indices = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);
        for (var z = 0; z < subdivisionsDepth; z++) {
            for (var x = 0; x < subdivisionsWidth; x++) {
                // Make triangle 1 of quad.
                indices.push((z + 0) * numVertsAcross + x, (z + 1) * numVertsAcross + x, (z + 0) * numVertsAcross + x + 1);
                // Make triangle 2 of quad.
                indices.push((z + 1) * numVertsAcross + x, (z + 1) * numVertsAcross + x + 1, (z + 0) * numVertsAcross + x + 1);
            }
        }
        var arrays = reorientVertices({
            position: positions,
            normal: normals,
            texcoord: texcoords,
            indices: indices,
        }, matrix);
        return arrays;
    }
    syPrimitives.createPlaneVertices = createPlaneVertices;
    /**
     * Creates sphere vertices.
     * The created sphere has position, normal and uv streams.
     * @param {number} radius radius of the sphere.
     * @param {number} subdivisionsAxis number of steps around the sphere.
     * @param {number} subdivisionsHeight number of vertically on the sphere.
     * @param {number} [opt_startLatitudeInRadians] where to start the
     *     top of the sphere. Default = 0.
     * @param {number} [opt_endLatitudeInRadians] Where to end the
     *     bottom of the sphere. Default = Math.PI.
     * @param {number} [opt_startLongitudeInRadians] where to start
     *     wrapping the sphere. Default = 0.
     * @param {number} [opt_endLongitudeInRadians] where to end
     *     wrapping the sphere. Default = 2 * Math.PI.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {
        if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {
            throw Error('subdivisionAxis and subdivisionHeight must be > 0');
        }
        opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;
        opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;
        opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;
        opt_endLongitudeInRadians = opt_endLongitudeInRadians || (Math.PI * 2);
        var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;
        var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians;
        // We are going to generate our sphere by iterating through its
        // spherical coordinates and generating 2 triangles for each quad on a
        // ring of the sphere.
        var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);
        var positions = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texCoords = Shader_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        // Generate the individual vertices in our vertex buffer.
        for (var y = 0; y <= subdivisionsHeight; y++) {
            for (var x = 0; x <= subdivisionsAxis; x++) {
                // Generate a vertex based on its spherical coordinates
                var u = x / subdivisionsAxis;
                var v = y / subdivisionsHeight;
                var theta = longRange * u;
                var phi = latRange * v;
                var sinTheta = Math.sin(theta);
                var cosTheta = Math.cos(theta);
                var sinPhi = Math.sin(phi);
                var cosPhi = Math.cos(phi);
                var ux = cosTheta * sinPhi;
                var uy = cosPhi;
                var uz = sinTheta * sinPhi;
                positions.push(radius * ux, radius * uy, radius * uz);
                normals.push(ux, uy, uz);
                texCoords.push(1 - u, v);
            }
        }
        var numVertsAround = subdivisionsAxis + 1;
        var indices = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);
        for (var x = 0; x < subdivisionsAxis; x++) {
            for (var y = 0; y < subdivisionsHeight; y++) {
                // Make triangle 1 of quad.
                indices.push((y + 0) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x);
                // Make triangle 2 of quad.
                indices.push((y + 1) * numVertsAround + x, (y + 0) * numVertsAround + x + 1, (y + 1) * numVertsAround + x + 1);
            }
        }
        return {
            position: positions,
            normal: normals,
            texcoord: texCoords,
            indices: indices,
        };
    }
    syPrimitives.createSphereVertices = createSphereVertices;
    /**
    * Array of the indices of corners of each face of a cube.
    * @type {Array.<number[]>}
    */
    var CUBE_FACE_INDICES = [
        [3, 7, 5, 1],
        [6, 2, 0, 4],
        [6, 7, 3, 2],
        [0, 1, 5, 4],
        [7, 6, 4, 5],
        [2, 3, 1, 0],
    ];
    /**
     * Creates the vertices and indices for a cube. The
     * cube will be created around the origin. (-size / 2, size / 2)
     *
     * @param {number} size Width, height and depth of the cube.
     * @return {Object.<string, TypedArray>} The
     *         created plane vertices.
     * @memberOf module:primitives
     */
    function createCubeVertices(size) {
        var k = size / 2;
        var cornerVertices = [
            [-k, -k, -k],
            [+k, -k, -k],
            [-k, +k, -k],
            [+k, +k, -k],
            [-k, -k, +k],
            [+k, -k, +k],
            [-k, +k, +k],
            [+k, +k, +k],
        ];
        var faceNormals = [
            [+1, +0, +0],
            [-1, +0, +0],
            [+0, +1, +0],
            [+0, -1, +0],
            [+0, +0, +1],
            [+0, +0, -1],
        ];
        var uvCoords = [
            [1, 0],
            [0, 0],
            [0, 1],
            [1, 1],
        ];
        var numVertices = 6 * 4;
        var positions = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var normals = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVertices);
        var texCoords = Shader_1.G_ShaderFactory.createAugmentedTypedArray(2, numVertices);
        var indices = Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, 6 * 2, Uint16Array);
        for (var f = 0; f < 6; ++f) {
            var faceIndices = CUBE_FACE_INDICES[f];
            for (var v = 0; v < 4; ++v) {
                var position = cornerVertices[faceIndices[v]];
                var normal = faceNormals[f];
                var uv = uvCoords[v];
                // Each face needs all four vertices because the normals and texture
                // coordinates are not all the same.
                positions.push(position);
                normals.push(normal);
                texCoords.push(uv);
            }
            // Two triangles make a square face.
            var offset = 4 * f;
            indices.push(offset + 0, offset + 1, offset + 2);
            indices.push(offset + 0, offset + 2, offset + 3);
        }
        return {
            position: positions,
            normal: normals,
            texcoord: texCoords,
            indices: indices,
        };
    }
    syPrimitives.createCubeVertices = createCubeVertices;
    /**
    * Expands RLE data
    * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z
    * @param {number[]} [padding] value to add each entry with.
    * @return {number[]} the expanded rleData
    */
    function expandRLEData(rleData, padding) {
        padding = padding || [];
        var data = [];
        for (var ii = 0; ii < rleData.length; ii += 4) {
            var runLength = rleData[ii];
            var element = rleData.slice(ii + 1, ii + 4);
            element.push.apply(element, padding);
            for (var jj = 0; jj < runLength; ++jj) {
                data.push.apply(data, element);
            }
        }
        return data;
    }
    syPrimitives.expandRLEData = expandRLEData;
    /**
    * Creates 3D 'F' vertices.
    * An 'F' is useful because you can easily tell which way it is oriented.
    * The created 'F' has position, normal and uv streams.
    *
    * @return {Object.<string, TypedArray>} The
    *         created plane vertices.
    * @memberOf module:primitives
    */
    function create3DFVertices() {
        var positions = [
            // left column front
            0, 0, 0,
            0, 150, 0,
            30, 0, 0,
            0, 150, 0,
            30, 150, 0,
            30, 0, 0,
            // top rung front
            30, 0, 0,
            30, 30, 0,
            100, 0, 0,
            30, 30, 0,
            100, 30, 0,
            100, 0, 0,
            // middle rung front
            30, 60, 0,
            30, 90, 0,
            67, 60, 0,
            30, 90, 0,
            67, 90, 0,
            67, 60, 0,
            // left column back
            0, 0, 30,
            30, 0, 30,
            0, 150, 30,
            0, 150, 30,
            30, 0, 30,
            30, 150, 30,
            // top rung back
            30, 0, 30,
            100, 0, 30,
            30, 30, 30,
            30, 30, 30,
            100, 0, 30,
            100, 30, 30,
            // middle rung back
            30, 60, 30,
            67, 60, 30,
            30, 90, 30,
            30, 90, 30,
            67, 60, 30,
            67, 90, 30,
            // top
            0, 0, 0,
            100, 0, 0,
            100, 0, 30,
            0, 0, 0,
            100, 0, 30,
            0, 0, 30,
            // top rung right
            100, 0, 0,
            100, 30, 0,
            100, 30, 30,
            100, 0, 0,
            100, 30, 30,
            100, 0, 30,
            // under top rung
            30, 30, 0,
            30, 30, 30,
            100, 30, 30,
            30, 30, 0,
            100, 30, 30,
            100, 30, 0,
            // between top rung and middle
            30, 30, 0,
            30, 60, 30,
            30, 30, 30,
            30, 30, 0,
            30, 60, 0,
            30, 60, 30,
            // top of middle rung
            30, 60, 0,
            67, 60, 30,
            30, 60, 30,
            30, 60, 0,
            67, 60, 0,
            67, 60, 30,
            // right of middle rung
            67, 60, 0,
            67, 90, 30,
            67, 60, 30,
            67, 60, 0,
            67, 90, 0,
            67, 90, 30,
            // bottom of middle rung.
            30, 90, 0,
            30, 90, 30,
            67, 90, 30,
            30, 90, 0,
            67, 90, 30,
            67, 90, 0,
            // right of bottom
            30, 90, 0,
            30, 150, 30,
            30, 90, 30,
            30, 90, 0,
            30, 150, 0,
            30, 150, 30,
            // bottom
            0, 150, 0,
            0, 150, 30,
            30, 150, 30,
            0, 150, 0,
            30, 150, 30,
            30, 150, 0,
            // left side
            0, 0, 0,
            0, 0, 30,
            0, 150, 30,
            0, 0, 0,
            0, 150, 30,
            0, 150, 0,
        ];
        var texcoords = [
            // left column front
            0.22, 0.19,
            0.22, 0.79,
            0.34, 0.19,
            0.22, 0.79,
            0.34, 0.79,
            0.34, 0.19,
            // top rung front
            0.34, 0.19,
            0.34, 0.31,
            0.62, 0.19,
            0.34, 0.31,
            0.62, 0.31,
            0.62, 0.19,
            // middle rung front
            0.34, 0.43,
            0.34, 0.55,
            0.49, 0.43,
            0.34, 0.55,
            0.49, 0.55,
            0.49, 0.43,
            // left column back
            0, 0,
            1, 0,
            0, 1,
            0, 1,
            1, 0,
            1, 1,
            // top rung back
            0, 0,
            1, 0,
            0, 1,
            0, 1,
            1, 0,
            1, 1,
            // middle rung back
            0, 0,
            1, 0,
            0, 1,
            0, 1,
            1, 0,
            1, 1,
            // top
            0, 0,
            1, 0,
            1, 1,
            0, 0,
            1, 1,
            0, 1,
            // top rung right
            0, 0,
            1, 0,
            1, 1,
            0, 0,
            1, 1,
            0, 1,
            // under top rung
            0, 0,
            0, 1,
            1, 1,
            0, 0,
            1, 1,
            1, 0,
            // between top rung and middle
            0, 0,
            1, 1,
            0, 1,
            0, 0,
            1, 0,
            1, 1,
            // top of middle rung
            0, 0,
            1, 1,
            0, 1,
            0, 0,
            1, 0,
            1, 1,
            // right of middle rung
            0, 0,
            1, 1,
            0, 1,
            0, 0,
            1, 0,
            1, 1,
            // bottom of middle rung.
            0, 0,
            0, 1,
            1, 1,
            0, 0,
            1, 1,
            1, 0,
            // right of bottom
            0, 0,
            1, 1,
            0, 1,
            0, 0,
            1, 0,
            1, 1,
            // bottom
            0, 0,
            0, 1,
            1, 1,
            0, 0,
            1, 1,
            1, 0,
            // left side
            0, 0,
            0, 1,
            1, 1,
            0, 0,
            1, 1,
            1, 0,
        ];
        var normals = expandRLEData([
            // left column front
            // top rung front
            // middle rung front
            18, 0, 0, 1,
            // left column back
            // top rung back
            // middle rung back
            18, 0, 0, -1,
            // top
            6, 0, 1, 0,
            // top rung right
            6, 1, 0, 0,
            // under top rung
            6, 0, -1, 0,
            // between top rung and middle
            6, 1, 0, 0,
            // top of middle rung
            6, 0, 1, 0,
            // right of middle rung
            6, 1, 0, 0,
            // bottom of middle rung.
            6, 0, -1, 0,
            // right of bottom
            6, 1, 0, 0,
            // bottom
            6, 0, -1, 0,
            // left side
            6, -1, 0, 0,
        ]);
        var colors = expandRLEData([
            // left column front
            // top rung front
            // middle rung front
            18, 200, 70, 120,
            // left column back
            // top rung back
            // middle rung back
            18, 80, 70, 200,
            // top
            6, 70, 200, 210,
            // top rung right
            6, 200, 200, 70,
            // under top rung
            6, 210, 100, 70,
            // between top rung and middle
            6, 210, 160, 70,
            // top of middle rung
            6, 70, 180, 210,
            // right of middle rung
            6, 100, 70, 210,
            // bottom of middle rung.
            6, 76, 210, 100,
            // right of bottom
            6, 140, 210, 80,
            // bottom
            6, 90, 130, 110,
            // left side
            6, 160, 160, 220,
        ], [255]);
        var numVerts = positions.length / 3;
        var arrays = {
            position: Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVerts),
            texcoord: Shader_1.G_ShaderFactory.createAugmentedTypedArray(2, numVerts),
            normal: Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVerts),
            color: Shader_1.G_ShaderFactory.createAugmentedTypedArray(4, numVerts, Uint8Array),
            indices: Shader_1.G_ShaderFactory.createAugmentedTypedArray(3, numVerts / 3, Uint16Array),
        };
        arrays.position.push(positions);
        arrays.texcoord.push(texcoords);
        arrays.normal.push(normals);
        arrays.color.push(colors);
        for (var ii = 0; ii < numVerts; ++ii) {
            arrays.indices.push(ii);
        }
        return arrays;
    }
    syPrimitives.create3DFVertices = create3DFVertices;
    /**
     * creates a function that calls fn to create vertices and then
     * creates a bufferInfo object for them
     */
    function createBufferInfoFunc(fn) {
        return function () {
            var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));
            return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
        };
    }
    function createSphereBufferInfo(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {
        var arrays = createSphereVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createSphereBufferInfo = createSphereBufferInfo;
    function createPlaneBufferInfo(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {
        var arrays = createPlaneVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createPlaneBufferInfo = createPlaneBufferInfo;
    function createCubeBufferInfo(size) {
        var arrays = createCubeVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.createCubeBufferInfo = createCubeBufferInfo;
    function create3DFBufferInfo() {
        var arrays = create3DFVertices.apply(null, Array.prototype.slice.call(arguments, 0));
        return Shader_1.G_ShaderFactory.createBufferInfoFromArrays(arrays);
    }
    syPrimitives.create3DFBufferInfo = create3DFBufferInfo;
    /**
     * return {
    create3DFBufferInfo: createBufferInfoFunc(create3DFVertices),
    create3DFBuffer: createBufferFunc(create3DFVertices),
    create3DFVertices,
    create3DFWithVertexColorsBufferInfo: createFlattenedFunc(create3DFVertices),
    createCubeBufferInfo: createBufferInfoFunc(createCubeVertices),
    createCubeBuffers: createBufferFunc(createCubeVertices),
    createCubeVertices,
    createCubeWithVertexColorsBufferInfo: createFlattenedFunc(createCubeVertices),
    createPlaneBufferInfo: createBufferInfoFunc(createPlaneVertices),
    createPlaneBuffers: createBufferFunc(createPlaneVertices),
    createPlaneVertices,
    createPlaneWithVertexColorsBufferInfo: createFlattenedFunc(createPlaneVertices),
    createXYQuadBufferInfo: createBufferInfoFunc(createXYQuadVertices),
    createXYQuadBuffers: createBufferFunc(createXYQuadVertices),
    createXYQuadVertices,
    createXYQuadWithVertexColorsBufferInfo: createFlattenedFunc(createXYQuadVertices),
    createSphereBufferInfo: createBufferInfoFunc(createSphereVertices),
    createSphereBuffers: createBufferFunc(createSphereVertices),
    createSphereVertices,
    createSphereWithVertexColorsBufferInfo: createFlattenedFunc(createSphereVertices),
    createTruncatedConeBufferInfo: createBufferInfoFunc(createTruncatedConeVertices),
    createTruncatedConeBuffers: createBufferFunc(createTruncatedConeVertices),
    createTruncatedConeVertices,
    createTruncatedConeWithVertexColorsBufferInfo: createFlattenedFunc(createTruncatedConeVertices),
    deindexVertices,
    flattenNormals,
    makeRandomVertexColors,
    reorientDirections,
    reorientNormals,
    reorientPositions,
    reorientVertices,
  };
     */
})(syPrimitives = exports.syPrimitives || (exports.syPrimitives = {}));
},{"../../Matrix":6,"./Shader":37}],37:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shader = exports.G_ShaderFactory = exports.BufferAttribsData = exports.ShaderData = void 0;
var GLEnums_1 = require("../gfx/GLEnums");
var GLapi_1 = require("../gfx/GLapi");
var ShaderType;
(function (ShaderType) {
    ShaderType[ShaderType["VERTEX"] = 1] = "VERTEX";
    ShaderType[ShaderType["FRAGMENT"] = 2] = "FRAGMENT";
})(ShaderType || (ShaderType = {}));
var vertextBaseCode = 'attribute vec3 a_position;' +
    'attribute vec3 a_normal;' +
    'attribute vec2 a_uv;' +
    'uniform mat4 u_MVMatrix;' +
    'uniform mat4 u_PMatrix;' +
    'uniform mat4 u_MMatrix;' +
    'uniform mat4 u_VMatrix;' +
    'varying vec3 v_normal;' +
    'varying vec2 v_uv;' +
    'void main() {' +
    'gl_Position = u_PMatrix * u_MVMatrix * vec4(a_position, 1.0);' +
    'v_uv = a_uv;' +
    '}';
//基础的shader的片段着色器
var fragBaseCode = 'precision mediump float;' +
    'varying vec2 v_uv;' +
    'uniform samplerCube u_skybox;' +
    'uniform sampler2D u_texCoord;' +
    'uniform mat4 u_PVM_Matrix_Inverse;' +
    'uniform vec4 u_color;' +
    'uniform vec4 u_color_dir;' +
    'void main() {' +
    'gl_FragColor = texture2D(u_texCoord, v_uv);' +
    '}';
var ShaderData = /** @class */ (function () {
    function ShaderData(spGLID, index) {
        this._textureUnit = 0;
        this._index = -1;
        this._spGLID = spGLID;
        this._textureUnit = 0;
        this._index = index;
    }
    Object.defineProperty(ShaderData.prototype, "spGlID", {
        get: function () {
            return this._spGLID;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "textureUnit", {
        get: function () {
            return this._textureUnit;
        },
        enumerable: false,
        configurable: true
    });
    ShaderData.prototype.addTextureUnit = function () {
        var before = this._textureUnit;
        this._textureUnit++;
        return before;
    };
    Object.defineProperty(ShaderData.prototype, "uniSetters", {
        get: function () {
            return this._uniformSetters;
        },
        set: function (set) {
            this._uniformSetters = set;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "attrSetters", {
        get: function () {
            return this._attribSetters;
        },
        set: function (set) {
            this._attribSetters = set;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ShaderData.prototype, "Index", {
        get: function () {
            return this._index;
        },
        enumerable: false,
        configurable: true
    });
    return ShaderData;
}());
exports.ShaderData = ShaderData;
var BufferAttribsData = /** @class */ (function () {
    function BufferAttribsData(attribs, numElements, indices) {
        this.attribs = attribs;
        this.numElements = numElements;
        this.indices = indices;
    }
    return BufferAttribsData;
}());
exports.BufferAttribsData = BufferAttribsData;
/**
 * shader工厂
 */
var ShaderFactory = /** @class */ (function () {
    function ShaderFactory() {
        this.texcoordRE = /coord|texture/i;
        this.colorRE = /color|colour/i;
        /**
         * tries to get the number of elements from a set of arrays.
         */
        this.positionKeys = ['position', 'positions', 'a_position'];
    }
    ShaderFactory.prototype.init = function (gl) {
        this._gl = gl;
        this._shaderData = [];
    };
    /**
     * 获取一个shaderData
     * @param index
     */
    ShaderFactory.prototype.getShareDataByIndex = function (index) {
        var ret;
        this._shaderData.forEach(function (value, index) {
            if (value.Index == index) {
                ret = value;
            }
        });
        return ret;
    };
    /**
     * 获取一个shaderData
     * @param glID
     */
    ShaderFactory.prototype.getShareDataByGlID = function (glID) {
        var ret;
        this._shaderData.forEach(function (value, index) {
            if (value.spGlID == glID) {
                ret = value;
            }
        });
        return ret;
    };
    /**
     * 生成一个shaderData
     * @param GLID
     * @param textureUnit
     * @param USet
     * @param ASet
     */
    ShaderFactory.prototype.createShaderData = function (GLID) {
        var ret = this.getShareDataByGlID(GLID);
        if (ret == null) {
            var index = this._shaderData.length;
            var res = new ShaderData(GLID, index);
            this._shaderData.push(res);
            return res;
        }
        return ret;
    };
    /**
    *
    * @param shaderType shader的类型 1代表顶点着色器 2代表像素着色器
    * @param shaderSource shader的源码
    */
    ShaderFactory.prototype.loadShader = function (shaderType, shaderSource) {
        // 创建着色器
        var shader;
        if (shaderType == ShaderType.FRAGMENT) {
            shader = this._gl.createShader(this._gl.FRAGMENT_SHADER);
        }
        else if (shaderType == ShaderType.VERTEX) {
            shader = this._gl.createShader(this._gl.VERTEX_SHADER);
        }
        else {
            return null;
        }
        // 编译着色器
        this._gl.shaderSource(shader, shaderSource);
        this._gl.compileShader(shader);
        // 判断编译是否成功
        if (!this._gl.getShaderParameter(shader, this._gl.COMPILE_STATUS)) {
            alert(this._gl.getShaderInfoLog(shader));
            return null;
        }
        return shader;
    };
    /**
     *
     * @param vertextCode 顶点shader
     * @param fragCode 片段shader
     */
    ShaderFactory.prototype.createShader = function (vertextCode, fragCode) {
        if (vertextCode === void 0) { vertextCode = vertextBaseCode; }
        if (fragCode === void 0) { fragCode = fragBaseCode; }
        // 从 DOM 上创建对应的着色器
        var vertexShader = this.loadShader(ShaderType.VERTEX, vertextCode);
        var fragmentShader = this.loadShader(ShaderType.FRAGMENT, fragCode);
        // 创建程序并连接着色器
        var shaderGLID = this._gl.createProgram();
        this._gl.attachShader(shaderGLID, vertexShader);
        this._gl.attachShader(shaderGLID, fragmentShader);
        this._gl.linkProgram(shaderGLID);
        // 连接失败的检测
        if (!this._gl.getProgramParameter(shaderGLID, this._gl.LINK_STATUS)) {
            alert("Failed to setup shaders");
        }
        return shaderGLID;
    };
    ShaderFactory.prototype.onCreateShader = function () {
    };
    ShaderFactory.prototype.destroyShder = function (shaderProgram) {
    };
    ShaderFactory.prototype.createAttribSetter = function (index) {
        var gl = this._gl;
        return function (b) {
            if (b.value) {
                gl.disableVertexAttribArray(index);
                switch (b.value.length) {
                    case 4:
                        gl.vertexAttrib4fv(index, b.value);
                        break;
                    case 3:
                        gl.vertexAttrib3fv(index, b.value);
                        break;
                    case 2:
                        gl.vertexAttrib2fv(index, b.value);
                        break;
                    case 1:
                        gl.vertexAttrib1fv(index, b.value);
                        break;
                    default:
                        throw new Error('the length of a float constant value must be between 1 and 4!');
                }
            }
            else {
                gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);
                gl.enableVertexAttribArray(index);
                gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);
            }
        };
    };
    ShaderFactory.prototype.createAttributeSetters = function (shaderData) {
        var gl = this._gl;
        var program = shaderData.spGlID;
        var attribSetters = {};
        var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
        for (var ii = 0; ii < numAttribs; ++ii) {
            var attribInfo = gl.getActiveAttrib(program, ii);
            if (!attribInfo) {
                break;
            }
            var index = gl.getAttribLocation(program, attribInfo.name);
            attribSetters[attribInfo.name] = this.createAttribSetter(index);
        }
        return attribSetters;
    };
    /**
   * Returns the corresponding bind point for a given sampler type
   */
    ShaderFactory.prototype.getBindPointForSamplerType = function (gl, type) {
        if (type === gl.SAMPLER_2D)
            return gl.TEXTURE_2D; // eslint-disable-line
        if (type === gl.SAMPLER_CUBE)
            return gl.TEXTURE_CUBE_MAP; // eslint-disable-line
        return undefined;
    };
    /**
       * Creates a setter for a uniform of the given program with it's
       * location embedded in the setter.
       * @param {WebGLProgram} program
       * @param {WebGLUniformInfo} uniformInfo
       * @returns {function} the created setter.
       */
    ShaderFactory.prototype.createUniformSetter = function (uniformInfo, shaderData) {
        var gl = this._gl;
        var program = shaderData.spGlID;
        var location = gl.getUniformLocation(program, uniformInfo.name);
        var type = uniformInfo.type;
        // Check if this uniform is an array
        var isArray = (uniformInfo.size > 1 && uniformInfo.name.substr(-3) === '[0]');
        if (type === gl.FLOAT && isArray) {
            return function (v) {
                gl.uniform1fv(location, v);
            };
        }
        if (type === gl.FLOAT) {
            return function (v) {
                gl.uniform1f(location, v);
            };
        }
        if (type === gl.FLOAT_VEC2) {
            return function (v) {
                gl.uniform2fv(location, v);
            };
        }
        if (type === gl.FLOAT_VEC3) {
            return function (v) {
                gl.uniform3fv(location, v);
            };
        }
        if (type === gl.FLOAT_VEC4) {
            return function (v) {
                gl.uniform4fv(location, v);
            };
        }
        if (type === gl.INT && isArray) {
            return function (v) {
                gl.uniform1iv(location, v);
            };
        }
        if (type === gl.INT) {
            return function (v) {
                gl.uniform1i(location, v);
            };
        }
        if (type === gl.INT_VEC2) {
            return function (v) {
                gl.uniform2iv(location, v);
            };
        }
        if (type === gl.INT_VEC3) {
            return function (v) {
                gl.uniform3iv(location, v);
            };
        }
        if (type === gl.INT_VEC4) {
            return function (v) {
                gl.uniform4iv(location, v);
            };
        }
        if (type === gl.BOOL) {
            return function (v) {
                gl.uniform1iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC2) {
            return function (v) {
                gl.uniform2iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC3) {
            return function (v) {
                gl.uniform3iv(location, v);
            };
        }
        if (type === gl.BOOL_VEC4) {
            return function (v) {
                gl.uniform4iv(location, v);
            };
        }
        if (type === gl.FLOAT_MAT2) {
            return function (v) {
                gl.uniformMatrix2fv(location, false, v);
            };
        }
        if (type === gl.FLOAT_MAT3) {
            return function (v) {
                gl.uniformMatrix3fv(location, false, v);
            };
        }
        if (type === gl.FLOAT_MAT4) {
            return function (v) {
                gl.uniformMatrix4fv(location, false, v);
            };
        }
        if ((type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) && isArray) {
            var units = [];
            for (var ii = 0; ii < uniformInfo.size; ++ii) {
                units.push(shaderData.addTextureUnit());
            }
            return function (bindPoint, units) {
                return function (textures) {
                    gl.uniform1iv(location, units);
                    textures.forEach(function (texture, index) {
                        gl.activeTexture(gl.TEXTURE0 + units[index]);
                        gl.bindTexture(bindPoint, texture);
                    });
                };
            }(this.getBindPointForSamplerType(gl, type), units);
        }
        if (type === gl.SAMPLER_2D || type === gl.SAMPLER_CUBE) {
            return function (bindPoint, unit) {
                return function (texture) {
                    gl.uniform1i(location, unit);
                    gl.activeTexture(gl.TEXTURE0 + unit);
                    gl.bindTexture(bindPoint, texture);
                };
            }(this.getBindPointForSamplerType(gl, type), shaderData.addTextureUnit());
        }
        throw ('unknown type: 0x' + type.toString(16)); // we should never get here.
    };
    /**
     * uniform变量设置器
     */
    ShaderFactory.prototype.createUniformSetters = function (shaderData) {
        var program = shaderData.spGlID;
        var gl = this._gl;
        var uniformSetters = {};
        var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
        for (var ii = 0; ii < numUniforms; ++ii) {
            var uniformInfo = gl.getActiveUniform(program, ii);
            if (!uniformInfo) {
                break;
            }
            var name_1 = uniformInfo.name;
            // remove the array suffix.
            if (name_1.substr(-3) === '[0]') {
                name_1 = name_1.substr(0, name_1.length - 3);
            }
            var setter = this.createUniformSetter(uniformInfo, shaderData);
            uniformSetters[name_1] = setter;
        }
        return uniformSetters;
    };
    /**
     * 创建一个shader
     * @param vs
     * @param fs
     */
    ShaderFactory.prototype.createProgramInfo = function (vs, fs) {
        var glID = this.createShader(vs, fs);
        var shaderData = this.createShaderData(glID);
        var uniformSetters = this.createUniformSetters(shaderData);
        var attribSetters = this.createAttributeSetters(shaderData);
        shaderData.uniSetters = uniformSetters;
        shaderData.attrSetters = attribSetters;
        return shaderData;
    };
    ShaderFactory.prototype.getShaderProgram = function (index) {
        return this.getShareDataByIndex(index).spGlID;
    };
    //设置attribute变量
    ShaderFactory.prototype.setBuffersAndAttributes = function (attribSetters, buffers) {
        var gl = this._gl;
        var attribs = buffers.attribs;
        var setters = attribSetters;
        Object.keys(attribs).forEach(function (name) {
            var setter = setters[name];
            if (setter) {
                setter(attribs[name]);
            }
            else {
                // console.log("error  绑定attribute变量失败-----",name);
            }
        });
        if (buffers.indices) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);
        }
    };
    //设置uniform变量
    ShaderFactory.prototype.setUniforms = function (uniformSetters) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var setters = uniformSetters;
        var _loop_1 = function (uniforms) {
            Object.keys(uniforms).forEach(function (name) {
                var setter = setters[name];
                if (setter) {
                    setter(uniforms[name]);
                }
                else {
                    // console.log("error  绑定uniform变量失败------",name);
                }
            });
        };
        for (var _a = 0, values_1 = values; _a < values_1.length; _a++) {
            var uniforms = values_1[_a];
            _loop_1(uniforms);
        }
    };
    //启动顶点着色器绘制
    ShaderFactory.prototype.drawBufferInfo = function (bufferInfo, primitiveType, count, offset) {
        var gl = this._gl;
        var indices = bufferInfo.indices;
        primitiveType = primitiveType === undefined ? gl.TRIANGLES : primitiveType;
        var numElements = count === undefined ? bufferInfo.numElements : count;
        offset = offset === undefined ? 0 : offset;
        if (indices) {
            gl.drawElements(primitiveType, numElements, gl.UNSIGNED_SHORT, offset);
        }
        else {
            gl.drawArrays(primitiveType, offset, numElements);
        }
    };
    //ext---------------------------------------------------------------------------------
    // Add `push` to a typed array. It just keeps a 'cursor'
    // and allows use to `push` values into the array so we
    // don't have to manually compute offsets
    ShaderFactory.prototype.augmentTypedArray = function (typedArray, numComponents) {
        var cursor = 0;
        typedArray.push = function () {
            for (var ii = 0; ii < arguments.length; ++ii) {
                var value = arguments[ii];
                if (value instanceof Array || (value.buffer && value.buffer instanceof ArrayBuffer)) {
                    for (var jj = 0; jj < value.length; ++jj) {
                        typedArray[cursor++] = value[jj];
                    }
                }
                else {
                    typedArray[cursor++] = value;
                }
            }
        };
        typedArray.reset = function (opt_index) {
            cursor = opt_index || 0;
        };
        typedArray.numComponents = numComponents;
        Object.defineProperty(typedArray, 'numElements', {
            get: function () {
                return this.length / this.numComponents | 0;
            },
        });
        return typedArray;
    };
    /**
    * creates a typed array with a `push` function attached
    * so that you can easily *push* values.
    *
    * `push` can take multiple arguments. If an argument is an array each element
    * of the array will be added to the typed array.
    *
    * Example:
    *
    *     let array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values
    *     array.push(1, 2, 3);
    *     array.push([4, 5, 6]);
    *     // array now contains [1, 2, 3, 4, 5, 6]
    *
    * Also has `numComponents` and `numElements` properties.
    *
    * @param {number} numComponents number of components
    * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.
    * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.
    * @return {ArrayBuffer} A typed array.
    * @memberOf module:webgl-utils
    */
    ShaderFactory.prototype.createAugmentedTypedArray = function (numComponents, numElements, opt_type) {
        var Type = opt_type || Float32Array;
        return this.augmentTypedArray(new Type(numComponents * numElements), numComponents);
    };
    ShaderFactory.prototype.getArray = function (array) {
        return array.length ? array : array.data;
    };
    ShaderFactory.prototype.guessNumComponentsFromName = function (name, length) {
        var numComponents;
        if (this.texcoordRE.test(name)) {
            numComponents = 2;
        }
        else if (this.colorRE.test(name)) {
            numComponents = 4;
        }
        else {
            numComponents = 3; // position, normals, indices ...
        }
        if (length % numComponents > 0) {
            throw new Error("Can not guess numComponents for attribute '" + name + "'. Tried " + numComponents + " but " + length + " values is not evenly divisible by " + numComponents + ". You should specify it.");
        }
        return numComponents;
    };
    ShaderFactory.prototype.getNumComponents = function (array, arrayName) {
        return array.numComponents || array.size || this.guessNumComponentsFromName(arrayName, this.getArray(array).length);
    };
    ShaderFactory.prototype.getNumElementsFromNonIndexedArrays = function (arrays) {
        var key;
        for (var _i = 0, _a = this.positionKeys; _i < _a.length; _i++) {
            var k = _a[_i];
            if (k in arrays) {
                key = k;
                break;
            }
        }
        key = key || Object.keys(arrays)[0];
        var array = arrays[key];
        var length = this.getArray(array).length;
        var numComponents = this.getNumComponents(array, key);
        var numElements = length / numComponents;
        if (length % numComponents > 0) {
            throw new Error("numComponents " + numComponents + " not correct for length " + length);
        }
        return numElements;
    };
    ShaderFactory.prototype.getGLTypeForTypedArray = function (gl, typedArray) {
        if (typedArray instanceof Int8Array) {
            return gl.BYTE;
        } // eslint-disable-line
        if (typedArray instanceof Uint8Array) {
            return gl.UNSIGNED_BYTE;
        } // eslint-disable-line
        if (typedArray instanceof Int16Array) {
            return gl.SHORT;
        } // eslint-disable-line
        if (typedArray instanceof Uint16Array) {
            return gl.UNSIGNED_SHORT;
        } // eslint-disable-line
        if (typedArray instanceof Int32Array) {
            return gl.INT;
        } // eslint-disable-line
        if (typedArray instanceof Uint32Array) {
            return gl.UNSIGNED_INT;
        } // eslint-disable-line
        if (typedArray instanceof Float32Array) {
            return gl.FLOAT;
        } // eslint-disable-line
        throw 'unsupported typed array type';
    };
    // This is really just a guess. Though I can't really imagine using
    // anything else? Maybe for some compression?
    ShaderFactory.prototype.getNormalizationForTypedArray = function (typedArray) {
        if (typedArray instanceof Int8Array) {
            return true;
        } // eslint-disable-line
        if (typedArray instanceof Uint8Array) {
            return true;
        } // eslint-disable-line
        return false;
    };
    ShaderFactory.prototype.isArrayBuffer = function (a) {
        return a.buffer && a.buffer instanceof ArrayBuffer;
    };
    ShaderFactory.prototype.createBufferFromTypedArray = function (gl, array, type, drawType) {
        type = type || gl.ARRAY_BUFFER;
        var buffer = gl.createBuffer();
        gl.bindBuffer(type, buffer);
        gl.bufferData(type, array, drawType || gl.STATIC_DRAW);
        return buffer;
    };
    ShaderFactory.prototype.allButIndices = function (name) {
        return name !== 'indices';
    };
    ShaderFactory.prototype.createMapping = function (obj) {
        var mapping = {};
        Object.keys(obj).filter(this.allButIndices).forEach(function (key) {
            mapping['a_' + key] = key;
        });
        return mapping;
    };
    ShaderFactory.prototype.makeTypedArray = function (array, name) {
        if (this.isArrayBuffer(array)) {
            return array;
        }
        if (array.data && this.isArrayBuffer(array.data)) {
            return array.data;
        }
        if (Array.isArray(array)) {
            array = {
                data: array,
            };
        }
        if (!array.numComponents) {
            array.numComponents = this.guessNumComponentsFromName(name, array.length);
        }
        var type = array.type;
        if (!type) {
            if (name === 'indices') {
                type = Uint16Array;
            }
        }
        var typedArray = this.createAugmentedTypedArray(array.numComponents, array.data.length / array.numComponents | 0, type);
        typedArray.push(array.data);
        return typedArray;
    };
    ShaderFactory.prototype.createAttribsFromArrays = function (gl, arrays, opt_mapping) {
        var _this = this;
        var mapping = opt_mapping || this.createMapping(arrays);
        var attribs = {};
        Object.keys(mapping).forEach(function (attribName) {
            var bufferName = mapping[attribName];
            var origArray = arrays[bufferName];
            if (origArray.value) {
                attribs[attribName] = {
                    value: origArray.value,
                };
            }
            else {
                var array = _this.makeTypedArray(origArray, bufferName);
                attribs[attribName] = {
                    buffer: _this.createBufferFromTypedArray(gl, array),
                    numComponents: origArray.numComponents || array.numComponents || _this.guessNumComponentsFromName(bufferName),
                    type: _this.getGLTypeForTypedArray(gl, array),
                    normalize: _this.getNormalizationForTypedArray(array),
                };
            }
        });
        return attribs;
    };
    ShaderFactory.prototype.createBufferInfoFromArrays = function (arrays, opt_mapping) {
        var gl = this._gl;
        var bufferInfo = {
            attribs: this.createAttribsFromArrays(gl, arrays, opt_mapping),
        };
        var indices = arrays.indices;
        if (indices) {
            indices = this.makeTypedArray(indices, 'indices');
            bufferInfo.indices = this.createBufferFromTypedArray(gl, indices, gl.ELEMENT_ARRAY_BUFFER);
            bufferInfo.numElements = indices.length;
        }
        else {
            bufferInfo.numElements = this.getNumElementsFromNonIndexedArrays(arrays);
        }
        return new BufferAttribsData(bufferInfo.attribs, bufferInfo.numElements, bufferInfo.indices);
    };
    return ShaderFactory;
}());
exports.G_ShaderFactory = new ShaderFactory();
var Shader = /** @class */ (function () {
    function Shader(gl, glID) {
        this.USE_NORMAL = false; //法线
        this.USE_LIGHT = false; //光照
        this.USE_SKYBOX = false; //天空盒
        this._gl = gl;
        this._spGLID = glID;
        this.onCreateShader();
    }
    /**
     * 创建一个shader
     * @param vert
     * @param frag
     */
    Shader.create = function (vert, frag) {
        var glID = exports.G_ShaderFactory.createShader(vert, frag);
        return new Shader(exports.G_ShaderFactory._gl, glID);
    };
    Shader.prototype.onCreateShader = function () {
        var shaderProgramGLID = this._spGLID;
        var gl = this._gl;
        this.a_position_loc = gl.getAttribLocation(shaderProgramGLID, "a_position" /* POSITION */);
        this.a_normal_loc = gl.getAttribLocation(shaderProgramGLID, "a_normal" /* NORMAL */);
        this.a_uv_loc = gl.getAttribLocation(shaderProgramGLID, "a_uv" /* UV */);
        this.a_tangent_loc = gl.getAttribLocation(shaderProgramGLID, "a_tangent" /* TANGENT */);
        this.u_color_loc = gl.getUniformLocation(shaderProgramGLID, "u_color" /* COLOR */);
        this.u_color_dir_loc = gl.getUniformLocation(shaderProgramGLID, "u_color_dir" /* COLOR_DIR */);
        this.u_MVMatrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_MVMatrix" /* MVMatrix */);
        this.u_PMatrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_PMatrix" /* PMatrix */);
        this.u_texCoord_loc = gl.getUniformLocation(shaderProgramGLID, "u_texCoord" /* TEX_COORD */);
        this.u_skybox_loc = gl.getUniformLocation(shaderProgramGLID, "u_skybox" /* SKYBOX */);
        this.u_pvm_matrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_PVM_Matrix" /* PMV_MATRIX */);
        this.u_pvm_matrix_inverse_loc = gl.getUniformLocation(shaderProgramGLID, "u_PVM_Matrix_Inverse" /* PMV_MATRIX_INVERSE */);
        this.u_MMatrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_MMatrix" /* MMatrix */);
        this.u_VMatrix_loc = gl.getUniformLocation(shaderProgramGLID, "u_VMatrix" /* VMatrix */);
    };
    Shader.prototype.getCustomAttributeLocation = function (varName) {
        return this._gl.getAttribLocation(this._spGLID, varName);
    };
    Shader.prototype.getGLID = function () {
        return this._spGLID;
    };
    /**
     * 检查shader中变量的位置是否有效
     * @param loc
     */
    Shader.prototype.checklocValid = function (loc, tagName) {
        var result = !(loc == null || loc < 0);
        if (!result && this.isShowDebugLog) {
            console.error("err-------", loc, tagName);
        }
        return result;
    };
    Shader.prototype.checkGLIDValid = function (glID) {
        return (glID == null || glID <= 0) ? false : true;
    };
    //启用属性从缓冲区中获取数据的功能
    Shader.prototype.enableVertexAttribute = function () {
        if (this.checklocValid(this.a_position_loc, "a_position_loc")) { // 设定为数组类型的变量数据
            this._gl.enableVertexAttribArray(this.a_position_loc);
        }
        if (this.checklocValid(this.a_uv_loc, "a_uv_loc")) {
            this._gl.enableVertexAttribArray(this.a_uv_loc);
        }
        if (this.checklocValid(this.a_normal_loc, "a_normal_loc")) {
            this._gl.enableVertexAttribArray(this.a_normal_loc);
        }
    };
    //shader中所有的attributes变量
    Shader.prototype.updateAttributes = function (shaderProgramGLID) {
        var gl = this._gl;
        var numAttribs = gl.getProgramParameter(shaderProgramGLID, gl.ACTIVE_ATTRIBUTES);
        for (var ii = 0; ii < numAttribs; ++ii) {
            var attribInfo = gl.getActiveAttrib(shaderProgramGLID, ii);
            if (!attribInfo) {
                break;
            }
            console.log("attribInfo--", attribInfo.name);
            var index = gl.getAttribLocation(shaderProgramGLID, attribInfo.name);
        }
    };
    //激活shader
    Shader.prototype.active = function () {
        this.disableVertexAttribArray();
        this.enableVertexAttribute();
        this._gl.useProgram(this._spGLID);
    };
    /**
     *
     * @param color 光的颜色
     * @param direction 光的方向
     */
    Shader.prototype.setUseLight = function (color, direction) {
        if (color === void 0) { color = [0.2, 1, 0.2, 1]; }
        if (direction === void 0) { direction = [0.5, 0.7, 1]; }
        if (!this.USE_LIGHT || !this.checklocValid(this.u_color_loc, "u_color_loc") || !this.checklocValid(this.u_color_dir_loc, "u_color_dir_loc")) {
            return;
        }
        // Set the color to use
        this._gl.uniform4fv(this.u_color_loc, color); // green
        // set the light direction.
        this._gl.uniform3fv(this.u_color_dir_loc, direction);
    };
    Shader.prototype.setUseSkyBox = function (u_pvm_matrix_inverse) {
        var gl = this._gl;
        gl.enable(gl.CULL_FACE);
        gl.enable(gl.DEPTH_TEST);
        // Set the uniforms
        gl.uniformMatrix4fv(this.u_pvm_matrix_inverse_loc, false, u_pvm_matrix_inverse);
        // Tell the shader to use texture unit 0 for u_skybox
        gl.uniform1i(this.u_skybox_loc, 0);
        // let our quad pass the depth test at 1.0
        gl.depthFunc(gl.LEQUAL);
    };
    //设置使用投影视口模型矩阵
    Shader.prototype.setUseProjectViewModelMatrix = function (pvmMatrix) {
        if (this.checklocValid(this.u_pvm_matrix_loc, "u_pvm_matrix_loc")) {
            this._gl.uniformMatrix4fv(this.u_pvm_matrix_loc, false, pvmMatrix);
        }
    };
    //设置光照
    Shader.prototype.setUseColor = function (uColor) {
        if (this.checklocValid(this.u_color_loc, "u_color_loc")) {
            this._gl.uniform4fv(this.u_color_loc, uColor);
        }
    };
    //设置模型视口矩阵
    Shader.prototype.setUseModelViewMatrix = function (mvMatrix) {
        if (this.checklocValid(this.u_MVMatrix_loc, "u_MVMatrix_loc")) {
            this._gl.uniformMatrix4fv(this.u_MVMatrix_loc, false, mvMatrix);
        }
    };
    //设置透视投影矩阵
    Shader.prototype.setUseProjectionMatrix = function (projMatrix) {
        if (this.checklocValid(this.u_PMatrix_loc, "u_PMatrix_loc")) {
            this._gl.uniformMatrix4fv(this.u_PMatrix_loc, false, projMatrix);
        }
    };
    //设置顶点值
    Shader.prototype.setUseVertexAttribPointerForVertex = function (glID, itemSize) {
        if (!this.checkGLIDValid(glID))
            return;
        if (this.checklocValid(this.a_position_loc, "a_position_loc")) {
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, glID);
            this._gl.enableVertexAttribArray(this.a_position_loc);
            GLapi_1.GLapi.vertexAttribPointer(this.a_position_loc, itemSize, this._gl.FLOAT, false, 0, 0);
        }
    };
    //设置法线值
    Shader.prototype.setUseVertexAttriPointerForNormal = function (glID, itemSize) {
        if (!this.checkGLIDValid(glID))
            return;
        /**
         * localtion:shader中attribute声明变量的位置
         * size:每次迭代使用的单位数据
         * type:单位数据类型
         * normallize:单位化（【0-255】--》【0-1】）
         * stride:每次迭代跳多少个数据到下一个数据
         * offset:从绑定缓冲区的偏移位置
         */
        if (this.checklocValid(this.a_normal_loc, "a_normal_loc")) {
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, glID);
            this._gl.enableVertexAttribArray(this.a_normal_loc);
            this._gl.vertexAttribPointer(this.a_normal_loc, itemSize, this._gl.FLOAT, false, 0, 0);
        }
    };
    //设置uv值
    Shader.prototype.setUseVertexAttribPointerForUV = function (glID, itemSize) {
        if (!this.checkGLIDValid(glID))
            return;
        if (this.checklocValid(this.a_uv_loc, "a_uv_loc")) {
            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, glID);
            this._gl.enableVertexAttribArray(this.a_uv_loc);
            this._gl.vertexAttribPointer(this.a_uv_loc, itemSize, this._gl.FLOAT, false, 0, 0);
        }
    };
    //设置使用的纹理
    //注意如果此处不重新设置使用的纹理，那么会默认使用上一次绘制时的纹理
    Shader.prototype.setUseTexture = function (glID, pos) {
        if (pos === void 0) { pos = 0; }
        if (!this.checkGLIDValid(glID))
            return;
        /**
          * activeTexture必须在bindTexture之前。如果没activeTexture就bindTexture，会默认绑定到0号纹理单元
        */
        if (this.checklocValid(this.u_texCoord_loc, "u_texCoord_loc")) {
            // 激活 0 号纹理单元
            this._gl.activeTexture(this._gl[GLEnums_1.glTEXTURE_UNIT_VALID[pos]]);
            // 指定当前操作的贴图
            this._gl.bindTexture(this._gl.TEXTURE_2D, glID);
            this._gl.uniform1i(this.u_texCoord_loc, pos);
        }
    };
    Shader.prototype.disableVertexAttribArray = function () {
        if (this.checklocValid(this.a_position_loc, "a_position_loc")) { // 设定为数组类型的变量数据
            this._gl.disableVertexAttribArray(this.a_position_loc);
        }
        if (this.checklocValid(this.a_uv_loc, "a_uv_loc")) {
            this._gl.disableVertexAttribArray(this.a_uv_loc);
        }
        if (this.checklocValid(this.a_normal_loc, "a_normal_loc")) {
            this._gl.disableVertexAttribArray(this.a_normal_loc);
        }
    };
    return Shader;
}());
exports.Shader = Shader;
},{"../gfx/GLEnums":34,"../gfx/GLapi":35}],38:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MathUtils = void 0;
/**
 * 数学库工具类
 */
var MathUtils;
(function (MathUtils) {
    /**
     * 求弧度
     * @param deg 角度
     */
    function degToRad(deg) {
        return deg * Math.PI / 180;
    }
    MathUtils.degToRad = degToRad;
    function px(v) {
        return (v | 0) + "px";
    }
    MathUtils.px = px;
    function radToDeg(r) {
        return r * 180 / Math.PI;
    }
    MathUtils.radToDeg = radToDeg;
    // Check if the image is a power of 2 in both dimensions.
    function isPowerOf2(value) {
        return (value & (value - 1)) === 0;
    }
    MathUtils.isPowerOf2 = isPowerOf2;
    function rand(min, max) {
        return Math.random() * (max - min) + min;
    }
    MathUtils.rand = rand;
    function emod(x, n) {
        return x >= 0 ? (x % n) : ((n - (-x % n)) % n);
    }
    MathUtils.emod = emod;
})(MathUtils = exports.MathUtils || (exports.MathUtils = {}));
},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvRGV2aWNlLnRzIiwic3JjL0xvYWRlck1hbmFnZXIudHMiLCJzcmMvTWFpbi50cyIsInNyYy9SZWYudHMiLCJzcmMvUmVuZGVyRmxvdy50cyIsInNyYy9jb3JlL01hdHJpeC50cyIsInNyYy9jb3JlL3JlbmRlcmVyLzJkL1JlbmRlclNwcml0ZS50cyIsInNyYy9jb3JlL3JlbmRlcmVyLzNkL0N1YmUudHMiLCJzcmMvY29yZS9yZW5kZXJlci8zZC9DdXN0b21UZXh0dXJlQ3ViZS50cyIsInNyYy9jb3JlL3JlbmRlcmVyLzNkL0dyb3VuZC50cyIsInNyYy9jb3JlL3JlbmRlcmVyLzNkL0xpZ2h0Q3ViZS50cyIsInNyYy9jb3JlL3JlbmRlcmVyLzNkL1NreUJveC50cyIsInNyYy9jb3JlL3JlbmRlcmVyLzNkL1NwaGVyZS50cyIsInNyYy9jb3JlL3JlbmRlcmVyLzNkL1NwaW5lLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvYXNzZXRzL1JlbmRlclRleHR1cmUudHMiLCJzcmMvY29yZS9yZW5kZXJlci9iYXNlL05vZGUudHMiLCJzcmMvY29yZS9yZW5kZXJlci9iYXNlL1JlbmRlckRhdGEudHMiLCJzcmMvY29yZS9yZW5kZXJlci9iYXNlL1NjZW5lLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvYmFzZS9TY2VuZTJELnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvYmFzZS9TY2VuZTNELnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvYmFzZS9TcHJpdGUudHMiLCJzcmMvY29yZS9yZW5kZXJlci9iYXNlL1RleHR1cmUudHMiLCJzcmMvY29yZS9yZW5kZXJlci9iYXNlL1RleHR1cmUyRC50cyIsInNyYy9jb3JlL3JlbmRlcmVyL2Jhc2UvVGV4dHVyZUN1YmUudHMiLCJzcmMvY29yZS9yZW5kZXJlci9iYXNlL1RleHR1cmVDdXN0b20udHMiLCJzcmMvY29yZS9yZW5kZXJlci9jYW1lcmEvQ2FtZXJhLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvY2FtZXJhL0NhbWVyYU1vZGVsLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvY2FtZXJhL0dhbWVNYWluQ2FtZXJhLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvY2FtZXJhL09ydGhvQ2FtZXJhLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvY2FtZXJhL1BlcnNwZWN0aXZlQ2FtZXJhLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvY2FtZXJhL2VudW1zLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvZGF0YS9DdWJlRGF0YS50cyIsInNyYy9jb3JlL3JlbmRlcmVyL2RhdGEvQ3VzdG9tVGV4dHVyZURhdGEudHMiLCJzcmMvY29yZS9yZW5kZXJlci9nZngvR0xFbnVtcy50cyIsInNyYy9jb3JlL3JlbmRlcmVyL2dmeC9HTGFwaS50cyIsInNyYy9jb3JlL3JlbmRlcmVyL3NoYWRlci9QcmltaXRpdmVzLnRzIiwic3JjL2NvcmUvcmVuZGVyZXIvc2hhZGVyL1NoYWRlci50cyIsInNyYy9jb3JlL3V0aWxzL01hdGhVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FDQ0Esd0NBQXlDO0FBQ3pDLDhEQUE4RztBQUc5RyxrRUFBaUU7QUFDakUsd0VBQW1FO0FBRW5FLG1EQUFrRDtBQUNsRCx3REFBZ0U7QUFHaEU7O0VBRUU7QUFDRixTQUFTLE9BQU8sQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxJQUFRO0lBQVIscUJBQUEsRUFBQSxRQUFRO0lBQy9DLHlDQUF5QztJQUN6QywrQkFBK0I7SUFDL0IsMEJBQTBCO0lBQzFCLG9CQUFvQjtJQUNwQix5QkFBeUI7SUFDekIsNEJBQTRCO0lBQzVCLFlBQVk7SUFDWixTQUFTO0lBQ1QsS0FBSztJQUNMLGdEQUFnRDtJQUNoRCwrQkFBK0I7SUFDL0IsMEJBQTBCO0lBQzFCLG9CQUFvQjtJQUNwQixpREFBaUQ7SUFDakQsNEJBQTRCO0lBQzVCLFlBQVk7SUFDWixTQUFTO0lBQ1QsV0FBVztJQUNYLGtDQUFrQztJ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Q0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILFNBQVMsV0FBVyxDQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUUsQ0FBQztRQUMzQixHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUdIOzs7Ozs7T0FNRztJQUVILFNBQVMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtRQUUzQyxJQUFJLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDbEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkIsOENBQThDO1FBQzlDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLFdBQVcsQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUN2QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN6QixH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Q0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNyQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2xCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hULENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENB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UUFDZCxJQUFJLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7T0FLRztJQUVILFNBQVMsVUFBVSxDQUFDLEdBQUc7UUFDbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FB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RyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNyQyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7T0FLRztJQUVILFNBQVMsYUFBYSxDQUFDLENBQUM7UUFDcEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDekIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2hDLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUc7UUFDekIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENB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QyxDQUFDLENBQUMsQ0FBQztRQUNkLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7OztPQUtHO0lBRUgsU0FBUyxLQUFLLENBQUMsQ0FBQztRQUNaLE9BQU8sUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ3ZHLENBQUM7SUFDRDs7Ozs7T0FLRztJQUVILFNBQVMsTUFBTSxDQUFDLENBQUM7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7O09BUUc7SUFFSCxTQUFTLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUs7UUFDNUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdkIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RyxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2hkLENBQUM7SUFDRDs7O09BR0c7SUFFSCxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUM7SUFDdkI7OztPQUdHO0lBRUgsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDO0lBRVosZ0JBQUssR0FBZ0IsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMxQyxNQUFNLEVBQUUsUUFBUTtRQUNoQixLQUFLLEVBQUUsT0FBTztRQUNkLElBQUksRUFBRSxNQUFNO1FBQ1osUUFBUSxFQUFFLFVBQVU7UUFDcEIsVUFBVSxFQUFFLFlBQVk7UUFDeEIsR0FBRyxFQUFFLEtBQUs7UUFDVixNQUFNLEVBQUUsUUFBUTtRQUNoQixXQUFXLEVBQUUsYUFBYTtRQUMxQixRQUFRLEVBQUUsVUFBVTtRQUNwQixNQUFNLEVBQUUsUUFBUTtRQUNoQixLQUFLLEVBQUUsT0FBTztRQUNkLFNBQVMsRUFBRSxTQUFTO1FBQ3BCLFlBQVksRUFBRSxjQUFjO1FBQzVCLFdBQVcsRUFBRSxhQUFhO1FBQzFCLGVBQWUsRUFBRSxlQUFlO1FBQ2hDLEdBQUcsRUFBRSxLQUFLO1FBQ1YsSUFBSSxFQUFFLE1BQU07UUFDWixHQUFHLEVBQUUsS0FBSztRQUNWLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLGNBQWMsRUFBRSxnQkFBZ0I7UUFDaEMsb0JBQW9CLEVBQUUsc0JBQXNCO1FBQzVDLFdBQVcsRUFBRSxhQUFhO1FBQzFCLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLEdBQUcsRUFBRSxLQUFLO1FBQ1YsR0FBRyxFQUFFLEtBQUs7S0FDYixDQUFDLENBQUM7SUFFSDs7O09BR0c7SUFFSDs7OztPQUlHO0lBRUgsU0FBUyxRQUFRO1FBQ2IsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFNUIsSUFBSSxVQUFVLElBQUksWUFBWSxFQUFFO1lBQzVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNkO1FBRUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2YsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLE9BQU8sQ0FBQyxDQUFDO1FBQ2QsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUVILFNBQVMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztRQUM3RCxJQUFJLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFD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LENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDM0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMzQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDM0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMzQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDM0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMzQyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzFCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDakMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDakMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDakMsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUN6QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUNqQixDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztRQU9JO0lBRUosU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7Ozs7T0FVRztJQUVILFNBQVMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7Ozs7T0FVRztJQUVILFNBQVMsY0FBYyxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQzVCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQ2pCLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7Ozs7T0FVRztJQUVILFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7UUFNSTtJQUVKLFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O01BT0U7SUFFRixTQUFTLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztNQU9FO0lBRUYsU0FBUyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLDRCQUE0QjtRQUU3RCxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUVoRixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU07UUFDbEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7T0FLRztJQUVILFNBQVMsS0FBSyxDQUFDLENBQUM7UUFDWixPQUFPLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNoSixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLE1BQU0sQ0FBQyxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7O09BUUc7SUFFSCxTQUFTLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUs7UUFDNUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdkIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqSyxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ByQixDQUFDO0lBQ0Q7OztPQUdHO0lBRUgsSUFBSSxLQUFLLEdBQUcsVUFBVSxDQUFDO0lBQ3ZCOzs7T0FHRztJQUVILElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQztJQUVaLGVBQUksR0FBZ0IsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUN6QyxNQUFNLEVBQUUsUUFBUTtRQUNoQixRQUFRLEVBQUUsUUFBUTtRQUNsQixLQUFLLEVBQUUsT0FBTztRQUNkLElBQUksRUFBRSxNQUFNO1FBQ1osVUFBVSxFQUFFLFlBQVk7UUFDeEIsR0FBRyxFQUFFLEtBQUs7UUFDVixRQUFRLEVBQUUsVUFBVTtRQUNwQixTQUFTLEVBQUUsV0FBVztRQUN0QixNQUFNLEVBQUUsUUFBUTtRQUNoQixPQUFPLEVBQUUsU0FBUztRQUNsQixXQUFXLEVBQUUsYUFBYTtRQUMxQixRQUFRLEVBQUUsVUFBVTtRQUNwQixTQUFTLEVBQUUsV0FBVztRQUN0QixNQUFNLEVBQUUsUUFBUTtRQUNoQixLQUFLLEVBQUUsT0FBTztRQUNkLGVBQWUsRUFBRSxpQkFBaUI7UUFDbEMsWUFBWSxFQUFFLGNBQWM7UUFDNUIsV0FBVyxFQUFFLGFBQWE7UUFDMUIsU0FBUyxFQUFFLFNBQVM7UUFDcEIsUUFBUSxFQUFFLFFBQVE7UUFDbEIsY0FBYyxFQUFFLGNBQWM7UUFDOUIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsR0FBRyxFQUFFLEtBQUs7UUFDVixJQUFJLEVBQUUsTUFBTTtRQUNaLEdBQUcsRUFBRSxLQUFLO1FBQ1YsUUFBUSxFQUFFLFVBQVU7UUFDcEIsY0FBYyxFQUFFLGdCQUFnQjtRQUNoQyxvQkFBb0IsRUFBRSxzQkFBc0I7UUFDNUMsV0FBVyxFQUFFLGFBQWE7UUFDMUIsTUFBTSxFQUFFLFFBQVE7UUFDaEIsR0FBRyxFQUFFLEtBQUs7UUFDVixHQUFHLEVBQUUsS0FBSztLQUNiLENBQUMsQ0FBQztJQUVIOzs7T0FHRztJQUVIOzs7O09BSUc7SUFFSCxTQUFTLFFBQVE7UUFDYixJQUFJLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU3QixJQUFJLFVBQVUsSUFBSSxZQUFZLEVBQUU7WUFDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7UUFFRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLE9BQU8sQ0FBQyxDQUFDO1FBQ2QsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FvQkc7SUFFSCxTQUFTLFlBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBQ2hHLElBQUksR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDZCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BcUJHO0lBRUgsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7UUFDOUYsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDZCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FB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WUFDZCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUNqQjthQUFNO1lBQ0gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNmLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNmLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENB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QUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxLQUFLLEdBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksS0FBSyxHQUFJLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QixJQUFJLE1BQU0sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRXZCLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDOUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLElBQUksRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDOUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLElBQUksRUFBRSxH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QyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLDRCQUE0QjtRQUU3RCxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUVoRixJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ04sT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3BELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDdkcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDdkcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN2RyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDdkcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN4RyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0csR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN4RyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDM0csR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ3hHLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7OztPQUtHO0lBRUgsU0FBUyxhQUFhLENBQUMsQ0FBQztRQUNwQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsNEJBQTRCO1FBRTdELE9BQU8sR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakYsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDekIsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsbURBQW1EO1FBRXBFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ25ELEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDVixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1YsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNWLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDVixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNuRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNuRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNuRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUNuRCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1YsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNWLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWCxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDbkQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDcEQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFDcEQsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNYLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWCxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1gsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ3BELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO1FBQ3BELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQU87UUFDaEMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDdkIsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDdkIsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFFdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQ1gsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNqRCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2pELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDbEQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNyRDthQUFNO1lBQ0gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDWixHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNiLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDZCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5QyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNqRDtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUMzQixHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTdCLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDYixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNiLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2IsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFSDs7Ozs7OztRQU9JO0lBRUosU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7OztPQVFHO0lBRUgsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSTtRQUMvQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1gsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDWCxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1osSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDdkIsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDdkIsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFDdkIsSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztRQUNsQixJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQ2xCLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7UUFFbEIsSUFBSSxHQUFHLEdBQUcsT0FBTyxFQUFFO1lBQ2YsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2QsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUNULENBQUMsSUFBSSxHQUFHLENBQUM7UUFDVCxDQUFDLElBQUksR0FBRyxDQUFDO1FBQ1QsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNaLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxnREFBZ0Q7UUFFN0QsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxrREFBa0Q7UUFFdkUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMzQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDM0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMzQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDM0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMzQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDM0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQzNDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUM1QyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFFNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQ1gsb0VBQW9FO1lBQ3BFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDbkI7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFVO1FBQy9CLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWhCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNYLGdFQUFnRTtZQUNoRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQixDQUFDLDhDQUE4QztRQUdoRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDNUIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUN4QixHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWhCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNYLGdFQUFnRTtZQUNoRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQixDQUFDLDhDQUE4QztRQUdoRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDNUIsT0FBTyxHQUFH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R0FBRyxDQUFDO1FBQ1QsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUNULENBQUMsSUFBSSxHQUFHLENBQUM7UUFDVCxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtEQUFrRDtRQUU3RCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7Ozs7T0FVRztJQUVILFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQzNCLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLDhDQUE4QztRQUVyRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7Ozs7OztPQVVHO0lBRUgsU0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDM0IsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsOENBQThDO1FBRXJFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFD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Q0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDOUI7YUFBTSxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksRUFBRTtZQUNuQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztZQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDOUI7YUFBTSxJQUFJLElBQUksR0FBRyxJQUFJLEVBQUU7WUFDcEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzVDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztZQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzlCO2FBQU07WUFDSCxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7U0FDckI7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7Ozs7Ozs7Ozs7OztPQWdCRztJQUVILFNBQVMsNEJBQTRCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUM5QyxrQkFBa0I7UUFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDeEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN4QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMvQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BbUJHO0lBRUgsU0FBUyxrQ0FBa0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN2RCxrQkFBa0I7UUFDbEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzFCLElBQUksSUFBSSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDMUIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDakMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMxRCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDMUQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzNELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNqQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUN0QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFD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V0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDMUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDMUQsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDNUQsSUFBSSxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDO1FBQ3hDLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQztRQUNyQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDaEQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDMUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxD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LENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBRSxJQUFJO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBRSxJQUFJO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJO1FBQ2xCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDL0MsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUMvQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7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QUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNiLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2YsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNmLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDZixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLEtBQUssQ0FBQyxDQUFDO1FBQ1osT0FBTyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUN4UCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLE1BQU0sQ0FBQyxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEgsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7O09BUUc7SUFFSCxTQUFTLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUs7UUFDNUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNoQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDaEMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUNoQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDaEMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwUyxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFH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LENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2IsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNiLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDYixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVosT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRUY7Ozs7Ozs7OztNQVNFO0lBQ0gsU0FBUyxjQUFjLENBQUMsR0FBRyxFQUFDLENBQUMsRUFBRSxDQUFDO1FBQzVCLEdBQUcsR0FBRyxHQUFHLElBQUUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFakYsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEYsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEYsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEYsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBR0g7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsU0FBUyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUc7UUFDakMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1QixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25FLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVuRSxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFSDs7O09BR0c7SUFFSDs7OztPQUlHO0lBRUgsU0FBUyxRQUFRO1FBQ2IsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFNUIsSUFBSSxVQUFVLElBQUksWUFBWSxFQUFFO1lBQzVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNkO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLE9BQU8sQ0FBQyxDQUFDO1FBQ2QsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLE1BQU0sQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDekIsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFD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Q0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7O09BUUc7SUFFSCxTQUFTLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLO1FBQ2pDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLGVBQWUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDRDs7Ozs7T0FLRztJQUVILFNBQVMsYUFBYSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDckIsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVoQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDVCx5Q0FBeUM7WUFDekMsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzVCO1FBRUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDcEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3BCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7O09BUUc7SUFFSCxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7Ozs7O09BVUc7SUFFSCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDL0IsSUFBSSxZQUFZLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixJQUFJLE9BQU8sR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxJQUFJLE9BQU8sR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDLEdBQUcs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QUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2RCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFD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QUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywrQkFBK0I7UUFFL0UsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNOLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQywrQkFBK0I7UUFFM0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0I7UUFFdEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywrQkFBK0I7UUFFL0UsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNOLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQywrQkFBK0I7UUFFM0MsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxD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QU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2xCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUks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QUFDO0lBQ2YsQ0FBQztJQUNEOzs7OztPQUtHO0lBRUgsU0FBUyxPQUFPLENBQUMsQ0FBQztRQUNkLElBQUksR0FBRyxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7Ozs7T0FRRztJQUVILFNBQVMsWUFBWSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDNUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7Ozs7O09BU0c7SUFFSCxTQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNwQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7OztPQVFHO0lBRUgsU0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSztRQUNuQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDN0IsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNEOzs7OztPQUtHO0lBRUgsU0FBUyxRQUFRLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLGVBQWUsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV4QyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7WUFDVCxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUI7UUFFRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNqQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNqQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNqQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNqQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBQ0Q7Ozs7Ozs7O09BUUc7SUFFSCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7O09BUUc7SUFFSCxTQUFTLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdB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QUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxlQUFlLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyx1QkFBdUI7UUFFdEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLGtDQUFrQztRQUV0RSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUNsRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLE1BQU0sQ0FBQyxHQUFHO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7OztPQUtHO0lBRUgsU0FBUyxLQUFLLENBQUMsQ0FBQztRQUNaLE9BQU8sT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDMUUsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FB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UyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3pCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUc7UUFDMUIsR0FBRyxJQUFJLEdBQUcsQ0FBQztRQUNYLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQ2xCLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUMxQixHQUFHLElBQUksR0FBRyxDQUFDO1FBQ1gsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDbEIsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMzQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHO1FBQzFCLEdBQUcsSUFBSSxHQUFHLENBQUM7UUFDWCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUNsQixFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcs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YTtZQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNWLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3BFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO1lBQ3BCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQ2xEO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7OztPQVNHO0lBRUgsU0FBUyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUMzQixJQUFJLFNBQVMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDdEMsQ0FBQyxJQUFJLFNBQVMsQ0FBQztRQUNmLENBQUMsSUFBSSxTQUFTLENBQUM7UUFDZixDQUFDLElBQUksU0FBUyxDQUFDO1FBQ2YsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNy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QyxHQUFHLENBQUMsQ0FBQztZQUNWLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDVixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1YsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNWLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDVixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ1YsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNiO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsT0FBTyxDQUFDLENBQUM7UUFDZCxJQUFJLEVBQUUsR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNEOzs7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QztRQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDckMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNyQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUN0QyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM3QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN0QixvQkFBb0I7UUFDcEIsSUFBSSxLQUFLLEdBQUcsUUFBUSxFQUFFLENBQUM7UUFDdkIsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixjQUFjLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLFVBQVUsQ0FBQyxHQUFHO1FBQ25CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7Ozs7Ozs7O09BY0c7SUFFSCxTQUFTLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDOUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7T0FLRztJQUVILElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUNyQjs7Ozs7T0FLRztJQUVILFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ25CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3JCOzs7Ozs7O09BT0c7SUFFSCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNuQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUMxQixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQ2hCLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUNoQixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFDaEIsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2pELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDakQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNqRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDbEQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUMxQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFDM0MsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQzNDLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUMzQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoRCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2QixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1osRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNaLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUMxQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFDM0MsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQzNDLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUMzQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoRCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2QixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1osRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNaLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRztRQUMxQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFDM0MsR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQzNDLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUMzQyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNoRCxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2QixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1osRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNaLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWixFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDbkQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ2pDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDL0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDL0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDL0MsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDL0MsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNWLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDVixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1YsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNWLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNsQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDVixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1YsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNWLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDVixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMvQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMvQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMvQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUMvQyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7Ozs7T0FRRztJQUVILFNBQVMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRztRQUN2QywwQkFBMEI7UUFDMUIsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRTtZQUN6QixPQUFPLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNsQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNsQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNsQyxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ25ELElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQy9DLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7OztPQVFHO0lBRUgsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDekIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNWLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1YsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2RyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2RyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7O09BR0c7SUFFSCxJQUFJLEtBQUssR0FBRyxVQUFVLENBQUM7SUFDdkI7Ozs7Ozs7O09BUUc7SUFFSCxTQUFTLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDdEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNsQjs7Ozs7Ozs7O09BU0c7SUFFSCxTQUFTLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxLQUFLLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDdkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDdkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7O09BT0c7SUFFSCxTQUFTLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUN4Qjs7O09BR0c7SUFFSCxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUM7SUFDckI7Ozs7OztPQU1HO0lBRUgsSUFBSSxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQ3RDOzs7T0FHRztJQUVILElBQUksUUFBUSxHQUFHLGVBQWUsQ0FBQztJQUMvQjs7Ozs7OztPQU9HO0lBRUgsU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxTQUFTLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRW5DLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRTtZQUNmLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2pDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDMUIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUMxQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDO1lBQzFCLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDMUIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxPQUFPLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNwRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDWixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1osR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDekMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDekMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDekMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxPQUFPLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDNUM7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7T0FLRztJQUVILFNBQVMsS0FBSyxDQUFDLENBQUM7UUFDWixPQUFPLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDbkksQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hKLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNsQixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1QsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDVCxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxH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QUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztPQU9HO0lBRUgsU0FBUyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3BCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDbkIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7Ozs7T0FPRztJQUVILFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN0QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7Ozs7T0FRRztJQUVILFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUs7UUFDbkMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzdCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFFSCxTQUFTLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNmLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUNEOzs7Ozs7T0FNRztJQUVILFNBQVMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDZixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFFSCxTQUFTLFFBQVEsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFDRDs7Ozs7T0FLRztJQUVILFNBQVMsZUFBZSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2YsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0Q7Ozs7OztPQU1HO0lBRUgsU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcs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QyxDQUFDLENBQUM7b0JBQzVDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzlFLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNuRDtxQkFBTSxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDN0IsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2hELEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN2QztxQkFBTTtvQkFDSCxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVDLEdBQUcsQ0FBQyxJQUFJLENBQUMs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LENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQixDQUFDLDhDQUE4QztRQUdoRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMzQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLEdBQUcs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L0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ1IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBQ3ZCLElBQUksR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1FBRXZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQWlFRTtRQUVGLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNYLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakQsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNqRCxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xELEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDckQ7YUFBTTtZQUNILEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNYLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWCxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ1osR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNaLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2IsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNiLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDYixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNkLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5QyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDakQ7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7OztRQU9JO0lBRU0sMEJBQVcsR0FBckIsVUFBc0IsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDUixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDYixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNwQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7OztNQUtFO0lBRVEsMEJBQVcsR0FBckIsVUFBc0IsQ0FBQztRQUNuQixJQUFJLEdBQUcsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2QsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBTUwsV0FBQztBQUFELENBN2VBLEFBNmVDLENBN2V5QixhQUFHLEdBNmU1QjtBQTdlWSxvQkFBSTs7Ozs7QUNIakIsdUNBQXdDO0FBS3hDLElBQUksWUFBWSxHQUFVLENBQUMsQ0FBQztBQUM1QixJQUFZLGNBR1g7QUFIRCxXQUFZLGNBQWM7SUFDdEIsbURBQVEsQ0FBQTtJQUNSLHFEQUFLLENBQUE7QUFDVCxDQUFDLEVBSFcsY0FBYyxHQUFkLHNCQUFjLEtBQWQsc0JBQWMsUUFHekI7QUFDRDs7R0FFRztBQUNIO0lBQ0k7UUFJTyxVQUFLLEdBQWtCLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFxQjNDLFdBQU0sR0FBVyxLQUFLLENBQUMsQ0FBQSxNQUFNO1FBeEJoQyxJQUFJLENBQUMsRUFBRSxHQUFHLFlBQVksRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBdUJNLDBCQUFLLEdBQVo7UUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFBLFlBQVk7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUksSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsZ0JBQWdCLHVCQUFnQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFDTCxpQkFBQztBQUFELENBL0NBLEFBK0NDLElBQUE7QUEvQ2EsZ0NBQVU7QUFpRHhCO0lBQXFDLG1DQUFVO0lBQzNDO1FBQUEsWUFDSSxpQkFBTyxTQUlWO1FBSEcsS0FBSSxDQUFDLG9CQUFvQixHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RCxLQUFJLENBQUMsWUFBWSxHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxLQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7O0lBQ2pCLENBQUM7SUFDTSwrQkFBSyxHQUFaO1FBQ0ksaUJBQU0sS0FBSyxXQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUM7UUFDbEMsSUFBSSxDQUFDLGdCQUFnQixvQkFBNkIsQ0FBQztRQUNuRCxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbEQsaUJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBUUwsc0JBQUM7QUFBRCxDQTFCQSxBQTBCQyxDQTFCb0MsVUFBVSxHQTBCOUM7QUExQlksMENBQWU7QUE0QjVCOztHQUVHO0FBQ0g7SUFBQTtJQXFDQSxDQUFDO0lBbkNXLGtCQUFHLEdBQVYsVUFBVyxJQUFtQjtRQUN2QixJQUFJLElBQUksR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDO1FBQ2hDLElBQUksT0FBa0IsQ0FBQztRQUN2QixLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFDL0I7WUFDSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsSUFBRyxJQUFJLENBQUMsS0FBSyxJQUFFLElBQUksSUFBRSxJQUFJLENBQUMsTUFBTSxJQUFFLEtBQUssRUFDdkM7Z0JBQ0ksT0FBTyxHQUFJLElBQUksQ0FBQztnQkFDaEIsTUFBTTthQUNUO1NBQ0o7UUFFRCxRQUFPLElBQUksRUFDWDtZQUNJLEtBQUssY0FBYyxDQUFDLElBQUk7Z0JBQUMsT0FBTyxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7Z0JBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFBQSxNQUFNO1lBQzdFLEtBQUssY0FBYyxDQUFDLEtBQUs7Z0JBQUMsT0FBTyxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7Z0JBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFBQSxNQUFNO1NBQ3RGO1FBQ0QsT0FBTyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDdEIsT0FBTyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUNNLHFCQUFNLEdBQWIsVUFBYyxPQUFvQztRQUM3QyxJQUFHLE9BQU8sWUFBWSxLQUFLLEVBQzNCO1lBQ0ksSUFBSSxHQUFHLEdBQUcsT0FBNEIsQ0FBQztZQUN2QyxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLE1BQU0sRUFBQyxDQUFDLEVBQUUsRUFDOUI7Z0JBQ0ksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2xCO1NBQ0o7YUFFRDtZQUNLLE9BQXNCLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDbkM7SUFDTixDQUFDO0lBbkNjLG9CQUFLLEdBQXFCLEVBQUUsQ0FBQztJQW9DakQscUJBQUM7Q0FyQ0QsQUFxQ0MsSUFBQTtBQXJDWSx3Q0FBYzs7OztBQzdGM0IsK0JBQThCO0FBRTlCOztHQUVHO0FBQ0g7SUFBbUMseUJBQUk7SUFDbkM7ZUFDSSxpQkFBTztJQUNYLENBQUM7SUFDTCxZQUFDO0FBQUQsQ0FKQSxBQUlDLENBSmtDLFdBQUksR0FJdEM7Ozs7O0FDVEQsaUNBQTRCO0FBRzVCLDBDQUFxQztBQUVyQyxtREFBa0Q7QUFHbEQsMkRBQXNEO0FBQ3RELHlDQUFvQztBQUdwQztJQUFxQywyQkFBSztJQVN0QztlQUNJLGlCQUFPO0lBQ1gsQ0FBQztJQUVNLHNCQUFJLEdBQVg7UUFFSSxJQUFJLEVBQUUsR0FBRyxnQkFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBSSx3QkFBYyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsZUFBSyxDQUFDLFVBQVUsRUFBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7UUFFMUQsdUNBQXVDO1FBQ3ZDLDBDQUEwQztRQUMxQyx3Q0FBd0M7UUFDeEMsa0NBQWtDO1FBRWxDLDJDQUEyQztRQUMzQyx3Q0FBd0M7UUFDeEMsb0NBQW9DO1FBRXBDLHVDQUF1QztRQUN2Qyx5Q0FBeUM7UUFDekMsa0NBQWtDO1FBRWxDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSwyQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUF3QixDQUFDO1FBQUEsQ0FBQztRQUU1RSwrQkFBK0I7UUFDL0Isc0NBQXNDO1FBQ3RDLHdDQUF3QztRQUN4Qyw4QkFBOEI7UUFDOUIsOEJBQThCO0lBQ2xDLENBQUM7SUFFTSxnQ0FBYyxHQUFyQjtRQUNJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBQ0wsY0FBQztBQUFELENBakRBLEFBaURDLENBakRvQyxlQUFLLEdBaUR6Qzs7Ozs7QUM5REQsaUNBQTRCO0FBQzVCLHVDQUFrQztBQUNsQyxtQ0FBOEI7QUFDOUIsNkNBQXdDO0FBQ3hDLHVDQUFrQztBQUNsQywwQ0FBcUM7QUFDckMsK0JBQThCO0FBRTlCLDZEQUF3RDtBQUN4RCwrREFBMEQ7QUFFMUQsMkRBQXNEO0FBRXRELHlDQUFvQztBQUdwQyx1Q0FBa0M7QUFDbEMscUNBQWdDO0FBTWhDO0lBQXFDLDJCQUFLO0lBZ0N0QztRQUFBLFlBQ0ksaUJBQU8sU0FDVjtRQXJCTyxjQUFRLEdBQUc7WUFDZixJQUFJLEVBQUUsQ0FBQztZQUNQLElBQUksRUFBRSxDQUFDO1lBQ1AsSUFBSSxFQUFFLENBQUM7WUFDUCxRQUFRLEVBQUUsR0FBRztZQUNiLGVBQWUsRUFBRSxFQUFFO1lBQ25CLFFBQVEsRUFBRSxDQUFDO1lBQ1gsUUFBUSxFQUFFLENBQUM7WUFDWCxRQUFRLEVBQUUsRUFBRTtZQUNaLFFBQVEsRUFBRSxDQUFDO1lBQ1gsUUFBUSxFQUFFLENBQUM7WUFDWCxRQUFRLEVBQUUsQ0FBQztZQUNYLFFBQVEsRUFBRSxDQUFDO1lBQ1gsT0FBTyxFQUFFLEdBQUc7WUFDWixTQUFTLEVBQUUsS0FBSztZQUNoQixjQUFjLEVBQUUsR0FBRztTQUNwQixDQUFDOztJQUtKLENBQUM7SUFDTSxzQkFBSSxHQUFYO1FBQ0ksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxFQUFFLEdBQUcsZ0JBQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxXQUFJLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWhDLElBQUksTUFBTSxHQUFHLElBQUksV0FBSSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGdCQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxnQkFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLGdCQUFnQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxlQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRS9CLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSwyQkFBaUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoRCxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsR0FBRywyQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQW9CLENBQUM7UUFDbkYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGNBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksY0FBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLGdCQUFnQixDQUFDO1FBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUMsVUFBVTtRQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM3QixJQUFJLElBQUksR0FBRyxJQUFJLGNBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLENBQUMsR0FBRyxHQUFHLGNBQWMsQ0FBQztnQkFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbkM7U0FDSjtRQUVELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxtQkFBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLGdCQUFnQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGdCQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUk1QixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFMUIsVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELFVBQVU7SUFDRix1QkFBSyxHQUFiO1FBQ0ksSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsSUFBSSxjQUFjLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUE7UUFDN0MsY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDckUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxHQUFHO1lBQ2pHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUc7WUFDckUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRztZQUNyRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHO1lBQ3JFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUc7WUFDN0UsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sR0FBRztZQUN2RSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHO1lBQ3ZFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUc7WUFFdkUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUc7WUFDdEUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFB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LENBQUM7Z0JBQ1AsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNQLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFFUCxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1QsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO2dCQUNULENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRztnQkFFVCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNWLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDWDtZQUNELEtBQUssRUFBRTtnQkFDTCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNWLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDVixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNWLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDVixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNWLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDVixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNWLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFTLEtBQUs7YUFDekI7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxVQUFVO2FBQ3REO1NBQ0YsQ0FBQTtRQUNPLGlCQUFZLEdBQUc7WUFDckIsUUFBUSxFQUFFO2dCQUNSLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDUCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1AsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNQLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFJLElBQUk7YUFDaEI7WUFDRCxLQUFLLEVBQUU7Z0JBQ0wsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDVixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNWLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1YsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNYO1NBQ0YsQ0FBQTtRQTFFQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUEwRU8sc0JBQUksR0FBWjtRQUNFLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQ2pGO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLHdCQUFlLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXZGLFVBQVU7UUFDVixJQUFJLENBQUMsYUFBYSxHQUFHLHdCQUFlLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0UsZUFBZTtRQUNmLElBQUksQ0FBQyxxQkFBcUIsR0FBRyx3QkFBZSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFJRDs7Ozs7OztPQU9HO0lBQ0ksMEJBQVEsR0FBZixVQUFnQixJQUFrQixFQUFFLE1BQW9CLEVBQUUsS0FBb0M7UUFBcEMsc0JBQUEsRUFBQSxRQUFRLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDNUYsSUFBSSxJQUFJLEdBQUcsaUJBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUM3QyxJQUFJLEVBQUUsR0FBRyxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRCxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLHdCQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDcEcsd0JBQWUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzFGLHdCQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RGLHdCQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFTyw2QkFBVyxHQUFuQjtRQUNFLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQSxPQUFPO1FBQzlFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUN2RSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDekUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLHdCQUFlLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFTSwyQkFBUyxHQUFoQixVQUFpQixJQUFrQixFQUFFLE1BQW9CLEVBQUUsS0FBb0M7UUFBcEMsc0JBQUEsRUFBQSxRQUFRLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDN0YsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ25CLElBQUksSUFBSSxHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDN0MsSUFBSSxFQUFFLEdBQUcsaUJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsaUJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5Qyx3QkFBZSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hHLHdCQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUMxRix3QkFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0Rix3QkFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV6RSxDQUFDO0lBRUgsY0FBQztBQUFELENBdklBLEFBdUlDLElBQUE7QUFFRDtJQUNFLHFCQUFZLEVBQUU7UUFrQmQsWUFBWTtRQUNKLG1CQUFjLEdBQUcsRUFDeEIsQ0FBQztRQUNNLHlCQUFvQixHQUFHO1lBQzdCLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUN2QixxQkFBcUIsRUFBRSxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUM7WUFDM0MsNEJBQTRCLEVBQUUsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDO1NBQ25ELENBQUM7UUFFTSwyQkFBc0IsR0FDNUIsNEJBQTRCO1lBQzVCLHdCQUF3QjtZQUN4QixlQUFlO1lBQ2Ysc0NBQXNDO1lBQ3RDLEdBQUcsQ0FBQTtRQUVHLDZCQUF3QixHQUM5QiwwQkFBMEI7WUFDMUIsdUJBQXVCO1lBQ3ZCLGVBQWU7WUFDZix5QkFBeUI7WUFDekIsR0FBRyxDQUFBO1FBdENILElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQXNDTywwQkFBSSxHQUFaO1FBQ0UsSUFBSSxDQUFDLGFBQWEsR0FBRyx3QkFBZSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUNuSCxJQUFJLENBQUMsWUFBWSxHQUFHLHdCQUFlLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztRQUU3RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBLEtBQUs7UUFFN0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsUUFBUSxHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsaUJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyx5QkFBeUIsR0FBRyxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBSSxVQUFVLEdBQUc7WUFDZixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNiLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDYixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNiLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7U0FDZCxDQUFDO1FBQ0YsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDMUIsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xEO1NBQ0Y7UUFDRCxJQUFJLFVBQVUsR0FBUSx5QkFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUN6QixPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDM0IsVUFBVSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7UUFDOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyx3QkFBZSxDQUFDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTlFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUV4QixDQUFDO0lBQ08sbURBQTZCLEdBQXJDO1FBQ0UsOENBQThDO1FBQzlDLDBDQUEwQztRQUMxQyw0Q0FBNEM7UUFDNUMsdUNBQXVDO1FBQ3ZDLFlBQVk7UUFDWixJQUFNLFNBQVMsR0FBRztZQUNoQixDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDVixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ1QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNULENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNULENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDUixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDUCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNSLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU87U0FDaEIsQ0FBQztRQUNGLElBQU0sT0FBTyxHQUFHO1lBQ2QsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDdEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNYLENBQUM7UUFDRixPQUFPLHdCQUFlLENBQUMsMEJBQTBCLENBQUM7WUFDaEQsUUFBUSxFQUFFLFNBQVM7WUFDbkIsT0FBTyxFQUFFLE9BQU87U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELCtCQUErQjtJQUN2Qiw0Q0FBc0IsR0FBOUIsVUFBK0IsS0FBUztRQUFULHNCQUFBLEVBQUEsU0FBUztRQUN0Qyw4Q0FBOEM7UUFDOUMsMENBQTBDO1FBQzFDLGdDQUFnQztRQUNoQyxpREFBaUQ7UUFDakQsWUFBWTtRQUNaLElBQU0sU0FBUyxHQUFHO1lBQ2hCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDVCxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNSLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ1IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ1AsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNULENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDUixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDUCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7U0FDUixDQUFDO1FBQ0YsSUFBTSxPQUFPLEdBQUc7WUFDZCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN0QixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUN0QixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUN2QixDQUFDO1FBQ0Ysb0JBQW9CO1FBQ3BCLElBQU0sV0FBVyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUMzQyxJQUFNLFlBQVksR0FBRyxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDcEMsSUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQztZQUMxQixJQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDOUIsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixJQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFCLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN4Qix3QkFBd0I7WUFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzlDLGdEQUFnRDtZQUNoRCxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxDQUFDLEVBQUUsYUFBYSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBRSxHQUFHO1lBQ3ZCLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLHdCQUFlLENBQUMsMEJBQTBCLENBQUM7WUFDaEQsUUFBUSxFQUFFLFNBQVM7WUFDbkIsT0FBTyxFQUFFLE9BQU87U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNEOzs7Ozs7O01BT0U7SUFDSywwQkFBSSxHQUFYLFVBQVksVUFBVSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxrQkFBa0I7UUFDeEUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNqQix3Q0FBd0M7UUFDeEMsNkNBQTZDO1FBQzdDLGlCQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3JELGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXO1FBQ25GLDREQUE0RDtRQUM1RCwyQ0FBMkM7UUFDM0MseUNBQXlDO1FBQ3pDLGtDQUFrQztRQUNsQyxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQSx3QkFBd0I7UUFDdkcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpDLHVEQUF1RDtRQUN2RCxtQ0FBbUM7UUFDbkMsd0JBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDM0YsbUJBQW1CO1FBQ25CLHdCQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFO1lBQ3pELFFBQVEsRUFBRSxJQUFJLENBQUMsV0FBVztZQUMxQixPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdEIsQ0FBQyxDQUFDO1FBQ0gsd0JBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFNUQsNkNBQTZDO1FBQzdDLHlCQUF5QjtRQUN6QixpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLGlCQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ3pHLG1DQUFtQztRQUNuQyx3QkFBZSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQy9GLG1CQUFtQjtRQUNuQix3QkFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRTtZQUN6RCxRQUFRLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDMUIsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3RCLENBQUMsQ0FBQztRQUNILHdCQUFlLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEUsSUFBSTtRQUNKLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsV0FBVztRQUNYLDhCQUE4QjtRQUM5QixpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQSx3QkFBd0I7UUFDdkcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRXBELElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQsMkJBQTJCO0lBQ25CLHFDQUFlLEdBQXZCLFVBQXdCLFVBQVUsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsa0JBQWtCO1FBRW5GLGNBQWM7UUFDZCxpQkFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNyRCxpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBQyxVQUFVLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xFLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDLElBQUksQ0FBQyxRQUFRLEVBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUN2RSxpQkFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFL0QsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNqQixnQkFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLHdCQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdGLGlCQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckcsaUJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqRixpQkFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSztRQUM5Ryx3QkFBZSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDL0Usd0JBQWUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDckYsd0JBQWUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3JELGdCQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFJRSxRQUFRO0lBQ0Qsb0NBQWMsR0FBdEI7UUFDSSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ2pCLElBQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUMzQyxJQUFNLE1BQU0sR0FBRyxjQUFjLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDakQsSUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLGlCQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUscUJBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyRyw2Q0FBNkM7UUFDN0MsSUFBTSxlQUFlLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEMsSUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN0QixpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVNLDBDQUFvQixHQUEzQjtRQUNFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO0lBQ2pDLENBQUM7SUFDTSwyQ0FBcUIsR0FBNUI7UUFDRSxPQUFPLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztJQUN4QyxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQXJRQSxBQXFRQyxJQUFBO0FBclFZLGtDQUFXOzs7O0FDNUt4QiwwQ0FBcUM7QUFDckMsbURBQWtEO0FBRWxELGlDQUE0QjtBQUM1Qiw2Q0FBd0M7QUFDeEMseURBQW9EO0FBRXBEOztHQUVHO0FBQ0g7SUFBQTtRQXFDSSxrRkFBa0Y7UUFDMUUsVUFBSyxHQUFHLEVBQUUsQ0FBQyxDQUFBLFlBQVk7UUFDdkIsU0FBSSxHQUFHLEVBQUUsQ0FBQyxDQUFBLFlBQVk7UUFDdEIsZ0JBQVcsR0FBRyxFQUFFLENBQUMsQ0FBQSxTQUFTO1FBQzFCLGNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBLE9BQU87UUFDdkIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBLE9BQU87UUFDcEQsZ0JBQVcsR0FBRyxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLE9BQU87SUErQzdELENBQUM7SUF4Rkcsc0JBQWtCLDBCQUFRO2FBQTFCO1lBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2pCLElBQUksRUFBRSxHQUFHLGdCQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztnQkFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO2FBQ3pDO1lBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBS00sa0NBQVMsR0FBaEIsVUFBaUIsSUFBWSxFQUFFLE1BQWMsRUFBRSxLQUFrQixFQUFFLElBQWtCLEVBQUUsR0FBZ0I7UUFBeEQsc0JBQUEsRUFBQSxVQUFrQjtRQUFFLHFCQUFBLEVBQUEsVUFBa0I7UUFBRSxvQkFBQSxFQUFBLFFBQWdCO1FBQ25HLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksSUFBSSxJQUFJLGVBQUssQ0FBQyxnQkFBZ0IsRUFBRTtZQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksMkJBQWlCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDakYsbUJBQW1CO1lBQ25CLGdDQUFnQztZQUNoQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDekI7YUFDSSxJQUFJLElBQUksSUFBSSxlQUFLLENBQUMsVUFBVSxFQUFFO1lBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxxQkFBVyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUN6QjtJQUVMLENBQUM7SUFDTSxrQ0FBUyxHQUFoQixVQUFpQixJQUFLO1FBQ2xCLE9BQU8sSUFBSSxJQUFJLGVBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUM1RSxDQUFDO0lBQ00sb0NBQVcsR0FBbEI7UUFDSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUNNLG9DQUFXLEdBQWxCO1FBQ0ksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFVTSwwQ0FBaUIsR0FBeEIsVUFBeUIsS0FBSyxFQUFFLEVBQUU7UUFDOUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFDTSxvQ0FBVyxHQUFsQixVQUFtQixLQUFLLEVBQUUsRUFBRTtRQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUNNLG1DQUFVLEdBQWpCLFVBQWtCLEtBQUssRUFBRSxFQUFFO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBQ00sd0NBQWUsR0FBdEIsVUFBdUIsS0FBSyxFQUFFLEVBQUU7UUFDOUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFDTSx5Q0FBZ0IsR0FBdkIsVUFBd0IsS0FBSyxFQUFFLEVBQUU7UUFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFDTSx5Q0FBZ0IsR0FBdkIsVUFBd0IsS0FBSyxFQUFFLEVBQUU7UUFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFDTSx5Q0FBZ0IsR0FBdkIsVUFBd0IsS0FBSyxFQUFFLEVBQUU7UUFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ2pDLENBQUM7SUFDTSw4Q0FBcUIsR0FBNUIsVUFBNkIsS0FBSyxFQUFFLEVBQUU7UUFDcEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxxQkFBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUNNLDhDQUFxQixHQUE1QixVQUE2QixLQUFLLEVBQUUsRUFBRTtRQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLHFCQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBQ00sOENBQXFCLEdBQTVCLFVBQTZCLEtBQUssRUFBRSxFQUFFO1FBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcscUJBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFDSCxRQUFRO0lBQ0EsaUNBQVEsR0FBaEI7UUFDSSxJQUFJLGNBQWMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM5QyxjQUFjLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzVILGNBQWMsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakgsY0FBYyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5RyxjQUFjLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUgsY0FBYyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUEsSUFBSTtRQUN4SSxjQUFjLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQSxJQUFJO1FBQ3hJLGNBQWMsQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBLElBQUk7UUFDeEksY0FBYyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQSxJQUFJO1FBQ2pKLGNBQWMsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUEsSUFBSTtRQUNqSixjQUFjLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFBLElBQUk7SUFDckosQ0FBQztJQUVMLHFCQUFDO0FBQUQsQ0ExRkEsQUEwRkMsSUFBQTs7Ozs7QUNyR0QsbUNBQThCO0FBQzlCLGlDQUE0QjtBQUU1QjtJQUF5QywrQkFBTTtJQUMzQyxxQkFBWSxJQUFJLEVBQUMsTUFBTSxFQUFDLElBQUksRUFBQyxHQUFHO2VBQzVCLGtCQUFNLElBQUksRUFBQyxNQUFNLEVBQUMsSUFBSSxFQUFDLEdBQUcsRUFBQyxlQUFLLENBQUMsVUFBVSxDQUFDO0lBQ2hELENBQUM7SUFDTCxrQkFBQztBQUFELENBSkEsQUFJQyxDQUp3QyxnQkFBTSxHQUk5Qzs7Ozs7QUNORCx1Q0FBd0M7QUFDeEMsbUNBQThCO0FBQzlCLGlDQUE0QjtBQUU1QjtJQUErQyxxQ0FBTTtJQUNqRCwyQkFBWSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHO1FBQW5DLFlBQ0ksa0JBQU0sSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLGVBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxTQUV6RDtRQURHLEtBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7SUFDaEIsQ0FBQztJQUVPLGdDQUFJLEdBQVo7UUFDSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxxQ0FBUyxHQUFoQixVQUFpQixJQUFXO1FBQ3JCLGlCQUFNLFNBQVMsWUFBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU0saUNBQUssR0FBWjtRQUNJLE9BQU8saUJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRDs7T0FFRztJQUNJLHdDQUFZLEdBQW5CLFVBQW9CLElBQVk7UUFFM0IscUJBQXFCO1FBQ3JCLElBQUksSUFBSSxLQUFLLENBQUM7UUFFZiwrREFBK0Q7UUFDL0QsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7UUFDN0IsSUFBSSxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ25CLDZDQUE2QztRQUM3QyxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDL0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVwRCw2Q0FBNkM7UUFDN0MsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRXBDLHlEQUF5RDtRQUN6RCxVQUFVLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25CLFVBQVUsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsVUFBVSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVuQixJQUFJLDZCQUE2QixHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoRCxFQUFFLENBQUMsUUFBUSxDQUFDLDZCQUE2QixFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUUvRSxJQUFJLG9DQUFvQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN2RCxFQUFFLENBQUMsTUFBTSxDQUFDLG9DQUFvQyxFQUFFLDZCQUE2QixDQUFDLENBQUM7UUFDL0UsT0FBTyxvQ0FBb0MsQ0FBQztJQUNoRCxDQUFDO0lBQ0wsd0JBQUM7QUFBRCxDQW5EQSxBQW1EQyxDQW5EOEMsZ0JBQU0sR0FtRHBEOzs7OztBQ3hERCxrQkFBZTtJQUNYLGFBQWE7SUFDYixnQkFBZ0IsRUFBRSxDQUFDO0lBQ25CLFVBQVUsRUFBRSxDQUFDO0lBRWIsU0FBUztJQUNULGlCQUFpQixFQUFFLENBQUM7SUFDcEIsV0FBVyxFQUFFLENBQUM7SUFDZCxVQUFVLEVBQUUsQ0FBQztJQUNiLGFBQWEsRUFBRSxDQUFDO0lBRWhCLFVBQVU7SUFDVixXQUFXLEVBQUUsQ0FBQztJQUNkLFdBQVcsRUFBRSxDQUFDO0lBQ2QsV0FBVyxFQUFFLENBQUM7SUFFZCxpQkFBaUI7SUFDakIsc0NBQXNDO0lBQ3RDLHdDQUF3QztJQUN4Qyx3Q0FBd0M7SUFDeEMsd0NBQXdDO0lBQ3hDLHdDQUF3QztJQUN4Qyx1Q0FBdUM7SUFDdkMsdUNBQXVDO0lBQ3ZDLHVDQUF1QztJQUN2Qyx1Q0FBdUM7SUFDdkMsdUNBQXVDO0lBQ3ZDLHVDQUF1QztJQUN2Qyw0Q0FBNEM7SUFDNUMsOENBQThDO0lBRTlDLGNBQWM7SUFDZCxXQUFXLEVBQUUsQ0FBQztJQUNkLFdBQVcsRUFBRSxDQUFDO0lBQ2QsYUFBYSxFQUFFLENBQUM7SUFDaEIsWUFBWSxFQUFFLENBQUM7SUFFZixFQUFFO0lBQ0YsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQixpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGlCQUFpQixFQUFFLENBQUM7SUFDcEIsa0JBQWtCLEVBQUUsQ0FBQztJQUNyQixpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGtCQUFrQixFQUFFLENBQUM7SUFDckIsbUJBQW1CLEVBQUUsQ0FBQztDQUN2QixDQUFDOzs7OztBQzVDSixPQUFPO0FBQ1AsSUFBWSxRQU9YO0FBUEQsV0FBWSxRQUFRO0lBQ2hCLHlDQUFTLENBQUE7SUFDVCx1Q0FBUSxDQUFBO0lBQ1IsdUNBQUksQ0FBQTtJQUNKLHlDQUFLLENBQUE7SUFDTCxtQ0FBRSxDQUFBO0lBQ0YsdUNBQUksQ0FBQTtBQUNSLENBQUMsRUFQVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQU9uQjtBQUNELFVBQVU7QUFDVjtJQUNJLHNCQUFZLElBQUksRUFBRSxJQUFtQixFQUFFLEtBQW9CLEVBQUUsUUFBdUIsRUFBQyxPQUFxQjtRQVdsRyxTQUFJLEdBQWEsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUNoQyxZQUFPLEdBQWlCLEVBQUUsQ0FBQztRQUMzQixPQUFFLEdBQWtCLEVBQUUsQ0FBQztRQUN2QixXQUFNLEdBQWtCLEVBQUUsQ0FBQztRQUMzQixXQUFNLEdBQWtCLEVBQUUsQ0FBQztRQUUxQixxQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFDN0IscUJBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBQzdCLHFCQUFnQixHQUFXLENBQUMsQ0FBQztRQUM3QixxQkFBZ0IsR0FBVyxDQUFDLENBQUM7UUFDN0IsaUJBQVksR0FBVyxDQUFDLENBQUM7UUFDekIsaUJBQVksR0FBVyxDQUFDLENBQUM7UUFDekIscUJBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBQzdCLHFCQUFnQixHQUFXLENBQUMsQ0FBQztRQXZCbEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQzVELElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3JELElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLE1BQU0sR0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakUsQ0FBQztJQWVELHNCQUFJLDhCQUFJO2FBQVI7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxnQ0FBTTtRQURWLGNBQWM7YUFDZDtZQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQUNELHNCQUFJLDRCQUFFO2FBQU47WUFDSSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7SUFDRCxzQkFBSSxnQ0FBTTthQUFWO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBQ0Qsc0JBQUksaUNBQU87YUFBWDtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQUdMLG1CQUFDO0FBQUQsQ0E1Q0EsQUE0Q0MsSUFBQTtBQTVDWSxvQ0FBWTtBQTZDekI7SUFBQTtJQTRNQSxDQUFDO0lBbEZpQixvQkFBVyxHQUF6QixVQUEwQixJQUFjO1FBQ3BDLElBQUksTUFBTSxHQUFHLFVBQVUsR0FBVztZQUM5QixPQUFPLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQ2xDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFDckQsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUNwRCxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ3ZELFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWhFLENBQUMsQ0FBQztRQUNGLFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyxRQUFRLENBQUMsS0FBSztnQkFDZixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsS0FBSyxRQUFRLENBQUMsSUFBSTtnQkFDZCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsS0FBSyxRQUFRLENBQUMsSUFBSTtnQkFDZCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsS0FBSyxRQUFRLENBQUMsS0FBSztnQkFDZixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDbEMsS0FBSyxRQUFRLENBQUMsRUFBRTtnQkFDWixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDL0IsS0FBSyxRQUFRLENBQUMsSUFBSTtnQkFDZCxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDcEM7SUFDTCxDQUFDO0lBQ2EsZ0JBQU8sR0FBckI7UUFDSSxJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLGFBQWEsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6RCxJQUFJLFVBQVUsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuRCxJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RCxJQUFJLFVBQVUsR0FBRyxVQUFVLEdBQVU7WUFDakMsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUNaLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFDbEIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUNqQixZQUFZLENBQUMsR0FBRyxDQUFDLEVBQ2pCLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFDbEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUNmLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQTtRQUNELElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQyxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xDLElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwQyxPQUFPO1lBQ0gsTUFBTSxFQUFDLE1BQU07WUFDYixNQUFNLEVBQUMsTUFBTTtZQUNiLE1BQU0sRUFBQyxNQUFNO1lBQ2IsT0FBTyxFQUFDLE9BQU87WUFDZixFQUFFLEVBQUMsYUFBYTtTQUNuQixDQUFBO0lBRUwsQ0FBQztJQUNhLGlCQUFRLEdBQXRCO1FBQ0ksSUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekQsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsSUFBSSxhQUFhLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekQsSUFBSSxVQUFVLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkQsSUFBSSxZQUFZLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkQsSUFBSSxVQUFVLEdBQUcsVUFBVSxHQUFVO1lBQ2pDLE9BQU8sRUFBRSxDQUFDLE1BQU0sQ0FDWixhQUFhLENBQUMsR0FBRyxDQUFDLEVBQ2xCLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUNmLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUNqQixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtRQUMzQixDQUFDLENBQUE7UUFDRCxJQUFJLE1BQU0sR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEMsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksTUFBTSxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQyxJQUFJLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEMsT0FBTztZQUNILE1BQU0sRUFBQyxNQUFNO1lBQ2IsTUFBTSxFQUFDLE1BQU07WUFDYixNQUFNLEVBQUMsTUFBTTtZQUNiLE9BQU8sRUFBQyxPQUFPO1lBQ2YsRUFBRSxFQUFDLGFBQWE7U0FDbkIsQ0FBQTtJQUVMLENBQUM7SUExTUQsT0FBTztJQUNRLGVBQU0sR0FBRztRQUNwQixhQUFhO1FBQ2IsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBQ2IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7UUFDZCxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQ2YsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFFZCxZQUFZO1FBQ1osR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUc7UUFDZCxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHO1FBQ2YsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHO1FBQ2hCLEdBQUcsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUc7UUFFZixZQUFZO1FBQ1osQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7UUFDZCxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHO1FBQ2YsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHO1FBQ2hCLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFFZixhQUFhO1FBQ2IsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBQ2IsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDZCxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHO1FBQ2YsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUc7UUFFZCxXQUFXO1FBQ1gsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO1FBQ2IsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUc7UUFDZCxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHO1FBQ2YsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUc7UUFFZCxjQUFjO1FBQ2QsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7UUFDZCxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHO1FBQ2YsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHO1FBQ2hCLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUc7S0FDbEIsQ0FBQztJQUNGLFFBQVE7SUFDTyxjQUFLLEdBQUc7UUFDbkIsWUFBWTtRQUNaLEdBQUcsRUFBRSxHQUFHO1FBQ1IsR0FBRyxFQUFFLEdBQUc7UUFDUixHQUFHLEVBQUUsR0FBRztRQUNSLEdBQUcsRUFBRSxHQUFHO1FBRVIsWUFBWTtRQUNaLEdBQUcsRUFBRSxHQUFHO1FBQ1IsR0FBRyxFQUFFLEdBQUc7UUFDUixHQUFHLEVBQUUsR0FBRztRQUNSLEdBQUcsRUFBRSxHQUFHO1FBRVIsWUFBWTtRQUNaLEdBQUcsRUFBRSxHQUFHO1FBQ1IsR0FBRyxFQUFFLEdBQUc7UUFDUixHQUFHLEVBQUUsR0FBRztRQUNSLEdBQUcsRUFBRSxHQUFHO1FBRVIsYUFBYTtRQUNiLEdBQUcsRUFBRSxHQUFHO1FBQ1IsR0FBRyxFQUFFLEdBQUc7UUFDUixHQUFHLEVBQUUsR0FBRztRQUNSLEdBQUcsRUFBRSxHQUFHO1FBRVIsV0FBVztRQUNYLEdBQUcsRUFBRSxHQUFHO1FBQ1IsR0FBRyxFQUFFLEdBQUc7UUFDUixHQUFHLEVBQUUsR0FBRztRQUNSLEdBQUcsRUFBRSxHQUFHO1FBRVIsY0FBYztRQUNkLEdBQUcsRUFBRSxHQUFHO1FBQ1IsR0FBRyxFQUFFLEdBQUc7UUFDUixHQUFHLEVBQUUsR0FBRztRQUNSLEdBQUcsRUFBRSxHQUFHO0tBQ1gsQ0FBQztJQUNGLE9BQU87SUFDUSxpQkFBUSxHQUFHO1FBQ3RCLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNoQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDaEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFO1FBQ25CLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtRQUN0QixFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7UUFDdEIsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsY0FBYztLQUN4QyxDQUFDO0lBQ2EsZ0JBQU8sR0FBRztRQUNyQixhQUFhO1FBQ2IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ1AsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBRVAsWUFBWTtRQUNaLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDUixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNSLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRVIsWUFBWTtRQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDUixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNSLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1FBRVIsYUFBYTtRQUNiLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNQLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNQLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNQLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUVQLFdBQVc7UUFDWCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDUCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDUCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDUCxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFFUCxjQUFjO1FBQ2QsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDUixDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNSLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FBQyxDQUFDO0lBbUZsQixlQUFDO0NBNU1ELEFBNE1DLElBQUE7QUE1TVksNEJBQVE7Ozs7QUN4RHJCLDBDQUF3RjtBQUV4RjtJQUFBO0lBaUNBLENBQUM7SUFoQ1UsK0JBQWEsR0FBcEIsVUFBcUIsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFvQjtRQUVwRCxJQUFJLFVBQVUsR0FBRywyQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQyxJQUFJLE9BQU8sR0FBRywrQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxJQUFJLE9BQU8sR0FBUTtZQUNmLEtBQUssRUFBRSxDQUFDO1lBQ1IsY0FBYyxFQUFFLFVBQVUsQ0FBQyxjQUFjO1lBQ3pDLEtBQUssRUFBRSxLQUFLO1lBQ1osTUFBTSxFQUFFLE1BQU07WUFDZCxNQUFNLEVBQUUsQ0FBQztZQUNULE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTTtZQUN6QixJQUFJLEVBQUUsVUFBVSxDQUFDLFNBQVM7WUFDMUIsU0FBUyxFQUFFLENBQUM7U0FDZixDQUFBO1FBQ0QsSUFBSSxjQUFjLEdBQUc7WUFDakIsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1lBQ2IsS0FBSyxJQUFJLEdBQUMsR0FBRyxDQUFDLEVBQUUsR0FBQyxJQUFJLE9BQU8sRUFBRSxHQUFDLEVBQUUsRUFBRTtnQkFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7YUFDakM7WUFDRCxPQUFPLEdBQUcsQ0FBQztRQUNmLENBQUMsQ0FBQTtRQUNELElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUksUUFBUSxHQUFHLGNBQWMsRUFBRSxDQUFDO1lBQ2hDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdCLE9BQU8sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBQyxRQUFRLENBQUMsQ0FBQzthQUN6QztTQUNKO1FBQ0QsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFDTCx3QkFBQztBQUFELENBakNBLEFBaUNDLElBQUE7Ozs7QUNuQ0QsWUFBWTs7O0FBR1osaUJBQWlCO0FBQ0osUUFBQSxZQUFZLEdBQUc7SUFFeEIsT0FBTyxFQUFFLElBQUk7SUFDYixNQUFNLEVBQUUsSUFBSTtJQUNaLHFCQUFxQjtJQUNyQixzQkFBc0IsRUFBRSxJQUFJO0lBQzVCLHFCQUFxQixFQUFFLElBQUk7SUFDM0IscUJBQXFCLEVBQUUsSUFBSTtJQUMzQixvQkFBb0IsRUFBRSxJQUFJO0NBQzdCLENBQUE7QUEyQ0QsSUFBTSxTQUFTLEdBQUc7SUFDZCxDQUFDLG9CQUFZLENBQUMsT0FBTyxFQUFFLG9CQUFZLENBQUMsc0JBQXNCLEVBQUUsb0JBQVksQ0FBQyxxQkFBcUIsQ0FBQztJQUMvRixDQUFDLG9CQUFZLENBQUMsTUFBTSxFQUFFLG9CQUFZLENBQUMscUJBQXFCLEVBQUUsb0JBQVksQ0FBQyxvQkFBb0IsQ0FBQztDQUMvRixDQUFDO0FBR0YsSUFBTSxhQUFhLEdBQUc7SUFDbEIsY0FBYztJQUNkLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRSxjQUFjLCtCQUE4QixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFFekYsZUFBZTtJQUNmLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLGdDQUErQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFFM0YsZUFBZTtJQUNmLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLGdDQUErQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFFM0YsZUFBZTtJQUNmLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLGdDQUErQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFFM0YsY0FBYztJQUNkLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRSxjQUFjLDRCQUEyQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFFdEYsc0JBQXNCO0lBQ3RCLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRSxjQUFjLGtDQUFpQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFFNUYsdUJBQXVCO0lBQ3ZCLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLG1DQUFrQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFFOUYsc0JBQXNCO0lBQ3RCLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRSxjQUFjLGtDQUFpQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFFNUYsdUJBQXVCO0lBQ3ZCLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLG1DQUFrQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUU7SUFHOUYsUUFBUTtJQUNSLEVBQUUsTUFBTSxrQkFBa0IsRUFBRSxjQUFjLGtCQUFrQixFQUFFLFNBQVMsMEJBQXNCLEVBQUU7SUFFL0YsU0FBUztJQUNULEVBQUUsTUFBTSxzQkFBc0IsRUFBRSxjQUFjLHNCQUFzQixFQUFFLFNBQVMsMEJBQXNCLEVBQUU7SUFFdkcsWUFBWTtJQUNaLEVBQUUsTUFBTSw0QkFBNEIsRUFBRSxjQUFjLDRCQUE0QixFQUFFLFNBQVMsMEJBQXNCLEVBQUU7SUFFbkgsZUFBZTtJQUNmLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRSxjQUFjLGdCQUFnQixFQUFFLFNBQVMsa0NBQTZCLEVBQUU7SUFFbEcsa0JBQWtCO0lBQ2xCLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLGlCQUFpQixFQUFFLFNBQVMsb0NBQStCLEVBQUU7SUFFdEcsa0JBQWtCO0lBQ2xCLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLGlCQUFpQixFQUFFLFNBQVMsb0NBQStCLEVBQUU7SUFFdEcsV0FBVztJQUNYLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRSxjQUFjLGdCQUFnQixFQUFFLFNBQVMsMEJBQXNCLEVBQUU7SUFFM0YsWUFBWTtJQUNaLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLGlCQUFpQixFQUFFLFNBQVMsMEJBQXNCLEVBQUU7SUFFN0YsYUFBYTtJQUNiLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRSxjQUFjLGdCQUFnQixFQUFFLFNBQVMsNEJBQXVCLEVBQUU7SUFFNUYsY0FBYztJQUNkLEVBQUUsTUFBTSxpQkFBaUIsRUFBRSxjQUFjLGlCQUFpQixFQUFFLFNBQVMsNEJBQXVCLEVBQUU7SUFFOUYsYUFBYTtJQUNiLEVBQUUsTUFBTSxnQkFBZ0IsRUFBRSxjQUFjLGdCQUFnQixFQUFFLFNBQVMsa0JBQWMsRUFBRTtJQUVuRixjQUFjO0lBQ2QsRUFBRSxNQUFNLGlCQUFpQixFQUFFLGNBQWMsaUJBQWlCLEVBQUUsU0FBUyxrQkFBYyxFQUFFO0lBRXJGLFdBQVc7SUFDWCxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO0lBRXZELGVBQWU7SUFDZixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO0lBRXZELFdBQVc7SUFDWCxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO0lBRXZELFlBQVk7SUFDWixFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO0lBRXZELFVBQVU7SUFDVixFQUFFLE1BQU0sNEJBQTRCLEVBQUUsY0FBYyw0QkFBNEIsRUFBRSxTQUFTLDJCQUF1QixFQUFFO0lBRXBILFVBQVU7SUFDVixFQUFFLE1BQU0sNEJBQTRCLEVBQUUsY0FBYyw0QkFBNEIsRUFBRSxTQUFTLHlCQUFxQixFQUFFO0lBRWxILFlBQVk7SUFDWixFQUFFLE1BQU0sNEJBQTRCLEVBQUUsY0FBYyw0QkFBNEIsRUFBRSxTQUFTLHlCQUFxQixFQUFFO0lBRWxILGVBQWU7SUFDZixFQUFFLE1BQU0sZ0JBQWdCLEVBQUUsY0FBYyx1QkFBc0IsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO0lBRWpGLGdCQUFnQjtJQUNoQixFQUFFLE1BQU0saUJBQWlCLEVBQUUsY0FBYyw0QkFBMkIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFO0NBQzFGLENBQUM7QUFFRjs7O0dBR0c7QUFDVSxRQUFBLG9CQUFvQixHQUFHO0lBQ2hDLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVO0lBQzlGLFVBQVUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXO0lBQ3BHLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXO0lBQ3RHLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXO0NBQ3pHLENBQUE7QUFnR0QsdUJBQXVCO0FBQ1YsUUFBQSxzQkFBc0IsR0FBRztJQUNsQyxLQUFLLEVBQUUsS0FBSztJQUNaLE9BQU8sRUFBRSxLQUFLO0lBQ2QsTUFBTSxFQUFFLEtBQUs7SUFDYixHQUFHLEVBQUUsS0FBSztJQUNWLEVBQUUsRUFBRSxLQUFLO0lBQ1QsS0FBSyxFQUFFLEtBQUs7Q0FDZixDQUFBO0FBY0QsT0FBTztBQUNNLFFBQUEsTUFBTSxHQUFHO0lBRWxCLElBQUksRUFBRSxDQUFDO0lBQ1AsS0FBSyxFQUFFLElBQUk7SUFDWCxJQUFJLEVBQUUsSUFBSTtJQUNWLGNBQWMsRUFBRSxJQUFJO0NBQ3ZCLENBQUE7QUFFRCxvQkFBb0I7QUFDUCxRQUFBLG1CQUFtQixHQUFHO0lBRS9CLE9BQU8sRUFBRSxDQUFDO0lBQ1YsTUFBTSxFQUFFLENBQUM7SUFDVCxPQUFPLEVBQUUsQ0FBQztJQUVWLE9BQU8sRUFBRSxJQUFJO0lBQ2IsT0FBTyxFQUFFLENBQUM7SUFDVixVQUFVLEVBQUUsSUFBSTtJQUNoQixPQUFPLEVBQUUsSUFBSTtJQUNiLFlBQVksRUFBRSxLQUFLO0lBQ25CLE9BQU8sRUFBRSxJQUFJO0lBQ2IsWUFBWSxFQUFFLEtBQUs7SUFDbkIsU0FBUyxFQUFFLElBQUk7Q0FDbEIsQ0FBQTtBQUVELDZCQUE2QjtBQUM3QixTQUFTO0FBQ0ksUUFBQSxvQkFBb0IsR0FBRztJQUVoQyxLQUFLLEVBQUUsR0FBRztJQUNWLElBQUksRUFBRSxHQUFHO0lBQ1QsS0FBSyxFQUFFLEdBQUc7SUFDVixNQUFNLEVBQUUsR0FBRztJQUNYLE9BQU8sRUFBRSxHQUFHO0lBQ1osUUFBUSxFQUFFLEdBQUc7SUFDYixNQUFNLEVBQUUsR0FBRztJQUNYLE1BQU0sRUFBRSxHQUFHO0NBQ2QsQ0FBQTtBQUVBLHNCQUFzQjtBQUNWLFFBQUEscUJBQXFCLEdBQUc7SUFFbkMsZUFBZSxFQUFFLElBQUk7SUFDckIsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QixnQkFBZ0IsRUFBRSxJQUFJO0NBQ3ZCLENBQUE7QUFFQSxlQUFlO0FBQ0gsUUFBQSxjQUFjLEdBQUU7SUFDM0IsWUFBWSxFQUFFLEtBQUs7SUFDbkIsYUFBYSxFQUFFLEtBQUs7SUFDcEIsWUFBWSxFQUFFLEtBQUs7Q0FDcEIsQ0FBQTtBQUVELGFBQWE7QUFDQSxRQUFBLFlBQVksR0FBRztJQUN4QixHQUFHLEVBQUUsS0FBSztJQUNWLFFBQVEsRUFBRSxLQUFLO0lBQ2YsZ0JBQWdCLEVBQUUsS0FBSztDQUMxQixDQUFBO0FBRUQsUUFBUTtBQUNLLFFBQUEsT0FBTyxHQUFHO0lBQ25CLElBQUksRUFBRSxDQUFDO0lBQ1AsR0FBRyxFQUFFLENBQUM7SUFDTixTQUFTLEVBQUUsR0FBRztJQUNkLG1CQUFtQixFQUFFLEdBQUc7SUFDeEIsU0FBUyxFQUFFLEdBQUc7SUFDZCxtQkFBbUIsRUFBRSxHQUFHO0lBQ3hCLFNBQVMsRUFBRSxHQUFHO0lBQ2QsbUJBQW1CLEVBQUUsR0FBRztJQUN4QixTQUFTLEVBQUUsR0FBRztJQUNkLG1CQUFtQixFQUFFLEdBQUc7SUFDeEIsY0FBYyxFQUFFLEtBQUs7SUFDckIsd0JBQXdCLEVBQUUsS0FBSztJQUMvQixjQUFjLEVBQUUsS0FBSztJQUNyQix3QkFBd0IsRUFBRSxLQUFLO0lBQy9CLGtCQUFrQixFQUFFLEdBQUc7Q0FDMUIsQ0FBQTtBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsUUFBUSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsU0FBYztJQUFkLDBCQUFBLEVBQUEsYUFBYSxDQUFDO0lBQy9DLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQW1CLE1BQVEsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsb0JBQVksQ0FBQyxvQkFBb0IsQ0FBQztLQUNyRjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFSRCw0QkFRQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFnQixpQkFBaUIsQ0FBQyxHQUFnQjtJQUM5QyxJQUFJLE1BQU0sR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3RCLE9BQU8sQ0FBQyxJQUFJLENBQUMsMEJBQXdCLEdBQUssQ0FBQyxDQUFDO1FBQzVDLE9BQU8sYUFBYSxnQkFBb0IsQ0FBQztLQUM1QztJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFSRCw4Q0FRQztBQUVEOzs7Ozs7Ozs7O0VBVUU7QUFDRixJQUFNLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztBQUMvQixtQkFBbUIsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLG1CQUFtQixnQkFBZ0IsR0FBRyxFQUFFLENBQUM7QUFDekMsbUJBQW1CLDRCQUE0QixHQUFHLEVBQUUsQ0FBQztBQUNyRCxtQkFBbUIsc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQy9DLG1CQUFtQixrQkFBa0IsR0FBRyxFQUFFLENBQUM7QUFDM0MsbUJBQW1CLGlCQUFpQiwwQkFBc0IsR0FBRyxDQUFDLENBQUM7QUFDL0QsbUJBQW1CLGdCQUFnQiwwQkFBc0IsR0FBRyxDQUFDLENBQUM7QUFDOUQsbUJBQW1CLGlCQUFpQixvQ0FBK0IsR0FBRyxDQUFDLENBQUM7QUFDeEUsbUJBQW1CLGlCQUFpQixvQ0FBK0IsR0FBRyxDQUFDLENBQUM7QUFDeEUsbUJBQW1CLGdCQUFnQixrQ0FBNkIsR0FBRyxDQUFDLENBQUM7QUFDckUsbUJBQW1CLDRCQUE0QiwwQkFBc0IsR0FBRyxDQUFDLENBQUM7QUFDMUUsbUJBQW1CLHNCQUFzQiwwQkFBc0IsR0FBRyxDQUFDLENBQUM7QUFDcEUsbUJBQW1CLGtCQUFrQiwwQkFBc0IsR0FBRyxDQUFDLENBQUM7QUFFaEUsSUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFDakMscUJBQXFCLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztBQUM1QyxxQkFBcUIsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0FBQzNDLHFCQUFxQiw0QkFBNEIsR0FBRyxFQUFFLENBQUM7QUFDdkQscUJBQXFCLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztBQUNqRCxxQkFBcUIsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0FBQzdDLHFCQUFxQixpQkFBaUIsMEJBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBQ2pFLHFCQUFxQixnQkFBZ0IsMEJBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBQ2hFLHFCQUFxQixpQkFBaUIsb0NBQStCLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLHFCQUFxQixpQkFBaUIsb0NBQStCLEdBQUcsQ0FBQyxDQUFDO0FBQzFFLHFCQUFxQixnQkFBZ0Isa0NBQTZCLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZFLHFCQUFxQiw0QkFBNEIsMEJBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBQzVFLHFCQUFxQixzQkFBc0IsMEJBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBQ3RFLHFCQUFxQixrQkFBa0IsMEJBQXNCLEdBQUcsQ0FBQyxDQUFDO0FBRWxFOzs7O0dBSUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FBQyxHQUFHO0lBQ3JDLElBQUksTUFBTSxHQUFJLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLElBQUksRUFBRSxHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEUsSUFBRyxDQUFDLEVBQUUsRUFDTjtRQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNWO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDZCxDQUFDO0FBVEQsc0RBU0M7QUFDRDs7OztHQUlHO0FBQ0gsU0FBZ0IseUJBQXlCLENBQUMsR0FBRztJQUN4QyxJQUFJLE1BQU0sR0FBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNyQyxJQUFJLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlELElBQUcsQ0FBQyxFQUFFLEVBQ047UUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLCtCQUErQixFQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDVjtJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ2YsQ0FBQztBQVRELDhEQVNDOzs7Ozs7QUM5Y1ksUUFBQSxRQUFRO0lBQ2pCLEdBQUMsQ0FBQyxJQUFFLEVBQUMsS0FBSyxFQUFDLDJFQUEyRTtRQUN0RixNQUFNLEVBQUMscUJBQXFCLEVBQUM7SUFDN0IsR0FBQyxDQUFDLElBQUUsRUFBQyxLQUFLLEVBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQzt3REFDMEIsRUFBQztJQUNyRCxHQUFDLENBQUMsSUFBRSxFQUFDLEtBQUssRUFBQyxrRkFBa0Y7UUFDN0YsTUFBTSxFQUFDLCtDQUErQyxFQUFDO1FBRTFEO0FBQ0Q7O0dBRUc7QUFDVSxRQUFBLE9BQU8sR0FBRztJQUNuQixlQUFlO0lBQ2YsWUFBWSxFQUFFLEtBQUs7SUFDbkIsYUFBYSxFQUFFLEtBQUs7SUFDcEIsWUFBWSxFQUFFLEtBQUs7SUFFbkIsc0JBQXNCO0lBQ3RCLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsZ0JBQWdCLEVBQUUsSUFBSTtJQUV0Qiw0QkFBNEI7SUFDNUIsYUFBYSxFQUFFLFlBQVk7SUFDM0IsV0FBVyxFQUFFLFVBQVU7SUFDdkIsWUFBWSxFQUFFLFdBQVc7SUFDekIsY0FBYyxFQUFFLGFBQWE7SUFDN0IsWUFBWSxFQUFFLFdBQVc7SUFDekIsV0FBVyxFQUFFLFVBQVU7SUFDdkIsVUFBVSxFQUFFLFNBQVM7SUFDckIsV0FBVyxFQUFFLFVBQVU7SUFDdkIsV0FBVyxFQUFFLFVBQVU7SUFDdkIsT0FBTyxFQUFFLE1BQU07SUFDZixRQUFRLEVBQUUsT0FBTztJQUNqQixRQUFRLEVBQUUsT0FBTztJQUNqQixRQUFRLEVBQUUsT0FBTztJQUNqQixRQUFRLEVBQUUsT0FBTztJQUNqQixRQUFRLEVBQUUsT0FBTztJQUNqQixRQUFRLEVBQUUsT0FBTztJQUNqQixRQUFRLEVBQUUsT0FBTztJQUNqQixRQUFRLEVBQUUsT0FBTztJQUNqQixjQUFjLEVBQUUsWUFBWTtJQUM1QixlQUFlLEVBQUUsYUFBYTtJQUM5QixlQUFlLEVBQUUsYUFBYTtJQUM5QixlQUFlLEVBQUUsYUFBYTtJQUM5QixlQUFlLEVBQUUsYUFBYTtJQUM5QixlQUFlLEVBQUUsYUFBYTtJQUM5QixlQUFlLEVBQUUsYUFBYTtJQUM5QixlQUFlLEVBQUUsYUFBYTtJQUM5QixlQUFlLEVBQUUsYUFBYTtJQUc5Qix3QkFBd0I7SUFDeEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsZUFBZSxFQUFFLElBQUk7SUFDckIsZUFBZSxFQUFFLElBQUk7SUFDckIsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QixlQUFlLEVBQUUsSUFBSTtJQUNyQixnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCLGlCQUFpQixFQUFFLElBQUk7SUFFdkIsaUJBQWlCO0lBQ2pCLGNBQWMsRUFBRSxDQUFDO0lBQ2pCLGFBQWEsRUFBRSxDQUFDO0lBRWhCLG9CQUFvQjtJQUNwQixXQUFXLEVBQUUsS0FBSztJQUNsQixVQUFVLEVBQUUsS0FBSztJQUNqQixXQUFXLEVBQUUsS0FBSztJQUVsQixpQkFBaUI7SUFDakIsbUJBQW1CO0lBQ25CLG9CQUFvQixFQUFFLENBQUM7SUFDdkIscUJBQXFCLEVBQUUsQ0FBQztJQUN4QixxQkFBcUIsRUFBRSxDQUFDO0lBQ3hCLHFCQUFxQixFQUFFLENBQUM7SUFDeEIsb0JBQW9CLEVBQUUsQ0FBQztJQUN2Qiw0QkFBNEIsRUFBRSxDQUFDO0lBQy9CLDZCQUE2QixFQUFFLENBQUM7SUFDaEMsNEJBQTRCLEVBQUUsQ0FBQztJQUMvQiw2QkFBNkIsRUFBRSxDQUFDO0lBRWhDLGlCQUFpQjtJQUNqQixjQUFjLEVBQUUsQ0FBQztJQUNqQixjQUFjLEVBQUUsRUFBRTtJQUNsQixpQkFBaUIsRUFBRSxFQUFFO0lBQ3JCLG9CQUFvQixFQUFFLEVBQUU7SUFDeEIsdUJBQXVCLEVBQUUsRUFBRTtJQUMzQix1QkFBdUIsRUFBRSxFQUFFO0lBQzNCLGdCQUFnQixFQUFFLEVBQUU7SUFDcEIsaUJBQWlCLEVBQUUsRUFBRTtJQUNyQixrQkFBa0IsRUFBRSxFQUFFO0lBQ3RCLG1CQUFtQixFQUFFLEVBQUU7SUFDdkIsa0JBQWtCLEVBQUUsRUFBRTtJQUN0QixtQkFBbUIsRUFBRSxFQUFFO0lBQ3ZCLGdCQUFnQixFQUFFLEVBQUU7SUFDcEIsbUJBQW1CLEVBQUUsRUFBRTtJQUN2QixnQkFBZ0IsRUFBRSxFQUFFO0lBQ3BCLGlCQUFpQixFQUFFLEVBQUU7SUFFckIsZ0JBQWdCO0lBQ2hCLGVBQWUsRUFBRSxFQUFFO0lBQ25CLGVBQWUsRUFBRSxFQUFFO0lBQ25CLGlCQUFpQixFQUFFLEVBQUU7SUFFckIsY0FBYztJQUNkLG9CQUFvQixFQUFFLEVBQUU7SUFDeEIscUJBQXFCLEVBQUUsRUFBRTtJQUV6Qiw2QkFBNkI7SUFDN0IsYUFBYSxFQUFFLEdBQUc7SUFDbEIsWUFBWSxFQUFFLEdBQUc7SUFDakIsYUFBYSxFQUFFLEdBQUc7SUFDbEIsY0FBYyxFQUFFLEdBQUc7SUFDbkIsZUFBZSxFQUFFLEdBQUc7SUFDcEIsZ0JBQWdCLEVBQUUsR0FBRztJQUNyQixjQUFjLEVBQUUsR0FBRztJQUNuQixjQUFjLEVBQUUsR0FBRztJQUVuQix1QkFBdUI7SUFDdkIsWUFBWSxFQUFFLEtBQUs7SUFDbkIsY0FBYyxFQUFFLEtBQUs7SUFDckIsYUFBYSxFQUFFLEtBQUs7SUFDcEIsVUFBVSxFQUFFLEtBQUs7SUFDakIsU0FBUyxFQUFFLEtBQUs7SUFDaEIsWUFBWSxFQUFFLEtBQUs7SUFFbkIsaUJBQWlCO0lBQ2pCLGNBQWMsRUFBRSxLQUFLO0lBQ3JCLG1CQUFtQixFQUFFLEtBQUs7SUFDMUIsMkJBQTJCLEVBQUUsS0FBSztJQUVsQyxRQUFRO0lBQ1IsVUFBVSxFQUFFLENBQUM7SUFDYixTQUFTLEVBQUUsQ0FBQztJQUNaLGVBQWUsRUFBRSxHQUFHO0lBQ3BCLHlCQUF5QixFQUFFLEdBQUc7SUFDOUIsZUFBZSxFQUFFLEdBQUc7SUFDcEIseUJBQXlCLEVBQUUsR0FBRztJQUM5QixlQUFlLEVBQUUsR0FBRztJQUNwQix5QkFBeUIsRUFBRSxHQUFHO0lBQzlCLGVBQWUsRUFBRSxHQUFHO0lBQ3BCLHlCQUF5QixFQUFFLEdBQUc7SUFDOUIsb0JBQW9CLEVBQUUsS0FBSztJQUMzQiw4QkFBOEIsRUFBRSxLQUFLO0lBQ3JDLG9CQUFvQixFQUFFLEtBQUs7SUFDM0IsOEJBQThCLEVBQUUsS0FBSztJQUNyQyx3QkFBd0IsRUFBRSxHQUFHO0lBRTdCLG9CQUFvQjtJQUNwQixlQUFlLEVBQUUsQ0FBQztJQUNsQixjQUFjLEVBQUUsQ0FBQztJQUNqQixlQUFlLEVBQUUsQ0FBQztJQUVsQixlQUFlLEVBQUUsSUFBSTtJQUNyQixlQUFlLEVBQUUsQ0FBQztJQUNsQixrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCLGVBQWUsRUFBRSxJQUFJO0lBQ3JCLG9CQUFvQixFQUFFLEtBQUs7SUFDM0IsZUFBZSxFQUFFLElBQUk7SUFDckIsb0JBQW9CLEVBQUUsS0FBSztJQUMzQixpQkFBaUIsRUFBRSxJQUFJO0lBRXZCLE9BQU87SUFDUCxTQUFTLEVBQUUsQ0FBQztJQUNaLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsbUJBQW1CLEVBQUUsSUFBSTtJQUV6QixpQkFBaUI7SUFDakIsU0FBUyxFQUFFLENBQUM7SUFDWixRQUFRLEVBQUUsQ0FBQztJQUNYLFlBQVksRUFBRSxDQUFDO0lBQ2YsYUFBYSxFQUFFLENBQUM7SUFDaEIsWUFBWSxFQUFFLENBQUM7SUFDZixpQkFBaUIsRUFBRSxDQUFDO0lBQ3BCLGVBQWUsRUFBRSxDQUFDO0NBQ3JCLENBQUM7QUFFRixJQUFpQixLQUFLLENBbVpyQjtBQW5aRCxXQUFpQixLQUFLO0lBRWxCLFlBQVk7SUFDWixJQUFJLEVBQXdCLENBQUM7SUFFN0IsU0FBUztJQUNULFNBQWdCLE1BQU0sQ0FBQyxHQUFHO1FBQ3RCLEVBQUUsR0FBRyxHQUFHLENBQUM7UUFFVCxLQUFLLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDO1FBQ25ELEtBQUssQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUM7SUFDdkQsQ0FBQztJQUxlLFlBQU0sU0FLckIsQ0FBQTtJQU1EOzs7R0FHRDtJQUNILFNBQWdCLGFBQWEsQ0FBQyxRQUFRO1FBRWxDLElBQUksUUFBUSxLQUFLLGVBQU8sQ0FBQyxjQUFjLEVBQUU7WUFDdkMsT0FBTyxDQUFDLENBQUM7U0FDVjthQUFNLElBQUksUUFBUSxLQUFLLGVBQU8sQ0FBQyxlQUFlLEVBQUU7WUFDL0MsT0FBTyxDQUFDLENBQUM7U0FDVjthQUFNLElBQUksUUFBUSxLQUFLLGVBQU8sQ0FBQyxlQUFlLEVBQUU7WUFDL0MsT0FBTyxDQUFDLENBQUM7U0FDVjthQUFNLElBQUksUUFBUSxLQUFLLGVBQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUNoRCxPQUFPLENBQUMsQ0FBQztTQUNWO2FBQU0sSUFBSSxRQUFRLEtBQUssZUFBTyxDQUFDLGVBQWUsRUFBRTtZQUMvQyxPQUFPLENBQUMsQ0FBQztTQUNWO2FBQU0sSUFBSSxRQUFRLEtBQUssZUFBTyxDQUFDLGdCQUFnQixFQUFFO1lBQ2hELE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7YUFBTSxJQUFJLFFBQVEsS0FBSyxlQUFPLENBQUMsaUJBQWlCLEVBQUU7WUFDakQsT0FBTyxDQUFDLENBQUM7U0FDVjtRQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXNCLFFBQVUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQztJQXBCYSxtQkFBYSxnQkFvQjFCLENBQUE7SUFHQzs7Ozs7Ozs7Ozs7Ozs7T0FjRztJQUNILFNBQWdCLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTTtRQUNyQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRmUsZ0JBQVUsYUFFekIsQ0FBQTtJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQTBCRztJQUNILFNBQWdCLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNO1FBQ2xELEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDOUMsQ0FBQztJQUZlLGtCQUFZLGVBRTNCLENBQUE7SUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BcUJHO0lBQ0gsU0FBZ0IsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSztRQUN6QyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUZlLGdCQUFVLGFBRXpCLENBQUE7SUFDRDs7Ozs7Ozs7Ozs7Ozs7OztNQWdCRTtJQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BdURHO0lBQ0gsU0FBZ0IsVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBdUI7UUFDbEgsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBO0lBQzdGLENBQUM7SUFGZSxnQkFBVSxhQUV6QixDQUFBO0lBRUQ7Ozs7Ozs7Ozs7Ozs7OztPQWVHO0lBQ0gsU0FBZ0IsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLO1FBQ3BDLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFGZSxpQkFBVyxjQUUxQixDQUFBO0lBQ0QsU0FBZ0IsYUFBYSxDQUFDLE1BQWMsRUFBRSxLQUFhLEVBQUUsS0FBYztRQUN2RSxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUZlLG1CQUFhLGdCQUU1QixDQUFBO0lBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQThCRztJQUNILFNBQWdCLGFBQWEsQ0FBQyxNQUFjLEVBQUUsS0FBYSxFQUFFLEtBQVk7UUFDckUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFGZSxtQkFBYSxnQkFFNUIsQ0FBQTtJQUVEOzs7Ozs7T0FNRztJQUNILFNBQWdCLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxJQUFJO1FBQzNDLE9BQU8sRUFBRSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBRmUsdUJBQWlCLG9CQUVoQyxDQUFBO0lBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQWtCRztJQUNILFNBQWdCLHVCQUF1QixDQUFDLEtBQWE7UUFDakQsRUFBRSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFGZSw2QkFBdUIsMEJBRXRDLENBQUE7SUFDRDs7OztPQUlHO0lBQ0gsU0FBZ0Isd0JBQXdCLENBQUMsS0FBYTtRQUNsRCxFQUFFLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUZlLDhCQUF3QiwyQkFFdkMsQ0FBQTtJQUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FnREc7SUFDSCxTQUFnQixtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU07UUFDN0UsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDekUsQ0FBQztJQUZlLHlCQUFtQixzQkFFbEMsQ0FBQTtJQUVEOzs7Ozs7T0FNRztJQUNILFNBQWdCLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFnQixFQUFFLEtBQUs7UUFDNUQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3RDLENBQUM7SUFGZSxzQkFBZ0IsbUJBRS9CLENBQUE7SUFDRCxTQUFnQixVQUFVLENBQUMsTUFBTSxFQUFFLE9BQW9CLEVBQUUsS0FBSztRQUMxRCxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDekMsQ0FBQztJQUZlLGdCQUFVLGFBRXpCLENBQUE7SUFDRCxTQUFnQixhQUFhLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBQyxPQUF1QjtRQUVoRSxFQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUMsT0FBTyxDQUFDLENBQUE7SUFDNUMsQ0FBQztJQUhlLG1CQUFhLGdCQUc1QixDQUFBO0lBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW9DRztJQUNILFNBQWdCLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxPQUF3QixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTTtRQUMxRiwwREFBMEQ7SUFDOUQsQ0FBQztJQUZlLHlCQUFtQixzQkFFbEMsQ0FBQTtBQUVMLENBQUMsRUFuWmdCLEtBQUssR0FBTCxhQUFLLEtBQUwsYUFBSyxRQW1ackI7Ozs7O0FDemtCRCx1Q0FBd0M7QUFDeEMsbUNBQTJDO0FBRTNDOztHQUVHO0FBQ0gsSUFBaUIsWUFBWSxDQWt5QjVCO0FBbHlCRCxXQUFpQixZQUFZO0lBR3pCLFNBQVMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ3pDLElBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDekIsSUFBTSxHQUFHLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ2hDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDM0QsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQixLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFRCxTQUFTLGVBQWUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUc7UUFDL0IsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEIsSUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLElBQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV0RSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxTQUFTLGtCQUFrQixDQUFDLEtBQUssRUFBRSxNQUFNO1FBQ3JDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsaUJBQVEsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNwRSxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILFNBQVMsZUFBZSxDQUFDLEtBQUssRUFBRSxNQUFNO1FBQ2xDLElBQUksT0FBTyxHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3JDLGlCQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUMsTUFBTSxDQUFDLENBQUM7UUFDckMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztRQUNwRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILFNBQVMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLE1BQU07UUFDcEMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxpQkFBUSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNoRSxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHO0lBQ0gsU0FBUyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsTUFBTTtRQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUk7WUFDdEMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzFCLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNwQztpQkFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNoRSxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDckM7aUJBQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDbEMsZUFBZSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNsQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxTQUFTLE9BQU8sQ0FBQyxLQUFLO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUdEOzs7Ozs7Ozs7Ozs7T0FZRztJQUNILFNBQWdCLG1CQUFtQixDQUFDLEtBQUssRUFBQyxLQUFLLEVBQUMsaUJBQWlCLEVBQUMsaUJBQWlCLEVBQUMsTUFBTTtRQUN0RixJQUFHLENBQUMsTUFBTSxFQUNWO1lBQ0ksTUFBTSxHQUFHLGlCQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hDLGlCQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNsQztRQUNELEtBQUssR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQ25CLEtBQUssR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1FBQ25CLGlCQUFpQixHQUFHLGlCQUFpQixJQUFJLENBQUMsQ0FBQztRQUMzQyxpQkFBaUIsR0FBRyxpQkFBaUIsSUFBSSxDQUFDLENBQUM7UUFFM0MsSUFBTSxXQUFXLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RFLElBQU0sU0FBUyxHQUFHLHdCQUFlLENBQUMseUJBQXlCLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzVFLElBQU0sT0FBTyxHQUFHLHdCQUFlLENBQUMseUJBQXlCLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQzFFLElBQU0sU0FBUyxHQUFHLHdCQUFlLENBQUMseUJBQXlCLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRTVFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3pDLElBQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztnQkFDaEMsSUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGlCQUFpQixDQUFDO2dCQUNoQyxTQUFTLENBQUMsSUFBSSxDQUNWLEtBQUssR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLEdBQUcsRUFDdkIsQ0FBQyxFQUNELEtBQUssR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1NBQ0o7UUFFRCxJQUFNLGNBQWMsR0FBRyxpQkFBaUIsR0FBRyxDQUFDLENBQUM7UUFDN0MsSUFBTSxPQUFPLEdBQUcsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FDckQsQ0FBQyxFQUFFLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUUvRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGlCQUFpQixFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN4QywyQkFBMkI7Z0JBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQ1IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsY0FBYyxHQUFHLENBQUMsRUFDNUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsY0FBYyxHQUFHLENBQUMsRUFDNUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsY0FBYyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFFdEMsMkJBQTJCO2dCQUMzQixPQUFPLENBQUMsSUFBSSxDQUNSLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLEVBQzVCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUNoQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0o7UUFFRCxJQUFNLE1BQU0sR0FBRyxnQkFBZ0IsQ0FBQztZQUM1QixRQUFRLEVBQUUsU0FBUztZQUNuQixNQUFNLEVBQUUsT0FBTztZQUNmLFFBQVEsRUFBRSxTQUFTO1lBQ25CLE9BQU8sRUFBRSxPQUFPO1NBQ25CLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDWCxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBeERlLGdDQUFtQixzQkF3RGxDLENBQUE7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSCxTQUFnQixvQkFBb0IsQ0FBQyxNQUFNLEVBQUMsZ0JBQWdCLEVBQUMsa0JBQWtCLEVBQUMsMEJBQTJCLEVBQUMsd0JBQXlCLEVBQUMsMkJBQTRCLEVBQUMseUJBQTBCO1FBQ3pMLElBQUksZ0JBQWdCLElBQUksQ0FBQyxJQUFJLGtCQUFrQixJQUFJLENBQUMsRUFBRTtZQUNsRCxNQUFNLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsMEJBQTBCLEdBQUcsMEJBQTBCLElBQUksQ0FBQyxDQUFDO1FBQzdELHdCQUF3QixHQUFHLHdCQUF3QixJQUFJLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDL0QsMkJBQTJCLEdBQUcsMkJBQTJCLElBQUksQ0FBQyxDQUFDO1FBQy9ELHlCQUF5QixHQUFHLHlCQUF5QixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2RSxJQUFNLFFBQVEsR0FBRyx3QkFBd0IsR0FBRywwQkFBMEIsQ0FBQztRQUN2RSxJQUFNLFNBQVMsR0FBRyx5QkFBeUIsR0FBRywyQkFBMkIsQ0FBQztRQUMxRSwrREFBK0Q7UUFDL0Qsc0VBQXNFO1FBQ3RFLHNCQUFzQjtRQUN0QixJQUFNLFdBQVcsR0FBRyxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdEUsSUFBTSxTQUFTLEdBQUcsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDNUUsSUFBTSxPQUFPLEdBQUcsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUUsSUFBTSxTQUFTLEdBQUcsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFNUUseURBQXlEO1FBQ3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxrQkFBa0IsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hDLHVEQUF1RDtnQkFDdkQsSUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDO2dCQUMvQixJQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7Z0JBQ2pDLElBQU0sS0FBSyxHQUFHLFNBQVMsR0FBRyxDQUFDLENBQUM7Z0JBQzVCLElBQU0sR0FBRyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUM7Z0JBQ3pCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pDLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2pDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzdCLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzdCLElBQU0sRUFBRSxHQUFHLFFBQVEsR0FBRyxNQUFNLENBQUM7Z0JBQzdCLElBQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQztnQkFDbEIsSUFBTSxFQUFFLEdBQUcsUUFBUSxHQUFHLE1BQU0sQ0FBQztnQkFDN0IsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQUUsTUFBTSxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUN0RCxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ3pCLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM1QjtTQUNKO1FBQ0QsSUFBTSxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLElBQU0sT0FBTyxHQUFHLHdCQUFlLENBQUMseUJBQXlCLENBQUMsQ0FBQyxFQUFFLGdCQUFnQixHQUFHLGtCQUFrQixHQUFHLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNySCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGtCQUFrQixFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN6QywyQkFBMkI7Z0JBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQ1IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsY0FBYyxHQUFHLENBQUMsRUFDNUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsY0FBYyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQ2hDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFFbEMsMkJBQTJCO2dCQUMzQixPQUFPLENBQUMsSUFBSSxDQUNSLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLEVBQzVCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGNBQWMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUNoQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxjQUFjLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0o7UUFDRCxPQUFPO1lBQ0gsUUFBUSxFQUFFLFNBQVM7WUFDbkIsTUFBTSxFQUFFLE9BQU87WUFDZixRQUFRLEVBQUUsU0FBUztZQUNuQixPQUFPLEVBQUUsT0FBTztTQUNuQixDQUFDO0lBQ04sQ0FBQztJQTdEZSxpQ0FBb0IsdUJBNkRuQyxDQUFBO0lBRUQ7OztNQUdFO0lBQ0YsSUFBTSxpQkFBaUIsR0FBRztRQUN0QixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDZixDQUFDO0lBRUY7Ozs7Ozs7O09BUUc7SUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxJQUFJO1FBQ25DLElBQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7UUFFbkIsSUFBTSxjQUFjLEdBQUc7WUFDbkIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1osQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1osQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDZixDQUFDO1FBRUYsSUFBTSxXQUFXLEdBQUc7WUFDaEIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ1osQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDWixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2YsQ0FBQztRQUVGLElBQU0sUUFBUSxHQUFHO1lBQ2IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ1QsQ0FBQztRQUVGLElBQU0sV0FBVyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsSUFBTSxTQUFTLEdBQUcsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDNUUsSUFBTSxPQUFPLEdBQUcsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDMUUsSUFBTSxTQUFTLEdBQUcsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDNUUsSUFBTSxPQUFPLEdBQUcsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUVqRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3hCLElBQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7Z0JBQ3hCLElBQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixJQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXZCLG9FQUFvRTtnQkFDcEUsb0NBQW9DO2dCQUNwQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNyQixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBRXRCO1lBQ0Qsb0NBQW9DO1lBQ3BDLElBQU0sTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUVELE9BQU87WUFDSCxRQUFRLEVBQUUsU0FBUztZQUNuQixNQUFNLEVBQUUsT0FBTztZQUNmLFFBQVEsRUFBRSxTQUFTO1lBQ25CLE9BQU8sRUFBRSxPQUFPO1NBQ25CLENBQUM7SUFDTixDQUFDO0lBOURlLCtCQUFrQixxQkE4RGpDLENBQUE7SUFFQTs7Ozs7TUFLRTtJQUNILFNBQWdCLGFBQWEsQ0FBQyxPQUFPLEVBQUUsT0FBUTtRQUMzQyxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUN4QixJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7UUFDaEIsS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUM3QyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM5QyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDckMsS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLFNBQVMsRUFBRSxFQUFFLEVBQUUsRUFBRTtnQkFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ2hDO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFaYSwwQkFBYSxnQkFZMUIsQ0FBQTtJQUVIOzs7Ozs7OztNQVFFO0lBQ0gsU0FBZ0IsaUJBQWlCO1FBRS9CLElBQU0sU0FBUyxHQUFHO1lBQ2hCLG9CQUFvQjtZQUNwQixDQUFDLEVBQUksQ0FBQyxFQUFHLENBQUM7WUFDVixDQUFDLEVBQUUsR0FBRyxFQUFHLENBQUM7WUFDVixFQUFFLEVBQUksQ0FBQyxFQUFHLENBQUM7WUFDWCxDQUFDLEVBQUUsR0FBRyxFQUFHLENBQUM7WUFDVixFQUFFLEVBQUUsR0FBRyxFQUFHLENBQUM7WUFDWCxFQUFFLEVBQUksQ0FBQyxFQUFHLENBQUM7WUFFWCxpQkFBaUI7WUFDakIsRUFBRSxFQUFJLENBQUMsRUFBRyxDQUFDO1lBQ1gsRUFBRSxFQUFHLEVBQUUsRUFBRyxDQUFDO1lBQ1gsR0FBRyxFQUFJLENBQUMsRUFBRyxDQUFDO1lBQ1osRUFBRSxFQUFHLEVBQUUsRUFBRyxDQUFDO1lBQ1gsR0FBRyxFQUFHLEVBQUUsRUFBRyxDQUFDO1lBQ1osR0FBRyxFQUFJLENBQUMsRUFBRyxDQUFDO1lBRVosb0JBQW9CO1lBQ3BCLEVBQUUsRUFBRyxFQUFFLEVBQUcsQ0FBQztZQUNYLEVBQUUsRUFBRyxFQUFFLEVBQUcsQ0FBQztZQUNYLEVBQUUsRUFBRyxFQUFFLEVBQUcsQ0FBQztZQUNYLEVBQUUsRUFBRyxFQUFFLEVBQUcsQ0FBQztZQUNYLEVBQUUsRUFBRyxFQUFFLEVBQUcsQ0FBQztZQUNYLEVBQUUsRUFBRyxFQUFFLEVBQUcsQ0FBQztZQUVYLG1CQUFtQjtZQUNqQixDQUFDLEVBQUksQ0FBQyxFQUFHLEVBQUU7WUFDWixFQUFFLEVBQUksQ0FBQyxFQUFHLEVBQUU7WUFDWCxDQUFDLEVBQUUsR0FBRyxFQUFHLEVBQUU7WUFDWCxDQUFDLEVBQUUsR0FBRyxFQUFHLEVBQUU7WUFDWixFQUFFLEVBQUksQ0FBQyxFQUFHLEVBQUU7WUFDWixFQUFFLEVBQUUsR0FBRyxFQUFHLEVBQUU7WUFFYixnQkFBZ0I7WUFDZixFQUFFLEVBQUksQ0FBQyxFQUFHLEVBQUU7WUFDYixHQUFHLEVBQUksQ0FBQyxFQUFHLEVBQUU7WUFDWixFQUFFLEVBQUcsRUFBRSxFQUFHLEVBQUU7WUFDWixFQUFFLEVBQUcsRUFBRSxFQUFHLEVBQUU7WUFDYixHQUFHLEVBQUksQ0FBQyxFQUFHLEVBQUU7WUFDYixHQUFHLEVBQUcsRUFBRSxFQUFHLEVBQUU7WUFFYixtQkFBbUI7WUFDbEIsRUFBRSxFQUFHLEVBQUUsRUFBRyxFQUFFO1lBQ1osRUFBRSxFQUFHLEVBQUUsRUFBRyxFQUFFO1lBQ1osRUFBRSxFQUFHLEVBQUUsRUFBRyxFQUFFO1lBQ1osRUFBRSxFQUFHLEVBQUUsRUFBRyxFQUFFO1lBQ1osRUFBRSxFQUFHLEVBQUUsRUFBRyxFQUFFO1lBQ1osRUFBRSxFQUFHLEVBQUUsRUFBRyxFQUFFO1lBRWIsTUFBTTtZQUNKLENBQUMsRUFBSSxDQUFDLEVBQUksQ0FBQztZQUNiLEdBQUcsRUFBSSxDQUFDLEVBQUksQ0FBQztZQUNiLEdBQUcsRUFBSSxDQUFDLEVBQUcsRUFBRTtZQUNYLENBQUMsRUFBSSxDQUFDLEVBQUksQ0FBQztZQUNiLEdBQUcsRUFBSSxDQUFDLEVBQUcsRUFBRTtZQUNYLENBQUMsRUFBSSxDQUFDLEVBQUcsRUFBRTtZQUViLGlCQUFpQjtZQUNqQixHQUFHLEVBQUksQ0FBQyxFQUFJLENBQUM7WUFDYixHQUFHLEVBQUcsRUFBRSxFQUFJLENBQUM7WUFDYixHQUFHLEVBQUcsRUFBRSxFQUFHLEVBQUU7WUFDYixHQUFHLEVBQUksQ0FBQyxFQUFJLENBQUM7WUFDYixHQUFHLEVBQUcsRUFBRSxFQUFHLEVBQUU7WUFDYixHQUFHLEVBQUksQ0FBQyxFQUFHLEVBQUU7WUFFYixpQkFBaUI7WUFDakIsRUFBRSxFQUFJLEVBQUUsRUFBSSxDQUFDO1lBQ2IsRUFBRSxFQUFJLEVBQUUsRUFBRyxFQUFFO1lBQ2IsR0FBRyxFQUFHLEVBQUUsRUFBRyxFQUFFO1lBQ2IsRUFBRSxFQUFJLEVBQUUsRUFBSSxDQUFDO1lBQ2IsR0FBRyxFQUFHLEVBQUUsRUFBRyxFQUFFO1lBQ2IsR0FBRyxFQUFHLEVBQUUsRUFBSSxDQUFDO1lBRWIsOEJBQThCO1lBQzlCLEVBQUUsRUFBSSxFQUFFLEVBQUksQ0FBQztZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUcsRUFBRTtZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUcsRUFBRTtZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUksQ0FBQztZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUksQ0FBQztZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUcsRUFBRTtZQUViLHFCQUFxQjtZQUNyQixFQUFFLEVBQUksRUFBRSxFQUFJLENBQUM7WUFDYixFQUFFLEVBQUksRUFBRSxFQUFHLEVBQUU7WUFDYixFQUFFLEVBQUksRUFBRSxFQUFHLEVBQUU7WUFDYixFQUFFLEVBQUksRUFBRSxFQUFJLENBQUM7WUFDYixFQUFFLEVBQUksRUFBRSxFQUFJLENBQUM7WUFDYixFQUFFLEVBQUksRUFBRSxFQUFHLEVBQUU7WUFFYix1QkFBdUI7WUFDdkIsRUFBRSxFQUFJLEVBQUUsRUFBSSxDQUFDO1lBQ2IsRUFBRSxFQUFJLEVBQUUsRUFBRyxFQUFFO1lBQ2IsRUFBRSxFQUFJLEVBQUUsRUFBRyxFQUFFO1lBQ2IsRUFBRSxFQUFJLEVBQUUsRUFBSSxDQUFDO1lBQ2IsRUFBRSxFQUFJLEVBQUUsRUFBSSxDQUFDO1lBQ2IsRUFBRSxFQUFJLEVBQUUsRUFBRyxFQUFFO1lBRWIseUJBQXlCO1lBQ3pCLEVBQUUsRUFBSSxFQUFFLEVBQUksQ0FBQztZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUcsRUFBRTtZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUcsRUFBRTtZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUksQ0FBQztZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUcsRUFBRTtZQUNiLEVBQUUsRUFBSSxFQUFFLEVBQUksQ0FBQztZQUViLGtCQUFrQjtZQUNsQixFQUFFLEVBQUksRUFBRSxFQUFJLENBQUM7WUFDYixFQUFFLEVBQUcsR0FBRyxFQUFHLEVBQUU7WUFDYixFQUFFLEVBQUksRUFBRSxFQUFHLEVBQUU7WUFDYixFQUFFLEVBQUksRUFBRSxFQUFJLENBQUM7WUFDYixFQUFFLEVBQUcsR0FBRyxFQUFJLENBQUM7WUFDYixFQUFFLEVBQUcsR0FBRyxFQUFHLEVBQUU7WUFFYixTQUFTO1lBQ1QsQ0FBQyxFQUFJLEdBQUcsRUFBSSxDQUFDO1lBQ2IsQ0FBQyxFQUFJLEdBQUcsRUFBRyxFQUFFO1lBQ2IsRUFBRSxFQUFHLEdBQUcsRUFBRyxFQUFFO1lBQ2IsQ0FBQyxFQUFJLEdBQUcsRUFBSSxDQUFDO1lBQ2IsRUFBRSxFQUFHLEdBQUcsRUFBRyxFQUFFO1lBQ2IsRUFBRSxFQUFHLEdBQUcsRUFBSSxDQUFDO1lBRWIsWUFBWTtZQUNaLENBQUMsRUFBSSxDQUFDLEVBQUksQ0FBQztZQUNYLENBQUMsRUFBSSxDQUFDLEVBQUcsRUFBRTtZQUNYLENBQUMsRUFBRSxHQUFHLEVBQUcsRUFBRTtZQUNYLENBQUMsRUFBSSxDQUFDLEVBQUksQ0FBQztZQUNYLENBQUMsRUFBRSxHQUFHLEVBQUcsRUFBRTtZQUNYLENBQUMsRUFBRSxHQUFHLEVBQUksQ0FBQztTQUNaLENBQUM7UUFFRixJQUFNLFNBQVMsR0FBRztZQUNoQixvQkFBb0I7WUFDcEIsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBRVYsaUJBQWlCO1lBQ2pCLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtZQUVWLG9CQUFvQjtZQUNwQixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtZQUNWLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7WUFFVixtQkFBbUI7WUFDbkIsQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBRUosZ0JBQWdCO1lBQ2hCLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUVKLG1CQUFtQjtZQUNuQixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFFSixNQUFNO1lBQ04sQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBRUosaUJBQWlCO1lBQ2pCLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUVKLGlCQUFpQjtZQUNqQixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFFSiw4QkFBOEI7WUFDOUIsQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBRUoscUJBQXFCO1lBQ3JCLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUVKLHVCQUF1QjtZQUN2QixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFFSix5QkFBeUI7WUFDekIsQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBRUosa0JBQWtCO1lBQ2xCLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUVKLFNBQVM7WUFDVCxDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFFSixZQUFZO1lBQ1osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixDQUFDLEVBQUUsQ0FBQztZQUNKLENBQUMsRUFBRSxDQUFDO1NBQ0wsQ0FBQztRQUVGLElBQU0sT0FBTyxHQUFHLGFBQWEsQ0FBQztZQUM1QixvQkFBb0I7WUFDcEIsaUJBQWlCO1lBQ2pCLG9CQUFvQjtZQUNwQixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBRVgsbUJBQW1CO1lBQ25CLGdCQUFnQjtZQUNoQixtQkFBbUI7WUFDbkIsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRVosTUFBTTtZQUNOLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFFVixpQkFBaUI7WUFDakIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUVWLGlCQUFpQjtZQUNqQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFFWCw4QkFBOEI7WUFDOUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUVWLHFCQUFxQjtZQUNyQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBRVYsdUJBQXVCO1lBQ3ZCLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFFVix5QkFBeUI7WUFDekIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBRVgsa0JBQWtCO1lBQ2xCLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFFVixTQUFTO1lBQ1QsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO1lBRVgsWUFBWTtZQUNaLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztTQUNaLENBQUMsQ0FBQztRQUVILElBQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQztZQUN2QixvQkFBb0I7WUFDcEIsaUJBQWlCO1lBQ2pCLG9CQUFvQjtZQUN0QixFQUFFLEVBQUUsR0FBRyxFQUFHLEVBQUUsRUFBRSxHQUFHO1lBRWYsbUJBQW1CO1lBQ25CLGdCQUFnQjtZQUNoQixtQkFBbUI7WUFDckIsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRztZQUViLE1BQU07WUFDUixDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHO1lBRWIsaUJBQWlCO1lBQ25CLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFFYixpQkFBaUI7WUFDbkIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUViLDhCQUE4QjtZQUNoQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBRWIscUJBQXFCO1lBQ3ZCLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUc7WUFFYix1QkFBdUI7WUFDekIsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRztZQUViLHlCQUF5QjtZQUMzQixDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHO1lBRWIsa0JBQWtCO1lBQ3BCLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFFYixTQUFTO1lBQ1gsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRztZQUViLFlBQVk7WUFDZCxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHO1NBQ25CLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRVYsSUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFdEMsSUFBTSxNQUFNLEdBQUc7WUFDYixRQUFRLEVBQUUsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDO1lBQ2hFLFFBQVEsRUFBRSx3QkFBZSxDQUFDLHlCQUF5QixDQUFDLENBQUMsRUFBRyxRQUFRLENBQUM7WUFDakUsTUFBTSxFQUFFLHdCQUFlLENBQUMseUJBQXlCLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQztZQUM5RCxLQUFLLEVBQUUsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQztZQUN6RSxPQUFPLEVBQUUsd0JBQWUsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLEVBQUUsUUFBUSxHQUFHLENBQUMsRUFBRSxXQUFXLENBQUM7U0FDakYsQ0FBQztRQUVGLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTFCLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDcEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDekI7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBOVdlLDhCQUFpQixvQkE4V2hDLENBQUE7SUFFQTs7O09BR0c7SUFDSCxTQUFTLG9CQUFvQixDQUFDLEVBQUU7UUFDNUIsT0FBTztZQUNILElBQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RSxPQUFPLHdCQUFlLENBQUMsMEJBQTBCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVELFNBQWdCLHNCQUFzQixDQUFDLE1BQU0sRUFBQyxnQkFBZ0IsRUFBQyxrQkFBa0IsRUFBQywwQkFBMkIsRUFBQyx3QkFBeUIsRUFBQywyQkFBNEIsRUFBQyx5QkFBMEI7UUFDM0wsSUFBTSxNQUFNLEdBQUcsb0JBQW9CLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUYsT0FBTyx3QkFBZSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFIZSxtQ0FBc0IseUJBR3JDLENBQUE7SUFDRCxTQUFnQixxQkFBcUIsQ0FBQyxLQUFLLEVBQUMsS0FBSyxFQUFDLGlCQUFpQixFQUFDLGlCQUFpQixFQUFDLE1BQU87UUFDekYsSUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekYsT0FBTyx3QkFBZSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFIZSxrQ0FBcUIsd0JBR3BDLENBQUE7SUFDRCxTQUFnQixvQkFBb0IsQ0FBQyxJQUFJO1FBQ3JDLElBQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sd0JBQWUsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBSGUsaUNBQW9CLHVCQUduQyxDQUFBO0lBRUQsU0FBZ0IsbUJBQW1CO1FBQzNCLElBQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZGLE9BQU8sd0JBQWUsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVsRSxDQUFDO0lBSmUsZ0NBQW1CLHNCQUlsQyxDQUFBO0lBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FrQ0c7QUFHUCxDQUFDLEVBbHlCZ0IsWUFBWSxHQUFaLG9CQUFZLEtBQVosb0JBQVksUUFreUI1Qjs7Ozs7QUN2eUJELDBDQUE4RjtBQUM5RixzQ0FBcUM7QUFFckMsSUFBSyxVQUdKO0FBSEQsV0FBSyxVQUFVO0lBQ1gsK0NBQVUsQ0FBQTtJQUNWLG1EQUFRLENBQUE7QUFDWixDQUFDLEVBSEksVUFBVSxLQUFWLFVBQVUsUUFHZDtBQUdELElBQUksZUFBZSxHQUNmLDRCQUE0QjtJQUM1QiwwQkFBMEI7SUFDMUIsc0JBQXNCO0lBRXRCLDBCQUEwQjtJQUMxQix5QkFBeUI7SUFDekIseUJBQXlCO0lBQ3pCLHlCQUF5QjtJQUV6Qix3QkFBd0I7SUFDeEIsb0JBQW9CO0lBRXBCLGVBQWU7SUFDZiwrREFBK0Q7SUFDL0QsY0FBYztJQUNkLEdBQUcsQ0FBQTtBQUNQLGlCQUFpQjtBQUNqQixJQUFJLFlBQVksR0FDWiwwQkFBMEI7SUFFMUIsb0JBQW9CO0lBQ3BCLCtCQUErQjtJQUMvQiwrQkFBK0I7SUFDL0Isb0NBQW9DO0lBQ3BDLHVCQUF1QjtJQUN2QiwyQkFBMkI7SUFFM0IsZUFBZTtJQUNmLDZDQUE2QztJQUM3QyxHQUFHLENBQUE7QUFFUDtJQUNJLG9CQUFZLE1BQU0sRUFBRSxLQUFLO1FBTWpCLGlCQUFZLEdBQVcsQ0FBQyxDQUFDO1FBR3pCLFdBQU0sR0FBVyxDQUFDLENBQUMsQ0FBQztRQVJ4QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDO0lBTUQsc0JBQVcsOEJBQU07YUFBakI7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFDRCxzQkFBVyxtQ0FBVzthQUF0QjtZQUNJLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUM3QixDQUFDOzs7T0FBQTtJQUNNLG1DQUFjLEdBQXJCO1FBQ0ksSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMvQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEIsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNELHNCQUFXLGtDQUFVO2FBQXJCO1lBQ0ksT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQ2hDLENBQUM7YUFJRCxVQUFzQixHQUFrQztZQUNwRCxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQztRQUMvQixDQUFDOzs7T0FOQTtJQUNELHNCQUFXLG1DQUFXO2FBQXRCO1lBQ0ksT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQy9CLENBQUM7YUFJRCxVQUF1QixHQUFrQztZQUNyRCxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQztRQUM5QixDQUFDOzs7T0FOQTtJQU9ELHNCQUFXLDZCQUFLO2FBQWhCO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBQ0wsaUJBQUM7QUFBRCxDQXJDQSxBQXFDQyxJQUFBO0FBckNZLGdDQUFVO0FBc0N2QjtJQUNJLDJCQUFZLE9BQU8sRUFBQyxXQUFXLEVBQUMsT0FBTztRQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMzQixDQUFDO0lBSUwsd0JBQUM7QUFBRCxDQVRBLEFBU0MsSUFBQTtBQVRZLDhDQUFpQjtBQVU5Qjs7R0FFRztBQUNIO0lBQUE7UUEyYlcsZUFBVSxHQUFHLGdCQUFnQixDQUFDO1FBQzlCLFlBQU8sR0FBRyxlQUFlLENBQUM7UUFzQmpDOztXQUVHO1FBQ2EsaUJBQVksR0FBRyxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7SUE2SDNFLENBQUM7SUEva0JHLDRCQUFJLEdBQUosVUFBSyxFQUFFO1FBQ0gsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQ7OztPQUdHO0lBQ08sMkNBQW1CLEdBQTdCLFVBQThCLEtBQUs7UUFDL0IsSUFBSSxHQUFlLENBQUM7UUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLEVBQUUsS0FBSztZQUMzQyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxFQUFFO2dCQUN0QixHQUFHLEdBQUcsS0FBSyxDQUFDO2FBQ2Y7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUNEOzs7T0FHRztJQUNPLDBDQUFrQixHQUE1QixVQUE2QixJQUFJO1FBQzdCLElBQUksR0FBZSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSyxFQUFFLEtBQUs7WUFDM0MsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRTtnQkFDdEIsR0FBRyxHQUFHLEtBQUssQ0FBQzthQUNmO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7Ozs7O09BTUc7SUFDTyx3Q0FBZ0IsR0FBMUIsVUFBMkIsSUFBSTtRQUMzQixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ2IsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7WUFDcEMsSUFBSSxHQUFHLEdBQWUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzNCLE9BQU8sR0FBRyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRDs7OztNQUlFO0lBQ00sa0NBQVUsR0FBbEIsVUFBbUIsVUFBc0IsRUFBRSxZQUFZO1FBQ25ELFFBQVE7UUFDUixJQUFJLE1BQU0sQ0FBQztRQUNYLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDbkMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDNUQ7YUFBTSxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3hDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzFEO2FBQU07WUFDSCxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsUUFBUTtRQUNSLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMvQixXQUFXO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDL0QsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN6QyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNEOzs7O09BSUc7SUFDSSxvQ0FBWSxHQUFuQixVQUFvQixXQUFxQyxFQUFFLFFBQStCO1FBQXRFLDRCQUFBLEVBQUEsNkJBQXFDO1FBQUUseUJBQUEsRUFBQSx1QkFBK0I7UUFDdEYsa0JBQWtCO1FBQ2xCLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNuRSxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFcEUsYUFBYTtRQUNiLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqQyxVQUFVO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDakUsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7U0FDcEM7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBRVMsc0NBQWMsR0FBeEI7SUFFQSxDQUFDO0lBQ00sb0NBQVksR0FBbkIsVUFBb0IsYUFBYTtJQUVqQyxDQUFDO0lBRU8sMENBQWtCLEdBQTFCLFVBQTJCLEtBQUs7UUFDNUIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsQixPQUFPLFVBQVUsQ0FBQztZQUNkLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRTtnQkFDVCxFQUFFLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25DLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7b0JBQ3BCLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ25DLE1BQU07b0JBQ1YsS0FBSyxDQUFDO3dCQUNGLEVBQUUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFDbkMsTUFBTTtvQkFDVixLQUFLLENBQUM7d0JBQ0YsRUFBRSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNuQyxNQUFNO29CQUNWLEtBQUssQ0FBQzt3QkFDRixFQUFFLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ25DLE1BQU07b0JBQ1Y7d0JBQ0ksTUFBTSxJQUFJLEtBQUssQ0FBQywrREFBK0QsQ0FBQyxDQUFDO2lCQUN4RjthQUNKO2lCQUFNO2dCQUNILEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3pDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbEMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsYUFBYSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxTQUFTLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDcEk7UUFDTCxDQUFDLENBQUM7SUFDTixDQUFDO0lBQ08sOENBQXNCLEdBQTlCLFVBQStCLFVBQXNCO1FBQ2pELElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbEIsSUFBSSxPQUFPLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUNoQyxJQUFNLGFBQWEsR0FBa0MsRUFDcEQsQ0FBQztRQUNGLElBQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDekUsS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLFVBQVUsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNwQyxJQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNuRCxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNiLE1BQU07YUFDVDtZQUNELElBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdELGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25FO1FBQ0QsT0FBTyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUNEOztLQUVDO0lBQ08sa0RBQTBCLEdBQWxDLFVBQW1DLEVBQUUsRUFBRSxJQUFJO1FBQ3ZDLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQyxVQUFVO1lBQUUsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQVEsc0JBQXNCO1FBQy9FLElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQyxZQUFZO1lBQUUsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBRSxzQkFBc0I7UUFDakYsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUNEOzs7Ozs7U0FNSztJQUNHLDJDQUFtQixHQUEzQixVQUE0QixXQUFXLEVBQUUsVUFBc0I7UUFDM0QsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsQixJQUFJLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ2hDLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xFLElBQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDOUIsb0NBQW9DO1FBQ3BDLElBQU0sT0FBTyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQztRQUNoRixJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxJQUFJLE9BQU8sRUFBRTtZQUM5QixPQUFPLFVBQVUsQ0FBQztnQkFDZCxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUM7U0FDTDtRQUNELElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUU7WUFDbkIsT0FBTyxVQUFVLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUIsQ0FBQyxDQUFDO1NBQ0w7UUFDRCxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsVUFBVSxFQUFFO1lBQ3hCLE9BQU8sVUFBVSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQztTQUNMO1FBQ0QsSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLFVBQVUsRUFBRTtZQUN4QixPQUFPLFVBQVUsQ0FBQztnQkFDZCxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUM7U0FDTDtRQUNELElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQyxVQUFVLEVBQUU7WUFDeEIsT0FBTyxVQUFVLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0IsQ0FBQyxDQUFDO1NBQ0w7UUFDRCxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLE9BQU8sRUFBRTtZQUM1QixPQUFPLFVBQVUsQ0FBQztnQkFDZCxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUM7U0FDTDtRQUNELElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUU7WUFDakIsT0FBTyxVQUFVLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUIsQ0FBQyxDQUFDO1NBQ0w7UUFDRCxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQ3RCLE9BQU8sVUFBVSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQztTQUNMO1FBQ0QsSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUN0QixPQUFPLFVBQVUsQ0FBQztnQkFDZCxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUM7U0FDTDtRQUNELElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQyxRQUFRLEVBQUU7WUFDdEIsT0FBTyxVQUFVLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0IsQ0FBQyxDQUFDO1NBQ0w7UUFDRCxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFO1lBQ2xCLE9BQU8sVUFBVSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQztTQUNMO1FBQ0QsSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRTtZQUN2QixPQUFPLFVBQVUsQ0FBQztnQkFDZCxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvQixDQUFDLENBQUM7U0FDTDtRQUNELElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUU7WUFDdkIsT0FBTyxVQUFVLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0IsQ0FBQyxDQUFDO1NBQ0w7UUFDRCxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFO1lBQ3ZCLE9BQU8sVUFBVSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9CLENBQUMsQ0FBQztTQUNMO1FBQ0QsSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLFVBQVUsRUFBRTtZQUN4QixPQUFPLFVBQVUsQ0FBQztnQkFDZCxFQUFFLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1QyxDQUFDLENBQUM7U0FDTDtRQUNELElBQUksSUFBSSxLQUFLLEVBQUUsQ0FBQyxVQUFVLEVBQUU7WUFDeEIsT0FBTyxVQUFVLENBQUM7Z0JBQ2QsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUMsQ0FBQyxDQUFDO1NBQ0w7UUFDRCxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsVUFBVSxFQUFFO1lBQ3hCLE9BQU8sVUFBVSxDQUFDO2dCQUNkLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVDLENBQUMsQ0FBQztTQUNMO1FBQ0QsSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsVUFBVSxJQUFJLElBQUksS0FBSyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksT0FBTyxFQUFFO1lBQ2pFLElBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNqQixLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRTtnQkFDMUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQzthQUMzQztZQUNELE9BQU8sVUFBVSxTQUFTLEVBQUUsS0FBSztnQkFDN0IsT0FBTyxVQUFVLFFBQVE7b0JBQ3JCLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUMvQixRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsT0FBTyxFQUFFLEtBQUs7d0JBQ3JDLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDN0MsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7b0JBQ3ZDLENBQUMsQ0FBQyxDQUFDO2dCQUNQLENBQUMsQ0FBQztZQUNOLENBQUMsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLFVBQVUsSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDLFlBQVksRUFBRTtZQUNwRCxPQUFPLFVBQVUsU0FBUyxFQUFFLElBQUk7Z0JBQzVCLE9BQU8sVUFBVSxPQUFPO29CQUNwQixFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDN0IsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDO29CQUNyQyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdkMsQ0FBQyxDQUFDO1lBQ04sQ0FBQyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7U0FDN0U7UUFDRCxNQUFNLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO0lBQ2hGLENBQUM7SUFFRDs7T0FFRztJQUNLLDRDQUFvQixHQUE1QixVQUE2QixVQUFzQjtRQUMvQyxJQUFJLE9BQU8sR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ2hDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFHbEIsSUFBSSxjQUFjLEdBQWtDLEVBQUUsQ0FBQTtRQUN0RCxJQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUV4RSxLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsV0FBVyxFQUFFLEVBQUUsRUFBRSxFQUFFO1lBQ3JDLElBQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDckQsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDZCxNQUFNO2FBQ1Q7WUFDRCxJQUFJLE1BQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO1lBQzVCLDJCQUEyQjtZQUMzQixJQUFJLE1BQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQzNCLE1BQUksR0FBRyxNQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQzFDO1lBQ0QsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNqRSxjQUFjLENBQUMsTUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQztJQUlEOzs7O09BSUc7SUFDSSx5Q0FBaUIsR0FBeEIsVUFBeUIsRUFBVSxFQUFFLEVBQVU7UUFDM0MsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3RCxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUQsVUFBVSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUM7UUFDdkMsVUFBVSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUM7UUFFdkMsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUdNLHdDQUFnQixHQUF2QixVQUF3QixLQUFLO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNsRCxDQUFDO0lBQ0QsZUFBZTtJQUNSLCtDQUF1QixHQUE5QixVQUErQixhQUE0QyxFQUFFLE9BQU87UUFDaEYsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsQixJQUFJLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzlCLElBQUksT0FBTyxHQUFHLGFBQWEsQ0FBQztRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUk7WUFDdkMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdCLElBQUksTUFBTSxFQUFFO2dCQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUN6QjtpQkFFRDtnQkFDSSxtREFBbUQ7YUFDdEQ7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNqQixFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDM0Q7SUFDTCxDQUFDO0lBQ0QsYUFBYTtJQUNOLG1DQUFXLEdBQWxCLFVBQW1CLGNBQTZDO1FBQUUsZ0JBQVM7YUFBVCxVQUFTLEVBQVQscUJBQVMsRUFBVCxJQUFTO1lBQVQsK0JBQVM7O1FBQ3ZFLElBQUksT0FBTyxHQUFHLGNBQWMsQ0FBQztnQ0FDbEIsUUFBUTtZQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSTtnQkFDeEMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3QixJQUFJLE1BQU0sRUFBRTtvQkFDUixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQzFCO3FCQUVEO29CQUNJLGtEQUFrRDtpQkFDckQ7WUFDTCxDQUFDLENBQUMsQ0FBQzs7UUFWUCxLQUF1QixVQUFNLEVBQU4saUJBQU0sRUFBTixvQkFBTSxFQUFOLElBQU07WUFBeEIsSUFBTSxRQUFRLGVBQUE7b0JBQVIsUUFBUTtTQVdsQjtJQUNMLENBQUM7SUFDRCxXQUFXO0lBQ0osc0NBQWMsR0FBckIsVUFBc0IsVUFBVSxFQUFFLGFBQStCLEVBQUUsS0FBYSxFQUFFLE1BQWM7UUFDNUYsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsQixJQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO1FBQ25DLGFBQWEsR0FBRyxhQUFhLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDM0UsSUFBTSxXQUFXLEdBQUcsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3pFLE1BQU0sR0FBRyxNQUFNLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUMzQyxJQUFJLE9BQU8sRUFBRTtZQUNULEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQzFFO2FBQU07WUFDSCxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDckQ7SUFDTCxDQUFDO0lBRUQsc0ZBQXNGO0lBQ3RGLHdEQUF3RDtJQUN4RCx1REFBdUQ7SUFDdkQseUNBQXlDO0lBQ2xDLHlDQUFpQixHQUF4QixVQUF5QixVQUFVLEVBQUUsYUFBYTtRQUM5QyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDZixVQUFVLENBQUMsSUFBSSxHQUFHO1lBQ2QsS0FBSyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUU7Z0JBQzFDLElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDNUIsSUFBSSxLQUFLLFlBQVksS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxZQUFZLFdBQVcsQ0FBQyxFQUFFO29CQUNqRixLQUFLLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRTt3QkFDdEMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3FCQUNwQztpQkFDSjtxQkFBTTtvQkFDSCxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7aUJBQ2hDO2FBQ0o7UUFDTCxDQUFDLENBQUM7UUFDRixVQUFVLENBQUMsS0FBSyxHQUFHLFVBQVUsU0FBUztZQUNsQyxNQUFNLEdBQUcsU0FBUyxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUM7UUFDRixVQUFVLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUN6QyxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRSxhQUFhLEVBQUU7WUFDN0MsR0FBRyxFQUFFO2dCQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQztZQUNoRCxDQUFDO1NBQ0osQ0FBQyxDQUFDO1FBQ0gsT0FBTyxVQUFVLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUFxQkU7SUFDSyxpREFBeUIsR0FBaEMsVUFBaUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxRQUFTO1FBQ2xFLElBQU0sSUFBSSxHQUFHLFFBQVEsSUFBSSxZQUFZLENBQUM7UUFDdEMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3hGLENBQUM7SUFDTSxnQ0FBUSxHQUFmLFVBQWdCLEtBQUs7UUFDakIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDN0MsQ0FBQztJQUlNLGtEQUEwQixHQUFqQyxVQUFrQyxJQUFJLEVBQUUsTUFBTztRQUMzQyxJQUFJLGFBQWEsQ0FBQztRQUNsQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLGFBQWEsR0FBRyxDQUFDLENBQUM7U0FDckI7YUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2hDLGFBQWEsR0FBRyxDQUFDLENBQUM7U0FDckI7YUFBTTtZQUNILGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBRSxpQ0FBaUM7U0FDeEQ7UUFFRCxJQUFJLE1BQU0sR0FBRyxhQUFhLEdBQUcsQ0FBQyxFQUFFO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQThDLElBQUksaUJBQVksYUFBYSxhQUFRLE1BQU0sMkNBQXNDLGFBQWEsNkJBQTBCLENBQUMsQ0FBQztTQUMzTDtRQUVELE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7SUFFTSx3Q0FBZ0IsR0FBdkIsVUFBd0IsS0FBSyxFQUFFLFNBQVM7UUFDcEMsT0FBTyxLQUFLLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLDBCQUEwQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hILENBQUM7SUFNTSwwREFBa0MsR0FBekMsVUFBMEMsTUFBTTtRQUM1QyxJQUFJLEdBQUcsQ0FBQztRQUNSLEtBQWdCLFVBQWlCLEVBQWpCLEtBQUEsSUFBSSxDQUFDLFlBQVksRUFBakIsY0FBaUIsRUFBakIsSUFBaUIsRUFBRTtZQUE5QixJQUFNLENBQUMsU0FBQTtZQUNSLElBQUksQ0FBQyxJQUFJLE1BQU0sRUFBRTtnQkFDYixHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUNSLE1BQU07YUFDVDtTQUNKO1FBQ0QsR0FBRyxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixJQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUMzQyxJQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3hELElBQU0sV0FBVyxHQUFHLE1BQU0sR0FBRyxhQUFhLENBQUM7UUFDM0MsSUFBSSxNQUFNLEdBQUcsYUFBYSxHQUFHLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLG1CQUFpQixhQUFhLGdDQUEyQixNQUFRLENBQUMsQ0FBQztTQUN0RjtRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3ZCLENBQUM7SUFFTSw4Q0FBc0IsR0FBN0IsVUFBOEIsRUFBRSxFQUFFLFVBQVU7UUFDeEMsSUFBSSxVQUFVLFlBQVksU0FBUyxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO1NBQUUsQ0FBWSxzQkFBc0I7UUFDMUYsSUFBSSxVQUFVLFlBQVksVUFBVSxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDO1NBQUUsQ0FBRyxzQkFBc0I7UUFDM0YsSUFBSSxVQUFVLFlBQVksVUFBVSxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDO1NBQUUsQ0FBVyxzQkFBc0I7UUFDM0YsSUFBSSxVQUFVLFlBQVksV0FBVyxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO1NBQUUsQ0FBRSxzQkFBc0I7UUFDNUYsSUFBSSxVQUFVLFlBQVksVUFBVSxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDO1NBQUUsQ0FBYSxzQkFBc0I7UUFDM0YsSUFBSSxVQUFVLFlBQVksV0FBVyxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO1NBQUUsQ0FBSSxzQkFBc0I7UUFDNUYsSUFBSSxVQUFVLFlBQVksWUFBWSxFQUFFO1lBQUUsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDO1NBQUUsQ0FBVyxzQkFBc0I7UUFDN0YsTUFBTSw4QkFBOEIsQ0FBQztJQUN6QyxDQUFDO0lBRUQsbUVBQW1FO0lBQ25FLDZDQUE2QztJQUN0QyxxREFBNkIsR0FBcEMsVUFBcUMsVUFBVTtRQUMzQyxJQUFJLFVBQVUsWUFBWSxTQUFTLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQztTQUFFLENBQUUsc0JBQXNCO1FBQzdFLElBQUksVUFBVSxZQUFZLFVBQVUsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDO1NBQUUsQ0FBRSxzQkFBc0I7UUFDOUUsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVNLHFDQUFhLEdBQXBCLFVBQXFCLENBQUM7UUFDbEIsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLFlBQVksV0FBVyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxrREFBMEIsR0FBakMsVUFBa0MsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFLLEVBQUUsUUFBUztRQUN6RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUM7UUFDL0IsSUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLElBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxxQ0FBYSxHQUFwQixVQUFxQixJQUFJO1FBQ3JCLE9BQU8sSUFBSSxLQUFLLFNBQVMsQ0FBQztJQUM5QixDQUFDO0lBRU0scUNBQWEsR0FBcEIsVUFBcUIsR0FBRztRQUNwQixJQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUc7WUFDN0QsT0FBTyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRU0sc0NBQWMsR0FBckIsVUFBc0IsS0FBSyxFQUFFLElBQUk7UUFDN0IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzNCLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzlDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQztTQUNyQjtRQUNELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixLQUFLLEdBQUc7Z0JBQ0osSUFBSSxFQUFFLEtBQUs7YUFDZCxDQUFDO1NBQ0w7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRTtZQUN0QixLQUFLLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdFO1FBQ0QsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUNwQixJQUFJLEdBQUcsV0FBVyxDQUFDO2FBQ3RCO1NBQ0o7UUFDRCxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsYUFBYSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxSCxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBQ00sK0NBQXVCLEdBQTlCLFVBQStCLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVztRQUF0RCxpQkFxQkM7UUFwQkcsSUFBTSxPQUFPLEdBQUcsV0FBVyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUQsSUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsVUFBVTtZQUNwQyxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDdkMsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLElBQUksU0FBUyxDQUFDLEtBQUssRUFBRTtnQkFDakIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHO29CQUNsQixLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUs7aUJBQ3pCLENBQUM7YUFDTDtpQkFBTTtnQkFDSCxJQUFNLEtBQUssR0FBRyxLQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDekQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHO29CQUNsQixNQUFNLEVBQUUsS0FBSSxDQUFDLDBCQUEwQixDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUM7b0JBQ2xELGFBQWEsRUFBRSxTQUFTLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxhQUFhLElBQUksS0FBSSxDQUFDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQztvQkFDNUcsSUFBSSxFQUFFLEtBQUksQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDO29CQUM1QyxTQUFTLEVBQUUsS0FBSSxDQUFDLDZCQUE2QixDQUFDLEtBQUssQ0FBQztpQkFDdkQsQ0FBQzthQUNMO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBQ00sa0RBQTBCLEdBQWpDLFVBQWtDLE1BQU0sRUFBRSxXQUFZO1FBQ2xELElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbEIsSUFBTSxVQUFVLEdBQVE7WUFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsQ0FBQztTQUNqRSxDQUFDO1FBQ0YsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLE9BQU8sRUFBRTtZQUNULE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUNsRCxVQUFVLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQzNGLFVBQVUsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztTQUMzQzthQUFNO1lBQ0gsVUFBVSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsa0NBQWtDLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUU7UUFDRCxPQUFPLElBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBQyxVQUFVLENBQUMsV0FBVyxFQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvRixDQUFDO0lBQ0wsb0JBQUM7QUFBRCxDQWxsQkEsQUFrbEJDLElBQUE7QUFFVSxRQUFBLGVBQWUsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0FBRWpEO0lBeUJJLGdCQUFZLEVBQUUsRUFBRSxJQUFJO1FBVGIsZUFBVSxHQUFZLEtBQUssQ0FBQyxDQUFBLElBQUk7UUFDaEMsY0FBUyxHQUFZLEtBQUssQ0FBQyxDQUFBLElBQUk7UUFDL0IsZUFBVSxHQUFZLEtBQUssQ0FBQyxDQUFBLEtBQUs7UUFRcEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUNEOzs7O09BSUc7SUFDSSxhQUFNLEdBQWIsVUFBYyxJQUFJLEVBQUUsSUFBSTtRQUNwQixJQUFJLElBQUksR0FBRyx1QkFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEQsT0FBTyxJQUFJLE1BQU0sQ0FBQyx1QkFBZSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUNoRCxDQUFDO0lBQ1MsK0JBQWMsR0FBeEI7UUFDSSxJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDckMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsQixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsOEJBQWdDLENBQUM7UUFDN0YsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLDBCQUE4QixDQUFDO1FBQ3pGLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGlCQUFpQixrQkFBMEIsQ0FBQztRQUNqRixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsNEJBQStCLENBQUM7UUFDM0YsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLHdCQUE2QixDQUFDO1FBQ3hGLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixnQ0FBaUMsQ0FBQztRQUNoRyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsOEJBQWdDLENBQUM7UUFDOUYsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLDRCQUErQixDQUFDO1FBQzVGLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQiwrQkFBaUMsQ0FBQztRQUMvRixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsMEJBQThCLENBQUM7UUFDMUYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsa0NBQWtDLENBQUM7UUFDbEcsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsa0RBQTBDLENBQUM7UUFDbEgsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLDRCQUErQixDQUFDO1FBQzVGLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQiw0QkFBK0IsQ0FBQTtJQUMvRixDQUFDO0lBQ00sMkNBQTBCLEdBQWpDLFVBQWtDLE9BQWU7UUFDN0MsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFDNUQsQ0FBQztJQUVNLHdCQUFPLEdBQWQ7UUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7T0FHRztJQUNLLDhCQUFhLEdBQXJCLFVBQXNCLEdBQUcsRUFBRSxPQUFPO1FBQzlCLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDaEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNPLCtCQUFjLEdBQXRCLFVBQXVCLElBQUk7UUFDdkIsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0RCxDQUFDO0lBRUQsa0JBQWtCO0lBQ1Ysc0NBQXFCLEdBQTdCO1FBQ0ksSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxFQUFDLGVBQWU7WUFDM0UsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDekQ7UUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsRUFBRTtZQUMvQyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuRDtRQUNELElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxFQUFFO1lBQ3ZELElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3ZEO0lBRUwsQ0FBQztJQUNELHdCQUF3QjtJQUNoQixpQ0FBZ0IsR0FBeEIsVUFBeUIsaUJBQWlCO1FBQ3RDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDbEIsSUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ25GLEtBQUssSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsR0FBRyxVQUFVLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDcEMsSUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM3RCxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNiLE1BQU07YUFDVDtZQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3QyxJQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzFFO0lBQ0wsQ0FBQztJQUVELFVBQVU7SUFDSCx1QkFBTSxHQUFiO1FBQ0ksSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFDRDs7OztPQUlHO0lBQ0ksNEJBQVcsR0FBbEIsVUFBbUIsS0FBd0IsRUFBRSxTQUF5QjtRQUFuRCxzQkFBQSxFQUFBLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQUUsMEJBQUEsRUFBQSxhQUFhLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRWxFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLGlCQUFpQixDQUFDLEVBQUU7WUFDekksT0FBTztTQUNWO1FBQ0QsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBRXRELDJCQUEyQjtRQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFDTSw2QkFBWSxHQUFuQixVQUFvQixvQkFBb0I7UUFFcEMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUVsQixFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4QixFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV6QixtQkFBbUI7UUFDbkIsRUFBRSxDQUFDLGdCQUFnQixDQUNmLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxLQUFLLEVBQ3BDLG9CQUFvQixDQUFDLENBQUM7UUFFMUIscURBQXFEO1FBQ3JELEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVuQywwQ0FBMEM7UUFDMUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUNELGNBQWM7SUFDUCw2Q0FBNEIsR0FBbkMsVUFBb0MsU0FBUztRQUN6QyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLGtCQUFrQixDQUFDLEVBQUU7WUFDL0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3RFO0lBQ0wsQ0FBQztJQUNELE1BQU07SUFDQyw0QkFBVyxHQUFsQixVQUFtQixNQUFNO1FBQ3JCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxFQUFFO1lBQ3JELElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDakQ7SUFDTCxDQUFDO0lBQ0QsVUFBVTtJQUNILHNDQUFxQixHQUE1QixVQUE2QixRQUFRO1FBRWpDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLEVBQUU7WUFDM0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNuRTtJQUNMLENBQUM7SUFDRCxVQUFVO0lBQ0gsdUNBQXNCLEdBQTdCLFVBQThCLFVBQVU7UUFFcEMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLEVBQUU7WUFDekQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNwRTtJQUNMLENBQUM7SUFDRCxPQUFPO0lBQ0EsbURBQWtDLEdBQXpDLFVBQTBDLElBQUksRUFBRSxRQUFnQjtRQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7WUFBRSxPQUFPO1FBQ3ZDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLEVBQUU7WUFDM0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDdEQsYUFBSyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDekY7SUFDTCxDQUFDO0lBQ0QsT0FBTztJQUNBLGtEQUFpQyxHQUF4QyxVQUF5QyxJQUFJLEVBQUUsUUFBZ0I7UUFDM0QsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTztRQUN2Qzs7Ozs7OztXQU9HO1FBQ0gsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLEVBQUU7WUFDdkQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQzFGO0lBQ0wsQ0FBQztJQUNELE9BQU87SUFDQSwrQ0FBOEIsR0FBckMsVUFBc0MsSUFBSSxFQUFFLFFBQWdCO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztZQUFFLE9BQU87UUFFdkMsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDakQsSUFBSSxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ3RGO0lBQ0wsQ0FBQztJQUNELFNBQVM7SUFDVCxtQ0FBbUM7SUFDNUIsOEJBQWEsR0FBcEIsVUFBcUIsSUFBSSxFQUFFLEdBQU87UUFBUCxvQkFBQSxFQUFBLE9BQU87UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQUUsT0FBTztRQUN2Qzs7VUFFRTtRQUVGLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLEVBQUU7WUFDM0QsYUFBYTtZQUNiLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsOEJBQW9CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVELFlBQVk7WUFDWixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVoRCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztJQUVNLHlDQUF3QixHQUEvQjtRQUNJLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLEVBQUUsRUFBQyxlQUFlO1lBQzNFLElBQUksQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLEVBQUU7WUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEQ7UUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsRUFBRTtZQUN2RCxJQUFJLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN4RDtJQUNMLENBQUM7SUFJTCxhQUFDO0FBQUQsQ0FqUEEsQUFpUEMsSUFBQTtBQWpQWSx3QkFBTTs7Ozs7QUNuckJuQjs7R0FFRztBQUNILElBQWlCLFNBQVMsQ0EwQnpCO0FBMUJELFdBQWlCLFNBQVM7SUFDeEI7OztPQUdHO0lBQ0gsU0FBZ0IsUUFBUSxDQUFDLEdBQUc7UUFDMUIsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDN0IsQ0FBQztJQUZlLGtCQUFRLFdBRXZCLENBQUE7SUFDRCxTQUFnQixFQUFFLENBQUMsQ0FBQztRQUNsQixPQUFPLENBQUcsQ0FBQyxHQUFHLENBQUMsUUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFGZSxZQUFFLEtBRWpCLENBQUE7SUFDRCxTQUFnQixRQUFRLENBQUMsQ0FBQztRQUN4QixPQUFPLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRmUsa0JBQVEsV0FFdkIsQ0FBQTtJQUNELHlEQUF5RDtJQUN6RCxTQUFnQixVQUFVLENBQUMsS0FBSztRQUM5QixPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFGZSxvQkFBVSxhQUV6QixDQUFBO0lBRUQsU0FBZ0IsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHO1FBQzNCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMzQyxDQUFDO0lBRmUsY0FBSSxPQUVuQixDQUFBO0lBRUQsU0FBZ0IsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFGZSxjQUFJLE9BRW5CLENBQUE7QUFDSCxDQUFDLEVBMUJnQixTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQTBCekIiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJcclxuaW1wb3J0IHsgZ2xNYXRyaXggfSBmcm9tIFwiLi9jb3JlL01hdHJpeFwiO1xyXG5pbXBvcnQgeyBSZW5kZXJEYXRhLCBSZW5kZXJEYXRhUG9vbCwgUmVuZGVyRGF0YVR5cGUsIFNwaW5lUmVuZGVyRGF0YSB9IGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvYmFzZS9SZW5kZXJEYXRhXCI7XHJcbmltcG9ydCBTY2VuZTJEIGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvYmFzZS9TY2VuZTJEXCI7XHJcbmltcG9ydCBTY2VuZTNEIGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvYmFzZS9TY2VuZTNEXCI7XHJcbmltcG9ydCB7IENhbWVyYU1vZGVsIH0gZnJvbSBcIi4vY29yZS9yZW5kZXJlci9jYW1lcmEvQ2FtZXJhTW9kZWxcIjtcclxuaW1wb3J0IEdhbWVNYWluQ2FtZXJhIGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvY2FtZXJhL0dhbWVNYWluQ2FtZXJhXCI7XHJcbmltcG9ydCBGcmFtZUJ1ZmZlciBmcm9tIFwiLi9jb3JlL3JlbmRlcmVyL2dmeC9GcmFtZUJ1ZmZlclwiO1xyXG5pbXBvcnQgeyBHTGFwaSB9IGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvZ2Z4L0dMYXBpXCI7XHJcbmltcG9ydCB7IEdfU2hhZGVyRmFjdG9yeSB9IGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvc2hhZGVyL1NoYWRlclwiO1xyXG5pbXBvcnQgeyBNYXRoVXRpbHMgfSBmcm9tIFwiLi9jb3JlL3V0aWxzL01hdGhVdGlsc1wiO1xyXG5cclxuLyoqXHJcbiogX2F0dGFjaFxyXG4qL1xyXG5mdW5jdGlvbiBfYXR0YWNoKGdsLCBsb2NhdGlvbiwgYXR0YWNobWVudCwgZmFjZSA9IDApIHtcclxuICAgIC8vIGlmIChhdHRhY2htZW50IGluc3RhbmNlb2YgVGV4dHVyZTJEKSB7XHJcbiAgICAvLyAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXHJcbiAgICAvLyAgICAgICAgIGdsLkZSQU1FQlVGRkVSLFxyXG4gICAgLy8gICAgICAgICBsb2NhdGlvbixcclxuICAgIC8vICAgICAgICAgZ2wuVEVYVFVSRV8yRCxcclxuICAgIC8vICAgICAgICAgYXR0YWNobWVudC5fZ2xJRCxcclxuICAgIC8vICAgICAgICAgMFxyXG4gICAgLy8gICAgICk7XHJcbiAgICAvLyB9IFxyXG4gICAgLy8gZWxzZSBpZiAoYXR0YWNobWVudCBpbnN0YW5jZW9mIFRleHR1cmVDdWJlKSB7XHJcbiAgICAvLyAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXHJcbiAgICAvLyAgICAgICAgIGdsLkZSQU1FQlVGRkVSLFxyXG4gICAgLy8gICAgICAgICBsb2NhdGlvbixcclxuICAgIC8vICAgICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgZmFjZSxcclxuICAgIC8vICAgICAgICAgYXR0YWNobWVudC5fZ2xJRCxcclxuICAgIC8vICAgICAgICAgMFxyXG4gICAgLy8gICAgICk7XHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgLy8gICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKFxyXG4gICAgLy8gICAgICAgICBnbC5GUkFNRUJVRkZFUixcclxuICAgIC8vICAgICAgICAgbG9jYXRpb24sXHJcbiAgICAvLyAgICAgICAgIGdsLlJFTkRFUkJVRkZFUixcclxuICAgIC8vICAgICAgICAgYXR0YWNobWVudC5fZ2xJRFxyXG4gICAgLy8gICAgICk7XHJcbiAgICAvLyB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfTtcclxuICAgIHB1YmxpYyBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIHByaXZhdGUgX2dsMmQ7XHJcbiAgICBwcml2YXRlIF93aWR0aDogbnVtYmVyID0gMDtcclxuICAgIHByaXZhdGUgX2hlaWdodDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBjYW52YXM6IEhUTUxFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBEZXZpY2U7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBJbnN0YW5jZSgpOiBEZXZpY2Uge1xyXG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgRGV2aWNlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBpbml0KCk6IHZvaWQge1xyXG5cclxuICAgICAgICB2YXIgY2FudmFzOiBIVE1MRWxlbWVudCA9IHdpbmRvd1tcImNhbnZhc1wiXTtcclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLmNyZWF0ZUdMQ29udGV4dChjYW52YXMpO1xyXG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICBHTGFwaS5iaW5kR0woZ2wpO1xyXG4gICAgICAgIGNhbnZhcy5vbm1vdXNlZG93biA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKTtcclxuICAgICAgICBjYW52YXMub25tb3VzZW1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgY2FudmFzLm9ubW91c2V1cCA9IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5fd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIueUu+W4g+eahOWwuuWvuC0tLS1cIiwgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XHJcblxyXG4gICAgICAgXHJcblxyXG5cclxuICAgICAgICB0aGlzLmluaXRFeHQoKTtcclxuICAgICAgICB0aGlzLmluaXRNYXRyaXgoKTtcclxuXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy/liJ3lp4vljJbnn6npmLVcclxuICAgIHByaXZhdGUgaW5pdE1hdHJpeCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl90ZW1wX21vZGVsX3ZpZXdfbWF0cml4ID0gZ2xNYXRyaXgubWF0NC5pZGVudGl0eShudWxsKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRXZWJnbENvbnRleHQoKTogV2ViR0xSZW5kZXJpbmdDb250ZXh0IHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuY2FudmFzIGFzIGFueSkuZ2V0Q29udGV4dChcIndlYmdsXCIpXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl93aWR0aDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgSGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvL+iOt+WPlndlYmds55S756yU55qE57G75Z6LXHJcbiAgICBwdWJsaWMgZ2V0Q29udGV4dFR5cGUoKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodGhpcy5nbCBpbnN0YW5jZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwid2ViZ2wyXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHRoaXMuZ2wgYXMgYW55KSBpbnN0YW5jZW9mIFdlYkdMUmVuZGVyaW5nQ29udGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJ3ZWJnbFwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8v5Yib5bu6d2ViZ2znlLvnrJRcclxuICAgIHByaXZhdGUgY3JlYXRlR0xDb250ZXh0KGNhbnZhcyk6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQge1xyXG4gICAgICAgIHZhciBuYW1lcyA9IFtcIndlYmdsMlwiLCBcIndlYmdsXCIsIFwiZXhwZXJpbWVudGFsLXdlYmdsXCJdO1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIi1uYW1lcy0tLVwiLCBuYW1lc1tpXSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQobmFtZXNbaV0pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuICAgICAgICAgICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGV4dCkge1xyXG4gICAgICAgICAgICAvL+a3u+WKoOWKqOaAgeWxnuaAp+iusOW9leeUu+W4g+eahOWkp+Wwj1xyXG4gICAgICAgICAgICBjb250ZXh0LnZpZXdwb3J0V2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnRleHQudmlld3BvcnRIZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiRmFpbGVkIHRvIGNyZWF0ZSBXZWJHTCBjb250ZXh0IVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaXNDYXB0dXJlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIG9uTW91c2VEb3duKGV2KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5faXNDYXB0dXJlID0gdHJ1ZTtcclxuXHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG9uTW91c2VNb3ZlKGV2KTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBvbk1vdXNlVXAoZXYpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9pc0NhcHR1cmUgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWwhue7k+aenOe7mOWItuWIsFVJ5LiKXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkcmF3VG9VSSh0aW1lOiBudW1iZXIsIHNjZW5lMkQ6IFNjZW5lMkQsIHNjZW5lM0Q6IFNjZW5lM0QpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdsLmNsZWFyQ29sb3IoMC41MCwgMC41MCwgMC41MCwgMS4wKTtcclxuICAgICAgICB0aGlzLmdsLmJpbmRGcmFtZWJ1ZmZlcih0aGlzLmdsLkZSQU1FQlVGRkVSLCBzY2VuZTJELmdldEZyYW1lQnVmZmVyKCkpO1xyXG4gICAgICAgIHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUIHwgdGhpcy5nbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuICAgICAgICBzY2VuZTNELnJlYWR5RHJhdyh0aW1lKTtcclxuICAgICAgICAvLyBzY2VuZTJELnJlYWR5RHJhdyh0aW1lKTtcclxuXHJcbiAgICB9XHJcbiAgICAvL+Wwhue7k+aenOe7mOWItuWIsOeql+WPo1xyXG4gICAgcHVibGljIGRyYXcyc2NyZWVuKHRpbWU6IG51bWJlciwgc2NlbmUyRDogU2NlbmUyRCwgc2NlbmUzRDogU2NlbmUzRCk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgICAgXHJcbiAgICAgICAgdGhpcy5fcmVuZGVyRGF0YSA9IFtdO1xyXG5cclxuICAgICAgICBsZXQgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgIGdsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpO1xyXG4gICAgICAgIGdsLmVuYWJsZShnbC5ERVBUSF9URVNUKTtcclxuICAgICAgICBnbC5lbmFibGUoZ2wuU0NJU1NPUl9URVNUKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRWaWV3UG9ydCh7IHg6IDAsIHk6IDAsIHc6IDAuNSwgaDogMSB9KTtcclxuICAgICAgICBnbC5jbGVhckNvbG9yKDAuOCwgMC44LCAwLjgsIDEuMCk7XHJcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcclxuICAgICAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUIHwgZ2wuREVQVEhfQlVGRkVSX0JJVCk7XHJcbiAgICAgICAgc2NlbmUzRC5yZWFkeURyYXcodGltZSk7XHJcbiAgICAgICAgLy8gc2NlbmUyRC5yZWFkeURyYXcodGltZSk7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyUmVuZGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Vmlld1BvcnQoeyB4OiAwLjUsIHk6IDAsIHc6IDAuNSwgaDogMSB9KTtcclxuICAgICAgICB0aGlzLnRyaWdnZXJSZW5kZXIodHJ1ZSk7XHJcbiAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5faXNDYXB0dXJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzQ2FwdHVyZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNhcHR1cmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgUmVuZGVyRGF0YVBvb2wucmV0dXJuKHRoaXMuX3JlbmRlckRhdGEpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBfY2FtZXJhTW9kZWw6Q2FtZXJhTW9kZWw7XHJcbiAgICBwcml2YXRlIHRyaWdnZXJSZW5kZXIoaXNTY2VuZTpib29sZWFuID0gZmFsc2Upe1xyXG4gICAgICAgICBcclxuXHJcbiAgICAgICAgIGlmKGlzU2NlbmUpXHJcbiAgICAgICAgIHtcclxuICAgICAgICAgICAgdmFyIGNhbWVyYU1hdHJpeCA9IEdhbWVNYWluQ2FtZXJhLmluc3RhbmNlLmdldENhbWVyYSh0aGlzLl9yZW5kZXJEYXRhWzBdLl9jYW1lcmFUeXBlKS5nZXRNb2RlbFZpZXdNYXRyaXgoKTtcclxuICAgICAgICAgICAgdmFyIHByb2pNYXRpeCA9IEdhbWVNYWluQ2FtZXJhLmluc3RhbmNlLmdldENhbWVyYSh0aGlzLl9yZW5kZXJEYXRhWzBdLl9jYW1lcmFUeXBlKS5nZXRQcm9qZWN0aW9uTWF0cml4KCk7IFxyXG4gICAgICAgICAgICBpZighdGhpcy5fY2FtZXJhTW9kZWwpXHJcbiAgICAgICAgICAgIHRoaXMuX2NhbWVyYU1vZGVsID0gbmV3IENhbWVyYU1vZGVsKHRoaXMuZ2wpO1xyXG4gICAgICAgICAgICB0aGlzLl9jYW1lcmFNb2RlbC5kcmF3KFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FtZXJhTW9kZWwuZ2V0U2NlbmVQcm9qZWN0TWF0cml4KCksXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYW1lcmFNb2RlbC5nZXRTY2VuZUNhbWVyYU1hdHJpeCgpLFxyXG4gICAgICAgICAgICAgICAgcHJvak1hdGl4LFxyXG4gICAgICAgICAgICAgICAgY2FtZXJhTWF0cml4KTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICAvL+aPkOS6pOaVsOaNrue7mUdQVSDnq4vljbPnu5jliLZcclxuICAgICAgICAgZm9yKHZhciBqID0gMDtqPHRoaXMuX3JlbmRlckRhdGEubGVuZ3RoO2orKylcclxuICAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXcodGhpcy5fcmVuZGVyRGF0YVtqXSxpc1NjZW5lKTtcclxuICAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3RlbXBfbW9kZWxfdmlld19tYXRyaXg7Ly/op4blj6PmqKHlnovnn6npmLVcclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gckRhdGEgXHJcbiAgICAgKiBAcGFyYW0gcHJvak1hdGl4IOaKleW9seefqemYtVxyXG4gICAgICogQHBhcmFtIHZpZXdNYXRyaXgg6KeG5Y+j55+p6Zi1XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2RyYXdTWShyRGF0YTogUmVuZGVyRGF0YSxwcm9qTWF0aXg6RmxvYXQzMkFycmF5LHZpZXdNYXRyaXg6RmxvYXQzMkFycmF5KTp2b2lke1xyXG4gICAgICAgICAgLy/mv4DmtLtzaGFkZXJcclxuICAgICAgICByRGF0YS5fc2hhZGVyLmFjdGl2ZSgpO1xyXG4gICAgICAgIC8v57uZc2hhZGVy5Lit55qE5Y+Y6YeP6LWL5YC8XHJcbiAgICAgICAgckRhdGEuX3NoYWRlci5zZXRVc2VMaWdodChyRGF0YS5fbGlnaHRDb2xvciwgckRhdGEuX2xpZ2h0RGlyZWN0aW9uKTtcclxuICAgICAgICBpZiAockRhdGEuX3VfcHZtX21hdHJpeF9pbnZlcnNlKSB7XHJcbiAgICAgICAgICAgIHJEYXRhLl9zaGFkZXIuc2V0VXNlU2t5Qm94KHJEYXRhLl91X3B2bV9tYXRyaXhfaW52ZXJzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdsTWF0cml4Lm1hdDQubXVsKHRoaXMuX3RlbXBfbW9kZWxfdmlld19tYXRyaXgsIHZpZXdNYXRyaXgsIHJEYXRhLl9tb2RlbE1hdHJpeClcclxuICAgICAgICByRGF0YS5fc2hhZGVyLnNldFVzZU1vZGVsVmlld01hdHJpeCh0aGlzLl90ZW1wX21vZGVsX3ZpZXdfbWF0cml4KTtcclxuICAgICAgIFxyXG4gICAgICAgIHJEYXRhLl9zaGFkZXIuc2V0VXNlUHJvamVjdGlvbk1hdHJpeChwcm9qTWF0aXgpO1xyXG4gICAgICAgIHJEYXRhLl9zaGFkZXIuc2V0VXNlVmVydGV4QXR0cmliUG9pbnRlckZvclZlcnRleChyRGF0YS5fdmVydEdMSUQsIHJEYXRhLl92ZXJ0SXRlbVNpemUpO1xyXG4gICAgICAgIHJEYXRhLl9zaGFkZXIuc2V0VXNlVmVydGV4QXR0cmliUG9pbnRlckZvclVWKHJEYXRhLl91dkdMSUQsIHJEYXRhLl91dkl0ZW1TaXplKTtcclxuICAgICAgICByRGF0YS5fc2hhZGVyLnNldFVzZVZlcnRleEF0dHJpUG9pbnRlckZvck5vcm1hbChyRGF0YS5fbm9ybWFsR0xJRCwgckRhdGEuX25vcm1hbEl0ZW1TaXplKTtcclxuICAgICAgICBpZiAockRhdGEuX3RleHR1cmVHTElEQXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByRGF0YS5fc2hhZGVyLnNldFVzZVRleHR1cmUockRhdGEuX3RleHR1cmVHTElEQXJyYXlbMF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgaW5kZXhnbElEID0gckRhdGEuX2luZGV4R0xJRDtcclxuICAgICAgICBpZiAoaW5kZXhnbElEICE9IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRleGdsSUQpO1xyXG4gICAgICAgICAgICB0aGlzLmdsLmRyYXdFbGVtZW50cyhyRGF0YS5fZ2xQcmltaXRpdmVUeXBlLCByRGF0YS5faW5kZXhJdGVtTnVtcywgdGhpcy5nbC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmdsLmRyYXdBcnJheXMockRhdGEuX2dsUHJpbWl0aXZlVHlwZSwgMCwgckRhdGEuX3ZlcnRJdGVtTnVtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v6Kej6Zmk57yT5Yay5Yy65a+55LqO55uu5qCH57q555CG55qE57uR5a6aXHJcbiAgICAgICAgdGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIHJEYXRhLl9zaGFkZXIuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF90ZW1wMU1hdHJpeDpGbG9hdDMyQXJyYXkgPSBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG51bGwpO1xyXG4gICAgcHJpdmF0ZSBfdGVtcDJNYXRyaXg6RmxvYXQzMkFycmF5ID0gZ2xNYXRyaXgubWF0NC5pZGVudGl0eShudWxsKTtcclxuICAgIHByaXZhdGUgX3RlbXAzTWF0cml4OkZsb2F0MzJBcnJheSA9IGdsTWF0cml4Lm1hdDQuaWRlbnRpdHkobnVsbCk7XHJcbiAgICBwcml2YXRlIGRyYXcockRhdGE6IFJlbmRlckRhdGEsaXNVc2VTY2VuZTpib29sZWFuPWZhbHNlKTp2b2lke1xyXG4gICAgICAgIHZhciBjYW1lcmFNYXRyaXggPSBHYW1lTWFpbkNhbWVyYS5pbnN0YW5jZS5nZXRDYW1lcmEockRhdGEuX2NhbWVyYVR5cGUpLmdldE1vZGVsVmlld01hdHJpeCgpO1xyXG4gICAgICAgIHZhciBwcm9qTWF0aXggPSBHYW1lTWFpbkNhbWVyYS5pbnN0YW5jZS5nZXRDYW1lcmEockRhdGEuX2NhbWVyYVR5cGUpLmdldFByb2plY3Rpb25NYXRyaXgoKTtcclxuXHJcbiAgICAgICAgZ2xNYXRyaXgubWF0NC5pZGVudGl0eSh0aGlzLl90ZW1wMU1hdHJpeCk7XHJcbiAgICAgICAgaWYockRhdGEuX3R5cGU9PTEpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpc1VzZVNjZW5lKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwcm9qTWF0aXggPSB0aGlzLl9jYW1lcmFNb2RlbC5nZXRTY2VuZVByb2plY3RNYXRyaXgoKTtcclxuICAgICAgICAgICAgICAgIGdsTWF0cml4Lm1hdDQuaW52ZXJ0KHRoaXMuX3RlbXAxTWF0cml4LHRoaXMuX2NhbWVyYU1vZGVsLmdldFNjZW5lQ2FtZXJhTWF0cml4KCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd1NZKHJEYXRhLHByb2pNYXRpeCx0aGlzLl90ZW1wMU1hdHJpeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBnbE1hdHJpeC5tYXQ0LmludmVydCh0aGlzLl90ZW1wMU1hdHJpeCxjYW1lcmFNYXRyaXgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd1NZKHJEYXRhLHByb2pNYXRpeCx0aGlzLl90ZW1wMU1hdHJpeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYockRhdGEuX3R5cGU9PTIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZihpc1VzZVNjZW5lKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwcm9qTWF0aXggPSB0aGlzLl9jYW1lcmFNb2RlbC5nZXRTY2VuZVByb2plY3RNYXRyaXgoKTtcclxuICAgICAgICAgICAgICAgIGdsTWF0cml4Lm1hdDQuaW52ZXJ0KHRoaXMuX3RlbXAxTWF0cml4LHRoaXMuX2NhbWVyYU1vZGVsLmdldFNjZW5lQ2FtZXJhTWF0cml4KCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZHJhd1NwaW5lKHJEYXRhIGFzIFNwaW5lUmVuZGVyRGF0YSxwcm9qTWF0aXgsdGhpcy5fdGVtcDFNYXRyaXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZ2xNYXRyaXgubWF0NC5pbnZlcnQodGhpcy5fdGVtcDFNYXRyaXgsY2FtZXJhTWF0cml4KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdTcGluZShyRGF0YSBhcyBTcGluZVJlbmRlckRhdGEscHJvak1hdGl4LHRoaXMuX3RlbXAxTWF0cml4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgX2N1ckdMSUQgPSAtMTtcclxuICAgIHByaXZhdGUgX2RyYXdTcGluZShzRGF0YTpTcGluZVJlbmRlckRhdGEscHJvak1hdGl4OkZsb2F0MzJBcnJheSx2aWV3TWF0cml4OkZsb2F0MzJBcnJheSk6dm9pZHtcclxuICAgICAgICBpZih0aGlzLl9jdXJHTElEICE9IHNEYXRhLl9zaGFkZXJEYXRhLnNwR2xJRClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShzRGF0YS5fc2hhZGVyRGF0YS5zcEdsSUQpO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJHTElEID09IHNEYXRhLl9zaGFkZXJEYXRhLnNwR2xJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgR19TaGFkZXJGYWN0b3J5LnNldEJ1ZmZlcnNBbmRBdHRyaWJ1dGVzKHNEYXRhLl9zaGFkZXJEYXRhLmF0dHJTZXR0ZXJzLCBzRGF0YS5fYXR0cmJ1ZmZlckluZm8pO1xyXG4gICAgICAgIGZvcihsZXQgaiA9IDA7ajxzRGF0YS5fdW5pZm9ybUluZm9ycy5sZW5ndGg7aisrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgR19TaGFkZXJGYWN0b3J5LnNldFVuaWZvcm1zKHNEYXRhLl9zaGFkZXJEYXRhLnVuaVNldHRlcnMsc0RhdGEuX3VuaWZvcm1JbmZvcnNbal0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdmxlZnQgPSBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KG51bGwsdmlld01hdHJpeCxzRGF0YS5fZXh0cmFWaWV3TGVmdE1hdHJpeClcclxuICAgICAgICBsZXQgcHJvakRhdGEgPSB7fTtcclxuICAgICAgICBwcm9qRGF0YVtzRGF0YS5fcHJvaktleV0gPSBwcm9qTWF0aXg7XHJcbiAgICAgICAgR19TaGFkZXJGYWN0b3J5LnNldFVuaWZvcm1zKHNEYXRhLl9zaGFkZXJEYXRhLnVuaVNldHRlcnMscHJvakRhdGEpO1xyXG4gICAgICAgIGxldCB2aWV3RGF0YSA9IHt9O1xyXG4gICAgICAgIHZpZXdEYXRhW3NEYXRhLl92aWV3S2V5XSA9dmxlZnQ7XHJcbiAgICAgICAgR19TaGFkZXJGYWN0b3J5LnNldFVuaWZvcm1zKHNEYXRhLl9zaGFkZXJEYXRhLnVuaVNldHRlcnMsdmlld0RhdGEpO1xyXG4gICAgICAgIEdfU2hhZGVyRmFjdG9yeS5kcmF3QnVmZmVySW5mbyhzRGF0YS5fYXR0cmJ1ZmZlckluZm8sc0RhdGEuX2dsUHJpbWl0aXZlVHlwZSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9yZW5kZXJEYXRhOkFycmF5PFJlbmRlckRhdGE+ID0gW107Ly/nu5jliLbnmoTmlbDmja5cclxuICAgIHB1YmxpYyBjb2xsZWN0RGF0YShyRGF0YTogUmVuZGVyRGF0YSk6IHZvaWQge1xyXG4gICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLnB1c2gockRhdGEpO1xyXG4gICAgfVxyXG4gICAgXHJcblxyXG5cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBfZnJhbWVidWZmZXI6IEZyYW1lQnVmZmVyOy8v5bin57yT5a2YXHJcbiAgICAvKipcclxuICAgKiBAbWV0aG9kIHNldEZyYW1lQnVmZmVyXHJcbiAgICogQHBhcmFtIHtGcmFtZUJ1ZmZlcn0gZmIgLSBudWxsIG1lYW5zIHVzZSB0aGUgYmFja2J1ZmZlclxyXG4gICAqL1xyXG4gICAgc2V0RnJhbWVCdWZmZXIoZmI6IEZyYW1lQnVmZmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lYnVmZmVyID09PSBmYikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9mcmFtZWJ1ZmZlciA9IGZiO1xyXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcclxuXHJcbiAgICAgICAgaWYgKCFmYikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIue7keWumuW4p+e8k+WGsuWksei0pS0tLS0tLS0tXCIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIue7keWumuW4p+e8k+WGsuaIkOWKn1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZmIuZ2V0SGFuZGxlKCkpO1xyXG5cclxuICAgICAgICAvLyBsZXQgbnVtQ29sb3JzID0gZmIuX2NvbG9ycy5sZW5ndGg7XHJcbiAgICAgICAgLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBudW1Db2xvcnM7ICsraSkge1xyXG4gICAgICAgIC8vICAgICBsZXQgY29sb3JCdWZmZXIgPSBmYi5fY29sb3JzW2ldO1xyXG4gICAgICAgIC8vICAgICBfYXR0YWNoKGdsLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIGNvbG9yQnVmZmVyKTtcclxuXHJcbiAgICAgICAgLy8gICAgIC8vIFRPRE86IHdoYXQgYWJvdXQgY3ViZW1hcCBmYWNlPz8/IHNob3VsZCBiZSB0aGUgdGFyZ2V0IHBhcmFtZXRlciBmb3IgY29sb3JCdWZmZXJcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgLy8gZm9yIChsZXQgaSA9IG51bUNvbG9yczsgaSA8IHRoaXMuX2NhcHMubWF4Q29sb3JBdHRhY2htZW50czsgKytpKSB7XHJcbiAgICAgICAgLy8gICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxyXG4gICAgICAgIC8vICAgICAgICAgZ2wuRlJBTUVCVUZGRVIsXHJcbiAgICAgICAgLy8gICAgICAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksXHJcbiAgICAgICAgLy8gICAgICAgICBnbC5URVhUVVJFXzJELFxyXG4gICAgICAgIC8vICAgICAgICAgbnVsbCxcclxuICAgICAgICAvLyAgICAgICAgIDBcclxuICAgICAgICAvLyAgICAgKTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIGlmIChmYi5fZGVwdGgpIHtcclxuICAgICAgICAvLyAgICAgX2F0dGFjaChnbCwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZmIuX2RlcHRoKTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIGlmIChmYi5fc3RlbmNpbCkge1xyXG4gICAgICAgIC8vICAgICBfYXR0YWNoKGdsLCBnbC5TVEVOQ0lMX0FUVEFDSE1FTlQsIGZiLl9zdGVuY2lsKTtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIC8vIGlmIChmYi5fZGVwdGhTdGVuY2lsKSB7XHJcbiAgICAgICAgLy8gICAgIF9hdHRhY2goZ2wsIGdsLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCwgZmIuX2RlcHRoU3RlbmNpbCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gb2JqZWN0IFxyXG4gICAgICoge1xyXG4gICAgICogeDpcclxuICAgICAqIHk6XHJcbiAgICAgKiB3OlxyXG4gICAgICogaDpcclxuICAgICAqIH1cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFZpZXdQb3J0KG9iamVjdDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHggPSBvYmplY3QueCAqIHRoaXMuZ2wuY2FudmFzLndpZHRoO1xyXG4gICAgICAgIGxldCB5ID0gb2JqZWN0LnkgKiB0aGlzLmdsLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgICAgbGV0IHdpZHRoID0gb2JqZWN0LncgKiB0aGlzLmdsLmNhbnZhcy53aWR0aDtcclxuICAgICAgICBsZXQgaGVpZ2h0ID0gb2JqZWN0LmggKiB0aGlzLmdsLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5nbC52aWV3cG9ydCh4LHkgLHdpZHRoLGhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5nbC5zY2lzc29yKHgseSAsd2lkdGgsaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNpemUgYSBjYW52YXMgdG8gbWF0Y2ggdGhlIHNpemUgaXRzIGRpc3BsYXllZC5cclxuICAgICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyBUaGUgY2FudmFzIHRvIHJlc2l6ZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbXVsdGlwbGllcl0gYW1vdW50IHRvIG11bHRpcGx5IGJ5LlxyXG4gICAgICogICAgUGFzcyBpbiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyBmb3IgbmF0aXZlIHBpeGVscy5cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgdGhlIGNhbnZhcyB3YXMgcmVzaXplZC5cclxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6d2ViZ2wtdXRpbHNcclxuICAgICAqL1xyXG4gICAgcmVzaXplQ2FudmFzVG9EaXNwbGF5U2l6ZShjYW52YXMsIG11bHRpcGxpZXI/KSB7XHJcbiAgICAgICAgbXVsdGlwbGllciA9IG11bHRpcGxpZXIgfHwgMTtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IGNhbnZhcy5jbGllbnRXaWR0aCAqIG11bHRpcGxpZXIgfCAwO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQgKiBtdWx0aXBsaWVyIHwgMDtcclxuICAgICAgICBpZiAoY2FudmFzLndpZHRoICE9PSB3aWR0aCB8fCBjYW52YXMuaGVpZ2h0ICE9PSBoZWlnaHQpIHtcclxuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy9jb3B5LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgcHJpdmF0ZSBfY2FwcyA9IHtcclxuICAgICAgICBtYXhWZXJ0ZXhTdHJlYW1zOiA0LFxyXG4gICAgICAgIG1heFZlcnRleFRleHR1cmVzOiAwLFxyXG4gICAgICAgIG1heEZyYWdVbmlmb3JtczogMCwgIC8v54mH5q61552A6Imy5Zmo5pyA5aSn5Y+v5Lul55So55qEdW5pZm9ybeWPmOmHj1xyXG4gICAgICAgIG1heFRleHR1cmVVbml0czogMCwgLy/mnIDlpKfkvb/nlKjnmoTnurnnkIbljZXlhYPmlbBcclxuICAgICAgICBtYXhWZXJ0ZXhBdHRyaWJzOiAwLC8vc2hhZGVy5Lit5pyA5aSn5YWB6K646K6+572u55qE6aG254K55bGe5oCn5Y+Y6YeP5pWw55uuXHJcbiAgICAgICAgbWF4VGV4dHVyZVNpemU6IDAsLy/lnKjmmL7lrZjkuK3mnIDlpKflrZjlj5bnurnnkIbnmoTlsLrlr7gxNjM4NGtiLOS5n+WwseaYrzE2bSxbNDA5Niw0MDk2XVxyXG4gICAgICAgIG1heERyYXdCdWZmZXJzOiAwLFxyXG4gICAgICAgIG1heENvbG9yQXR0YWNobWVudHM6IDBcclxuICAgIH07XHJcbiAgICBwcml2YXRlIF9leHRlbnNpb25zOiBBcnJheTxhbnk+ID0gW107XHJcbiAgICBwcml2YXRlIF9zdGF0czogYW55O1xyXG4gICAgcHJpdmF0ZSBpbml0RXh0KCkge1xyXG4gICAgICAgIHRoaXMuX3N0YXRzID0ge1xyXG4gICAgICAgICAgICB0ZXh0dXJlOiAwLFxyXG4gICAgICAgICAgICB2YjogMCxcclxuICAgICAgICAgICAgaWI6IDAsXHJcbiAgICAgICAgICAgIGRyYXdjYWxsczogMCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy96aC1DTi9kb2NzL1dlYi9BUEkvV2ViR0xfQVBJL1VzaW5nX0V4dGVuc2lvbnNcclxuICAgICAgICB0aGlzLl9pbml0RXh0ZW5zaW9ucyhbXHJcbiAgICAgICAgICAgICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnLFxyXG4gICAgICAgICAgICAnRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCcsXHJcbiAgICAgICAgICAgICdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnLFxyXG4gICAgICAgICAgICAnT0VTX3RleHR1cmVfZmxvYXQnLFxyXG4gICAgICAgICAgICAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyxcclxuICAgICAgICAgICAgJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnLFxyXG4gICAgICAgICAgICAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXInLFxyXG4gICAgICAgICAgICAnT0VTX3ZlcnRleF9hcnJheV9vYmplY3QnLFxyXG4gICAgICAgICAgICAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2F0YycsXHJcbiAgICAgICAgICAgICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjJyxcclxuICAgICAgICAgICAgJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxJyxcclxuICAgICAgICAgICAgJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycsXHJcbiAgICAgICAgICAgICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycsXHJcbiAgICAgICAgICAgICdXRUJHTF9kZXB0aF90ZXh0dXJlJyxcclxuICAgICAgICAgICAgJ1dFQkdMX2RyYXdfYnVmZmVycycsXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgdGhpcy5faW5pdENhcHMoKTtcclxuICAgICAgICAvLyB0aGlzLl9pbml0U3RhdGVzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuaGFuZGxlUHJlY2lzaW9uKCk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi5ouT5bGVLS0tLS1cIiwgdGhpcy5nbC5nZXRTdXBwb3J0ZWRFeHRlbnNpb25zKCkpO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JywgXHJcbiAgICAgICAgICogJ0VYVF9kaXNqb2ludF90aW1lcl9xdWVyeV93ZWJnbDInLFxyXG4gICAgICAgICAqICdFWFRfZmxvYXRfYmxlbmQnLCBcclxuICAgICAgICAgKiAnRVhUX3RleHR1cmVfY29tcHJlc3Npb25fYnB0YycsIFxyXG4gICAgICAgICAqICdFWFRfdGV4dHVyZV9jb21wcmVzc2lvbl9yZ3RjJywgXHJcbiAgICAgICAgICogJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycsIFxyXG4gICAgICAgICAqICdLSFJfcGFyYWxsZWxfc2hhZGVyX2NvbXBpbGUnLCBcclxuICAgICAgICAgKiAnT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJywgXHJcbiAgICAgICAgICogJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJywgXHJcbiAgICAgICAgICogJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjX3NyZ2InLCBcclxuICAgICAgICAgKiAnV0VCR0xfZGVidWdfcmVuZGVyZXJfaW5mbycsIFxyXG4gICAgICAgICAqICdXRUJHTF9kZWJ1Z19zaGFkZXJzJywgXHJcbiAgICAgICAgICogJ1dFQkdMX2xvc2VfY29udGV4dCcsIFxyXG4gICAgICAgICAqICdXRUJHTF9tdWx0aV9kcmF3JywgXHJcbiAgICAgICAgICogJ09WUl9tdWx0aXZpZXcyXHJcbiAgICAgICAgICovXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlUHJlY2lzaW9uKCk6IHZvaWQge1xyXG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLlpITnkIbnsr7luqZcIik7XHJcbiAgICAgICAgdmFyIGRhdGExID0gZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGdsLlZFUlRFWF9TSEFERVIsIGdsLkxPV19GTE9BVCk7XHJcbiAgICAgICAgdmFyIGRhdGEyID0gZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGdsLlZFUlRFWF9TSEFERVIsIGdsLk1FRElVTV9GTE9BVCk7XHJcbiAgICAgICAgdmFyIGRhdGEzID0gZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGdsLlZFUlRFWF9TSEFERVIsIGdsLkhJR0hfRkxPQVQpO1xyXG4gICAgICAgIHZhciBkYXRhNCA9IGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5WRVJURVhfU0hBREVSLCBnbC5MT1dfSU5UKTtcclxuICAgICAgICB2YXIgZGF0YTUgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuVkVSVEVYX1NIQURFUiwgZ2wuTUVESVVNX0lOVCk7XHJcbiAgICAgICAgdmFyIGRhdGE2ID0gZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGdsLlZFUlRFWF9TSEFERVIsIGdsLkhJR0hfSU5UKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcInZlcnRleCDnsr7luqblgLwtLS1cIiwgZGF0YTEsIGRhdGEyLCBkYXRhMywgZGF0YTQsIGRhdGE1LCBkYXRhNik7XHJcblxyXG4gICAgICAgIHZhciBkYXRhMSA9IGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChnbC5GUkFHTUVOVF9TSEFERVIsIGdsLkxPV19GTE9BVCk7XHJcbiAgICAgICAgdmFyIGRhdGEyID0gZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGdsLkZSQUdNRU5UX1NIQURFUiwgZ2wuTUVESVVNX0ZMT0FUKTtcclxuICAgICAgICB2YXIgZGF0YTMgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5ISUdIX0ZMT0FUKTtcclxuICAgICAgICB2YXIgZGF0YTQgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5MT1dfSU5UKTtcclxuICAgICAgICB2YXIgZGF0YTUgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5NRURJVU1fSU5UKTtcclxuICAgICAgICB2YXIgZGF0YTYgPSBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoZ2wuRlJBR01FTlRfU0hBREVSLCBnbC5ISUdIX0lOVCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJmcmFnbWVudCDnsr7luqblgLwtLS1cIiwgZGF0YTEsIGRhdGEyLCBkYXRhMywgZGF0YTQsIGRhdGE1LCBkYXRhNik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3lp4vljJbmuLLmn5PnirbmgIFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfaW5pdFN0YXRlcygpIHtcclxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XHJcblxyXG4gICAgICAgIC8vIGdsLmZyb250RmFjZShnbC5DQ1cpO+i/meS4gOWPpeS7o+eggeaYr+WkmuS9meeahO+8jHdlYmds6buY6K6k55qE5bCx5piv6YCG5pe26ZKI5Li65q2j6Z2iXHJcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5CTEVORCk7XHJcbiAgICAgICAgZ2wuYmxlbmRGdW5jKGdsLk9ORSwgZ2wuWkVSTyk7XHJcbiAgICAgICAgZ2wuYmxlbmRFcXVhdGlvbihnbC5GVU5DX0FERCk7XHJcbiAgICAgICAgZ2wuYmxlbmRDb2xvcigxLCAxLCAxLCAxKTtcclxuXHJcbiAgICAgICAgZ2wuY29sb3JNYXNrKHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xyXG5cclxuICAgICAgICBnbC5lbmFibGUoZ2wuQ1VMTF9GQUNFKTtcclxuICAgICAgICBnbC5jdWxsRmFjZShnbC5CQUNLKTtcclxuXHJcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTtcclxuICAgICAgICBnbC5kZXB0aEZ1bmMoZ2wuTEVTUyk7XHJcbiAgICAgICAgZ2wuZGVwdGhNYXNrKHRydWUpO1xyXG4gICAgICAgIGdsLmRpc2FibGUoZ2wuUE9MWUdPTl9PRkZTRVRfRklMTCk7XHJcbiAgICAgICAgZ2wuZGVwdGhSYW5nZSgwLCAxKTtcclxuXHJcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5TVEVOQ0lMX1RFU1QpO1xyXG4gICAgICAgIGdsLnN0ZW5jaWxGdW5jKGdsLkFMV0FZUywgMCwgMHhGRik7XHJcbiAgICAgICAgZ2wuc3RlbmNpbE1hc2soMHhGRik7XHJcbiAgICAgICAgZ2wuc3RlbmNpbE9wKGdsLktFRVAsIGdsLktFRVAsIGdsLktFRVApO1xyXG5cclxuXHJcbiAgICAgICAgZ2wuY2xlYXJEZXB0aCgxKTtcclxuICAgICAgICBnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xyXG4gICAgICAgIGdsLmNsZWFyU3RlbmNpbCgwKTtcclxuXHJcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5TQ0lTU09SX1RFU1QpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2luaXRFeHRlbnNpb25zKGV4dGVuc2lvbnMpIHtcclxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleHRlbnNpb25zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGxldCBuYW1lID0gZXh0ZW5zaW9uc1tpXTtcclxuICAgICAgICAgICAgbGV0IHZlbmRvclByZWZpeGVzID0gW1wiXCIsIFwiV0VCS0lUX1wiLCBcIk1PWl9cIl07XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZlbmRvclByZWZpeGVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBleHQgPSBnbC5nZXRFeHRlbnNpb24odmVuZG9yUHJlZml4ZXNbal0gKyBuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4dGVuc2lvbnNbbmFtZV0gPSBleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4qIEBtZXRob2QgZXh0XHJcbiogQHBhcmFtIHtzdHJpbmd9IG5hbWVcclxuKi9cclxuICAgIGV4dChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dGVuc2lvbnNbbmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgX2luaXRDYXBzKCkge1xyXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbDtcclxuICAgICAgICBjb25zdCBleHREcmF3QnVmZmVycyA9IHRoaXMuZXh0KCdXRUJHTF9kcmF3X2J1ZmZlcnMnKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY2Fwcy5tYXhWZXJ0ZXhTdHJlYW1zID0gNDtcclxuICAgICAgICB0aGlzLl9jYXBzLm1heFZlcnRleFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLk1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyk7XHJcbiAgICAgICAgdGhpcy5fY2Fwcy5tYXhGcmFnVW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUyk7XHJcbiAgICAgICAgdGhpcy5fY2Fwcy5tYXhUZXh0dXJlVW5pdHMgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpO1xyXG4gICAgICAgIHRoaXMuX2NhcHMubWF4VmVydGV4QXR0cmlicyA9IGdsLmdldFBhcmFtZXRlcihnbC5NQVhfVkVSVEVYX0FUVFJJQlMpO1xyXG4gICAgICAgIHRoaXMuX2NhcHMubWF4VGV4dHVyZVNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1RFWFRVUkVfU0laRSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NhcHMubWF4RHJhd0J1ZmZlcnMgPSBleHREcmF3QnVmZmVycyA/IGdsLmdldFBhcmFtZXRlcihleHREcmF3QnVmZmVycy5NQVhfRFJBV19CVUZGRVJTX1dFQkdMKSA6IDE7XHJcbiAgICAgICAgdGhpcy5fY2Fwcy5tYXhDb2xvckF0dGFjaG1lbnRzID0gZXh0RHJhd0J1ZmZlcnMgPyBnbC5nZXRQYXJhbWV0ZXIoZXh0RHJhd0J1ZmZlcnMuTUFYX0NPTE9SX0FUVEFDSE1FTlRTX1dFQkdMKSA6IDE7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwidGhpcy5fY2Fwcy0tLVwiLCB0aGlzLl9jYXBzKTtcclxuXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ6bVwiLCBcIm5paGFvYVwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaIquWbvlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNhcHR1cmUoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3Qgc2F2ZUJsb2IgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGEpO1xyXG4gICAgICAgICAgICBhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBzYXZlRGF0YShibG9iLCBmaWxlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAgICAgICAgICAgICBhLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgICAgICAgICBhLmRvd25sb2FkID0gZmlsZU5hbWU7XHJcbiAgICAgICAgICAgICAgICBhLmNsaWNrKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSgpKTtcclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgIChnbC5jYW52YXMgYXMgYW55KS50b0Jsb2IoKGJsb2IpID0+IHtcclxuICAgICAgICAgICAgc2F2ZUJsb2IoYmxvYiwgYHNjcmVlbmNhcHR1cmUtJHtnbC5jYW52YXMud2lkdGh9eCR7Z2wuY2FudmFzLmhlaWdodH0ucG5nYCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8v5YmU6Zmk5p+Q5LiA5Liq6Z2iXHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGJhY2sgdHJ1ZSDku6PooajliZTpmaTog4zpnaIgZmFsc2Ug5Luj6KGo5YmU6Zmk5YmN6Z2iXHJcbiAgICAgKiBAcGFyYW0gYm90aCDooajnpLrliY3lkI7pnaLpg73liZTpmaRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGN1bGxGYWNlKGJhY2s6IGJvb2xlYW4gPSB0cnVlLCBib3RoPyk6IHZvaWQge1xyXG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgZ2wuZW5hYmxlKGdsLkNVTExfRkFDRSk7Ly/lvIDlkK/pnaLliZTpmaTlip/og71cclxuICAgICAgICBnbC5mcm9udEZhY2UoZ2wuQ1cpOy8v6YCG5pe26ZKI57uY5Yi255qE5Luj6KGo5q2j6Z2iIOato+W4uOeQhuino++8jOeci+WIsOeahOmdouaYr+ato+mdomdsLkZST05U77yM55yL5LiN5Yiw55qE6Z2i5piv6IOM6Z2iZ2wuQkFDS1xyXG4gICAgICAgIC8vIGdsLmZyb250RmFjZShnbC5DQ1cpOy8v6aG65pe26ZKI57uY5Yi255qE5Luj6KGo5q2j6Z2iICDpnIDopoHlj43ov4fmnaXnkIbop6PvvIzljbPmiJHku6znnIvliLDnmoTpnaLmmK/og4zpnaLvvIznnIvkuI3liLDnmoTpnaLmmK/mraPpnaJcclxuICAgICAgICBpZiAoYm90aCkge1xyXG4gICAgICAgICAgICBnbC5jdWxsRmFjZShnbC5GUk9OVF9BTkRfQkFDSyk7IC8v5YmN5ZCO5Lik5Liq6Z2i6YO95YmU6ZmkXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGJhY2spIHtcclxuICAgICAgICAgICAgZ2wuY3VsbEZhY2UoZ2wuQkFDSyk7Ly/lj6rliZTpmaTog4zpnaJcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBnbC5jdWxsRmFjZShnbC5GUk9OVCk7Ly/lj6rliZTpmaTliY3pnaJcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOWFs+mXremdouWJlOmZpOWKn+iDvVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xvc2VDdWxsRmFjZSgpOiB2b2lkIHtcclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgIGdsLmRpc2FibGUoZ2wuQ1VMTF9GQUNFKTtcclxuICAgICAgICBnbC5lbmFibGUoZ2wuQ1VMTF9GQUNFKTtcclxuICAgICAgICBnbC5jdWxsRmFjZShnbC5GUk9OVCk7XHJcbiAgICAgICAgZ2wuZGlzYWJsZShnbC5DVUxMX0ZBQ0UpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxuICog5Yqg6L29566h55CG5ZGYXG4gKi9cblxuIC8qKlxuICB2YXIgbXlIZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbnZhciBteUluaXQ6YW55ID0geyBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgaGVhZGVyczogbXlIZWFkZXJzLFxuICAgICAgICAgICAgICAgbW9kZTogJ2NvcnMnLFxuICAgICAgICAgICAgICAgY2FjaGU6ICdkZWZhdWx0JyB9O1xudmFyIG15UmVxdWVzdCA9IG5ldyBSZXF1ZXN0KCdodHRwOmxvY2FsaG9zdDozMDAwLy9yZXMvbW9kZWxzL3dpbmRtaWxsL3dpbmRtaWxsLm9iaicsIG15SW5pdCk7XG5cbmZldGNoKG15UmVxdWVzdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gIH0pLnRoZW4oZnVuY3Rpb24obXlCbG9iKSB7XG4gICAgY29uc29sZS5sb2coXCJteUJsb2ItLS0tLS0tXCIsbXlCbG9iKTtcbiAgfSk7XG4gICovXG5cbmNsYXNzIENhY2hlSW1hZ2VEYXRhIHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsaW1nKXtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMuaW1nID0gaW1nO1xuICAgIH1cbiAgICBwdWJsaWMgdXJsOnN0cmluZyA9IFwiXCI7XG4gICAgcHVibGljIGltZzpIVE1MSW1hZ2VFbGVtZW50O1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkRmlsZSh1cmwsIHR5cGVGdW5jKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwpO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjb3VsZCBub3QgbG9hZDogJHt1cmx9YCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCByZXNwb25zZVt0eXBlRnVuY10oKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEJpbmFyeSh1cmwpIHtcbiAgICByZXR1cm4gbG9hZEZpbGUodXJsLCAnYXJyYXlCdWZmZXInKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEpTT04odXJsKSB7XG4gICAgcmV0dXJuIGxvYWRGaWxlKHVybCwgJ2pzb24nKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRUZXh0KHVybCkge1xuICAgIHJldHVybiBsb2FkRmlsZSh1cmwsICd0ZXh0Jyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRlck1hbmFnZXJ7XG4gICAgcHJpdmF0ZSBfY2FjaGVJbWFnZTpBcnJheTxDYWNoZUltYWdlRGF0YT4gPSBbXTtcbiAgICBwcml2YXRlIF9jYWNoZTpNYXA8c3RyaW5nLGFueT47Ly/otYTmupDnvJPlrZhcbiAgICBwdWJsaWMgc3RhdGljIF9pbnN0YW5jZTpMb2FkZXJNYW5hZ2VyO1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGluc3RhbmNlKCk6TG9hZGVyTWFuYWdlclxuICAgIHtcbiAgICAgICAgaWYoIXRoaXMuX2luc3RhbmNlKVxuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBMb2FkZXJNYW5hZ2VyKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl9jYWNoZSA9IG5ldyBNYXA8c3RyaW5nLGFueT4oKTtcbiAgICB9XG4gICAgXG4gICAgLy/liqDovb1nbHRm5Yqo55S75paH5Lu2XG4gICAgYXN5bmMgbG9hZEdMVEYocGF0aDpzdHJpbmcpe1xuICAgICAgICBjb25zdCBnbHRmID0gYXdhaXQgbG9hZEpTT04ocGF0aCk7XG4gICAgICAgIC8vIGxvYWQgYWxsIHRoZSByZWZlcmVuY2VkIGZpbGVzIHJlbGF0aXZlIHRvIHRoZSBnbHRmIGZpbGVcbiAgICAgICAgY29uc3QgYmFzZVVSTCA9IG5ldyBVUkwocGF0aCwgbG9jYXRpb24uaHJlZik7XG4gICAgICAgIGdsdGYuYnVmZmVycyA9IGF3YWl0IFByb21pc2UuYWxsKGdsdGYuYnVmZmVycy5tYXAoKGJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChidWZmZXIudXJpLCBiYXNlVVJMLmhyZWYpO1xuICAgICAgICAgICAgcmV0dXJuIGxvYWRCaW5hcnkodXJsLmhyZWYpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMuX2NhY2hlLnNldChwYXRoLGdsdGYpO1xuICAgIH1cblxuICAgIC8v5Yqg6L29anNvbuagvOW8j+eahOS6jOi/m+WItlxuICAgIC8v5bCx5piv5bCGanNvbui9rOS4uuS6jOi/m+WItiDnhLblkI7ku6Xkuozov5vliLbor7vlj5blho3ovazkvJpqc29uXG4gICAgcHJpdmF0ZSBsb2FkSnNvbkJsb2JEYXRhKHBhdGg6c3RyaW5nLGNhbGxCYWNrUHJvZ3Jlc3M/LGNhbGxCYWNrRmluaXNoPyk6dm9pZHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgcmVxdWVzdC5vcGVuKFwiZ2V0XCIscGF0aCk7XG4gICAgICAgIHJlcXVlc3Quc2VuZChudWxsKTtcbiAgICAgICAgLy/ku6Xkuozov5vliLbmlrnlvI/or7vlj5bmlbDmja4s6K+75Y+W5Yiw55qE57uT5p6c5bCG5pS+5YWlQmxvYueahOS4gOS4quWvueixoeS4reWtmOaUvlxuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IFwiYmxvYlwiO1xuICAgICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmKHJlcXVlc3Quc3RhdHVzPT0wKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7IC8vRmlsZVJlYWRlcuWPr+S7peivu+WPlkJsb2LlhoXlrrkgIFxuICAgICAgICAgICAgICAgIGZyLnJlYWRBc0FycmF5QnVmZmVyKHJlcXVlc3QucmVzcG9uc2UpOyAvL+S6jOi/m+WItui9rOaNouaIkEFycmF5QnVmZmVyXG4gICAgICAgICAgICAgICAgZnIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsgIC8v6L2s5o2i5a6M5oiQ5ZCO77yM6LCD55Sob25sb2Fk5pa55rOVXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYmluIGZpbGUtLS1cIixmci5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmF3RGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoZnIucmVzdWx0IGFzIEFycmF5QnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3RGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyK1N0cmluZy5mcm9tQ2hhckNvZGUoKHJhd0RhdGFbaV0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKHN0cik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicmVzdWx0IC0tXCIsc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhY2hlLnNldChwYXRoLGZyLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhbGxCYWNrRmluaXNoKWNhbGxCYWNrRmluaXNoLmNhbGwobnVsbCxmci5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiDliqDovb1vYmpcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9hZE9iakRhdGEocGF0aDpzdHJpbmcsY2FsbEJhY2tQcm9ncmVzcz8sY2FsbEJhY2tGaW5pc2g/KTp2b2lke1xuXG4gICAgfVxuXG4gICAgXG4gICAgLy/liqDovb3kuozov5vliLbmlbDmja5cbiAgICBwdWJsaWMgbG9hZEJsb2JEYXRhKHBhdGg6c3RyaW5nLGNhbGxCYWNrUHJvZ3Jlc3M/LGNhbGxCYWNrRmluaXNoPyk6dm9pZHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgcmVxdWVzdC5vcGVuKFwiZ2V0XCIscGF0aCk7XG4gICAgICAgIHJlcXVlc3Quc2VuZChudWxsKTtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBcImJsb2JcIjtcbiAgICAgICAgcmVxdWVzdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZihyZXF1ZXN0LnN0YXR1cz09MClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB2YXIgZnIgPSBuZXcgRmlsZVJlYWRlcigpOyAvL0ZpbGVSZWFkZXLlj6/ku6Xor7vlj5ZCbG9i5YaF5a65ICBcbiAgICAgICAgICAgICAgICBmci5yZWFkQXNBcnJheUJ1ZmZlcihyZXF1ZXN0LnJlc3BvbnNlKTsgLy/kuozov5vliLbovazmjaLmiJBBcnJheUJ1ZmZlclxuICAgICAgICAgICAgICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7ICAvL+i9rOaNouWujOaIkOWQju+8jOiwg+eUqG9ubG9hZOaWueazlVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FjaGUuc2V0KHBhdGgsZnIucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYoY2FsbEJhY2tGaW5pc2gpY2FsbEJhY2tGaW5pc2guY2FsbChudWxsLGZyLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8v5Yqg6L29anNvbuaVsOaNrlxuICAgIHB1YmxpYyBsb2FkSnNvbkRhdGEocGF0aDpzdHJpbmcsY2FsbEJhY2tQcm9ncmVzcz8sY2FsbEJhY2tGaW5pc2g/KTp2b2lke1xuICAgICAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXF1ZXN0Lm9wZW4oXCJnZXRcIixwYXRoKTtcbiAgICAgICAgcmVxdWVzdC5zZW5kKG51bGwpO1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IFwianNvblwiO1xuICAgICAgICByZXF1ZXN0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmKHJlcXVlc3Quc3RhdHVzPT0wKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHZhciBqc29uRGF0YSA9IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2NhY2hlLnNldChwYXRoLGpzb25EYXRhKVxuICAgICAgICAgICAgICAgIGlmKGNhbGxCYWNrRmluaXNoKWNhbGxCYWNrRmluaXNoLmNhbGwobnVsbCxqc29uRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy/liqDovb3lj6/ku6XovazljJbkuLpqc29u55qE5pWw5o2uXG4gICAgcHVibGljIGxvYWRKc29uU3RyaW5nRGF0YShwYXRoOnN0cmluZyxjYWxsQmFja1Byb2dyZXNzPyxjYWxsQmFja0ZpbmlzaD8pOnZvaWR7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJlcXVlc3Qub3BlbihcImdldFwiLHBhdGgpO1xuICAgICAgICByZXF1ZXN0LnNlbmQobnVsbCk7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gXCJ0ZXh0XCI7XG4gICAgICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYocmVxdWVzdC5zdGF0dXM9PTApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIGpzb25EYXRhID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2NhY2hlLnNldChwYXRoLGpzb25EYXRhKVxuICAgICAgICAgICAgICAgIGlmKGNhbGxCYWNrRmluaXNoKWNhbGxCYWNrRmluaXNoLmNhbGwobnVsbCxqc29uRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy/liqDovb3pqqjpqrzmlbDmja5cbiAgICBwcml2YXRlIGxvYWRTa2VsRGF0YShwYXRoOnN0cmluZyxjYWxsQmFja1Byb2dyZXNzPyxjYWxsQmFja0ZpbmlzaD8pOnZvaWR7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHJlcXVlc3Qub3BlbihcImdldFwiLHBhdGgpO1xuICAgICAgICByZXF1ZXN0LnNlbmQobnVsbCk7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gXCJibG9iXCI7XG4gICAgICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYocmVxdWVzdC5zdGF0dXM9PTApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIGZyID0gbmV3IEZpbGVSZWFkZXIoKTsgLy9GaWxlUmVhZGVy5Y+v5Lul6K+75Y+WQmxvYuWGheWuuSAgXG4gICAgICAgICAgICAgICAgZnIucmVhZEFzQXJyYXlCdWZmZXIocmVxdWVzdC5yZXNwb25zZSk7IC8v5LqM6L+b5Yi26L2s5o2i5oiQQXJyYXlCdWZmZXJcbiAgICAgICAgICAgICAgICAvLyBmci5yZWFkQXNUZXh0KHJlcXVlc3QucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGZyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7ICAvL+i9rOaNouWujOaIkOWQju+8jOiwg+eUqG9ubG9hZOaWueazlVxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIuWKoOi9veS6jOi/m+WItuaIkOWKny0tLVwiLGZyLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9jYWNoZS5zZXQocGF0aCxmci5yZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHVpbnQ4X21zZyA9IG5ldyBVaW50OEFycmF5KGZyLnJlc3VsdCBhcyBBcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIC8vIOino+eggeaIkOWtl+espuS4slxuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgZGVjb2RlZFN0cmluZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgdWludDhfbXNnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCLlrZfnrKbkuLItLVwiLGRlY29kZWRTdHJpbmcpOyBcbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gcGFyc2Us6L2s5oiQanNvbuaVsOaNrlxuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgZGF0YSA9IEpTT04ucGFyc2UoZGVjb2RlZFN0cmluZyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGxldCBjb250ZW50ID0gZnIucmVzdWx0Oy8vYXJyYXlidWZmZXLnsbvlnovmlbDmja5cbiAgICAgICAgICAgICAgICAgICAgLy8gbGV0IHJlc0Jsb2IgPSBuZXcgQmxvYihbY29udGVudF0pXG4gICAgICAgICAgICAgICAgICAgIC8vIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlYWRlci5yZWFkQXNUZXh0KHJlc0Jsb2IsIFwidXRmLThcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnNvbGUubG9nKFwiZ2FnYWctLS1cIixyZWFkZXIucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBsZXQgcmVzID0gSlNPTi5wYXJzZShyZWFkZXIucmVzdWx0IGFzIHN0cmluZylcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9XG5cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYoY2FsbEJhY2tGaW5pc2gpY2FsbEJhY2tGaW5pc2guY2FsbChudWxsLGZyLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy/liqDovb3lm77niYfmlbDmja5cbiAgICBwdWJsaWMgbG9hZEltYWdlRGF0YShwYXRoOnN0cmluZyxjYWxsQmFja1Byb2dyZXNzPyxjYWxsQmFja0ZpbmlzaD8pOnZvaWR7XG4gICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKGltZzpIVE1MSW1hZ2VFbGVtZW50KXtcbiAgICAgICAgICAgIGlmKCFpbWcpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCLliqDovb3nmoTlm77niYfot6/lvoTkuI3lrZjlnKgtLS1cIixwYXRoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2FjaGVJbWFnZS5wdXNoKG5ldyBDYWNoZUltYWdlRGF0YShwYXRoLGltZykpO1xuICAgICAgICAgICAgaWYoY2FsbEJhY2tGaW5pc2gpY2FsbEJhY2tGaW5pc2guY2FsbChudWxsLGltZyk7XG4gICAgICAgIH0uYmluZCh0aGlzLGltZyk7XG4gICAgICAgIGltZy5zcmMgPSBwYXRoO1xuICAgIH1cbiAgICBwcml2YXRlIGdldExvYWRGdW5jKHBhdGg6c3RyaW5nKTpGdW5jdGlvbntcbiAgICAgICAgICAgIGxldCBzdHJBcnIgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBsZXQgZXh0TmFtZSA9IHN0ckFycltzdHJBcnIubGVuZ3RoLTFdO1xuICAgICAgICAgICAgc3dpdGNoKGV4dE5hbWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICBjYXNlIFwianBnXCI6cmV0dXJuIHRoaXMubG9hZEltYWdlRGF0YTtcbiAgICAgICAgICAgICAgIGNhc2UgXCJwbmdcIjpyZXR1cm4gdGhpcy5sb2FkSW1hZ2VEYXRhO1xuICAgICAgICAgICAgICAgY2FzZSBcImJpblwiOnJldHVybiB0aGlzLmxvYWRCbG9iRGF0YTtcbiAgICAgICAgICAgICAgIGNhc2UgXCJvYmpcIjpyZXR1cm4gdGhpcy5sb2FkT2JqRGF0YTtcbiAgICAgICAgICAgICAgIGNhc2UgXCJqc29uXCI6cmV0dXJuIHRoaXMubG9hZEpzb25EYXRhO1xuICAgICAgICAgICAgICAgY2FzZSBcImdsdGZcIjpyZXR1cm4gdGhpcy5sb2FkSnNvblN0cmluZ0RhdGE7XG4gICAgICAgICAgICAgICBjYXNlIFwic2tlbFwiOnJldHVybiB0aGlzLmxvYWRTa2VsRGF0YTtcbiAgICAgICAgICAgICAgIGRlZmF1bHQ6Y29uc29sZS5sb2coXCLlj5HnjrDmnKrnn6XlkI7nvIDlkI3nmoTmlofku7YtLS0tXCIscGF0aCk7bnVsbDticmVhaztcbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgLy/liqDovb3mlbDmja5cbiAgICBwdWJsaWMgYXN5bmMgbG9hZERhdGEoYXJyOkFycmF5PHN0cmluZz4sY2FsbEJhY2tQcm9ncmVzcz8sY2FsbEJhY2tGaW5pc2g/KXtcbiAgICAgICAgIFxuICAgICAgICAvL3Rlc3RcbiAgICAgICAgLy8gYXdhaXQgdGhpcy5sb2FkR0xURihcImh0dHBzOi8vd2ViZ2xmdW5kYW1lbnRhbHMub3JnL3dlYmdsL3Jlc291cmNlcy9tb2RlbHMva2lsbGVyX3doYWxlL3doYWxlLkNZQ0xFUy5nbHRmXCIpO1xuXG4gICAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICAgIGZvcih2YXIgaiA9MDtqPGFyci5sZW5ndGg7aisrKVxuICAgICAgICB7XG4gICAgICAgICAgbGV0IHBhdGg6c3RyaW5nID0gYXJyW2pdO1xuICAgICAgICAgIHZhciBsb2FkRnVuYyA9IHRoaXMuZ2V0TG9hZEZ1bmMocGF0aCk7XG4gICAgICAgICAgbG9hZEZ1bmMuY2FsbCh0aGlzLHBhdGgsbnVsbCwocmVzKT0+e1xuICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICB0aGlzLm9uTG9hZFByb2dyZXNzKGNvdW50L2Fyci5sZW5ndGgpO1xuICAgICAgICAgICAgICBpZihjb3VudD09YXJyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25Mb2FkRmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYoY2FsbEJhY2tGaW5pc2gpY2FsbEJhY2tGaW5pc2goKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8v6I635Y+W57yT5a2Y5Lit55qE5pWw5o2uXG4gICAgcHVibGljIGdldENhY2hlRGF0YSh1cmw6c3RyaW5nKTphbnl7XG4gICAgICAgICAgIGNvbnNvbGUubG9nKHVybCx0aGlzLl9jYWNoZS5oYXModXJsKSk7XG4gICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5nZXQodXJsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6I635Y+W57yT5a2Y55qE57q555CG5pWw5o2uXG4gICAgICogQHBhcmFtIHVybCBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q2FjaGVJbWFnZSh1cmw6c3RyaW5nKTpIVE1MSW1hZ2VFbGVtZW50e1xuICAgICAgICAgZm9yKHZhciBqID0gMDtqPHRoaXMuX2NhY2hlSW1hZ2UubGVuZ3RoO2orKylcbiAgICAgICAgIHtcbiAgICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2NhY2hlSW1hZ2Vbal07XG4gICAgICAgICAgICAgaWYoZGF0YS51cmw9PXVybClcbiAgICAgICAgICAgICByZXR1cm4gZGF0YS5pbWc7XG4gICAgICAgICB9XG4gICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICog56e76ZmkQ1BV56uv5YaF5a2Y5Lit55qE5Zu+54mH57yT5a2YXG4gICAgICogQHBhcmFtIHVybCBcbiAgICAgKi8gXG4gICAgcHVibGljIHJlbW92ZUltYWdlKHVybDpzdHJpbmcpOnZvaWR7XG4gICAgICAgIFxuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIGltZzpIVE1MSW1hZ2VFbGVtZW50O1xuICAgICAgICBmb3IodmFyIGogPSAwO2o8dGhpcy5fY2FjaGVJbWFnZS5sZW5ndGg7aisrKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2NhY2hlSW1hZ2Vbal07XG4gICAgICAgICAgICBpZihkYXRhLnVybD09dXJsKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgaW5kZXggPSBqO1xuICAgICAgICAgICAgICAgaW1nID0gZGF0YS5pbWc7XG4gICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihpbmRleD49MClcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCLop6PpmaTlvJXnlKhcIik7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZUltYWdlLnNwbGljZShpbmRleCwxKTtcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZUNQVU1lbW9yeUZvckltYWdlQ2FjaGUoaW1nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5rKh5om+5YiwLS0tLVwiLGltZyxpbmRleCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIGltZyBcbiAgICAgKiDph4rmlL5DUFXnq6/lhoXlrZjkuK3nmoTlm77niYfnvJPlrZhcbiAgICAgKi8gXG4gICAgcHVibGljIHJlbGVhc2VDUFVNZW1vcnlGb3JJbWFnZUNhY2hlKGltZzpIVE1MSW1hZ2VFbGVtZW50KTp2b2lke1xuICAgICAgICBpbWcuc3JjID0gXCJcIjtcbiAgICAgICAgaW1nID0gbnVsbDtcbiAgICB9XG4gICAgcHVibGljIG9uTG9hZFByb2dyZXNzKHByb2dyZXNzOm51bWJlcik6dm9pZHtcbiAgICAgICAgIGNvbnNvbGUubG9nKFwi5Yqg6L296L+b5bqmLS0tLS0tLS0tXCIscHJvZ3Jlc3MpO1xuICAgIH1cbiAgICBwdWJsaWMgb25Mb2FkRmluaXNoKCk6dm9pZHtcbiAgICAgICAgY29uc29sZS5sb2coXCLliqDovb3lrozmiJDllaZcIik7XG4gICAgfVxuXG59IiwiLy/nrKwx5q2lIC0g5YeG5aSHQ2FudmFz5ZKM6I635Y+WV2ViR0znmoTmuLLmn5PkuIrkuIvmlodcclxuXHJcblxyXG5cclxuXHJcbmltcG9ydCBEZXZpY2UgZnJvbSBcIi4vRGV2aWNlXCI7XHJcbmltcG9ydCBMb2FkZXJNYW5hZ2VyIGZyb20gXCIuL0xvYWRlck1hbmFnZXJcIjtcclxuaW1wb3J0IHsgR19TaGFkZXJGYWN0b3J5IH0gZnJvbSBcIi4vY29yZS9yZW5kZXJlci9zaGFkZXIvU2hhZGVyXCI7XHJcbmltcG9ydCBQb2ludExpZ2h0VGVzdCBmcm9tIFwiLi9jb3JlL3JlbmRlcmVyL2xpZ2h0L1BvaW50TGlnaHRUZXN0XCI7XHJcbmltcG9ydCBSZW5kZXJGbG93IGZyb20gXCIuL1JlbmRlckZsb3dcIjtcclxuaW1wb3J0IFN0YWdlIGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvM2QvU3RhZ2VcIjtcclxuaW1wb3J0IEZvZ1Rlc3QgZnJvbSBcIi4vY29yZS9yZW5kZXJlci8zZC9Gb2dUZXN0XCI7XHJcbmltcG9ydCBFYXJ0aFN1blRlc3QgZnJvbSBcIi4vY29yZS9yZW5kZXJlci8zZC9FYXJ0aFN1blRlc3RcIjtcclxuaW1wb3J0IFJvYmFydFRlc3QgZnJvbSBcIi4vY29yZS9yZW5kZXJlci8zZC9Sb2JhcnRUZXN0XCI7XHJcbmltcG9ydCBDYXB0dXJlVGVzdCBmcm9tIFwiLi9jb3JlL3JlbmRlcmVyLzNkL0NhcHR1cmVUZXN0XCI7XHJcbmltcG9ydCBSYW1wVGV4dHVyZVRlc3QgZnJvbSBcIi4vY29yZS9yZW5kZXJlci8zZC9SYW1wVGV4dHVyZVRlc3RcIjtcclxuaW1wb3J0IE9ialRlc3QgZnJvbSBcIi4vY29yZS9yZW5kZXJlci8zZC9PYmpUZXN0XCI7XHJcbmltcG9ydCB7IENhbWVyYVRlc3QgfSBmcm9tIFwiLi9jb3JlL3JlbmRlcmVyLzNkL0NhbWVyYVRlc3RcIjtcclxuXHJcblxyXG5cclxuRGV2aWNlLkluc3RhbmNlLmluaXQoKTtcclxuR19TaGFkZXJGYWN0b3J5LmluaXQoRGV2aWNlLkluc3RhbmNlLmdsKTtcclxuXHJcbi8vdGVzdFdlYmxfTGFiZWwucnVuKCk7XHJcblxyXG4vL0xpZ2h0VGVzdC5ydW4oKTtcclxuXHJcbi8vIHNreUJveFRlc3QucnVuKCk7XHJcblxyXG4vLyBTa2luVGVzMS5ydW4oKTtcclxuXHJcbiB2YXIgYXJyID0gW1xyXG4gICAgXCJyZXMvbW9kZWxzL2tpbGxlcl93aGFsZS93aGFsZS5DWUNMRVMuYmluXCIsXHJcbiAgICBcInJlcy9tb2RlbHMva2lsbGVyX3doYWxlL3doYWxlLkNZQ0xFUy5nbHRmXCIsXHJcbiAgICBcInJlcy9tb2RlbHMvSGVhZERhdGEvaGVhZC5qc29uXCIsXHJcbiAgICBcInJlcy9tb2RlbHMvUm9iYXJ0L2Jsb2NrR3V5Tm9kZURlc2NyaXB0aW9ucy5qc29uXCIsXHJcbiAgICBcInJlcy84eDgtZm9udC5wbmdcIixcclxuICAgIFwicmVzL3dvb2QuanBnXCIsXHJcbiAgICBcInJlcy90cmVlLmpwZ1wiLFxyXG4gICAgXCJyZXMvZ3JvdW5kLmpwZ1wiLFxyXG4gICAgXCJyZXMvd2lja2VyLmpwZ1wiXHJcbiBdXHJcblxyXG4vLyBUaHJlZURUZXh0dXJlLnJ1bigpO1xyXG4vLyBMYWJlbFRlc3QucnVuKCk7XHJcbi8vIFNoYWRlclNoYWRvd1Rlc3QucnVuKCk7XHJcblxyXG4vLyBTdGFnZS5ydW4oKTtcclxuXHJcbi8vIEVhcnRoU3VuVGVzdC5ydW4oKTtcclxuXHJcbi8vIFJvYmFydFRlc3QucnVuKCk7XHJcbi8vIENhcHR1cmVUZXN0LnJ1bigpO1xyXG5cclxuLy8gQ2FtZXJhVGVzdC5ydW4oKTtcclxuXHJcbi8vIFRleHR1cmVUZXN0LnJ1bigpO1xyXG5cclxuLy8gU3BlZWRUZXN0LnJ1bigpO1xyXG4vLyAgSGFpVHduMS5ydW4oKTtcclxuXHJcbi8vIFRocmVlRExpZ2h0VGVzdC5ydW4oKTtcclxuLy8gU3BvdExpZ2h0VGVzdC5ydW4oKTtcclxuLy8gUG9pbnRMaWdodFRlc3QucnVuKCk7XHJcblxyXG4vLyBGb2dUZXN0LnJ1bigpO1xyXG5cclxuXHJcblxyXG5cclxuTG9hZGVyTWFuYWdlci5pbnN0YW5jZS5sb2FkRGF0YShhcnIsbnVsbCxmdW5jdGlvbigpe1xyXG4gICAgbmV3IFJlbmRlckZsb3coKS5zdGFydHVwKCk7XHJcbiAgICAvLyBSYW1wVGV4dHVyZVRlc3QucnVuKCk7XHJcbiAgICAvLyBDYW1lcmFUZXN0LnJ1bigpO1xyXG4gICAgLy8gUm9iYXJ0VGVzdC5ydW4oKTtcclxuICAgIC8vIE9ialRlc3QucnVuKCk7XHJcbiAgICAvLyBTdGFnZS5ydW4oKTtcclxuICAgIFxyXG59KVxyXG4iLCJcclxuXHJcbmNsYXNzIENvbXBvbmVudHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZntcclxuICAgICAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VDb3VudCA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBfcmVmZXJlbmNlQ291bnQ6bnVtYmVyID0gMDtcclxuICAgICAgICBwdWJsaWMgYWRkUmVmZXJlbmNlQ291bnQoKTp2b2lke1xyXG4gICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VDb3VudCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgcmVkdWNlUmVmZXJlbmNlQ291bnQoKTp2b2lke1xyXG4gICAgICAgICAgICB0aGlzLl9yZWZlcmVuY2VDb3VudC0tO1xyXG4gICAgICAgIH1cclxufSIsIlxuaW1wb3J0IERldmljZSBmcm9tIFwiLi9EZXZpY2VcIjtcbmltcG9ydCBTY2VuZTJEIGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvYmFzZS9TY2VuZTJEXCI7XG5pbXBvcnQgU2NlbmUzRCBmcm9tIFwiLi9jb3JlL3JlbmRlcmVyL2Jhc2UvU2NlbmUzRFwiO1xuaW1wb3J0IEdhbWVNYWluQ2FtZXJhIGZyb20gXCIuL2NvcmUvcmVuZGVyZXIvY2FtZXJhL0dhbWVNYWluQ2FtZXJhXCI7XG5cblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbmRlckZsb3cge1xuXG4gICAgcHJpdmF0ZSBnbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgcHJpdmF0ZSBjYW52YXM6IGFueTtcbiAgICBwcml2YXRlIF8zZFNjZW5lOlNjZW5lM0Q7XG4gICAgcHJpdmF0ZSBfMmRTY2VuZTpTY2VuZTJEO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmdsID0gRGV2aWNlLkluc3RhbmNlLmdsO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IERldmljZS5JbnN0YW5jZS5jYW52YXM7XG4gICAgfVxuICAgIHB1YmxpYyBzdGFydHVwKCkge1xuICAgICAgICB0aGlzLl8zZFNjZW5lID0gbmV3IFNjZW5lM0QoKTtcbiAgICAgICAgdGhpcy5fM2RTY2VuZS5pbml0KCk7XG4gICAgICAgIHRoaXMuXzJkU2NlbmUgPSBuZXcgU2NlbmUyRCgpO1xuICAgICAgICB0aGlzLl8yZFNjZW5lLmluaXQoKTtcbiAgICAgICAgRGV2aWNlLkluc3RhbmNlLnNldFZpZXdQb3J0KEdhbWVNYWluQ2FtZXJhLmluc3RhbmNlLmdldDJEQ2FtZXJhKCkucmVjdCk7XG4gICAgICAgIHRoaXMubG9vcFNjYWxlKCk7XG4gICAgfVxuICAgIHByaXZhdGUgX2FkZDpudW1iZXI7XG4gICAgcHJpdmF0ZSBsb29wU2NhbGUoKTp2b2lke1xuICAgICAgICB0aGlzLl9hZGQgPSAwLjAxO1xuICAgICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uKHRpbWUpe1xuICAgICAgICAgICAgLy8gRGV2aWNlLkluc3RhbmNlLmRyYXdUb1VJKHRpbWUsdGhpcy5fMmRTY2VuZSx0aGlzLl8zZFNjZW5lKTtcbiAgICAgICAgICAgIERldmljZS5JbnN0YW5jZS5kcmF3MnNjcmVlbih0aW1lLHRoaXMuXzJkU2NlbmUsdGhpcy5fM2RTY2VuZSk7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICAgICAgbG9vcCgwKTtcbiAgICB9XG4gICAgXG5cblxufVxuXG4iLCJcclxuJ3VzZSBzdHJpY3QnO1xyXG5leHBvcnQgbmFtZXNwYWNlIGdsTWF0cml4IHtcclxuICAgIC8qKlxyXG4qIENvbW1vbiB1dGlsaXRpZXNcclxuKiBAbW9kdWxlIGdsTWF0cml4XHJcbiovXHJcbiAgICAvLyBDb25maWd1cmF0aW9uIENvbnN0YW50c1xyXG4gICAgdmFyIEVQU0lMT04gPSAwLjAwMDAwMTtcclxuICAgIHZhciBBUlJBWV9UWVBFID0gdHlwZW9mIEZsb2F0MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBGbG9hdDMyQXJyYXkgOiBBcnJheTtcclxuICAgIHZhciBSQU5ET00gPSBNYXRoLnJhbmRvbTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgdHlwZSBvZiBhcnJheSB1c2VkIHdoZW4gY3JlYXRpbmcgbmV3IHZlY3RvcnMgYW5kIG1hdHJpY2VzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtUeXBlfSB0eXBlIEFycmF5IHR5cGUsIHN1Y2ggYXMgRmxvYXQzMkFycmF5IG9yIEFycmF5XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRNYXRyaXhBcnJheVR5cGUodHlwZSkge1xyXG4gICAgICAgIEFSUkFZX1RZUEUgPSB0eXBlO1xyXG4gICAgfVxyXG4gICAgdmFyIGRlZ3JlZSA9IE1hdGguUEkgLyAxODA7XHJcbiAgICAvKipcclxuICAgICAqIENvbnZlcnQgRGVncmVlIFRvIFJhZGlhblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhIEFuZ2xlIGluIERlZ3JlZXNcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHRvUmFkaWFuKGEpIHtcclxuICAgICAgICByZXR1cm4gYSAqIGRlZ3JlZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGVzdHMgd2hldGhlciBvciBub3QgdGhlIGFyZ3VtZW50cyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgdmFsdWUsIHdpdGhpbiBhbiBhYnNvbHV0ZVxyXG4gICAgICogb3IgcmVsYXRpdmUgdG9sZXJhbmNlIG9mIGdsTWF0cml4LkVQU0lMT04gKGFuIGFic29sdXRlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciB2YWx1ZXMgbGVzc1xyXG4gICAgICogdGhhbiBvciBlcXVhbCB0byAxLjAsIGFuZCBhIHJlbGF0aXZlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciBsYXJnZXIgdmFsdWVzKVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhIFRoZSBmaXJzdCBudW1iZXIgdG8gdGVzdC5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiIFRoZSBzZWNvbmQgbnVtYmVyIHRvIHRlc3QuXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbnVtYmVycyBhcmUgYXBwcm94aW1hdGVseSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIU1hdGguaHlwb3QpIE1hdGguaHlwb3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHkgPSAwLFxyXG4gICAgICAgICAgICBpID0gYXJndW1lbnRzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICB5ICs9IGFyZ3VtZW50c1tpXSAqIGFyZ3VtZW50c1tpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGxldCBNYXRUeXBlID0gRmxvYXQzMkFycmF5O1xyXG5cclxuICAgIHZhciBjb21tb24gPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgRVBTSUxPTjogRVBTSUxPTixcclxuICAgICAgICBnZXQgQVJSQVlfVFlQRSgpIHsgcmV0dXJuIEFSUkFZX1RZUEU7IH0sXHJcbiAgICAgICAgUkFORE9NOiBSQU5ET00sXHJcbiAgICAgICAgc2V0TWF0cml4QXJyYXlUeXBlOiBzZXRNYXRyaXhBcnJheVR5cGUsXHJcbiAgICAgICAgdG9SYWRpYW46IHRvUmFkaWFuLFxyXG4gICAgICAgIGVxdWFsczogZXF1YWxzXHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIDJ4MiBNYXRyaXhcclxuICAgICAqIEBtb2R1bGUgbWF0MlxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDJcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gYSBuZXcgMngyIG1hdHJpeFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSg0KTtcclxuXHJcbiAgICAgICAgaWYgKEFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XHJcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRbMF0gPSAxO1xyXG4gICAgICAgIG91dFszXSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtYXQyIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gICAgICogQHJldHVybnMge21hdDJ9IGEgbmV3IDJ4MiBtYXRyaXhcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNsb25lKGEpIHtcclxuICAgICAgICB2YXIgb3V0ID0gbmV3IEFSUkFZX1RZUEUoNCk7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MiB0byBhbm90aGVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIG1hdDIgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcclxuICAgICAgICBvdXRbMF0gPSAxO1xyXG4gICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICBvdXRbM10gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBtYXQyIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMilcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMylcclxuICAgICAqIEByZXR1cm5zIHttYXQyfSBvdXQgQSBuZXcgMngyIG1hdHJpeFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVZhbHVlcyhtMDAsIG0wMSwgbTEwLCBtMTEpIHtcclxuICAgICAgICB2YXIgb3V0ID0gbmV3IEFSUkFZX1RZUEUoNCk7XHJcbiAgICAgICAgb3V0WzBdID0gbTAwO1xyXG4gICAgICAgIG91dFsxXSA9IG0wMTtcclxuICAgICAgICBvdXRbMl0gPSBtMTA7XHJcbiAgICAgICAgb3V0WzNdID0gbTExO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDIgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDIpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTEwLCBtMTEpIHtcclxuICAgICAgICBvdXRbMF0gPSBtMDA7XHJcbiAgICAgICAgb3V0WzFdID0gbTAxO1xyXG4gICAgICAgIG91dFsyXSA9IG0xMDtcclxuICAgICAgICBvdXRbM10gPSBtMTE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xyXG4gICAgICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGVcclxuICAgICAgICAvLyBzb21lIHZhbHVlc1xyXG4gICAgICAgIGlmIChvdXQgPT09IGEpIHtcclxuICAgICAgICAgICAgdmFyIGExID0gYVsxXTtcclxuICAgICAgICAgICAgb3V0WzFdID0gYVsyXTtcclxuICAgICAgICAgICAgb3V0WzJdID0gYTE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICAgICAgb3V0WzFdID0gYVsyXTtcclxuICAgICAgICAgICAgb3V0WzJdID0gYVsxXTtcclxuICAgICAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGRzIDIgdmVjdG9yczNzXHJcbiAgICAgKiBAcGFyYW0ge1ZlY3RvcjN9IGEgYVxyXG4gICAgICogQHBhcmFtIHtWZWN0b3IzfSBiIGJcclxuICAgICAqIEBwYXJhbSB7VmVjdG9yM30gZHN0IG9wdGlvbmFsIHZlY3RvcjMgdG8gc3RvcmUgcmVzdWx0XHJcbiAgICAgKiBAcmV0dXJuIHtWZWN0b3IzfSBkc3Qgb3IgbmV3IFZlY3RvcjMgaWYgbm90IHByb3ZpZGVkXHJcbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLTNkLW1hdGhcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gYWRkVmVjdG9ycyhkc3QsYSwgYik6RmxvYXQzMkFycmF5IHtcclxuICAgICAgICBkc3QgPSBkc3QgfHwgbmV3IE1hdFR5cGUoMyk7XHJcbiAgICAgICAgZHN0WzBdID0gYVswXSArIGJbMF07XHJcbiAgICAgICAgZHN0WzFdID0gYVsxXSArIGJbMV07XHJcbiAgICAgICAgZHN0WzJdID0gYVsyXSArIGJbMl07XHJcbiAgICAgICAgcmV0dXJuIGRzdDtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBzdWJ0cmFjdHMgMiB2ZWN0b3JzM3NcclxuICAgICAgICogQHBhcmFtIHtWZWN0b3IzfSBhIGFcclxuICAgICAgICogQHBhcmFtIHtWZWN0b3IzfSBiIGJcclxuICAgICAgICogQHBhcmFtIHtWZWN0b3IzfSBkc3Qgb3B0aW9uYWwgdmVjdG9yMyB0byBzdG9yZSByZXN1bHRcclxuICAgICAgICogQHJldHVybiB7VmVjdG9yM30gZHN0IG9yIG5ldyBWZWN0b3IzIGlmIG5vdCBwcm92aWRlZFxyXG4gICAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLTNkLW1hdGhcclxuICAgICAgICovXHJcbiAgICAgIGZ1bmN0aW9uIHN1YnRyYWN0VmVjdG9ycyhkc3QsYSwgYik6RmxvYXQzMkFycmF5IHtcclxuICAgICAgICBkc3QgPSBkc3QgfHwgbmV3IE1hdFR5cGUoMyk7XHJcbiAgICAgICAgZHN0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgICAgICAgZHN0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgICAgICAgZHN0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgICAgICAgcmV0dXJuIGRzdDtcclxuICAgICAgfVxyXG4gICAgXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBzY2FsZSB2ZWN0b3JzM1xyXG4gICAgICAgKiBAcGFyYW0ge1ZlY3RvcjN9IHYgdmVjdG9yXHJcbiAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzIHNjYWxlXHJcbiAgICAgICAqIEBwYXJhbSB7VmVjdG9yM30gZHN0IG9wdGlvbmFsIHZlY3RvcjMgdG8gc3RvcmUgcmVzdWx0XHJcbiAgICAgICAqIEByZXR1cm4ge1ZlY3RvcjN9IGRzdCBvciBuZXcgVmVjdG9yMyBpZiBub3QgcHJvdmlkZWRcclxuICAgICAgICogQG1lbWJlck9mIG1vZHVsZTp3ZWJnbC0zZC1tYXRoXHJcbiAgICAgICAqL1xyXG4gICAgICBmdW5jdGlvbiBzY2FsZVZlY3Rvcihkc3Qsdiwgcykge1xyXG4gICAgICAgIGRzdCA9IGRzdCB8fCBuZXcgTWF0VHlwZSgzKTtcclxuICAgICAgICBkc3RbMF0gPSB2WzBdICogcztcclxuICAgICAgICBkc3RbMV0gPSB2WzFdICogcztcclxuICAgICAgICBkc3RbMl0gPSB2WzJdICogcztcclxuICAgICAgICByZXR1cm4gZHN0O1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZlcnRzIGEgbWF0MlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICAgICAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcclxuICAgICAgICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEyID0gYVsyXSxcclxuICAgICAgICAgICAgYTMgPSBhWzNdOyAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XHJcblxyXG4gICAgICAgIHZhciBkZXQgPSBhMCAqIGEzIC0gYTIgKiBhMTtcclxuXHJcbiAgICAgICAgaWYgKCFkZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZXQgPSAxLjAgLyBkZXQ7XHJcbiAgICAgICAgb3V0WzBdID0gYTMgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzFdID0gLWExICogZGV0O1xyXG4gICAgICAgIG91dFsyXSA9IC1hMiAqIGRldDtcclxuICAgICAgICBvdXRbM10gPSBhMCAqIGRldDtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBhZGp1Z2F0ZSBvZiBhIG1hdDJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xyXG4gICAgICAgIC8vIENhY2hpbmcgdGhpcyB2YWx1ZSBpcyBuZXNzZWNhcnkgaWYgb3V0ID09IGFcclxuICAgICAgICB2YXIgYTAgPSBhWzBdO1xyXG4gICAgICAgIG91dFswXSA9IGFbM107XHJcbiAgICAgICAgb3V0WzFdID0gLWFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gLWFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYTA7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XHJcbiAgICAgICAgcmV0dXJuIGFbMF0gKiBhWzNdIC0gYVsyXSAqIGFbMV07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE11bHRpcGxpZXMgdHdvIG1hdDInc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gICAgICAgIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGExID0gYVsxXSxcclxuICAgICAgICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMyA9IGFbM107XHJcbiAgICAgICAgdmFyIGIwID0gYlswXSxcclxuICAgICAgICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICAgICAgICBiMiA9IGJbMl0sXHJcbiAgICAgICAgICAgIGIzID0gYlszXTtcclxuICAgICAgICBvdXRbMF0gPSBhMCAqIGIwICsgYTIgKiBiMTtcclxuICAgICAgICBvdXRbMV0gPSBhMSAqIGIwICsgYTMgKiBiMTtcclxuICAgICAgICBvdXRbMl0gPSBhMCAqIGIyICsgYTIgKiBiMztcclxuICAgICAgICBvdXRbM10gPSBhMSAqIGIyICsgYTMgKiBiMztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3RhdGVzIGEgbWF0MiBieSB0aGUgZ2l2ZW4gYW5nbGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XHJcbiAgICAgICAgdmFyIGEwID0gYVswXSxcclxuICAgICAgICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGEzID0gYVszXTtcclxuICAgICAgICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gICAgICAgIG91dFswXSA9IGEwICogYyArIGEyICogcztcclxuICAgICAgICBvdXRbMV0gPSBhMSAqIGMgKyBhMyAqIHM7XHJcbiAgICAgICAgb3V0WzJdID0gYTAgKiAtcyArIGEyICogYztcclxuICAgICAgICBvdXRbM10gPSBhMSAqIC1zICsgYTMgKiBjO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlcyB0aGUgbWF0MiBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAgICAgKiovXHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XHJcbiAgICAgICAgdmFyIGEwID0gYVswXSxcclxuICAgICAgICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGEzID0gYVszXTtcclxuICAgICAgICB2YXIgdjAgPSB2WzBdLFxyXG4gICAgICAgICAgICB2MSA9IHZbMV07XHJcbiAgICAgICAgb3V0WzBdID0gYTAgKiB2MDtcclxuICAgICAgICBvdXRbMV0gPSBhMSAqIHYwO1xyXG4gICAgICAgIG91dFsyXSA9IGEyICogdjE7XHJcbiAgICAgICAgb3V0WzNdID0gYTMgKiB2MTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZVxyXG4gICAgICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAgICAgKlxyXG4gICAgICogICAgIG1hdDIuaWRlbnRpdHkoZGVzdCk7XHJcbiAgICAgKiAgICAgbWF0Mi5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkKTtcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG91dCBtYXQyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcmFkKSB7XHJcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xyXG4gICAgICAgIHZhciBjID0gTWF0aC5jb3MocmFkKTtcclxuICAgICAgICBvdXRbMF0gPSBjO1xyXG4gICAgICAgIG91dFsxXSA9IHM7XHJcbiAgICAgICAgb3V0WzJdID0gLXM7XHJcbiAgICAgICAgb3V0WzNdID0gYztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xyXG4gICAgICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAgICAgKlxyXG4gICAgICogICAgIG1hdDIuaWRlbnRpdHkoZGVzdCk7XHJcbiAgICAgKiAgICAgbWF0Mi5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IG1hdDIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gdiBTY2FsaW5nIHZlY3RvclxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XHJcbiAgICAgICAgb3V0WzBdID0gdlswXTtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gdlsxXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0MlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3RyKGEpIHtcclxuICAgICAgICByZXR1cm4gJ21hdDIoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnKSc7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIHRoZSBtYXRyaXggdG8gY2FsY3VsYXRlIEZyb2Jlbml1cyBub3JtIG9mXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvYihhKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguaHlwb3QoYVswXSwgYVsxXSwgYVsyXSwgYVszXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgTCwgRCBhbmQgVSBtYXRyaWNlcyAoTG93ZXIgdHJpYW5ndWxhciwgRGlhZ29uYWwgYW5kIFVwcGVyIHRyaWFuZ3VsYXIpIGJ5IGZhY3Rvcml6aW5nIHRoZSBpbnB1dCBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gTCB0aGUgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gRCB0aGUgZGlhZ29uYWwgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IFUgdGhlIHVwcGVyIHRyaWFuZ3VsYXIgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGlucHV0IG1hdHJpeCB0byBmYWN0b3JpemVcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIExEVShMLCBELCBVLCBhKSB7XHJcbiAgICAgICAgTFsyXSA9IGFbMl0gLyBhWzBdO1xyXG4gICAgICAgIFVbMF0gPSBhWzBdO1xyXG4gICAgICAgIFVbMV0gPSBhWzFdO1xyXG4gICAgICAgIFVbM10gPSBhWzNdIC0gTFsyXSAqIFVbMV07XHJcbiAgICAgICAgcmV0dXJuIFtMLCBELCBVXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0d28gbWF0MidzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHttYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xyXG4gICAgICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHttYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXSAtIGJbM107XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBlcXVhbHMkMShhLCBiKSB7XHJcbiAgICAgICAgdmFyIGEwID0gYVswXSxcclxuICAgICAgICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGEzID0gYVszXTtcclxuICAgICAgICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICAgICAgICBiMSA9IGJbMV0sXHJcbiAgICAgICAgICAgIGIyID0gYlsyXSxcclxuICAgICAgICAgICAgYjMgPSBiWzNdO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAqIGI7XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSAqIGI7XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSAqIGI7XHJcbiAgICAgICAgb3V0WzNdID0gYVszXSAqIGI7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0d28gbWF0MidzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHttYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcclxuICAgICAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5tdWx0aXBseX1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIG11bCA9IG11bHRpcGx5O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDIuc3VidHJhY3R9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzdWIgPSBzdWJ0cmFjdDtcclxuXHJcbiAgICBleHBvcnQgdmFyIG1hdDIgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgY3JlYXRlOiBjcmVhdGUsXHJcbiAgICAgICAgY2xvbmU6IGNsb25lLFxyXG4gICAgICAgIGNvcHk6IGNvcHksXHJcbiAgICAgICAgaWRlbnRpdHk6IGlkZW50aXR5LFxyXG4gICAgICAgIGZyb21WYWx1ZXM6IGZyb21WYWx1ZXMsXHJcbiAgICAgICAgc2V0OiBzZXQsXHJcbiAgICAgICAgdHJhbnNwb3NlOiB0cmFuc3Bvc2UsXHJcbiAgICAgICAgaW52ZXJ0OiBpbnZlcnQsXHJcbiAgICAgICAgYWRqb2ludDogYWRqb2ludCxcclxuICAgICAgICBkZXRlcm1pbmFudDogZGV0ZXJtaW5hbnQsXHJcbiAgICAgICAgbXVsdGlwbHk6IG11bHRpcGx5LFxyXG4gICAgICAgIHJvdGF0ZTogcm90YXRlLFxyXG4gICAgICAgIHNjYWxlOiBzY2FsZSxcclxuICAgICAgICBmcm9tUm90YXRpb246IGZyb21Sb3RhdGlvbixcclxuICAgICAgICBmcm9tU2NhbGluZzogZnJvbVNjYWxpbmcsXHJcbiAgICAgICAgc3RyOiBzdHIsXHJcbiAgICAgICAgZnJvYjogZnJvYixcclxuICAgICAgICBMRFU6IExEVSxcclxuICAgICAgICBhZGQ6IGFkZCxcclxuICAgICAgICBzdWJ0cmFjdDogc3VidHJhY3QsXHJcbiAgICAgICAgZXhhY3RFcXVhbHM6IGV4YWN0RXF1YWxzLFxyXG4gICAgICAgIGVxdWFsczogZXF1YWxzJDEsXHJcbiAgICAgICAgbXVsdGlwbHlTY2FsYXI6IG11bHRpcGx5U2NhbGFyLFxyXG4gICAgICAgIG11bHRpcGx5U2NhbGFyQW5kQWRkOiBtdWx0aXBseVNjYWxhckFuZEFkZCxcclxuICAgICAgICBtdWw6IG11bCxcclxuICAgICAgICBzdWI6IHN1YlxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAyeDMgTWF0cml4XHJcbiAgICAgKiBAbW9kdWxlIG1hdDJkXHJcbiAgICAgKlxyXG4gICAgICogQGRlc2NyaXB0aW9uXHJcbiAgICAgKiBBIG1hdDJkIGNvbnRhaW5zIHNpeCBlbGVtZW50cyBkZWZpbmVkIGFzOlxyXG4gICAgICogPHByZT5cclxuICAgICAqIFthLCBjLCB0eCxcclxuICAgICAqICBiLCBkLCB0eV1cclxuICAgICAqIDwvcHJlPlxyXG4gICAgICogVGhpcyBpcyBhIHNob3J0IGZvcm0gZm9yIHRoZSAzeDMgbWF0cml4OlxyXG4gICAgICogPHByZT5cclxuICAgICAqIFthLCBjLCB0eCxcclxuICAgICAqICBiLCBkLCB0eSxcclxuICAgICAqICAwLCAwLCAxXVxyXG4gICAgICogPC9wcmU+XHJcbiAgICAgKiBUaGUgbGFzdCByb3cgaXMgaWdub3JlZCBzbyB0aGUgYXJyYXkgaXMgc2hvcnRlciBhbmQgb3BlcmF0aW9ucyBhcmUgZmFzdGVyLlxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDJkXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge21hdDJkfSBhIG5ldyAyeDMgbWF0cml4XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUkMSgpIHtcclxuICAgICAgICB2YXIgb3V0ID0gbmV3IEFSUkFZX1RZUEUoNik7XHJcblxyXG4gICAgICAgIGlmIChBUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xyXG4gICAgICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgICAgICBvdXRbMl0gPSAwO1xyXG4gICAgICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgICAgICBvdXRbNV0gPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3V0WzBdID0gMTtcclxuICAgICAgICBvdXRbM10gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgbWF0MmQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJkfSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gICAgICogQHJldHVybnMge21hdDJkfSBhIG5ldyAyeDMgbWF0cml4XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjbG9uZSQxKGEpIHtcclxuICAgICAgICB2YXIgb3V0ID0gbmV3IEFSUkFZX1RZUEUoNik7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdO1xyXG4gICAgICAgIG91dFs1XSA9IGFbNV07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDJkIHRvIGFub3RoZXJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICAgICAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjb3B5JDEob3V0LCBhKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdO1xyXG4gICAgICAgIG91dFs1XSA9IGFbNV07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGEgbWF0MmQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGlkZW50aXR5JDEob3V0KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMTtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMTtcclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IG1hdDJkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhIENvbXBvbmVudCBBIChpbmRleCAwKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGIgQ29tcG9uZW50IEIgKGluZGV4IDEpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYyBDb21wb25lbnQgQyAoaW5kZXggMilcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkIENvbXBvbmVudCBEIChpbmRleCAzKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHR4IENvbXBvbmVudCBUWCAoaW5kZXggNClcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0eSBDb21wb25lbnQgVFkgKGluZGV4IDUpXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0MmR9IEEgbmV3IG1hdDJkXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9tVmFsdWVzJDEoYSwgYiwgYywgZCwgdHgsIHR5KSB7XHJcbiAgICAgICAgdmFyIG91dCA9IG5ldyBBUlJBWV9UWVBFKDYpO1xyXG4gICAgICAgIG91dFswXSA9IGE7XHJcbiAgICAgICAgb3V0WzFdID0gYjtcclxuICAgICAgICBvdXRbMl0gPSBjO1xyXG4gICAgICAgIG91dFszXSA9IGQ7XHJcbiAgICAgICAgb3V0WzRdID0gdHg7XHJcbiAgICAgICAgb3V0WzVdID0gdHk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MmQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGEgQ29tcG9uZW50IEEgKGluZGV4IDApXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYiBDb21wb25lbnQgQiAoaW5kZXggMSlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjIENvbXBvbmVudCBDIChpbmRleCAyKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGQgQ29tcG9uZW50IEQgKGluZGV4IDMpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHggQ29tcG9uZW50IFRYIChpbmRleCA0KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHR5IENvbXBvbmVudCBUWSAoaW5kZXggNSlcclxuICAgICAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzZXQkMShvdXQsIGEsIGIsIGMsIGQsIHR4LCB0eSkge1xyXG4gICAgICAgIG91dFswXSA9IGE7XHJcbiAgICAgICAgb3V0WzFdID0gYjtcclxuICAgICAgICBvdXRbMl0gPSBjO1xyXG4gICAgICAgIG91dFszXSA9IGQ7XHJcbiAgICAgICAgb3V0WzRdID0gdHg7XHJcbiAgICAgICAgb3V0WzVdID0gdHk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW52ZXJ0cyBhIG1hdDJkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gaW52ZXJ0JDEob3V0LCBhKSB7XHJcbiAgICAgICAgdmFyIGFhID0gYVswXSxcclxuICAgICAgICAgICAgYWIgPSBhWzFdLFxyXG4gICAgICAgICAgICBhYyA9IGFbMl0sXHJcbiAgICAgICAgICAgIGFkID0gYVszXTtcclxuICAgICAgICB2YXIgYXR4ID0gYVs0XSxcclxuICAgICAgICAgICAgYXR5ID0gYVs1XTtcclxuICAgICAgICB2YXIgZGV0ID0gYWEgKiBhZCAtIGFiICogYWM7XHJcblxyXG4gICAgICAgIGlmICghZGV0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGV0ID0gMS4wIC8gZGV0O1xyXG4gICAgICAgIG91dFswXSA9IGFkICogZGV0O1xyXG4gICAgICAgIG91dFsxXSA9IC1hYiAqIGRldDtcclxuICAgICAgICBvdXRbMl0gPSAtYWMgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzNdID0gYWEgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzRdID0gKGFjICogYXR5IC0gYWQgKiBhdHgpICogZGV0O1xyXG4gICAgICAgIG91dFs1XSA9IChhYiAqIGF0eCAtIGFhICogYXR5KSAqIGRldDtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDJkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZGV0ZXJtaW5hbnQkMShhKSB7XHJcbiAgICAgICAgcmV0dXJuIGFbMF0gKiBhWzNdIC0gYVsxXSAqIGFbMl07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE11bHRpcGxpZXMgdHdvIG1hdDJkJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkkMShvdXQsIGEsIGIpIHtcclxuICAgICAgICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEyID0gYVsyXSxcclxuICAgICAgICAgICAgYTMgPSBhWzNdLFxyXG4gICAgICAgICAgICBhNCA9IGFbNF0sXHJcbiAgICAgICAgICAgIGE1ID0gYVs1XTtcclxuICAgICAgICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICAgICAgICBiMSA9IGJbMV0sXHJcbiAgICAgICAgICAgIGIyID0gYlsyXSxcclxuICAgICAgICAgICAgYjMgPSBiWzNdLFxyXG4gICAgICAgICAgICBiNCA9IGJbNF0sXHJcbiAgICAgICAgICAgIGI1ID0gYls1XTtcclxuICAgICAgICBvdXRbMF0gPSBhMCAqIGIwICsgYTIgKiBiMTtcclxuICAgICAgICBvdXRbMV0gPSBhMSAqIGIwICsgYTMgKiBiMTtcclxuICAgICAgICBvdXRbMl0gPSBhMCAqIGIyICsgYTIgKiBiMztcclxuICAgICAgICBvdXRbM10gPSBhMSAqIGIyICsgYTMgKiBiMztcclxuICAgICAgICBvdXRbNF0gPSBhMCAqIGI0ICsgYTIgKiBiNSArIGE0O1xyXG4gICAgICAgIG91dFs1XSA9IGExICogYjQgKyBhMyAqIGI1ICsgYTU7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUm90YXRlcyBhIG1hdDJkIGJ5IHRoZSBnaXZlbiBhbmdsZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGUkMShvdXQsIGEsIHJhZCkge1xyXG4gICAgICAgIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGExID0gYVsxXSxcclxuICAgICAgICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMyA9IGFbM10sXHJcbiAgICAgICAgICAgIGE0ID0gYVs0XSxcclxuICAgICAgICAgICAgYTUgPSBhWzVdO1xyXG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICAgICAgICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XHJcbiAgICAgICAgb3V0WzBdID0gYTAgKiBjICsgYTIgKiBzO1xyXG4gICAgICAgIG91dFsxXSA9IGExICogYyArIGEzICogcztcclxuICAgICAgICBvdXRbMl0gPSBhMCAqIC1zICsgYTIgKiBjO1xyXG4gICAgICAgIG91dFszXSA9IGExICogLXMgKyBhMyAqIGM7XHJcbiAgICAgICAgb3V0WzRdID0gYTQ7XHJcbiAgICAgICAgb3V0WzVdID0gYTU7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2NhbGVzIHRoZSBtYXQyZCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAgICAgKiovXHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGUkMShvdXQsIGEsIHYpIHtcclxuICAgICAgICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEyID0gYVsyXSxcclxuICAgICAgICAgICAgYTMgPSBhWzNdLFxyXG4gICAgICAgICAgICBhNCA9IGFbNF0sXHJcbiAgICAgICAgICAgIGE1ID0gYVs1XTtcclxuICAgICAgICB2YXIgdjAgPSB2WzBdLFxyXG4gICAgICAgICAgICB2MSA9IHZbMV07XHJcbiAgICAgICAgb3V0WzBdID0gYTAgKiB2MDtcclxuICAgICAgICBvdXRbMV0gPSBhMSAqIHYwO1xyXG4gICAgICAgIG91dFsyXSA9IGEyICogdjE7XHJcbiAgICAgICAgb3V0WzNdID0gYTMgKiB2MTtcclxuICAgICAgICBvdXRbNF0gPSBhNDtcclxuICAgICAgICBvdXRbNV0gPSBhNTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2xhdGVzIHRoZSBtYXQyZCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2IHRoZSB2ZWMyIHRvIHRyYW5zbGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gICAgICoqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcclxuICAgICAgICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEyID0gYVsyXSxcclxuICAgICAgICAgICAgYTMgPSBhWzNdLFxyXG4gICAgICAgICAgICBhNCA9IGFbNF0sXHJcbiAgICAgICAgICAgIGE1ID0gYVs1XTtcclxuICAgICAgICB2YXIgdjAgPSB2WzBdLFxyXG4gICAgICAgICAgICB2MSA9IHZbMV07XHJcbiAgICAgICAgb3V0WzBdID0gYTA7XHJcbiAgICAgICAgb3V0WzFdID0gYTE7XHJcbiAgICAgICAgb3V0WzJdID0gYTI7XHJcbiAgICAgICAgb3V0WzNdID0gYTM7XHJcbiAgICAgICAgb3V0WzRdID0gYTAgKiB2MCArIGEyICogdjEgKyBhNDtcclxuICAgICAgICBvdXRbNV0gPSBhMSAqIHYwICsgYTMgKiB2MSArIGE1O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlXHJcbiAgICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICAgICAqXHJcbiAgICAgKiAgICAgbWF0MmQuaWRlbnRpdHkoZGVzdCk7XHJcbiAgICAgKiAgICAgbWF0MmQucm90YXRlKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gb3V0IG1hdDJkIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gICAgICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21Sb3RhdGlvbiQxKG91dCwgcmFkKSB7XHJcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxyXG4gICAgICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcclxuICAgICAgICBvdXRbMF0gPSBjO1xyXG4gICAgICAgIG91dFsxXSA9IHM7XHJcbiAgICAgICAgb3V0WzJdID0gLXM7XHJcbiAgICAgICAgb3V0WzNdID0gYztcclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcclxuICAgICAqICAgICBtYXQyZC5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2IFNjYWxpbmcgdmVjdG9yXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVNjYWxpbmckMShvdXQsIHYpIHtcclxuICAgICAgICBvdXRbMF0gPSB2WzBdO1xyXG4gICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICBvdXRbM10gPSB2WzFdO1xyXG4gICAgICAgIG91dFs0XSA9IDA7XHJcbiAgICAgICAgb3V0WzVdID0gMDtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcclxuICAgICAqICAgICBtYXQyZC50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJkfSBvdXQgbWF0MmQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICAgICAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMTtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMTtcclxuICAgICAgICBvdXRbNF0gPSB2WzBdO1xyXG4gICAgICAgIG91dFs1XSA9IHZbMV07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDJkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3RyJDEoYSkge1xyXG4gICAgICAgIHJldHVybiAnbWF0MmQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnLCAnICsgYVs0XSArICcsICcgKyBhWzVdICsgJyknO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0MmRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gY2FsY3VsYXRlIEZyb2Jlbml1cyBub3JtIG9mXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvYiQxKGEpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5oeXBvdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdLCAxKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0d28gbWF0MmQnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBhZGQkMShvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdICsgYls0XTtcclxuICAgICAgICBvdXRbNV0gPSBhWzVdICsgYls1XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJ0cmFjdCQxKG91dCwgYSwgYikge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xyXG4gICAgICAgIG91dFszXSA9IGFbM10gLSBiWzNdO1xyXG4gICAgICAgIG91dFs0XSA9IGFbNF0gLSBiWzRdO1xyXG4gICAgICAgIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIkMShvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICogYjtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICogYjtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICogYjtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICogYjtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdICogYjtcclxuICAgICAgICBvdXRbNV0gPSBhWzVdICogYjtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHR3byBtYXQyZCdzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge21hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcclxuICAgICAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZCQxKG91dCwgYSwgYiwgc2NhbGUpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzVdID0gYVs1XSArIGJbNV0gKiBzY2FsZTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGV4YWN0RXF1YWxzJDEoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBlcXVhbHMkMihhLCBiKSB7XHJcbiAgICAgICAgdmFyIGEwID0gYVswXSxcclxuICAgICAgICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGEzID0gYVszXSxcclxuICAgICAgICAgICAgYTQgPSBhWzRdLFxyXG4gICAgICAgICAgICBhNSA9IGFbNV07XHJcbiAgICAgICAgdmFyIGIwID0gYlswXSxcclxuICAgICAgICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICAgICAgICBiMiA9IGJbMl0sXHJcbiAgICAgICAgICAgIGIzID0gYlszXSxcclxuICAgICAgICAgICAgYjQgPSBiWzRdLFxyXG4gICAgICAgICAgICBiNSA9IGJbNV07XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJiBNYXRoLmFicyhhNCAtIGI0KSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiYgTWF0aC5hYnMoYTUgLSBiNSkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDJkLm11bHRpcGx5fVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgbXVsJDEgPSBtdWx0aXBseSQxO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDJkLnN1YnRyYWN0fVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgc3ViJDEgPSBzdWJ0cmFjdCQxO1xyXG5cclxuICAgIGV4cG9ydCB2YXIgbWF0MmQgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgY3JlYXRlOiBjcmVhdGUkMSxcclxuICAgICAgICBjbG9uZTogY2xvbmUkMSxcclxuICAgICAgICBjb3B5OiBjb3B5JDEsXHJcbiAgICAgICAgaWRlbnRpdHk6IGlkZW50aXR5JDEsXHJcbiAgICAgICAgZnJvbVZhbHVlczogZnJvbVZhbHVlcyQxLFxyXG4gICAgICAgIHNldDogc2V0JDEsXHJcbiAgICAgICAgaW52ZXJ0OiBpbnZlcnQkMSxcclxuICAgICAgICBkZXRlcm1pbmFudDogZGV0ZXJtaW5hbnQkMSxcclxuICAgICAgICBtdWx0aXBseTogbXVsdGlwbHkkMSxcclxuICAgICAgICByb3RhdGU6IHJvdGF0ZSQxLFxyXG4gICAgICAgIHNjYWxlOiBzY2FsZSQxLFxyXG4gICAgICAgIHRyYW5zbGF0ZTogdHJhbnNsYXRlLFxyXG4gICAgICAgIGZyb21Sb3RhdGlvbjogZnJvbVJvdGF0aW9uJDEsXHJcbiAgICAgICAgZnJvbVNjYWxpbmc6IGZyb21TY2FsaW5nJDEsXHJcbiAgICAgICAgZnJvbVRyYW5zbGF0aW9uOiBmcm9tVHJhbnNsYXRpb24sXHJcbiAgICAgICAgc3RyOiBzdHIkMSxcclxuICAgICAgICBmcm9iOiBmcm9iJDEsXHJcbiAgICAgICAgYWRkOiBhZGQkMSxcclxuICAgICAgICBzdWJ0cmFjdDogc3VidHJhY3QkMSxcclxuICAgICAgICBtdWx0aXBseVNjYWxhcjogbXVsdGlwbHlTY2FsYXIkMSxcclxuICAgICAgICBtdWx0aXBseVNjYWxhckFuZEFkZDogbXVsdGlwbHlTY2FsYXJBbmRBZGQkMSxcclxuICAgICAgICBleGFjdEVxdWFsczogZXhhY3RFcXVhbHMkMSxcclxuICAgICAgICBlcXVhbHM6IGVxdWFscyQyLFxyXG4gICAgICAgIG11bDogbXVsJDEsXHJcbiAgICAgICAgc3ViOiBzdWIkMVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAzeDMgTWF0cml4XHJcbiAgICAgKiBAbW9kdWxlIG1hdDNcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQzXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge21hdDN9IGEgbmV3IDN4MyBtYXRyaXhcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZSQyKCkge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSg5KTtcclxuXHJcbiAgICAgICAgaWYgKEFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XHJcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFszXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgICAgIG91dFs2XSA9IDA7XHJcbiAgICAgICAgICAgIG91dFs3XSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRbMF0gPSAxO1xyXG4gICAgICAgIG91dFs0XSA9IDE7XHJcbiAgICAgICAgb3V0WzhdID0gMTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3BpZXMgdGhlIHVwcGVyLWxlZnQgM3gzIHZhbHVlcyBpbnRvIHRoZSBnaXZlbiBtYXQzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgM3gzIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBhICAgdGhlIHNvdXJjZSA0eDQgbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9tTWF0NChvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzRdO1xyXG4gICAgICAgIG91dFs0XSA9IGFbNV07XHJcbiAgICAgICAgb3V0WzVdID0gYVs2XTtcclxuICAgICAgICBvdXRbNl0gPSBhWzhdO1xyXG4gICAgICAgIG91dFs3XSA9IGFbOV07XHJcbiAgICAgICAgb3V0WzhdID0gYVsxMF07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtYXQzIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gICAgICogQHJldHVybnMge21hdDN9IGEgbmV3IDN4MyBtYXRyaXhcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNsb25lJDIoYSkge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSg5KTtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdO1xyXG4gICAgICAgIG91dFs0XSA9IGFbNF07XHJcbiAgICAgICAgb3V0WzVdID0gYVs1XTtcclxuICAgICAgICBvdXRbNl0gPSBhWzZdO1xyXG4gICAgICAgIG91dFs3XSA9IGFbN107XHJcbiAgICAgICAgb3V0WzhdID0gYVs4XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MyB0byBhbm90aGVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge21hdDN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY29weSQyKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF07XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdO1xyXG4gICAgICAgIG91dFszXSA9IGFbM107XHJcbiAgICAgICAgb3V0WzRdID0gYVs0XTtcclxuICAgICAgICBvdXRbNV0gPSBhWzVdO1xyXG4gICAgICAgIG91dFs2XSA9IGFbNl07XHJcbiAgICAgICAgb3V0WzddID0gYVs3XTtcclxuICAgICAgICBvdXRbOF0gPSBhWzhdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhIG5ldyBtYXQzIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMylcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNClcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNSlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNilcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNylcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggOClcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBBIG5ldyBtYXQzXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9tVmFsdWVzJDIobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSg5KTtcclxuICAgICAgICBvdXRbMF0gPSBtMDA7XHJcbiAgICAgICAgb3V0WzFdID0gbTAxO1xyXG4gICAgICAgIG91dFsyXSA9IG0wMjtcclxuICAgICAgICBvdXRbM10gPSBtMTA7XHJcbiAgICAgICAgb3V0WzRdID0gbTExO1xyXG4gICAgICAgIG91dFs1XSA9IG0xMjtcclxuICAgICAgICBvdXRbNl0gPSBtMjA7XHJcbiAgICAgICAgb3V0WzddID0gbTIxO1xyXG4gICAgICAgIG91dFs4XSA9IG0yMjtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAzKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA2KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gICAgICogQHJldHVybnMge21hdDN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc2V0JDIob3V0LCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XHJcbiAgICAgICAgb3V0WzBdID0gbTAwO1xyXG4gICAgICAgIG91dFsxXSA9IG0wMTtcclxuICAgICAgICBvdXRbMl0gPSBtMDI7XHJcbiAgICAgICAgb3V0WzNdID0gbTEwO1xyXG4gICAgICAgIG91dFs0XSA9IG0xMTtcclxuICAgICAgICBvdXRbNV0gPSBtMTI7XHJcbiAgICAgICAgb3V0WzZdID0gbTIwO1xyXG4gICAgICAgIG91dFs3XSA9IG0yMTtcclxuICAgICAgICBvdXRbOF0gPSBtMjI7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGEgbWF0MyB0byB0aGUgaWRlbnRpdHkgbWF0cml4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGlkZW50aXR5JDIob3V0KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMTtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICBvdXRbNF0gPSAxO1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge21hdDN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNwb3NlJDEob3V0LCBhKSB7XHJcbiAgICAgICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xyXG4gICAgICAgIGlmIChvdXQgPT09IGEpIHtcclxuICAgICAgICAgICAgdmFyIGEwMSA9IGFbMV0sXHJcbiAgICAgICAgICAgICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICAgICAgICAgICAgYTEyID0gYVs1XTtcclxuICAgICAgICAgICAgb3V0WzFdID0gYVszXTtcclxuICAgICAgICAgICAgb3V0WzJdID0gYVs2XTtcclxuICAgICAgICAgICAgb3V0WzNdID0gYTAxO1xyXG4gICAgICAgICAgICBvdXRbNV0gPSBhWzddO1xyXG4gICAgICAgICAgICBvdXRbNl0gPSBhMDI7XHJcbiAgICAgICAgICAgIG91dFs3XSA9IGExMjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgICAgICAgICBvdXRbMV0gPSBhWzNdO1xyXG4gICAgICAgICAgICBvdXRbMl0gPSBhWzZdO1xyXG4gICAgICAgICAgICBvdXRbM10gPSBhWzFdO1xyXG4gICAgICAgICAgICBvdXRbNF0gPSBhWzRdO1xyXG4gICAgICAgICAgICBvdXRbNV0gPSBhWzddO1xyXG4gICAgICAgICAgICBvdXRbNl0gPSBhWzJdO1xyXG4gICAgICAgICAgICBvdXRbN10gPSBhWzVdO1xyXG4gICAgICAgICAgICBvdXRbOF0gPSBhWzhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW52ZXJ0cyBhIG1hdDNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBpbnZlcnQkMihvdXQsIGEpIHtcclxuICAgICAgICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgICAgICAgYTAyID0gYVsyXTtcclxuICAgICAgICB2YXIgYTEwID0gYVszXSxcclxuICAgICAgICAgICAgYTExID0gYVs0XSxcclxuICAgICAgICAgICAgYTEyID0gYVs1XTtcclxuICAgICAgICB2YXIgYTIwID0gYVs2XSxcclxuICAgICAgICAgICAgYTIxID0gYVs3XSxcclxuICAgICAgICAgICAgYTIyID0gYVs4XTtcclxuICAgICAgICB2YXIgYjAxID0gYTIyICogYTExIC0gYTEyICogYTIxO1xyXG4gICAgICAgIHZhciBiMTEgPSAtYTIyICogYTEwICsgYTEyICogYTIwO1xyXG4gICAgICAgIHZhciBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjA7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcclxuXHJcbiAgICAgICAgdmFyIGRldCA9IGEwMCAqIGIwMSArIGEwMSAqIGIxMSArIGEwMiAqIGIyMTtcclxuXHJcbiAgICAgICAgaWYgKCFkZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZXQgPSAxLjAgLyBkZXQ7XHJcbiAgICAgICAgb3V0WzBdID0gYjAxICogZGV0O1xyXG4gICAgICAgIG91dFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGRldDtcclxuICAgICAgICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcclxuICAgICAgICBvdXRbM10gPSBiMTEgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xyXG4gICAgICAgIG91dFs2XSA9IGIyMSAqIGRldDtcclxuICAgICAgICBvdXRbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge21hdDN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gYWRqb2ludCQxKG91dCwgYSkge1xyXG4gICAgICAgIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMDIgPSBhWzJdO1xyXG4gICAgICAgIHZhciBhMTAgPSBhWzNdLFxyXG4gICAgICAgICAgICBhMTEgPSBhWzRdLFxyXG4gICAgICAgICAgICBhMTIgPSBhWzVdO1xyXG4gICAgICAgIHZhciBhMjAgPSBhWzZdLFxyXG4gICAgICAgICAgICBhMjEgPSBhWzddLFxyXG4gICAgICAgICAgICBhMjIgPSBhWzhdO1xyXG4gICAgICAgIG91dFswXSA9IGExMSAqIGEyMiAtIGExMiAqIGEyMTtcclxuICAgICAgICBvdXRbMV0gPSBhMDIgKiBhMjEgLSBhMDEgKiBhMjI7XHJcbiAgICAgICAgb3V0WzJdID0gYTAxICogYTEyIC0gYTAyICogYTExO1xyXG4gICAgICAgIG91dFszXSA9IGExMiAqIGEyMCAtIGExMCAqIGEyMjtcclxuICAgICAgICBvdXRbNF0gPSBhMDAgKiBhMjIgLSBhMDIgKiBhMjA7XHJcbiAgICAgICAgb3V0WzVdID0gYTAyICogYTEwIC0gYTAwICogYTEyO1xyXG4gICAgICAgIG91dFs2XSA9IGExMCAqIGEyMSAtIGExMSAqIGEyMDtcclxuICAgICAgICBvdXRbN10gPSBhMDEgKiBhMjAgLSBhMDAgKiBhMjE7XHJcbiAgICAgICAgb3V0WzhdID0gYTAwICogYTExIC0gYTAxICogYTEwO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0M1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZGV0ZXJtaW5hbnQkMihhKSB7XHJcbiAgICAgICAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEwMiA9IGFbMl07XHJcbiAgICAgICAgdmFyIGExMCA9IGFbM10sXHJcbiAgICAgICAgICAgIGExMSA9IGFbNF0sXHJcbiAgICAgICAgICAgIGExMiA9IGFbNV07XHJcbiAgICAgICAgdmFyIGEyMCA9IGFbNl0sXHJcbiAgICAgICAgICAgIGEyMSA9IGFbN10sXHJcbiAgICAgICAgICAgIGEyMiA9IGFbOF07XHJcbiAgICAgICAgcmV0dXJuIGEwMCAqIChhMjIgKiBhMTEgLSBhMTIgKiBhMjEpICsgYTAxICogKC1hMjIgKiBhMTAgKyBhMTIgKiBhMjApICsgYTAyICogKGEyMSAqIGExMCAtIGExMSAqIGEyMCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE11bHRpcGxpZXMgdHdvIG1hdDMnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5JDIob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEwMiA9IGFbMl07XHJcbiAgICAgICAgdmFyIGExMCA9IGFbM10sXHJcbiAgICAgICAgICAgIGExMSA9IGFbNF0sXHJcbiAgICAgICAgICAgIGExMiA9IGFbNV07XHJcbiAgICAgICAgdmFyIGEyMCA9IGFbNl0sXHJcbiAgICAgICAgICAgIGEyMSA9IGFbN10sXHJcbiAgICAgICAgICAgIGEyMiA9IGFbOF07XHJcbiAgICAgICAgdmFyIGIwMCA9IGJbMF0sXHJcbiAgICAgICAgICAgIGIwMSA9IGJbMV0sXHJcbiAgICAgICAgICAgIGIwMiA9IGJbMl07XHJcbiAgICAgICAgdmFyIGIxMCA9IGJbM10sXHJcbiAgICAgICAgICAgIGIxMSA9IGJbNF0sXHJcbiAgICAgICAgICAgIGIxMiA9IGJbNV07XHJcbiAgICAgICAgdmFyIGIyMCA9IGJbNl0sXHJcbiAgICAgICAgICAgIGIyMSA9IGJbN10sXHJcbiAgICAgICAgICAgIGIyMiA9IGJbOF07XHJcbiAgICAgICAgb3V0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xyXG4gICAgICAgIG91dFsxXSA9IGIwMCAqIGEwMSArIGIwMSAqIGExMSArIGIwMiAqIGEyMTtcclxuICAgICAgICBvdXRbMl0gPSBiMDAgKiBhMDIgKyBiMDEgKiBhMTIgKyBiMDIgKiBhMjI7XHJcbiAgICAgICAgb3V0WzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xyXG4gICAgICAgIG91dFs0XSA9IGIxMCAqIGEwMSArIGIxMSAqIGExMSArIGIxMiAqIGEyMTtcclxuICAgICAgICBvdXRbNV0gPSBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTIgKiBhMjI7XHJcbiAgICAgICAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xyXG4gICAgICAgIG91dFs3XSA9IGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMTtcclxuICAgICAgICBvdXRbOF0gPSBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjI7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNsYXRlIGEgbWF0MyBieSB0aGUgZ2l2ZW4gdmVjdG9yXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZSQxKG91dCwgYSwgdikge1xyXG4gICAgICAgIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMTAgPSBhWzNdLFxyXG4gICAgICAgICAgICBhMTEgPSBhWzRdLFxyXG4gICAgICAgICAgICBhMTIgPSBhWzVdLFxyXG4gICAgICAgICAgICBhMjAgPSBhWzZdLFxyXG4gICAgICAgICAgICBhMjEgPSBhWzddLFxyXG4gICAgICAgICAgICBhMjIgPSBhWzhdLFxyXG4gICAgICAgICAgICB4ID0gdlswXSxcclxuICAgICAgICAgICAgeSA9IHZbMV07XHJcbiAgICAgICAgb3V0WzBdID0gYTAwO1xyXG4gICAgICAgIG91dFsxXSA9IGEwMTtcclxuICAgICAgICBvdXRbMl0gPSBhMDI7XHJcbiAgICAgICAgb3V0WzNdID0gYTEwO1xyXG4gICAgICAgIG91dFs0XSA9IGExMTtcclxuICAgICAgICBvdXRbNV0gPSBhMTI7XHJcbiAgICAgICAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XHJcbiAgICAgICAgb3V0WzddID0geCAqIGEwMSArIHkgKiBhMTEgKyBhMjE7XHJcbiAgICAgICAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUm90YXRlcyBhIG1hdDMgYnkgdGhlIGdpdmVuIGFuZ2xlXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGF0ZSQyKG91dCwgYSwgcmFkKSB7XHJcbiAgICAgICAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGExMCA9IGFbM10sXHJcbiAgICAgICAgICAgIGExMSA9IGFbNF0sXHJcbiAgICAgICAgICAgIGExMiA9IGFbNV0sXHJcbiAgICAgICAgICAgIGEyMCA9IGFbNl0sXHJcbiAgICAgICAgICAgIGEyMSA9IGFbN10sXHJcbiAgICAgICAgICAgIGEyMiA9IGFbOF0sXHJcbiAgICAgICAgICAgIHMgPSBNYXRoLnNpbihyYWQpLFxyXG4gICAgICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcclxuICAgICAgICBvdXRbMF0gPSBjICogYTAwICsgcyAqIGExMDtcclxuICAgICAgICBvdXRbMV0gPSBjICogYTAxICsgcyAqIGExMTtcclxuICAgICAgICBvdXRbMl0gPSBjICogYTAyICsgcyAqIGExMjtcclxuICAgICAgICBvdXRbM10gPSBjICogYTEwIC0gcyAqIGEwMDtcclxuICAgICAgICBvdXRbNF0gPSBjICogYTExIC0gcyAqIGEwMTtcclxuICAgICAgICBvdXRbNV0gPSBjICogYTEyIC0gcyAqIGEwMjtcclxuICAgICAgICBvdXRbNl0gPSBhMjA7XHJcbiAgICAgICAgb3V0WzddID0gYTIxO1xyXG4gICAgICAgIG91dFs4XSA9IGEyMjtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTY2FsZXMgdGhlIG1hdDMgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxyXG4gICAgICogQHJldHVybnMge21hdDN9IG91dFxyXG4gICAgICoqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHNjYWxlJDIob3V0LCBhLCB2KSB7XHJcbiAgICAgICAgdmFyIHggPSB2WzBdLFxyXG4gICAgICAgICAgICB5ID0gdlsxXTtcclxuICAgICAgICBvdXRbMF0gPSB4ICogYVswXTtcclxuICAgICAgICBvdXRbMV0gPSB4ICogYVsxXTtcclxuICAgICAgICBvdXRbMl0gPSB4ICogYVsyXTtcclxuICAgICAgICBvdXRbM10gPSB5ICogYVszXTtcclxuICAgICAgICBvdXRbNF0gPSB5ICogYVs0XTtcclxuICAgICAgICBvdXRbNV0gPSB5ICogYVs1XTtcclxuICAgICAgICBvdXRbNl0gPSBhWzZdO1xyXG4gICAgICAgIG91dFs3XSA9IGFbN107XHJcbiAgICAgICAgb3V0WzhdID0gYVs4XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xyXG4gICAgICogICAgIG1hdDMudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gICAgICogQHJldHVybnMge21hdDN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uJDEob3V0LCB2KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMTtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICBvdXRbNF0gPSAxO1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgb3V0WzZdID0gdlswXTtcclxuICAgICAgICBvdXRbN10gPSB2WzFdO1xyXG4gICAgICAgIG91dFs4XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xyXG4gICAgICogICAgIG1hdDMucm90YXRlKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21Sb3RhdGlvbiQyKG91dCwgcmFkKSB7XHJcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxyXG4gICAgICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcclxuICAgICAgICBvdXRbMF0gPSBjO1xyXG4gICAgICAgIG91dFsxXSA9IHM7XHJcbiAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICBvdXRbM10gPSAtcztcclxuICAgICAgICBvdXRbNF0gPSBjO1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xyXG4gICAgICogICAgIG1hdDMuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21TY2FsaW5nJDIob3V0LCB2KSB7XHJcbiAgICAgICAgb3V0WzBdID0gdlswXTtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICBvdXRbNF0gPSB2WzFdO1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgZnJvbSBhIG1hdDJkIGludG8gYSBtYXQzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIG1hdHJpeCB0byBjb3B5XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAgICAgKiovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbU1hdDJkKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF07XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXTtcclxuICAgICAgICBvdXRbMl0gPSAwO1xyXG4gICAgICAgIG91dFszXSA9IGFbMl07XHJcbiAgICAgICAgb3V0WzRdID0gYVszXTtcclxuICAgICAgICBvdXRbNV0gPSAwO1xyXG4gICAgICAgIG91dFs2XSA9IGFbNF07XHJcbiAgICAgICAgb3V0WzddID0gYVs1XTtcclxuICAgICAgICBvdXRbOF0gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICogQ2FsY3VsYXRlcyBhIDN4MyBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxyXG4gICAgKlxyXG4gICAgKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAgICAqIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21RdWF0KG91dCwgcSkge1xyXG4gICAgICAgIHZhciB4ID0gcVswXSxcclxuICAgICAgICAgICAgeSA9IHFbMV0sXHJcbiAgICAgICAgICAgIHogPSBxWzJdLFxyXG4gICAgICAgICAgICB3ID0gcVszXTtcclxuICAgICAgICB2YXIgeDIgPSB4ICsgeDtcclxuICAgICAgICB2YXIgeTIgPSB5ICsgeTtcclxuICAgICAgICB2YXIgejIgPSB6ICsgejtcclxuICAgICAgICB2YXIgeHggPSB4ICogeDI7XHJcbiAgICAgICAgdmFyIHl4ID0geSAqIHgyO1xyXG4gICAgICAgIHZhciB5eSA9IHkgKiB5MjtcclxuICAgICAgICB2YXIgenggPSB6ICogeDI7XHJcbiAgICAgICAgdmFyIHp5ID0geiAqIHkyO1xyXG4gICAgICAgIHZhciB6eiA9IHogKiB6MjtcclxuICAgICAgICB2YXIgd3ggPSB3ICogeDI7XHJcbiAgICAgICAgdmFyIHd5ID0gdyAqIHkyO1xyXG4gICAgICAgIHZhciB3eiA9IHcgKiB6MjtcclxuICAgICAgICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcclxuICAgICAgICBvdXRbM10gPSB5eCAtIHd6O1xyXG4gICAgICAgIG91dFs2XSA9IHp4ICsgd3k7XHJcbiAgICAgICAgb3V0WzFdID0geXggKyB3ejtcclxuICAgICAgICBvdXRbNF0gPSAxIC0geHggLSB6ejtcclxuICAgICAgICBvdXRbN10gPSB6eSAtIHd4O1xyXG4gICAgICAgIG91dFsyXSA9IHp4IC0gd3k7XHJcbiAgICAgICAgb3V0WzVdID0genkgKyB3eDtcclxuICAgICAgICBvdXRbOF0gPSAxIC0geHggLSB5eTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAqIENhbGN1bGF0ZXMgYSAzeDMgbm9ybWFsIG1hdHJpeCAodHJhbnNwb3NlIGludmVyc2UpIGZyb20gdGhlIDR4NCBtYXRyaXhcclxuICAgICpcclxuICAgICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgKiBAcGFyYW0ge21hdDR9IGEgTWF0NCB0byBkZXJpdmUgdGhlIG5vcm1hbCBtYXRyaXggZnJvbVxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG5vcm1hbEZyb21NYXQ0KG91dCwgYSkge1xyXG4gICAgICAgIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMDMgPSBhWzNdO1xyXG4gICAgICAgIHZhciBhMTAgPSBhWzRdLFxyXG4gICAgICAgICAgICBhMTEgPSBhWzVdLFxyXG4gICAgICAgICAgICBhMTIgPSBhWzZdLFxyXG4gICAgICAgICAgICBhMTMgPSBhWzddO1xyXG4gICAgICAgIHZhciBhMjAgPSBhWzhdLFxyXG4gICAgICAgICAgICBhMjEgPSBhWzldLFxyXG4gICAgICAgICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgICAgICAgYTIzID0gYVsxMV07XHJcbiAgICAgICAgdmFyIGEzMCA9IGFbMTJdLFxyXG4gICAgICAgICAgICBhMzEgPSBhWzEzXSxcclxuICAgICAgICAgICAgYTMyID0gYVsxNF0sXHJcbiAgICAgICAgICAgIGEzMyA9IGFbMTVdO1xyXG4gICAgICAgIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XHJcbiAgICAgICAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcclxuICAgICAgICB2YXIgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xyXG4gICAgICAgIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XHJcbiAgICAgICAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcclxuICAgICAgICB2YXIgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xyXG4gICAgICAgIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XHJcbiAgICAgICAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcclxuICAgICAgICB2YXIgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xyXG4gICAgICAgIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XHJcbiAgICAgICAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcclxuICAgICAgICB2YXIgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyOyAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XHJcblxyXG4gICAgICAgIHZhciBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XHJcblxyXG4gICAgICAgIGlmICghZGV0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGV0ID0gMS4wIC8gZGV0O1xyXG4gICAgICAgIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xyXG4gICAgICAgIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xyXG4gICAgICAgIG91dFsyXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xyXG4gICAgICAgIG91dFszXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xyXG4gICAgICAgIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xyXG4gICAgICAgIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xyXG4gICAgICAgIG91dFs2XSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xyXG4gICAgICAgIG91dFs3XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xyXG4gICAgICAgIG91dFs4XSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIDJEIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB5b3VyIGdsIGNvbnRleHRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0IG9mIGdsIGNvbnRleHRcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHByb2plY3Rpb24ob3V0LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMiAvIHdpZHRoO1xyXG4gICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG4gICAgICAgIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgb3V0WzZdID0gLTE7XHJcbiAgICAgICAgb3V0WzddID0gMTtcclxuICAgICAgICBvdXRbOF0gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzdHIkMihhKSB7XHJcbiAgICAgICAgcmV0dXJuICdtYXQzKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJywgJyArIGFbNF0gKyAnLCAnICsgYVs1XSArICcsICcgKyBhWzZdICsgJywgJyArIGFbN10gKyAnLCAnICsgYVs4XSArICcpJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9iJDIoYSkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0sIGFbNl0sIGFbN10sIGFbOF0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHR3byBtYXQzJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBhZGQkMihvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdICsgYls0XTtcclxuICAgICAgICBvdXRbNV0gPSBhWzVdICsgYls1XTtcclxuICAgICAgICBvdXRbNl0gPSBhWzZdICsgYls2XTtcclxuICAgICAgICBvdXRbN10gPSBhWzddICsgYls3XTtcclxuICAgICAgICBvdXRbOF0gPSBhWzhdICsgYls4XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDIob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXSAtIGJbM107XHJcbiAgICAgICAgb3V0WzRdID0gYVs0XSAtIGJbNF07XHJcbiAgICAgICAgb3V0WzVdID0gYVs1XSAtIGJbNV07XHJcbiAgICAgICAgb3V0WzZdID0gYVs2XSAtIGJbNl07XHJcbiAgICAgICAgb3V0WzddID0gYVs3XSAtIGJbN107XHJcbiAgICAgICAgb3V0WzhdID0gYVs4XSAtIGJbOF07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBtdWx0aXBseVNjYWxhciQyKG91dCwgYSwgYikge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gKiBiO1xyXG4gICAgICAgIG91dFszXSA9IGFbM10gKiBiO1xyXG4gICAgICAgIG91dFs0XSA9IGFbNF0gKiBiO1xyXG4gICAgICAgIG91dFs1XSA9IGFbNV0gKiBiO1xyXG4gICAgICAgIG91dFs2XSA9IGFbNl0gKiBiO1xyXG4gICAgICAgIG91dFs3XSA9IGFbN10gKiBiO1xyXG4gICAgICAgIG91dFs4XSA9IGFbOF0gKiBiO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdHdvIG1hdDMncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZCQyKG91dCwgYSwgYiwgc2NhbGUpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzVdID0gYVs1XSArIGJbNV0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbNl0gPSBhWzZdICsgYls2XSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFs3XSA9IGFbN10gKyBiWzddICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzhdID0gYVs4XSArIGJbOF0gKiBzY2FsZTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQzfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBleGFjdEVxdWFscyQyKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXSAmJiBhWzRdID09PSBiWzRdICYmIGFbNV0gPT09IGJbNV0gJiYgYVs2XSA9PT0gYls2XSAmJiBhWzddID09PSBiWzddICYmIGFbOF0gPT09IGJbOF07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICAgICAqIEBwYXJhbSB7bWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGVxdWFscyQzKGEsIGIpIHtcclxuICAgICAgICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEyID0gYVsyXSxcclxuICAgICAgICAgICAgYTMgPSBhWzNdLFxyXG4gICAgICAgICAgICBhNCA9IGFbNF0sXHJcbiAgICAgICAgICAgIGE1ID0gYVs1XSxcclxuICAgICAgICAgICAgYTYgPSBhWzZdLFxyXG4gICAgICAgICAgICBhNyA9IGFbN10sXHJcbiAgICAgICAgICAgIGE4ID0gYVs4XTtcclxuICAgICAgICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICAgICAgICBiMSA9IGJbMV0sXHJcbiAgICAgICAgICAgIGIyID0gYlsyXSxcclxuICAgICAgICAgICAgYjMgPSBiWzNdLFxyXG4gICAgICAgICAgICBiNCA9IGJbNF0sXHJcbiAgICAgICAgICAgIGI1ID0gYls1XSxcclxuICAgICAgICAgICAgYjYgPSBiWzZdLFxyXG4gICAgICAgICAgICBiNyA9IGJbN10sXHJcbiAgICAgICAgICAgIGI4ID0gYls4XTtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKSAmJiBNYXRoLmFicyhhOCAtIGI4KSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgbWF0My5tdWx0aXBseX1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIG11bCQyID0gbXVsdGlwbHkkMjtcclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayBtYXQzLnN1YnRyYWN0fVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgc3ViJDIgPSBzdWJ0cmFjdCQyO1xyXG5cclxuICAgIGV4cG9ydCB2YXIgbWF0MyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcclxuICAgICAgICBjcmVhdGU6IGNyZWF0ZSQyLFxyXG4gICAgICAgIGZyb21NYXQ0OiBmcm9tTWF0NCxcclxuICAgICAgICBjbG9uZTogY2xvbmUkMixcclxuICAgICAgICBjb3B5OiBjb3B5JDIsXHJcbiAgICAgICAgZnJvbVZhbHVlczogZnJvbVZhbHVlcyQyLFxyXG4gICAgICAgIHNldDogc2V0JDIsXHJcbiAgICAgICAgaWRlbnRpdHk6IGlkZW50aXR5JDIsXHJcbiAgICAgICAgdHJhbnNwb3NlOiB0cmFuc3Bvc2UkMSxcclxuICAgICAgICBpbnZlcnQ6IGludmVydCQyLFxyXG4gICAgICAgIGFkam9pbnQ6IGFkam9pbnQkMSxcclxuICAgICAgICBkZXRlcm1pbmFudDogZGV0ZXJtaW5hbnQkMixcclxuICAgICAgICBtdWx0aXBseTogbXVsdGlwbHkkMixcclxuICAgICAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSQxLFxyXG4gICAgICAgIHJvdGF0ZTogcm90YXRlJDIsXHJcbiAgICAgICAgc2NhbGU6IHNjYWxlJDIsXHJcbiAgICAgICAgZnJvbVRyYW5zbGF0aW9uOiBmcm9tVHJhbnNsYXRpb24kMSxcclxuICAgICAgICBmcm9tUm90YXRpb246IGZyb21Sb3RhdGlvbiQyLFxyXG4gICAgICAgIGZyb21TY2FsaW5nOiBmcm9tU2NhbGluZyQyLFxyXG4gICAgICAgIGZyb21NYXQyZDogZnJvbU1hdDJkLFxyXG4gICAgICAgIGZyb21RdWF0OiBmcm9tUXVhdCxcclxuICAgICAgICBub3JtYWxGcm9tTWF0NDogbm9ybWFsRnJvbU1hdDQsXHJcbiAgICAgICAgcHJvamVjdGlvbjogcHJvamVjdGlvbixcclxuICAgICAgICBzdHI6IHN0ciQyLFxyXG4gICAgICAgIGZyb2I6IGZyb2IkMixcclxuICAgICAgICBhZGQ6IGFkZCQyLFxyXG4gICAgICAgIHN1YnRyYWN0OiBzdWJ0cmFjdCQyLFxyXG4gICAgICAgIG11bHRpcGx5U2NhbGFyOiBtdWx0aXBseVNjYWxhciQyLFxyXG4gICAgICAgIG11bHRpcGx5U2NhbGFyQW5kQWRkOiBtdWx0aXBseVNjYWxhckFuZEFkZCQyLFxyXG4gICAgICAgIGV4YWN0RXF1YWxzOiBleGFjdEVxdWFscyQyLFxyXG4gICAgICAgIGVxdWFsczogZXF1YWxzJDMsXHJcbiAgICAgICAgbXVsOiBtdWwkMixcclxuICAgICAgICBzdWI6IHN1YiQyXHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIDR4NCBNYXRyaXg8YnI+Rm9ybWF0OiBjb2x1bW4tbWFqb3IsIHdoZW4gdHlwZWQgb3V0IGl0IGxvb2tzIGxpa2Ugcm93LW1ham9yPGJyPlRoZSBtYXRyaWNlcyBhcmUgYmVpbmcgcG9zdCBtdWx0aXBsaWVkLlxyXG4gICAgICogQG1vZHVsZSBtYXQ0XHJcbiAgICAgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0NFxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUkMygpIHtcclxuICAgICAgICB2YXIgb3V0ID0gbmV3IEFSUkFZX1RZUEUoMTYpO1xyXG5cclxuICAgICAgICBpZiAoQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgICAgICAgICAgb3V0WzFdID0gMDtcclxuICAgICAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICAgICAgb3V0WzRdID0gMDtcclxuICAgICAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICAgICAgb3V0WzddID0gMDtcclxuICAgICAgICAgICAgb3V0WzhdID0gMDtcclxuICAgICAgICAgICAgb3V0WzldID0gMDtcclxuICAgICAgICAgICAgb3V0WzExXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFsxMl0gPSAwO1xyXG4gICAgICAgICAgICBvdXRbMTNdID0gMDtcclxuICAgICAgICAgICAgb3V0WzE0XSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRbMF0gPSAxO1xyXG4gICAgICAgIG91dFs1XSA9IDE7XHJcbiAgICAgICAgb3V0WzEwXSA9IDE7XHJcbiAgICAgICAgb3V0WzE1XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtYXQ0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gICAgICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNsb25lJDMoYSkge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSgxNik7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdO1xyXG4gICAgICAgIG91dFs1XSA9IGFbNV07XHJcbiAgICAgICAgb3V0WzZdID0gYVs2XTtcclxuICAgICAgICBvdXRbN10gPSBhWzddO1xyXG4gICAgICAgIG91dFs4XSA9IGFbOF07XHJcbiAgICAgICAgb3V0WzldID0gYVs5XTtcclxuICAgICAgICBvdXRbMTBdID0gYVsxMF07XHJcbiAgICAgICAgb3V0WzExXSA9IGFbMTFdO1xyXG4gICAgICAgIG91dFsxMl0gPSBhWzEyXTtcclxuICAgICAgICBvdXRbMTNdID0gYVsxM107XHJcbiAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gICAgICAgIG91dFsxNV0gPSBhWzE1XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY29weSQzKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF07XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdO1xyXG4gICAgICAgIG91dFszXSA9IGFbM107XHJcbiAgICAgICAgb3V0WzRdID0gYVs0XTtcclxuICAgICAgICBvdXRbNV0gPSBhWzVdO1xyXG4gICAgICAgIG91dFs2XSA9IGFbNl07XHJcbiAgICAgICAgb3V0WzddID0gYVs3XTtcclxuICAgICAgICBvdXRbOF0gPSBhWzhdO1xyXG4gICAgICAgIG91dFs5XSA9IGFbOV07XHJcbiAgICAgICAgb3V0WzEwXSA9IGFbMTBdO1xyXG4gICAgICAgIG91dFsxMV0gPSBhWzExXTtcclxuICAgICAgICBvdXRbMTJdID0gYVsxMl07XHJcbiAgICAgICAgb3V0WzEzXSA9IGFbMTNdO1xyXG4gICAgICAgIG91dFsxNF0gPSBhWzE0XTtcclxuICAgICAgICBvdXRbMTVdID0gYVsxNV07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IG1hdDQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxyXG4gICAgICogQHJldHVybnMge21hdDR9IEEgbmV3IG1hdDRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21WYWx1ZXMkMyhtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcclxuICAgICAgICB2YXIgb3V0ID0gbmV3IEFSUkFZX1RZUEUoMTYpO1xyXG4gICAgICAgIG91dFswXSA9IG0wMDtcclxuICAgICAgICBvdXRbMV0gPSBtMDE7XHJcbiAgICAgICAgb3V0WzJdID0gbTAyO1xyXG4gICAgICAgIG91dFszXSA9IG0wMztcclxuICAgICAgICBvdXRbNF0gPSBtMTA7XHJcbiAgICAgICAgb3V0WzVdID0gbTExO1xyXG4gICAgICAgIG91dFs2XSA9IG0xMjtcclxuICAgICAgICBvdXRbN10gPSBtMTM7XHJcbiAgICAgICAgb3V0WzhdID0gbTIwO1xyXG4gICAgICAgIG91dFs5XSA9IG0yMTtcclxuICAgICAgICBvdXRbMTBdID0gbTIyO1xyXG4gICAgICAgIG91dFsxMV0gPSBtMjM7XHJcbiAgICAgICAgb3V0WzEyXSA9IG0zMDtcclxuICAgICAgICBvdXRbMTNdID0gbTMxO1xyXG4gICAgICAgIG91dFsxNF0gPSBtMzI7XHJcbiAgICAgICAgb3V0WzE1XSA9IG0zMztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQ0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc2V0JDMob3V0LCBtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcclxuICAgICAgICBvdXRbMF0gPSBtMDA7XHJcbiAgICAgICAgb3V0WzFdID0gbTAxO1xyXG4gICAgICAgIG91dFsyXSA9IG0wMjtcclxuICAgICAgICBvdXRbM10gPSBtMDM7XHJcbiAgICAgICAgb3V0WzRdID0gbTEwO1xyXG4gICAgICAgIG91dFs1XSA9IG0xMTtcclxuICAgICAgICBvdXRbNl0gPSBtMTI7XHJcbiAgICAgICAgb3V0WzddID0gbTEzO1xyXG4gICAgICAgIG91dFs4XSA9IG0yMDtcclxuICAgICAgICBvdXRbOV0gPSBtMjE7XHJcbiAgICAgICAgb3V0WzEwXSA9IG0yMjtcclxuICAgICAgICBvdXRbMTFdID0gbTIzO1xyXG4gICAgICAgIG91dFsxMl0gPSBtMzA7XHJcbiAgICAgICAgb3V0WzEzXSA9IG0zMTtcclxuICAgICAgICBvdXRbMTRdID0gbTMyO1xyXG4gICAgICAgIG91dFsxNV0gPSBtMzM7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGEgbWF0NCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGlkZW50aXR5JDMob3V0KSB7XHJcbiAgICAgICAgb3V0ID0gb3V0IHx8IG5ldyBNYXRUeXBlKDE2KTtcclxuICAgICAgICBvdXRbMF0gPSAxO1xyXG4gICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG4gICAgICAgIG91dFs0XSA9IDA7XHJcbiAgICAgICAgb3V0WzVdID0gMTtcclxuICAgICAgICBvdXRbNl0gPSAwO1xyXG4gICAgICAgIG91dFs3XSA9IDA7XHJcbiAgICAgICAgb3V0WzhdID0gMDtcclxuICAgICAgICBvdXRbOV0gPSAwO1xyXG4gICAgICAgIG91dFsxMF0gPSAxO1xyXG4gICAgICAgIG91dFsxMV0gPSAwO1xyXG4gICAgICAgIG91dFsxMl0gPSAwO1xyXG4gICAgICAgIG91dFsxM10gPSAwO1xyXG4gICAgICAgIG91dFsxNF0gPSAwO1xyXG4gICAgICAgIG91dFsxNV0gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0NFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zcG9zZSQyKG91dCwgYSkge1xyXG4gICAgICAgIG91dCA9IG91dCB8fCBuZXcgTWF0VHlwZSgxNik7XHJcbiAgICAgICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xyXG4gICAgICAgIGlmIChvdXQgPT09IGEpIHtcclxuICAgICAgICAgICAgdmFyIGEwMSA9IGFbMV0sXHJcbiAgICAgICAgICAgICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICAgICAgICAgICAgYTAzID0gYVszXTtcclxuICAgICAgICAgICAgdmFyIGExMiA9IGFbNl0sXHJcbiAgICAgICAgICAgICAgICBhMTMgPSBhWzddO1xyXG4gICAgICAgICAgICB2YXIgYTIzID0gYVsxMV07XHJcbiAgICAgICAgICAgIG91dFsxXSA9IGFbNF07XHJcbiAgICAgICAgICAgIG91dFsyXSA9IGFbOF07XHJcbiAgICAgICAgICAgIG91dFszXSA9IGFbMTJdO1xyXG4gICAgICAgICAgICBvdXRbNF0gPSBhMDE7XHJcbiAgICAgICAgICAgIG91dFs2XSA9IGFbOV07XHJcbiAgICAgICAgICAgIG91dFs3XSA9IGFbMTNdO1xyXG4gICAgICAgICAgICBvdXRbOF0gPSBhMDI7XHJcbiAgICAgICAgICAgIG91dFs5XSA9IGExMjtcclxuICAgICAgICAgICAgb3V0WzExXSA9IGFbMTRdO1xyXG4gICAgICAgICAgICBvdXRbMTJdID0gYTAzO1xyXG4gICAgICAgICAgICBvdXRbMTNdID0gYTEzO1xyXG4gICAgICAgICAgICBvdXRbMTRdID0gYTIzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG91dFswXSA9IGFbMF07XHJcbiAgICAgICAgICAgIG91dFsxXSA9IGFbNF07XHJcbiAgICAgICAgICAgIG91dFsyXSA9IGFbOF07XHJcbiAgICAgICAgICAgIG91dFszXSA9IGFbMTJdO1xyXG4gICAgICAgICAgICBvdXRbNF0gPSBhWzFdO1xyXG4gICAgICAgICAgICBvdXRbNV0gPSBhWzVdO1xyXG4gICAgICAgICAgICBvdXRbNl0gPSBhWzldO1xyXG4gICAgICAgICAgICBvdXRbN10gPSBhWzEzXTtcclxuICAgICAgICAgICAgb3V0WzhdID0gYVsyXTtcclxuICAgICAgICAgICAgb3V0WzldID0gYVs2XTtcclxuICAgICAgICAgICAgb3V0WzEwXSA9IGFbMTBdO1xyXG4gICAgICAgICAgICBvdXRbMTFdID0gYVsxNF07XHJcbiAgICAgICAgICAgIG91dFsxMl0gPSBhWzNdO1xyXG4gICAgICAgICAgICBvdXRbMTNdID0gYVs3XTtcclxuICAgICAgICAgICAgb3V0WzE0XSA9IGFbMTFdO1xyXG4gICAgICAgICAgICBvdXRbMTVdID0gYVsxNV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBjcmVhdGVzIGEgbWF0cml4IGZyb20gdHJhbnNsYXRpb24sIHF1YXRlcm5pb24sIHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcltdfSB0cmFuc2xhdGlvbiBbeCwgeSwgel0gdHJhbnNsYXRpb25cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IHF1YXRlcm5pb24gW3gsIHksIHosIHpdIHF1YXRlcm5pb24gcm90YXRpb25cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IHNjYWxlIFt4LCB5LCB6XSBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtNYXRyaXg0fSBbZHN0XSBvcHRpb25hbCBtYXRyaXggdG8gc3RvcmUgcmVzdWx0XHJcbiAgICAgKiBAcmV0dXJuIHtNYXRyaXg0fSBkc3Qgb3IgYSBuZXcgbWF0cml4IGlmIG5vbmUgcHJvdmlkZWRcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY29tcG9zZSh0cmFuc2xhdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUsIGRzdCkge1xyXG4gICAgICAgIGRzdCA9IGRzdCB8fCBuZXcgRmxvYXQzMkFycmF5KDE2KTtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHggPSBxdWF0ZXJuaW9uWzBdO1xyXG4gICAgICAgIGNvbnN0IHkgPSBxdWF0ZXJuaW9uWzFdO1xyXG4gICAgICAgIGNvbnN0IHogPSBxdWF0ZXJuaW9uWzJdO1xyXG4gICAgICAgIGNvbnN0IHcgPSBxdWF0ZXJuaW9uWzNdO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgeDIgPSB4ICsgeDtcclxuICAgICAgICBjb25zdCB5MiA9IHkgKyB5O1xyXG4gICAgICAgIGNvbnN0IHoyID0geiArIHo7XHJcbiAgICBcclxuICAgICAgICBjb25zdCB4eCA9IHggKiB4MjtcclxuICAgICAgICBjb25zdCB4eSA9IHggKiB5MjtcclxuICAgICAgICBjb25zdCB4eiA9IHggKiB6MjtcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IHl5ID0geSAqIHkyO1xyXG4gICAgICAgIGNvbnN0IHl6ID0geSAqIHoyO1xyXG4gICAgICAgIGNvbnN0IHp6ID0geiAqIHoyO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3Qgd3ggPSB3ICogeDI7XHJcbiAgICAgICAgY29uc3Qgd3kgPSB3ICogeTI7XHJcbiAgICAgICAgY29uc3Qgd3ogPSB3ICogejI7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBzeCA9IHNjYWxlWzBdO1xyXG4gICAgICAgIGNvbnN0IHN5ID0gc2NhbGVbMV07XHJcbiAgICAgICAgY29uc3Qgc3ogPSBzY2FsZVsyXTtcclxuICAgIFxyXG4gICAgICAgIGRzdFswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xyXG4gICAgICAgIGRzdFsxXSA9ICh4eSArIHd6KSAqIHN4O1xyXG4gICAgICAgIGRzdFsyXSA9ICh4eiAtIHd5KSAqIHN4O1xyXG4gICAgICAgIGRzdFszXSA9IDA7XHJcbiAgICBcclxuICAgICAgICBkc3RbNF0gPSAoeHkgLSB3eikgKiBzeTtcclxuICAgICAgICBkc3RbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcclxuICAgICAgICBkc3RbNl0gPSAoeXogKyB3eCkgKiBzeTtcclxuICAgICAgICBkc3RbN10gPSAwO1xyXG4gICAgXHJcbiAgICAgICAgZHN0WyA4XSA9ICh4eiArIHd5KSAqIHN6O1xyXG4gICAgICAgIGRzdFsgOV0gPSAoeXogLSB3eCkgKiBzejtcclxuICAgICAgICBkc3RbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XHJcbiAgICAgICAgZHN0WzExXSA9IDA7XHJcbiAgICBcclxuICAgICAgICBkc3RbMTJdID0gdHJhbnNsYXRpb25bMF07XHJcbiAgICAgICAgZHN0WzEzXSA9IHRyYW5zbGF0aW9uWzFdO1xyXG4gICAgICAgIGRzdFsxNF0gPSB0cmFuc2xhdGlvblsyXTtcclxuICAgICAgICBkc3RbMTVdID0gMTtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiBkc3Q7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGRlY29tcG9zZShtYXQsIHRyYW5zbGF0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSkge1xyXG4gICAgICAgIGxldCBzeCA9IGxlbmd0aChtYXQuc2xpY2UoMCwgMykpO1xyXG4gICAgICAgIGNvbnN0IHN5ID0gbGVuZ3RoKG1hdC5zbGljZSg0LCA3KSk7XHJcbiAgICAgICAgY29uc3Qgc3ogPSBsZW5ndGgobWF0LnNsaWNlKDgsIDExKSk7XHJcbiAgICBcclxuICAgICAgICAvLyBpZiBkZXRlcm1pbmF0ZSBpcyBuZWdhdGl2ZSwgd2UgbmVlZCB0byBpbnZlcnQgb25lIHNjYWxlXHJcbiAgICAgICAgY29uc3QgZGV0ID0gZGV0ZXJtaW5hdGUobWF0KTtcclxuICAgICAgICBpZiAoZGV0IDwgMCkge1xyXG4gICAgICAgICAgc3ggPSAtc3g7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgdHJhbnNsYXRpb25bMF0gPSBtYXRbMTJdO1xyXG4gICAgICAgIHRyYW5zbGF0aW9uWzFdID0gbWF0WzEzXTtcclxuICAgICAgICB0cmFuc2xhdGlvblsyXSA9IG1hdFsxNF07XHJcbiAgICBcclxuICAgICAgICAvLyBzY2FsZSB0aGUgcm90YXRpb24gcGFydFxyXG4gICAgICAgIGNvbnN0IG1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgbWF0NC5jb3B5KG1hdHJpeCxtYXQpO1xyXG4gICAgXHJcbiAgICAgICAgY29uc3QgaW52U1ggPSAxIC8gc3g7XHJcbiAgICAgICAgY29uc3QgaW52U1kgPSAxIC8gc3k7XHJcbiAgICAgICAgY29uc3QgaW52U1ogPSAxIC8gc3o7XHJcbiAgICBcclxuICAgICAgICBtYXRyaXhbMF0gKj0gaW52U1g7XHJcbiAgICAgICAgbWF0cml4WzFdICo9IGludlNYO1xyXG4gICAgICAgIG1hdHJpeFsyXSAqPSBpbnZTWDtcclxuICAgIFxyXG4gICAgICAgIG1hdHJpeFs0XSAqPSBpbnZTWTtcclxuICAgICAgICBtYXRyaXhbNV0gKj0gaW52U1k7XHJcbiAgICAgICAgbWF0cml4WzZdICo9IGludlNZO1xyXG4gICAgXHJcbiAgICAgICAgbWF0cml4WzhdICo9IGludlNaO1xyXG4gICAgICAgIG1hdHJpeFs5XSAqPSBpbnZTWjtcclxuICAgICAgICBtYXRyaXhbMTBdICo9IGludlNaO1xyXG4gICAgXHJcbiAgICAgICAgcXVhdEZyb21Sb3RhdGlvbk1hdHJpeChtYXRyaXgsIHF1YXRlcm5pb24pO1xyXG4gICAgXHJcbiAgICAgICAgc2NhbGVbMF0gPSBzeDtcclxuICAgICAgICBzY2FsZVsxXSA9IHN5O1xyXG4gICAgICAgIHNjYWxlWzJdID0gc3o7XHJcbiAgICAgIH1cclxuICAgIFxyXG4gICAgICBmdW5jdGlvbiBkZXRlcm1pbmF0ZShtKSB7XHJcbiAgICAgICAgdmFyIG0wMCA9IG1bMCAqIDQgKyAwXTtcclxuICAgICAgICB2YXIgbTAxID0gbVswICogNCArIDFdO1xyXG4gICAgICAgIHZhciBtMDIgPSBtWzAgKiA0ICsgMl07XHJcbiAgICAgICAgdmFyIG0wMyA9IG1bMCAqIDQgKyAzXTtcclxuICAgICAgICB2YXIgbTEwID0gbVsxICogNCArIDBdO1xyXG4gICAgICAgIHZhciBtMTEgPSBtWzEgKiA0ICsgMV07XHJcbiAgICAgICAgdmFyIG0xMiA9IG1bMSAqIDQgKyAyXTtcclxuICAgICAgICB2YXIgbTEzID0gbVsxICogNCArIDNdO1xyXG4gICAgICAgIHZhciBtMjAgPSBtWzIgKiA0ICsgMF07XHJcbiAgICAgICAgdmFyIG0yMSA9IG1bMiAqIDQgKyAxXTtcclxuICAgICAgICB2YXIgbTIyID0gbVsyICogNCArIDJdO1xyXG4gICAgICAgIHZhciBtMjMgPSBtWzIgKiA0ICsgM107XHJcbiAgICAgICAgdmFyIG0zMCA9IG1bMyAqIDQgKyAwXTtcclxuICAgICAgICB2YXIgbTMxID0gbVszICogNCArIDFdO1xyXG4gICAgICAgIHZhciBtMzIgPSBtWzMgKiA0ICsgMl07XHJcbiAgICAgICAgdmFyIG0zMyA9IG1bMyAqIDQgKyAzXTtcclxuICAgICAgICB2YXIgdG1wXzAgID0gbTIyICogbTMzO1xyXG4gICAgICAgIHZhciB0bXBfMSAgPSBtMzIgKiBtMjM7XHJcbiAgICAgICAgdmFyIHRtcF8yICA9IG0xMiAqIG0zMztcclxuICAgICAgICB2YXIgdG1wXzMgID0gbTMyICogbTEzO1xyXG4gICAgICAgIHZhciB0bXBfNCAgPSBtMTIgKiBtMjM7XHJcbiAgICAgICAgdmFyIHRtcF81ICA9IG0yMiAqIG0xMztcclxuICAgICAgICB2YXIgdG1wXzYgID0gbTAyICogbTMzO1xyXG4gICAgICAgIHZhciB0bXBfNyAgPSBtMzIgKiBtMDM7XHJcbiAgICAgICAgdmFyIHRtcF84ICA9IG0wMiAqIG0yMztcclxuICAgICAgICB2YXIgdG1wXzkgID0gbTIyICogbTAzO1xyXG4gICAgICAgIHZhciB0bXBfMTAgPSBtMDIgKiBtMTM7XHJcbiAgICAgICAgdmFyIHRtcF8xMSA9IG0xMiAqIG0wMztcclxuICAgIFxyXG4gICAgICAgIHZhciB0MCA9ICh0bXBfMCAqIG0xMSArIHRtcF8zICogbTIxICsgdG1wXzQgKiBtMzEpIC1cclxuICAgICAgICAgICAgKHRtcF8xICogbTExICsgdG1wXzIgKiBtMjEgKyB0bXBfNSAqIG0zMSk7XHJcbiAgICAgICAgdmFyIHQxID0gKHRtcF8xICogbTAxICsgdG1wXzYgKiBtMjEgKyB0bXBfOSAqIG0zMSkgLVxyXG4gICAgICAgICAgICAodG1wXzAgKiBtMDEgKyB0bXBfNyAqIG0yMSArIHRtcF84ICogbTMxKTtcclxuICAgICAgICB2YXIgdDIgPSAodG1wXzIgKiBtMDEgKyB0bXBfNyAqIG0xMSArIHRtcF8xMCAqIG0zMSkgLVxyXG4gICAgICAgICAgICAodG1wXzMgKiBtMDEgKyB0bXBfNiAqIG0xMSArIHRtcF8xMSAqIG0zMSk7XHJcbiAgICAgICAgdmFyIHQzID0gKHRtcF81ICogbTAxICsgdG1wXzggKiBtMTEgKyB0bXBfMTEgKiBtMjEpIC1cclxuICAgICAgICAgICAgKHRtcF80ICogbTAxICsgdG1wXzkgKiBtMTEgKyB0bXBfMTAgKiBtMjEpO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIDEuMCAvIChtMDAgKiB0MCArIG0xMCAqIHQxICsgbTIwICogdDIgKyBtMzAgKiB0Myk7XHJcbiAgICAgIH1cclxuICAgICAgZnVuY3Rpb24gcXVhdEZyb21Sb3RhdGlvbk1hdHJpeChtLCBkc3QpIHtcclxuICAgICAgICAvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxyXG4gICAgXHJcbiAgICAgICAgLy8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcclxuICAgICAgICBjb25zdCBtMTEgPSBtWzBdO1xyXG4gICAgICAgIGNvbnN0IG0xMiA9IG1bNF07XHJcbiAgICAgICAgY29uc3QgbTEzID0gbVs4XTtcclxuICAgICAgICBjb25zdCBtMjEgPSBtWzFdO1xyXG4gICAgICAgIGNvbnN0IG0yMiA9IG1bNV07XHJcbiAgICAgICAgY29uc3QgbTIzID0gbVs5XTtcclxuICAgICAgICBjb25zdCBtMzEgPSBtWzJdO1xyXG4gICAgICAgIGNvbnN0IG0zMiA9IG1bNl07XHJcbiAgICAgICAgY29uc3QgbTMzID0gbVsxMF07XHJcbiAgICBcclxuICAgICAgICBjb25zdCB0cmFjZSA9IG0xMSArIG0yMiArIG0zMztcclxuICAgIFxyXG4gICAgICAgIGlmICh0cmFjZSA+IDApIHtcclxuICAgICAgICAgIGNvbnN0IHMgPSAwLjUgLyBNYXRoLnNxcnQodHJhY2UgKyAxKTtcclxuICAgICAgICAgIGRzdFszXSA9IDAuMjUgLyBzO1xyXG4gICAgICAgICAgZHN0WzBdID0gKG0zMiAtIG0yMykgKiBzO1xyXG4gICAgICAgICAgZHN0WzFdID0gKG0xMyAtIG0zMSkgKiBzO1xyXG4gICAgICAgICAgZHN0WzJdID0gKG0yMSAtIG0xMikgKiBzO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobTExID4gbTIyICYmIG0xMSA+IG0zMykge1xyXG4gICAgICAgICAgY29uc3QgcyA9IDIgKiBNYXRoLnNxcnQoMSArIG0xMSAtIG0yMiAtIG0zMyk7XHJcbiAgICAgICAgICBkc3RbM10gPSAobTMyIC0gbTIzKSAvIHM7XHJcbiAgICAgICAgICBkc3RbMF0gPSAwLjI1ICogcztcclxuICAgICAgICAgIGRzdFsxXSA9IChtMTIgKyBtMjEpIC8gcztcclxuICAgICAgICAgIGRzdFsyXSA9IChtMTMgKyBtMzEpIC8gcztcclxuICAgICAgICB9IGVsc2UgaWYgKG0yMiA+IG0zMykge1xyXG4gICAgICAgICAgY29uc3QgcyA9IDIgKiBNYXRoLnNxcnQoMSArIG0yMiAtIG0xMSAtIG0zMyk7XHJcbiAgICAgICAgICBkc3RbM10gPSAobTEzIC0gbTMxKSAvIHM7XHJcbiAgICAgICAgICBkc3RbMF0gPSAobTEyICsgbTIxKSAvIHM7XHJcbiAgICAgICAgICBkc3RbMV0gPSAwLjI1ICogcztcclxuICAgICAgICAgIGRzdFsyXSA9IChtMjMgKyBtMzIpIC8gcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgcyA9IDIgKiBNYXRoLnNxcnQoMSArIG0zMyAtIG0xMSAtIG0yMik7XHJcbiAgICAgICAgICBkc3RbM10gPSAobTIxIC0gbTEyKSAvIHM7XHJcbiAgICAgICAgICBkc3RbMF0gPSAobTEzICsgbTMxKSAvIHM7XHJcbiAgICAgICAgICBkc3RbMV0gPSAobTIzICsgbTMyKSAvIHM7XHJcbiAgICAgICAgICBkc3RbMl0gPSAwLjI1ICogcztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEludmVydHMgYSBtYXQ0XHJcbiAgICAgKiDmsYLkuIDkuKrnn6npmLXnmoTpgIbnn6npmLVcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGludmVydCQzKG91dCwgYSkge1xyXG4gICAgICAgIG91dCA9IG91dCB8fCBuZXcgTWF0VHlwZSgxNik7XHJcbiAgICAgICAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGEwMyA9IGFbM107XHJcbiAgICAgICAgdmFyIGExMCA9IGFbNF0sXHJcbiAgICAgICAgICAgIGExMSA9IGFbNV0sXHJcbiAgICAgICAgICAgIGExMiA9IGFbNl0sXHJcbiAgICAgICAgICAgIGExMyA9IGFbN107XHJcbiAgICAgICAgdmFyIGEyMCA9IGFbOF0sXHJcbiAgICAgICAgICAgIGEyMSA9IGFbOV0sXHJcbiAgICAgICAgICAgIGEyMiA9IGFbMTBdLFxyXG4gICAgICAgICAgICBhMjMgPSBhWzExXTtcclxuICAgICAgICB2YXIgYTMwID0gYVsxMl0sXHJcbiAgICAgICAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICAgICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgICAgICAgYTMzID0gYVsxNV07XHJcbiAgICAgICAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcclxuICAgICAgICB2YXIgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xyXG4gICAgICAgIHZhciBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XHJcbiAgICAgICAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcclxuICAgICAgICB2YXIgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xyXG4gICAgICAgIHZhciBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XHJcbiAgICAgICAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcclxuICAgICAgICB2YXIgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xyXG4gICAgICAgIHZhciBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XHJcbiAgICAgICAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcclxuICAgICAgICB2YXIgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xyXG4gICAgICAgIHZhciBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcclxuXHJcbiAgICAgICAgdmFyIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcclxuXHJcbiAgICAgICAgaWYgKCFkZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZXQgPSAxLjAgLyBkZXQ7XHJcbiAgICAgICAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzFdID0gKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzRdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzVdID0gKGEwMCAqIGIxMSAtIGEwMiAqIGIwOCArIGEwMyAqIGIwNykgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzEwXSA9IChhMzAgKiBiMDQgLSBhMzEgKiBiMDIgKyBhMzMgKiBiMDApICogZGV0O1xyXG4gICAgICAgIG91dFsxMV0gPSAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldDtcclxuICAgICAgICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XHJcbiAgICAgICAgb3V0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogZGV0O1xyXG4gICAgICAgIG91dFsxNF0gPSAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldDtcclxuICAgICAgICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQ0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gYWRqb2ludCQyKG91dCwgYSkge1xyXG4gICAgICAgIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMDMgPSBhWzNdO1xyXG4gICAgICAgIHZhciBhMTAgPSBhWzRdLFxyXG4gICAgICAgICAgICBhMTEgPSBhWzVdLFxyXG4gICAgICAgICAgICBhMTIgPSBhWzZdLFxyXG4gICAgICAgICAgICBhMTMgPSBhWzddO1xyXG4gICAgICAgIHZhciBhMjAgPSBhWzhdLFxyXG4gICAgICAgICAgICBhMjEgPSBhWzldLFxyXG4gICAgICAgICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgICAgICAgYTIzID0gYVsxMV07XHJcbiAgICAgICAgdmFyIGEzMCA9IGFbMTJdLFxyXG4gICAgICAgICAgICBhMzEgPSBhWzEzXSxcclxuICAgICAgICAgICAgYTMyID0gYVsxNF0sXHJcbiAgICAgICAgICAgIGEzMyA9IGFbMTVdO1xyXG4gICAgICAgIG91dFswXSA9IGExMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKTtcclxuICAgICAgICBvdXRbMV0gPSAtKGEwMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSk7XHJcbiAgICAgICAgb3V0WzJdID0gYTAxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTEgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpO1xyXG4gICAgICAgIG91dFszXSA9IC0oYTAxICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcclxuICAgICAgICBvdXRbNF0gPSAtKGExMCAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSk7XHJcbiAgICAgICAgb3V0WzVdID0gYTAwICogKGEyMiAqIGEzMyAtIGEyMyAqIGEzMikgLSBhMjAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpO1xyXG4gICAgICAgIG91dFs2XSA9IC0oYTAwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcclxuICAgICAgICBvdXRbN10gPSBhMDAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMCAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XHJcbiAgICAgICAgb3V0WzhdID0gYTEwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMzIC0gYTEzICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjMgLSBhMTMgKiBhMjEpO1xyXG4gICAgICAgIG91dFs5XSA9IC0oYTAwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpKTtcclxuICAgICAgICBvdXRbMTBdID0gYTAwICogKGExMSAqIGEzMyAtIGExMyAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpO1xyXG4gICAgICAgIG91dFsxMV0gPSAtKGEwMCAqIChhMTEgKiBhMjMgLSBhMTMgKiBhMjEpIC0gYTEwICogKGEwMSAqIGEyMyAtIGEwMyAqIGEyMSkgKyBhMjAgKiAoYTAxICogYTEzIC0gYTAzICogYTExKSk7XHJcbiAgICAgICAgb3V0WzEyXSA9IC0oYTEwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpKTtcclxuICAgICAgICBvdXRbMTNdID0gYTAwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjIgLSBhMDIgKiBhMjEpO1xyXG4gICAgICAgIG91dFsxNF0gPSAtKGEwMCAqIChhMTEgKiBhMzIgLSBhMTIgKiBhMzEpIC0gYTEwICogKGEwMSAqIGEzMiAtIGEwMiAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTEyIC0gYTAyICogYTExKSk7XHJcbiAgICAgICAgb3V0WzE1XSA9IGEwMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpIC0gYTEwICogKGEwMSAqIGEyMiAtIGEwMiAqIGEyMSkgKyBhMjAgKiAoYTAxICogYTEyIC0gYTAyICogYTExKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGRldGVybWluYW50JDMoYSkge1xyXG4gICAgICAgIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMDMgPSBhWzNdO1xyXG4gICAgICAgIHZhciBhMTAgPSBhWzRdLFxyXG4gICAgICAgICAgICBhMTEgPSBhWzVdLFxyXG4gICAgICAgICAgICBhMTIgPSBhWzZdLFxyXG4gICAgICAgICAgICBhMTMgPSBhWzddO1xyXG4gICAgICAgIHZhciBhMjAgPSBhWzhdLFxyXG4gICAgICAgICAgICBhMjEgPSBhWzldLFxyXG4gICAgICAgICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgICAgICAgYTIzID0gYVsxMV07XHJcbiAgICAgICAgdmFyIGEzMCA9IGFbMTJdLFxyXG4gICAgICAgICAgICBhMzEgPSBhWzEzXSxcclxuICAgICAgICAgICAgYTMyID0gYVsxNF0sXHJcbiAgICAgICAgICAgIGEzMyA9IGFbMTVdO1xyXG4gICAgICAgIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XHJcbiAgICAgICAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcclxuICAgICAgICB2YXIgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xyXG4gICAgICAgIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XHJcbiAgICAgICAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcclxuICAgICAgICB2YXIgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xyXG4gICAgICAgIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XHJcbiAgICAgICAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcclxuICAgICAgICB2YXIgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xyXG4gICAgICAgIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XHJcbiAgICAgICAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcclxuICAgICAgICB2YXIgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyOyAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XHJcblxyXG4gICAgICAgIHJldHVybiBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE11bHRpcGxpZXMgdHdvIG1hdDRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkkMyhvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXQgPSBvdXQgfHwgbmV3IE1hdFR5cGUoMTYpO1xyXG4gICAgICAgIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICAgICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMDMgPSBhWzNdO1xyXG4gICAgICAgIHZhciBhMTAgPSBhWzRdLFxyXG4gICAgICAgICAgICBhMTEgPSBhWzVdLFxyXG4gICAgICAgICAgICBhMTIgPSBhWzZdLFxyXG4gICAgICAgICAgICBhMTMgPSBhWzddO1xyXG4gICAgICAgIHZhciBhMjAgPSBhWzhdLFxyXG4gICAgICAgICAgICBhMjEgPSBhWzldLFxyXG4gICAgICAgICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgICAgICAgYTIzID0gYVsxMV07XHJcbiAgICAgICAgdmFyIGEzMCA9IGFbMTJdLFxyXG4gICAgICAgICAgICBhMzEgPSBhWzEzXSxcclxuICAgICAgICAgICAgYTMyID0gYVsxNF0sXHJcbiAgICAgICAgICAgIGEzMyA9IGFbMTVdOyAvLyBDYWNoZSBvbmx5IHRoZSBjdXJyZW50IGxpbmUgb2YgdGhlIHNlY29uZCBtYXRyaXhcclxuXHJcbiAgICAgICAgdmFyIGIwID0gYlswXSxcclxuICAgICAgICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICAgICAgICBiMiA9IGJbMl0sXHJcbiAgICAgICAgICAgIGIzID0gYlszXTtcclxuICAgICAgICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgICAgICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICAgICAgICBvdXRbMl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcclxuICAgICAgICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuICAgICAgICBiMCA9IGJbNF07XHJcbiAgICAgICAgYjEgPSBiWzVdO1xyXG4gICAgICAgIGIyID0gYls2XTtcclxuICAgICAgICBiMyA9IGJbN107XHJcbiAgICAgICAgb3V0WzRdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICAgICAgb3V0WzVdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICAgICAgb3V0WzZdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgICAgICAgb3V0WzddID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcbiAgICAgICAgYjAgPSBiWzhdO1xyXG4gICAgICAgIGIxID0gYls5XTtcclxuICAgICAgICBiMiA9IGJbMTBdO1xyXG4gICAgICAgIGIzID0gYlsxMV07XHJcbiAgICAgICAgb3V0WzhdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgICAgICAgb3V0WzldID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICAgICAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgICAgIG91dFsxMV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuICAgICAgICBiMCA9IGJbMTJdO1xyXG4gICAgICAgIGIxID0gYlsxM107XHJcbiAgICAgICAgYjIgPSBiWzE0XTtcclxuICAgICAgICBiMyA9IGJbMTVdO1xyXG4gICAgICAgIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICAgICAgICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgICAgICAgb3V0WzE0XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gICAgICAgIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2xhdGUgYSBtYXQ0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlJDIob3V0LCBhLCB2OmFueVtdKSB7XHJcbiAgICAgICAgb3V0ID0gb3V0IHx8IG5ldyBNYXRUeXBlKDE2KTtcclxuICAgICAgICB2YXIgeCA9IHZbMF0sXHJcbiAgICAgICAgICAgIHkgPSB2WzFdLFxyXG4gICAgICAgICAgICB6ID0gdlsyXTtcclxuICAgICAgICB2YXIgYTAwLCBhMDEsIGEwMiwgYTAzO1xyXG4gICAgICAgIHZhciBhMTAsIGExMSwgYTEyLCBhMTM7XHJcbiAgICAgICAgdmFyIGEyMCwgYTIxLCBhMjIsIGEyMztcclxuXHJcbiAgICAgICAgaWYgKGEgPT09IG91dCkge1xyXG4gICAgICAgICAgICBvdXRbMTJdID0gYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl07XHJcbiAgICAgICAgICAgIG91dFsxM10gPSBhWzFdICogeCArIGFbNV0gKiB5ICsgYVs5XSAqIHogKyBhWzEzXTtcclxuICAgICAgICAgICAgb3V0WzE0XSA9IGFbMl0gKiB4ICsgYVs2XSAqIHkgKyBhWzEwXSAqIHogKyBhWzE0XTtcclxuICAgICAgICAgICAgb3V0WzE1XSA9IGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhMDAgPSBhWzBdO1xyXG4gICAgICAgICAgICBhMDEgPSBhWzFdO1xyXG4gICAgICAgICAgICBhMDIgPSBhWzJdO1xyXG4gICAgICAgICAgICBhMDMgPSBhWzNdO1xyXG4gICAgICAgICAgICBhMTAgPSBhWzRdO1xyXG4gICAgICAgICAgICBhMTEgPSBhWzVdO1xyXG4gICAgICAgICAgICBhMTIgPSBhWzZdO1xyXG4gICAgICAgICAgICBhMTMgPSBhWzddO1xyXG4gICAgICAgICAgICBhMjAgPSBhWzhdO1xyXG4gICAgICAgICAgICBhMjEgPSBhWzldO1xyXG4gICAgICAgICAgICBhMjIgPSBhWzEwXTtcclxuICAgICAgICAgICAgYTIzID0gYVsxMV07XHJcbiAgICAgICAgICAgIG91dFswXSA9IGEwMDtcclxuICAgICAgICAgICAgb3V0WzFdID0gYTAxO1xyXG4gICAgICAgICAgICBvdXRbMl0gPSBhMDI7XHJcbiAgICAgICAgICAgIG91dFszXSA9IGEwMztcclxuICAgICAgICAgICAgb3V0WzRdID0gYTEwO1xyXG4gICAgICAgICAgICBvdXRbNV0gPSBhMTE7XHJcbiAgICAgICAgICAgIG91dFs2XSA9IGExMjtcclxuICAgICAgICAgICAgb3V0WzddID0gYTEzO1xyXG4gICAgICAgICAgICBvdXRbOF0gPSBhMjA7XHJcbiAgICAgICAgICAgIG91dFs5XSA9IGEyMTtcclxuICAgICAgICAgICAgb3V0WzEwXSA9IGEyMjtcclxuICAgICAgICAgICAgb3V0WzExXSA9IGEyMztcclxuICAgICAgICAgICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xyXG4gICAgICAgICAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XHJcbiAgICAgICAgICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTtcclxuICAgICAgICAgICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ha2VzIGEgc2NhbGUgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3ggeCBzY2FsZS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzeSB5IHNjYWxlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN6IHogc2NhbGUuXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeDR9IFtkc3RdIG9wdGlvbmFsIG1hdHJpeCB0byBzdG9yZSByZXN1bHRcclxuICAgICAqIEByZXR1cm4ge01hdHJpeDR9IGRzdCBvciBhIG5ldyBtYXRyaXggaWYgbm9uZSBwcm92aWRlZFxyXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTp3ZWJnbC0zZC1tYXRoXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHNjYWxpbmcoZHN0LHN4LCBzeSwgc3opIHtcclxuICAgICAgICBkc3QgPSBkc3QgfHwgbmV3IE1hdFR5cGUoMTYpO1xyXG4gICAgXHJcbiAgICAgICAgZHN0WyAwXSA9IHN4O1xyXG4gICAgICAgIGRzdFsgMV0gPSAwO1xyXG4gICAgICAgIGRzdFsgMl0gPSAwO1xyXG4gICAgICAgIGRzdFsgM10gPSAwO1xyXG4gICAgICAgIGRzdFsgNF0gPSAwO1xyXG4gICAgICAgIGRzdFsgNV0gPSBzeTtcclxuICAgICAgICBkc3RbIDZdID0gMDtcclxuICAgICAgICBkc3RbIDddID0gMDtcclxuICAgICAgICBkc3RbIDhdID0gMDtcclxuICAgICAgICBkc3RbIDldID0gMDtcclxuICAgICAgICBkc3RbMTBdID0gc3o7XHJcbiAgICAgICAgZHN0WzExXSA9IDA7XHJcbiAgICAgICAgZHN0WzEyXSA9IDA7XHJcbiAgICAgICAgZHN0WzEzXSA9IDA7XHJcbiAgICAgICAgZHN0WzE0XSA9IDA7XHJcbiAgICAgICAgZHN0WzE1XSA9IDE7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gZHN0O1xyXG4gICAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTY2FsZXMgdGhlIG1hdDQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzMgbm90IHVzaW5nIHZlY3Rvcml6YXRpb25cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcclxuICAgICAqIEBwYXJhbSB7dmVjM30gdiB0aGUgdmVjMyB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAgICAgKiovXHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGUkMyhvdXQsIGEsIHYpIHtcclxuICAgICAgICB2YXIgeCA9IHZbMF0sXHJcbiAgICAgICAgICAgIHkgPSB2WzFdLFxyXG4gICAgICAgICAgICB6ID0gdlsyXTtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICogeDtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICogeDtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICogeDtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICogeDtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdICogeTtcclxuICAgICAgICBvdXRbNV0gPSBhWzVdICogeTtcclxuICAgICAgICBvdXRbNl0gPSBhWzZdICogeTtcclxuICAgICAgICBvdXRbN10gPSBhWzddICogeTtcclxuICAgICAgICBvdXRbOF0gPSBhWzhdICogejtcclxuICAgICAgICBvdXRbOV0gPSBhWzldICogejtcclxuICAgICAgICBvdXRbMTBdID0gYVsxMF0gKiB6O1xyXG4gICAgICAgIG91dFsxMV0gPSBhWzExXSAqIHo7XHJcbiAgICAgICAgb3V0WzEyXSA9IGFbMTJdO1xyXG4gICAgICAgIG91dFsxM10gPSBhWzEzXTtcclxuICAgICAgICBvdXRbMTRdID0gYVsxNF07XHJcbiAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJvdGF0ZXMgYSBtYXQ0IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIGdpdmVuIGF4aXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGF0ZSQzKG91dCwgYSwgcmFkLCBheGlzKSB7XHJcbiAgICAgICAgdmFyIHggPSBheGlzWzBdLFxyXG4gICAgICAgICAgICB5ID0gYXhpc1sxXSxcclxuICAgICAgICAgICAgeiA9IGF4aXNbMl07XHJcbiAgICAgICAgdmFyIGxlbiA9IE1hdGguaHlwb3QoeCwgeSwgeik7XHJcbiAgICAgICAgdmFyIHMsIGMsIHQ7XHJcbiAgICAgICAgdmFyIGEwMCwgYTAxLCBhMDIsIGEwMztcclxuICAgICAgICB2YXIgYTEwLCBhMTEsIGExMiwgYTEzO1xyXG4gICAgICAgIHZhciBhMjAsIGEyMSwgYTIyLCBhMjM7XHJcbiAgICAgICAgdmFyIGIwMCwgYjAxLCBiMDI7XHJcbiAgICAgICAgdmFyIGIxMCwgYjExLCBiMTI7XHJcbiAgICAgICAgdmFyIGIyMCwgYjIxLCBiMjI7XHJcblxyXG4gICAgICAgIGlmIChsZW4gPCBFUFNJTE9OKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGVuID0gMSAvIGxlbjtcclxuICAgICAgICB4ICo9IGxlbjtcclxuICAgICAgICB5ICo9IGxlbjtcclxuICAgICAgICB6ICo9IGxlbjtcclxuICAgICAgICBzID0gTWF0aC5zaW4ocmFkKTtcclxuICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcclxuICAgICAgICB0ID0gMSAtIGM7XHJcbiAgICAgICAgYTAwID0gYVswXTtcclxuICAgICAgICBhMDEgPSBhWzFdO1xyXG4gICAgICAgIGEwMiA9IGFbMl07XHJcbiAgICAgICAgYTAzID0gYVszXTtcclxuICAgICAgICBhMTAgPSBhWzRdO1xyXG4gICAgICAgIGExMSA9IGFbNV07XHJcbiAgICAgICAgYTEyID0gYVs2XTtcclxuICAgICAgICBhMTMgPSBhWzddO1xyXG4gICAgICAgIGEyMCA9IGFbOF07XHJcbiAgICAgICAgYTIxID0gYVs5XTtcclxuICAgICAgICBhMjIgPSBhWzEwXTtcclxuICAgICAgICBhMjMgPSBhWzExXTsgLy8gQ29uc3RydWN0IHRoZSBlbGVtZW50cyBvZiB0aGUgcm90YXRpb24gbWF0cml4XHJcblxyXG4gICAgICAgIGIwMCA9IHggKiB4ICogdCArIGM7XHJcbiAgICAgICAgYjAxID0geSAqIHggKiB0ICsgeiAqIHM7XHJcbiAgICAgICAgYjAyID0geiAqIHggKiB0IC0geSAqIHM7XHJcbiAgICAgICAgYjEwID0geCAqIHkgKiB0IC0geiAqIHM7XHJcbiAgICAgICAgYjExID0geSAqIHkgKiB0ICsgYztcclxuICAgICAgICBiMTIgPSB6ICogeSAqIHQgKyB4ICogcztcclxuICAgICAgICBiMjAgPSB4ICogeiAqIHQgKyB5ICogcztcclxuICAgICAgICBiMjEgPSB5ICogeiAqIHQgLSB4ICogcztcclxuICAgICAgICBiMjIgPSB6ICogeiAqIHQgKyBjOyAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG5cclxuICAgICAgICBvdXRbMF0gPSBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDI7XHJcbiAgICAgICAgb3V0WzFdID0gYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyO1xyXG4gICAgICAgIG91dFsyXSA9IGEwMiAqIGIwMCArIGExMiAqIGIwMSArIGEyMiAqIGIwMjtcclxuICAgICAgICBvdXRbM10gPSBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDI7XHJcbiAgICAgICAgb3V0WzRdID0gYTAwICogYjEwICsgYTEwICogYjExICsgYTIwICogYjEyO1xyXG4gICAgICAgIG91dFs1XSA9IGEwMSAqIGIxMCArIGExMSAqIGIxMSArIGEyMSAqIGIxMjtcclxuICAgICAgICBvdXRbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XHJcbiAgICAgICAgb3V0WzddID0gYTAzICogYjEwICsgYTEzICogYjExICsgYTIzICogYjEyO1xyXG4gICAgICAgIG91dFs4XSA9IGEwMCAqIGIyMCArIGExMCAqIGIyMSArIGEyMCAqIGIyMjtcclxuICAgICAgICBvdXRbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XHJcbiAgICAgICAgb3V0WzEwXSA9IGEwMiAqIGIyMCArIGExMiAqIGIyMSArIGEyMiAqIGIyMjtcclxuICAgICAgICBvdXRbMTFdID0gYTAzICogYjIwICsgYTEzICogYjIxICsgYTIzICogYjIyO1xyXG5cclxuICAgICAgICBpZiAoYSAhPT0gb3V0KSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XHJcbiAgICAgICAgICAgIG91dFsxMl0gPSBhWzEyXTtcclxuICAgICAgICAgICAgb3V0WzEzXSA9IGFbMTNdO1xyXG4gICAgICAgICAgICBvdXRbMTRdID0gYVsxNF07XHJcbiAgICAgICAgICAgIG91dFsxNV0gPSBhWzE1XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWCBheGlzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQ6bnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xyXG4gICAgICAgIHZhciBjID0gTWF0aC5jb3MocmFkKTtcclxuICAgICAgICB2YXIgYTEwID0gYVs0XTtcclxuICAgICAgICB2YXIgYTExID0gYVs1XTtcclxuICAgICAgICB2YXIgYTEyID0gYVs2XTtcclxuICAgICAgICB2YXIgYTEzID0gYVs3XTtcclxuICAgICAgICB2YXIgYTIwID0gYVs4XTtcclxuICAgICAgICB2YXIgYTIxID0gYVs5XTtcclxuICAgICAgICB2YXIgYTIyID0gYVsxMF07XHJcbiAgICAgICAgdmFyIGEyMyA9IGFbMTFdO1xyXG5cclxuICAgICAgICBpZiAoYSAhPT0gb3V0KSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIHJvd3NcclxuICAgICAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICAgICAgb3V0WzFdID0gYVsxXTtcclxuICAgICAgICAgICAgb3V0WzJdID0gYVsyXTtcclxuICAgICAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICAgICAgb3V0WzEyXSA9IGFbMTJdO1xyXG4gICAgICAgICAgICBvdXRbMTNdID0gYVsxM107XHJcbiAgICAgICAgICAgIG91dFsxNF0gPSBhWzE0XTtcclxuICAgICAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gICAgICAgIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG5cclxuXHJcbiAgICAgICAgb3V0WzRdID0gYTEwICogYyArIGEyMCAqIHM7XHJcbiAgICAgICAgb3V0WzVdID0gYTExICogYyArIGEyMSAqIHM7XHJcbiAgICAgICAgb3V0WzZdID0gYTEyICogYyArIGEyMiAqIHM7XHJcbiAgICAgICAgb3V0WzddID0gYTEzICogYyArIGEyMyAqIHM7XHJcbiAgICAgICAgb3V0WzhdID0gYTIwICogYyAtIGExMCAqIHM7XHJcbiAgICAgICAgb3V0WzldID0gYTIxICogYyAtIGExMSAqIHM7XHJcbiAgICAgICAgb3V0WzEwXSA9IGEyMiAqIGMgLSBhMTIgKiBzO1xyXG4gICAgICAgIG91dFsxMV0gPSBhMjMgKiBjIC0gYTEzICogcztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFkgYXhpc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XHJcbiAgICAgICAgb3V0ID0gb3V0IHx8IG5ldyBNYXRUeXBlKDE2KTtcclxuICAgICAgICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gICAgICAgIHZhciBhMDAgPSBhWzBdO1xyXG4gICAgICAgIHZhciBhMDEgPSBhWzFdO1xyXG4gICAgICAgIHZhciBhMDIgPSBhWzJdO1xyXG4gICAgICAgIHZhciBhMDMgPSBhWzNdO1xyXG4gICAgICAgIHZhciBhMjAgPSBhWzhdO1xyXG4gICAgICAgIHZhciBhMjEgPSBhWzldO1xyXG4gICAgICAgIHZhciBhMjIgPSBhWzEwXTtcclxuICAgICAgICB2YXIgYTIzID0gYVsxMV07XHJcblxyXG4gICAgICAgIGlmIChhICE9PSBvdXQpIHtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xyXG4gICAgICAgICAgICBvdXRbNF0gPSBhWzRdO1xyXG4gICAgICAgICAgICBvdXRbNV0gPSBhWzVdO1xyXG4gICAgICAgICAgICBvdXRbNl0gPSBhWzZdO1xyXG4gICAgICAgICAgICBvdXRbN10gPSBhWzddO1xyXG4gICAgICAgICAgICBvdXRbMTJdID0gYVsxMl07XHJcbiAgICAgICAgICAgIG91dFsxM10gPSBhWzEzXTtcclxuICAgICAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gICAgICAgICAgICBvdXRbMTVdID0gYVsxNV07XHJcbiAgICAgICAgfSAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcblxyXG5cclxuICAgICAgICBvdXRbMF0gPSBhMDAgKiBjIC0gYTIwICogcztcclxuICAgICAgICBvdXRbMV0gPSBhMDEgKiBjIC0gYTIxICogcztcclxuICAgICAgICBvdXRbMl0gPSBhMDIgKiBjIC0gYTIyICogcztcclxuICAgICAgICBvdXRbM10gPSBhMDMgKiBjIC0gYTIzICogcztcclxuICAgICAgICBvdXRbOF0gPSBhMDAgKiBzICsgYTIwICogYztcclxuICAgICAgICBvdXRbOV0gPSBhMDEgKiBzICsgYTIxICogYztcclxuICAgICAgICBvdXRbMTBdID0gYTAyICogcyArIGEyMiAqIGM7XHJcbiAgICAgICAgb3V0WzExXSA9IGEwMyAqIHMgKyBhMjMgKiBjO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcclxuICAgICAgICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gICAgICAgIHZhciBhMDAgPSBhWzBdO1xyXG4gICAgICAgIHZhciBhMDEgPSBhWzFdO1xyXG4gICAgICAgIHZhciBhMDIgPSBhWzJdO1xyXG4gICAgICAgIHZhciBhMDMgPSBhWzNdO1xyXG4gICAgICAgIHZhciBhMTAgPSBhWzRdO1xyXG4gICAgICAgIHZhciBhMTEgPSBhWzVdO1xyXG4gICAgICAgIHZhciBhMTIgPSBhWzZdO1xyXG4gICAgICAgIHZhciBhMTMgPSBhWzddO1xyXG5cclxuICAgICAgICBpZiAoYSAhPT0gb3V0KSB7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XHJcbiAgICAgICAgICAgIG91dFs4XSA9IGFbOF07XHJcbiAgICAgICAgICAgIG91dFs5XSA9IGFbOV07XHJcbiAgICAgICAgICAgIG91dFsxMF0gPSBhWzEwXTtcclxuICAgICAgICAgICAgb3V0WzExXSA9IGFbMTFdO1xyXG4gICAgICAgICAgICBvdXRbMTJdID0gYVsxMl07XHJcbiAgICAgICAgICAgIG91dFsxM10gPSBhWzEzXTtcclxuICAgICAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gICAgICAgICAgICBvdXRbMTVdID0gYVsxNV07XHJcbiAgICAgICAgfSAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcblxyXG5cclxuICAgICAgICBvdXRbMF0gPSBhMDAgKiBjICsgYTEwICogcztcclxuICAgICAgICBvdXRbMV0gPSBhMDEgKiBjICsgYTExICogcztcclxuICAgICAgICBvdXRbMl0gPSBhMDIgKiBjICsgYTEyICogcztcclxuICAgICAgICBvdXRbM10gPSBhMDMgKiBjICsgYTEzICogcztcclxuICAgICAgICBvdXRbNF0gPSBhMTAgKiBjIC0gYTAwICogcztcclxuICAgICAgICBvdXRbNV0gPSBhMTEgKiBjIC0gYTAxICogcztcclxuICAgICAgICBvdXRbNl0gPSBhMTIgKiBjIC0gYTAyICogcztcclxuICAgICAgICBvdXRbN10gPSBhMTMgKiBjIC0gYTAzICogcztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gICAgICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uJDIob3V0LCB2KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMTtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IDE7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IDA7XHJcbiAgICAgICAgb3V0WzldID0gMDtcclxuICAgICAgICBvdXRbMTBdID0gMTtcclxuICAgICAgICBvdXRbMTFdID0gMDtcclxuICAgICAgICBvdXRbMTJdID0gdlswXTtcclxuICAgICAgICBvdXRbMTNdID0gdlsxXTtcclxuICAgICAgICBvdXRbMTRdID0gdlsyXTtcclxuICAgICAgICBvdXRbMTVdID0gMTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xyXG4gICAgICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAgICAgKlxyXG4gICAgICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAgICAgKiAgICAgbWF0NC5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7dmVjM30gdiBTY2FsaW5nIHZlY3RvclxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVNjYWxpbmckMyhvdXQsIHYpIHtcclxuICAgICAgICBvdXRbMF0gPSB2WzBdO1xyXG4gICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG4gICAgICAgIG91dFs0XSA9IDA7XHJcbiAgICAgICAgb3V0WzVdID0gdlsxXTtcclxuICAgICAgICBvdXRbNl0gPSAwO1xyXG4gICAgICAgIG91dFs3XSA9IDA7XHJcbiAgICAgICAgb3V0WzhdID0gMDtcclxuICAgICAgICBvdXRbOV0gPSAwO1xyXG4gICAgICAgIG91dFsxMF0gPSB2WzJdO1xyXG4gICAgICAgIG91dFsxMV0gPSAwO1xyXG4gICAgICAgIG91dFsxMl0gPSAwO1xyXG4gICAgICAgIG91dFsxM10gPSAwO1xyXG4gICAgICAgIG91dFsxNF0gPSAwO1xyXG4gICAgICAgIG91dFsxNV0gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlIGFyb3VuZCBhIGdpdmVuIGF4aXNcclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gICAgICogICAgIG1hdDQucm90YXRlKGRlc3QsIGRlc3QsIHJhZCwgYXhpcyk7XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYXhpcyB0aGUgYXhpcyB0byByb3RhdGUgYXJvdW5kXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9tUm90YXRpb24kMyhvdXQsIHJhZCwgYXhpcykge1xyXG4gICAgICAgIHZhciB4ID0gYXhpc1swXSxcclxuICAgICAgICAgICAgeSA9IGF4aXNbMV0sXHJcbiAgICAgICAgICAgIHogPSBheGlzWzJdO1xyXG4gICAgICAgIHZhciBsZW4gPSBNYXRoLmh5cG90KHgsIHksIHopO1xyXG4gICAgICAgIHZhciBzLCBjLCB0O1xyXG5cclxuICAgICAgICBpZiAobGVuIDwgRVBTSUxPTikge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxlbiA9IDEgLyBsZW47XHJcbiAgICAgICAgeCAqPSBsZW47XHJcbiAgICAgICAgeSAqPSBsZW47XHJcbiAgICAgICAgeiAqPSBsZW47XHJcbiAgICAgICAgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgICAgICAgYyA9IE1hdGguY29zKHJhZCk7XHJcbiAgICAgICAgdCA9IDEgLSBjOyAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG5cclxuICAgICAgICBvdXRbMF0gPSB4ICogeCAqIHQgKyBjO1xyXG4gICAgICAgIG91dFsxXSA9IHkgKiB4ICogdCArIHogKiBzO1xyXG4gICAgICAgIG91dFsyXSA9IHogKiB4ICogdCAtIHkgKiBzO1xyXG4gICAgICAgIG91dFszXSA9IDA7XHJcbiAgICAgICAgb3V0WzRdID0geCAqIHkgKiB0IC0geiAqIHM7XHJcbiAgICAgICAgb3V0WzVdID0geSAqIHkgKiB0ICsgYztcclxuICAgICAgICBvdXRbNl0gPSB6ICogeSAqIHQgKyB4ICogcztcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IHggKiB6ICogdCArIHkgKiBzO1xyXG4gICAgICAgIG91dFs5XSA9IHkgKiB6ICogdCAtIHggKiBzO1xyXG4gICAgICAgIG91dFsxMF0gPSB6ICogeiAqIHQgKyBjO1xyXG4gICAgICAgIG91dFsxMV0gPSAwO1xyXG4gICAgICAgIG91dFsxMl0gPSAwO1xyXG4gICAgICAgIG91dFsxM10gPSAwO1xyXG4gICAgICAgIG91dFsxNF0gPSAwO1xyXG4gICAgICAgIG91dFsxNV0gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gICAgICogICAgIG1hdDQucm90YXRlWChkZXN0LCBkZXN0LCByYWQpO1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9tWFJvdGF0aW9uKG91dCwgcmFkKSB7XHJcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xyXG4gICAgICAgIHZhciBjID0gTWF0aC5jb3MocmFkKTsgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG5cclxuICAgICAgICBvdXRbMF0gPSAxO1xyXG4gICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG4gICAgICAgIG91dFs0XSA9IDA7XHJcbiAgICAgICAgb3V0WzVdID0gYztcclxuICAgICAgICBvdXRbNl0gPSBzO1xyXG4gICAgICAgIG91dFs3XSA9IDA7XHJcbiAgICAgICAgb3V0WzhdID0gMDtcclxuICAgICAgICBvdXRbOV0gPSAtcztcclxuICAgICAgICBvdXRbMTBdID0gYztcclxuICAgICAgICBvdXRbMTFdID0gMDtcclxuICAgICAgICBvdXRbMTJdID0gMDtcclxuICAgICAgICBvdXRbMTNdID0gMDtcclxuICAgICAgICBvdXRbMTRdID0gMDtcclxuICAgICAgICBvdXRbMTVdID0gMTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXHJcbiAgICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICAgICAqXHJcbiAgICAgKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICAgICAqICAgICBtYXQ0LnJvdGF0ZVkoZGVzdCwgZGVzdCwgcmFkKTtcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVlSb3RhdGlvbihvdXQsIHJhZCkge1xyXG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICAgICAgICB2YXIgYyA9IE1hdGguY29zKHJhZCk7IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cclxuXHJcbiAgICAgICAgb3V0WzBdID0gYztcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IC1zO1xyXG4gICAgICAgIG91dFszXSA9IDA7XHJcbiAgICAgICAgb3V0WzRdID0gMDtcclxuICAgICAgICBvdXRbNV0gPSAxO1xyXG4gICAgICAgIG91dFs2XSA9IDA7XHJcbiAgICAgICAgb3V0WzddID0gMDtcclxuICAgICAgICBvdXRbOF0gPSBzO1xyXG4gICAgICAgIG91dFs5XSA9IDA7XHJcbiAgICAgICAgb3V0WzEwXSA9IGM7XHJcbiAgICAgICAgb3V0WzExXSA9IDA7XHJcbiAgICAgICAgb3V0WzEyXSA9IDA7XHJcbiAgICAgICAgb3V0WzEzXSA9IDA7XHJcbiAgICAgICAgb3V0WzE0XSA9IDA7XHJcbiAgICAgICAgb3V0WzE1XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFogYXhpc1xyXG4gICAgICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAgICAgKlxyXG4gICAgICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAgICAgKiAgICAgbWF0NC5yb3RhdGVaKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21aUm90YXRpb24ob3V0LCByYWQpIHtcclxuICAgICAgICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpOyAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcblxyXG4gICAgICAgIG91dFswXSA9IGM7XHJcbiAgICAgICAgb3V0WzFdID0gcztcclxuICAgICAgICBvdXRbMl0gPSAwO1xyXG4gICAgICAgIG91dFszXSA9IDA7XHJcbiAgICAgICAgb3V0WzRdID0gLXM7XHJcbiAgICAgICAgb3V0WzVdID0gYztcclxuICAgICAgICBvdXRbNl0gPSAwO1xyXG4gICAgICAgIG91dFs3XSA9IDA7XHJcbiAgICAgICAgb3V0WzhdID0gMDtcclxuICAgICAgICBvdXRbOV0gPSAwO1xyXG4gICAgICAgIG91dFsxMF0gPSAxO1xyXG4gICAgICAgIG91dFsxMV0gPSAwO1xyXG4gICAgICAgIG91dFsxMl0gPSAwO1xyXG4gICAgICAgIG91dFsxM10gPSAwO1xyXG4gICAgICAgIG91dFsxNF0gPSAwO1xyXG4gICAgICAgIG91dFsxNV0gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24gYW5kIHZlY3RvciB0cmFuc2xhdGlvblxyXG4gICAgICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAgICAgKlxyXG4gICAgICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAgICAgKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcclxuICAgICAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xyXG4gICAgICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIHEsIHYpIHtcclxuICAgICAgICAvLyBRdWF0ZXJuaW9uIG1hdGhcclxuICAgICAgICB2YXIgeCA9IHFbMF0sXHJcbiAgICAgICAgICAgIHkgPSBxWzFdLFxyXG4gICAgICAgICAgICB6ID0gcVsyXSxcclxuICAgICAgICAgICAgdyA9IHFbM107XHJcbiAgICAgICAgdmFyIHgyID0geCArIHg7XHJcbiAgICAgICAgdmFyIHkyID0geSArIHk7XHJcbiAgICAgICAgdmFyIHoyID0geiArIHo7XHJcbiAgICAgICAgdmFyIHh4ID0geCAqIHgyO1xyXG4gICAgICAgIHZhciB4eSA9IHggKiB5MjtcclxuICAgICAgICB2YXIgeHogPSB4ICogejI7XHJcbiAgICAgICAgdmFyIHl5ID0geSAqIHkyO1xyXG4gICAgICAgIHZhciB5eiA9IHkgKiB6MjtcclxuICAgICAgICB2YXIgenogPSB6ICogejI7XHJcbiAgICAgICAgdmFyIHd4ID0gdyAqIHgyO1xyXG4gICAgICAgIHZhciB3eSA9IHcgKiB5MjtcclxuICAgICAgICB2YXIgd3ogPSB3ICogejI7XHJcbiAgICAgICAgb3V0WzBdID0gMSAtICh5eSArIHp6KTtcclxuICAgICAgICBvdXRbMV0gPSB4eSArIHd6O1xyXG4gICAgICAgIG91dFsyXSA9IHh6IC0gd3k7XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICBvdXRbNF0gPSB4eSAtIHd6O1xyXG4gICAgICAgIG91dFs1XSA9IDEgLSAoeHggKyB6eik7XHJcbiAgICAgICAgb3V0WzZdID0geXogKyB3eDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IHh6ICsgd3k7XHJcbiAgICAgICAgb3V0WzldID0geXogLSB3eDtcclxuICAgICAgICBvdXRbMTBdID0gMSAtICh4eCArIHl5KTtcclxuICAgICAgICBvdXRbMTFdID0gMDtcclxuICAgICAgICBvdXRbMTJdID0gdlswXTtcclxuICAgICAgICBvdXRbMTNdID0gdlsxXTtcclxuICAgICAgICBvdXRbMTRdID0gdlsyXTtcclxuICAgICAgICBvdXRbMTVdID0gMTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IG1hdDQgZnJvbSBhIGR1YWwgcXVhdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG91dCBNYXRyaXhcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IGEgRHVhbCBRdWF0ZXJuaW9uXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVF1YXQyKG91dCwgYSkge1xyXG4gICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IG5ldyBBUlJBWV9UWVBFKDMpO1xyXG4gICAgICAgIHZhciBieCA9IC1hWzBdLFxyXG4gICAgICAgICAgICBieSA9IC1hWzFdLFxyXG4gICAgICAgICAgICBieiA9IC1hWzJdLFxyXG4gICAgICAgICAgICBidyA9IGFbM10sXHJcbiAgICAgICAgICAgIGF4ID0gYVs0XSxcclxuICAgICAgICAgICAgYXkgPSBhWzVdLFxyXG4gICAgICAgICAgICBheiA9IGFbNl0sXHJcbiAgICAgICAgICAgIGF3ID0gYVs3XTtcclxuICAgICAgICB2YXIgbWFnbml0dWRlID0gYnggKiBieCArIGJ5ICogYnkgKyBieiAqIGJ6ICsgYncgKiBidzsgLy9Pbmx5IHNjYWxlIGlmIGl0IG1ha2VzIHNlbnNlXHJcblxyXG4gICAgICAgIGlmIChtYWduaXR1ZGUgPiAwKSB7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uWzBdID0gKGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnkpICogMiAvIG1hZ25pdHVkZTtcclxuICAgICAgICAgICAgdHJhbnNsYXRpb25bMV0gPSAoYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieikgKiAyIC8gbWFnbml0dWRlO1xyXG4gICAgICAgICAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDIgLyBtYWduaXR1ZGU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdHJhbnNsYXRpb25bMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyO1xyXG4gICAgICAgICAgICB0cmFuc2xhdGlvblsxXSA9IChheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6KSAqIDI7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uWzJdID0gKGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngpICogMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgYSwgdHJhbnNsYXRpb24pO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxyXG4gICAgICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvbixcclxuICAgICAqICB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvclxyXG4gICAgICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXHJcbiAgICAgKiBAcGFyYW0gIHt2ZWMzfSBvdXQgVmVjdG9yIHRvIHJlY2VpdmUgdHJhbnNsYXRpb24gY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0gIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxyXG4gICAgICogQHJldHVybiB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRUcmFuc2xhdGlvbihvdXQsIG1hdCkge1xyXG4gICAgICAgIG91dFswXSA9IG1hdFsxMl07XHJcbiAgICAgICAgb3V0WzFdID0gbWF0WzEzXTtcclxuICAgICAgICBvdXRbMl0gPSBtYXRbMTRdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXHJcbiAgICAgKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGVcclxuICAgICAqICB3aXRoIGEgbm9ybWFsaXplZCBRdWF0ZXJuaW9uIHBhcmFtdGVyLCB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmVcclxuICAgICAqICB0aGUgc2FtZSBhcyB0aGUgc2NhbGluZyB2ZWN0b3JcclxuICAgICAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxyXG4gICAgICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcclxuICAgICAqIEByZXR1cm4ge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0U2NhbGluZyhvdXQsIG1hdCkge1xyXG4gICAgICAgIHZhciBtMTEgPSBtYXRbMF07XHJcbiAgICAgICAgdmFyIG0xMiA9IG1hdFsxXTtcclxuICAgICAgICB2YXIgbTEzID0gbWF0WzJdO1xyXG4gICAgICAgIHZhciBtMjEgPSBtYXRbNF07XHJcbiAgICAgICAgdmFyIG0yMiA9IG1hdFs1XTtcclxuICAgICAgICB2YXIgbTIzID0gbWF0WzZdO1xyXG4gICAgICAgIHZhciBtMzEgPSBtYXRbOF07XHJcbiAgICAgICAgdmFyIG0zMiA9IG1hdFs5XTtcclxuICAgICAgICB2YXIgbTMzID0gbWF0WzEwXTtcclxuICAgICAgICBvdXRbMF0gPSBNYXRoLmh5cG90KG0xMSwgbTEyLCBtMTMpO1xyXG4gICAgICAgIG91dFsxXSA9IE1hdGguaHlwb3QobTIxLCBtMjIsIG0yMyk7XHJcbiAgICAgICAgb3V0WzJdID0gTWF0aC5oeXBvdChtMzEsIG0zMiwgbTMzKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uYWwgY29tcG9uZW50XHJcbiAgICAgKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcclxuICAgICAqICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiwgdGhlIHJldHVybmVkIHF1YXRlcm5pb24gd2lsbCBiZSB0aGVcclxuICAgICAqICBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIG9yaWdpbmFsbHkgc3VwcGxpZWQuXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBtYXQgTWF0cml4IHRvIGJlIGRlY29tcG9zZWQgKGlucHV0KVxyXG4gICAgICogQHJldHVybiB7cXVhdH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRSb3RhdGlvbihvdXQsIG1hdCkge1xyXG4gICAgICAgIHZhciBzY2FsaW5nID0gbmV3IEFSUkFZX1RZUEUoMyk7XHJcbiAgICAgICAgZ2V0U2NhbGluZyhzY2FsaW5nLCBtYXQpO1xyXG4gICAgICAgIHZhciBpczEgPSAxIC8gc2NhbGluZ1swXTtcclxuICAgICAgICB2YXIgaXMyID0gMSAvIHNjYWxpbmdbMV07XHJcbiAgICAgICAgdmFyIGlzMyA9IDEgLyBzY2FsaW5nWzJdO1xyXG4gICAgICAgIHZhciBzbTExID0gbWF0WzBdICogaXMxO1xyXG4gICAgICAgIHZhciBzbTEyID0gbWF0WzFdICogaXMyO1xyXG4gICAgICAgIHZhciBzbTEzID0gbWF0WzJdICogaXMzO1xyXG4gICAgICAgIHZhciBzbTIxID0gbWF0WzRdICogaXMxO1xyXG4gICAgICAgIHZhciBzbTIyID0gbWF0WzVdICogaXMyO1xyXG4gICAgICAgIHZhciBzbTIzID0gbWF0WzZdICogaXMzO1xyXG4gICAgICAgIHZhciBzbTMxID0gbWF0WzhdICogaXMxO1xyXG4gICAgICAgIHZhciBzbTMyID0gbWF0WzldICogaXMyO1xyXG4gICAgICAgIHZhciBzbTMzID0gbWF0WzEwXSAqIGlzMztcclxuICAgICAgICB2YXIgdHJhY2UgPSBzbTExICsgc20yMiArIHNtMzM7XHJcbiAgICAgICAgdmFyIFMgPSAwO1xyXG5cclxuICAgICAgICBpZiAodHJhY2UgPiAwKSB7XHJcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApICogMjtcclxuICAgICAgICAgICAgb3V0WzNdID0gMC4yNSAqIFM7XHJcbiAgICAgICAgICAgIG91dFswXSA9IChzbTIzIC0gc20zMikgLyBTO1xyXG4gICAgICAgICAgICBvdXRbMV0gPSAoc20zMSAtIHNtMTMpIC8gUztcclxuICAgICAgICAgICAgb3V0WzJdID0gKHNtMTIgLSBzbTIxKSAvIFM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzbTExID4gc20yMiAmJiBzbTExID4gc20zMykge1xyXG4gICAgICAgICAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMTEgLSBzbTIyIC0gc20zMykgKiAyO1xyXG4gICAgICAgICAgICBvdXRbM10gPSAoc20yMyAtIHNtMzIpIC8gUztcclxuICAgICAgICAgICAgb3V0WzBdID0gMC4yNSAqIFM7XHJcbiAgICAgICAgICAgIG91dFsxXSA9IChzbTEyICsgc20yMSkgLyBTO1xyXG4gICAgICAgICAgICBvdXRbMl0gPSAoc20zMSArIHNtMTMpIC8gUztcclxuICAgICAgICB9IGVsc2UgaWYgKHNtMjIgPiBzbTMzKSB7XHJcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20yMiAtIHNtMTEgLSBzbTMzKSAqIDI7XHJcbiAgICAgICAgICAgIG91dFszXSA9IChzbTMxIC0gc20xMykgLyBTO1xyXG4gICAgICAgICAgICBvdXRbMF0gPSAoc20xMiArIHNtMjEpIC8gUztcclxuICAgICAgICAgICAgb3V0WzFdID0gMC4yNSAqIFM7XHJcbiAgICAgICAgICAgIG91dFsyXSA9IChzbTIzICsgc20zMikgLyBTO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20zMyAtIHNtMTEgLSBzbTIyKSAqIDI7XHJcbiAgICAgICAgICAgIG91dFszXSA9IChzbTEyIC0gc20yMSkgLyBTO1xyXG4gICAgICAgICAgICBvdXRbMF0gPSAoc20zMSArIHNtMTMpIC8gUztcclxuICAgICAgICAgICAgb3V0WzFdID0gKHNtMjMgKyBzbTMyKSAvIFM7XHJcbiAgICAgICAgICAgIG91dFsyXSA9IDAuMjUgKiBTO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGVcclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gICAgICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XHJcbiAgICAgKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcclxuICAgICAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xyXG4gICAgICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUob3V0LCBxLCB2LCBzKSB7XHJcbiAgICAgICAgLy8gUXVhdGVybmlvbiBtYXRoXHJcbiAgICAgICAgdmFyIHggPSBxWzBdLFxyXG4gICAgICAgICAgICB5ID0gcVsxXSxcclxuICAgICAgICAgICAgeiA9IHFbMl0sXHJcbiAgICAgICAgICAgIHcgPSBxWzNdO1xyXG4gICAgICAgIHZhciB4MiA9IHggKyB4O1xyXG4gICAgICAgIHZhciB5MiA9IHkgKyB5O1xyXG4gICAgICAgIHZhciB6MiA9IHogKyB6O1xyXG4gICAgICAgIHZhciB4eCA9IHggKiB4MjtcclxuICAgICAgICB2YXIgeHkgPSB4ICogeTI7XHJcbiAgICAgICAgdmFyIHh6ID0geCAqIHoyO1xyXG4gICAgICAgIHZhciB5eSA9IHkgKiB5MjtcclxuICAgICAgICB2YXIgeXogPSB5ICogejI7XHJcbiAgICAgICAgdmFyIHp6ID0geiAqIHoyO1xyXG4gICAgICAgIHZhciB3eCA9IHcgKiB4MjtcclxuICAgICAgICB2YXIgd3kgPSB3ICogeTI7XHJcbiAgICAgICAgdmFyIHd6ID0gdyAqIHoyO1xyXG4gICAgICAgIHZhciBzeCA9IHNbMF07XHJcbiAgICAgICAgdmFyIHN5ID0gc1sxXTtcclxuICAgICAgICB2YXIgc3ogPSBzWzJdO1xyXG4gICAgICAgIG91dFswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xyXG4gICAgICAgIG91dFsxXSA9ICh4eSArIHd6KSAqIHN4O1xyXG4gICAgICAgIG91dFsyXSA9ICh4eiAtIHd5KSAqIHN4O1xyXG4gICAgICAgIG91dFszXSA9IDA7XHJcbiAgICAgICAgb3V0WzRdID0gKHh5IC0gd3opICogc3k7XHJcbiAgICAgICAgb3V0WzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XHJcbiAgICAgICAgb3V0WzZdID0gKHl6ICsgd3gpICogc3k7XHJcbiAgICAgICAgb3V0WzddID0gMDtcclxuICAgICAgICBvdXRbOF0gPSAoeHogKyB3eSkgKiBzejtcclxuICAgICAgICBvdXRbOV0gPSAoeXogLSB3eCkgKiBzejtcclxuICAgICAgICBvdXRbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XHJcbiAgICAgICAgb3V0WzExXSA9IDA7XHJcbiAgICAgICAgb3V0WzEyXSA9IHZbMF07XHJcbiAgICAgICAgb3V0WzEzXSA9IHZbMV07XHJcbiAgICAgICAgb3V0WzE0XSA9IHZbMl07XHJcbiAgICAgICAgb3V0WzE1XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGUsIHJvdGF0aW5nIGFuZCBzY2FsaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gb3JpZ2luXHJcbiAgICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICAgICAqXHJcbiAgICAgKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICAgICAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xyXG4gICAgICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG9yaWdpbik7XHJcbiAgICAgKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcclxuICAgICAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xyXG4gICAgICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXHJcbiAgICAgKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgbmVnYXRpdmVPcmlnaW4pO1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBzIFNjYWxpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG8gVGhlIG9yaWdpbiB2ZWN0b3IgYXJvdW5kIHdoaWNoIHRvIHNjYWxlIGFuZCByb3RhdGVcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGVPcmlnaW4ob3V0LCBxLCB2LCBzLCBvKSB7XHJcbiAgICAgICAgLy8gUXVhdGVybmlvbiBtYXRoXHJcbiAgICAgICAgdmFyIHggPSBxWzBdLFxyXG4gICAgICAgICAgICB5ID0gcVsxXSxcclxuICAgICAgICAgICAgeiA9IHFbMl0sXHJcbiAgICAgICAgICAgIHcgPSBxWzNdO1xyXG4gICAgICAgIHZhciB4MiA9IHggKyB4O1xyXG4gICAgICAgIHZhciB5MiA9IHkgKyB5O1xyXG4gICAgICAgIHZhciB6MiA9IHogKyB6O1xyXG4gICAgICAgIHZhciB4eCA9IHggKiB4MjtcclxuICAgICAgICB2YXIgeHkgPSB4ICogeTI7XHJcbiAgICAgICAgdmFyIHh6ID0geCAqIHoyO1xyXG4gICAgICAgIHZhciB5eSA9IHkgKiB5MjtcclxuICAgICAgICB2YXIgeXogPSB5ICogejI7XHJcbiAgICAgICAgdmFyIHp6ID0geiAqIHoyO1xyXG4gICAgICAgIHZhciB3eCA9IHcgKiB4MjtcclxuICAgICAgICB2YXIgd3kgPSB3ICogeTI7XHJcbiAgICAgICAgdmFyIHd6ID0gdyAqIHoyO1xyXG4gICAgICAgIHZhciBzeCA9IHNbMF07XHJcbiAgICAgICAgdmFyIHN5ID0gc1sxXTtcclxuICAgICAgICB2YXIgc3ogPSBzWzJdO1xyXG4gICAgICAgIHZhciBveCA9IG9bMF07XHJcbiAgICAgICAgdmFyIG95ID0gb1sxXTtcclxuICAgICAgICB2YXIgb3ogPSBvWzJdO1xyXG4gICAgICAgIHZhciBvdXQwID0gKDEgLSAoeXkgKyB6eikpICogc3g7XHJcbiAgICAgICAgdmFyIG91dDEgPSAoeHkgKyB3eikgKiBzeDtcclxuICAgICAgICB2YXIgb3V0MiA9ICh4eiAtIHd5KSAqIHN4O1xyXG4gICAgICAgIHZhciBvdXQ0ID0gKHh5IC0gd3opICogc3k7XHJcbiAgICAgICAgdmFyIG91dDUgPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcclxuICAgICAgICB2YXIgb3V0NiA9ICh5eiArIHd4KSAqIHN5O1xyXG4gICAgICAgIHZhciBvdXQ4ID0gKHh6ICsgd3kpICogc3o7XHJcbiAgICAgICAgdmFyIG91dDkgPSAoeXogLSB3eCkgKiBzejtcclxuICAgICAgICB2YXIgb3V0MTAgPSAoMSAtICh4eCArIHl5KSkgKiBzejtcclxuICAgICAgICBvdXRbMF0gPSBvdXQwO1xyXG4gICAgICAgIG91dFsxXSA9IG91dDE7XHJcbiAgICAgICAgb3V0WzJdID0gb3V0MjtcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG4gICAgICAgIG91dFs0XSA9IG91dDQ7XHJcbiAgICAgICAgb3V0WzVdID0gb3V0NTtcclxuICAgICAgICBvdXRbNl0gPSBvdXQ2O1xyXG4gICAgICAgIG91dFs3XSA9IDA7XHJcbiAgICAgICAgb3V0WzhdID0gb3V0ODtcclxuICAgICAgICBvdXRbOV0gPSBvdXQ5O1xyXG4gICAgICAgIG91dFsxMF0gPSBvdXQxMDtcclxuICAgICAgICBvdXRbMTFdID0gMDtcclxuICAgICAgICBvdXRbMTJdID0gdlswXSArIG94IC0gKG91dDAgKiBveCArIG91dDQgKiBveSArIG91dDggKiBveik7XHJcbiAgICAgICAgb3V0WzEzXSA9IHZbMV0gKyBveSAtIChvdXQxICogb3ggKyBvdXQ1ICogb3kgKyBvdXQ5ICogb3opO1xyXG4gICAgICAgIG91dFsxNF0gPSB2WzJdICsgb3ogLSAob3V0MiAqIG94ICsgb3V0NiAqIG95ICsgb3V0MTAgKiBveik7XHJcbiAgICAgICAgb3V0WzE1XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21RdWF0JDEob3V0LCBxKSB7XHJcbiAgICAgICAgdmFyIHggPSBxWzBdLFxyXG4gICAgICAgICAgICB5ID0gcVsxXSxcclxuICAgICAgICAgICAgeiA9IHFbMl0sXHJcbiAgICAgICAgICAgIHcgPSBxWzNdO1xyXG4gICAgICAgIHZhciB4MiA9IHggKyB4O1xyXG4gICAgICAgIHZhciB5MiA9IHkgKyB5O1xyXG4gICAgICAgIHZhciB6MiA9IHogKyB6O1xyXG4gICAgICAgIHZhciB4eCA9IHggKiB4MjtcclxuICAgICAgICB2YXIgeXggPSB5ICogeDI7XHJcbiAgICAgICAgdmFyIHl5ID0geSAqIHkyO1xyXG4gICAgICAgIHZhciB6eCA9IHogKiB4MjtcclxuICAgICAgICB2YXIgenkgPSB6ICogeTI7XHJcbiAgICAgICAgdmFyIHp6ID0geiAqIHoyO1xyXG4gICAgICAgIHZhciB3eCA9IHcgKiB4MjtcclxuICAgICAgICB2YXIgd3kgPSB3ICogeTI7XHJcbiAgICAgICAgdmFyIHd6ID0gdyAqIHoyO1xyXG4gICAgICAgIG91dFswXSA9IDEgLSB5eSAtIHp6O1xyXG4gICAgICAgIG91dFsxXSA9IHl4ICsgd3o7XHJcbiAgICAgICAgb3V0WzJdID0genggLSB3eTtcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG4gICAgICAgIG91dFs0XSA9IHl4IC0gd3o7XHJcbiAgICAgICAgb3V0WzVdID0gMSAtIHh4IC0geno7XHJcbiAgICAgICAgb3V0WzZdID0genkgKyB3eDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IHp4ICsgd3k7XHJcbiAgICAgICAgb3V0WzldID0genkgLSB3eDtcclxuICAgICAgICBvdXRbMTBdID0gMSAtIHh4IC0geXk7XHJcbiAgICAgICAgb3V0WzExXSA9IDA7XHJcbiAgICAgICAgb3V0WzEyXSA9IDA7XHJcbiAgICAgICAgb3V0WzEzXSA9IDA7XHJcbiAgICAgICAgb3V0WzE0XSA9IDA7XHJcbiAgICAgICAgb3V0WzE1XSA9IDE7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGEgZnJ1c3R1bSBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcnVzdHVtKG91dCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIpIHtcclxuICAgICAgICB2YXIgcmwgPSAxIC8gKHJpZ2h0IC0gbGVmdCk7XHJcbiAgICAgICAgdmFyIHRiID0gMSAvICh0b3AgLSBib3R0b20pO1xyXG4gICAgICAgIHZhciBuZiA9IDEgLyAobmVhciAtIGZhcik7XHJcbiAgICAgICAgb3V0WzBdID0gbmVhciAqIDIgKiBybDtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IG5lYXIgKiAyICogdGI7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IChyaWdodCArIGxlZnQpICogcmw7XHJcbiAgICAgICAgb3V0WzldID0gKHRvcCArIGJvdHRvbSkgKiB0YjtcclxuICAgICAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XHJcbiAgICAgICAgb3V0WzExXSA9IC0xO1xyXG4gICAgICAgIG91dFsxMl0gPSAwO1xyXG4gICAgICAgIG91dFsxM10gPSAwO1xyXG4gICAgICAgIG91dFsxNF0gPSBmYXIgKiBuZWFyICogMiAqIG5mO1xyXG4gICAgICAgIG91dFsxNV0gPSAwO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kcy5cclxuICAgICAqIFBhc3NpbmcgbnVsbC91bmRlZmluZWQvbm8gdmFsdWUgZm9yIGZhciB3aWxsIGdlbmVyYXRlIGluZmluaXRlIHByb2plY3Rpb24gbWF0cml4LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmb3Z5IFZlcnRpY2FsIGZpZWxkIG9mIHZpZXcgaW4gcmFkaWFuc1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFzcGVjdCBBc3BlY3QgcmF0aW8uIHR5cGljYWxseSB2aWV3cG9ydCB3aWR0aC9oZWlnaHRcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtLCBjYW4gYmUgbnVsbCBvciBJbmZpbml0eVxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcGVyc3BlY3RpdmUob3V0LCBmb3Z5LCBhc3BlY3QsIG5lYXIsIGZhcikge1xyXG4gICAgICAgIG91dCA9IG91dCB8fCBuZXcgTWF0VHlwZSgxNik7XHJcbiAgICAgICAgdmFyIGYgPSAxLjAgLyBNYXRoLnRhbihmb3Z5IC8gMiksXHJcbiAgICAgICAgICAgIG5mO1xyXG5cclxuICAgICAgICBvdXRbMF0gPSBmIC8gYXNwZWN0O1xyXG4gICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgb3V0WzJdID0gMDsgICAgICAvL3jovbRcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG5cclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IGY7ICAgICAvL3novbRcclxuICAgICAgICBvdXRbNl0gPSAwO1xyXG4gICAgICAgIG91dFs3XSA9IDA7XHJcblxyXG4gICAgICAgIG91dFs4XSA9IDA7XHJcbiAgICAgICAgb3V0WzldID0gMDsgICAgIC8veui9tFxyXG4gICAgICAgIFxyXG4gICAgICAgIG91dFsxMV0gPSAtMTtcclxuXHJcbiAgICAgICAgb3V0WzEyXSA9IDA7XHJcbiAgICAgICAgb3V0WzEzXSA9IDA7XHJcbiAgICAgICAgb3V0WzE1XSA9IDA7XHJcblxyXG4gICAgICAgIGlmIChmYXIgIT0gbnVsbCAmJiBmYXIgIT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcclxuICAgICAgICAgICAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xyXG4gICAgICAgICAgICBvdXRbMTRdID0gMiAqIGZhciAqIG5lYXIgKiBuZjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbMTBdID0gLTE7XHJcbiAgICAgICAgICAgIG91dFsxNF0gPSAtMiAqIG5lYXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBmaWVsZCBvZiB2aWV3LlxyXG4gICAgICogVGhpcyBpcyBwcmltYXJpbHkgdXNlZnVsIGZvciBnZW5lcmF0aW5nIHByb2plY3Rpb24gbWF0cmljZXMgdG8gYmUgdXNlZFxyXG4gICAgICogd2l0aCB0aGUgc3RpbGwgZXhwZXJpZW1lbnRhbCBXZWJWUiBBUEkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGZvdiBPYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHZhbHVlczogdXBEZWdyZWVzLCBkb3duRGVncmVlcywgbGVmdERlZ3JlZXMsIHJpZ2h0RGVncmVlc1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHBlcnNwZWN0aXZlRnJvbUZpZWxkT2ZWaWV3KG91dCwgZm92LCBuZWFyLCBmYXIpIHtcclxuICAgICAgICB2YXIgdXBUYW4gPSBNYXRoLnRhbihmb3YudXBEZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcclxuICAgICAgICB2YXIgZG93blRhbiA9IE1hdGgudGFuKGZvdi5kb3duRGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XHJcbiAgICAgICAgdmFyIGxlZnRUYW4gPSBNYXRoLnRhbihmb3YubGVmdERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xyXG4gICAgICAgIHZhciByaWdodFRhbiA9IE1hdGgudGFuKGZvdi5yaWdodERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xyXG4gICAgICAgIHZhciB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcclxuICAgICAgICB2YXIgeVNjYWxlID0gMi4wIC8gKHVwVGFuICsgZG93blRhbik7XHJcbiAgICAgICAgb3V0WzBdID0geFNjYWxlO1xyXG4gICAgICAgIG91dFsxXSA9IDAuMDtcclxuICAgICAgICBvdXRbMl0gPSAwLjA7XHJcbiAgICAgICAgb3V0WzNdID0gMC4wO1xyXG4gICAgICAgIG91dFs0XSA9IDAuMDtcclxuICAgICAgICBvdXRbNV0gPSB5U2NhbGU7XHJcbiAgICAgICAgb3V0WzZdID0gMC4wO1xyXG4gICAgICAgIG91dFs3XSA9IDAuMDtcclxuICAgICAgICBvdXRbOF0gPSAtKChsZWZ0VGFuIC0gcmlnaHRUYW4pICogeFNjYWxlICogMC41KTtcclxuICAgICAgICBvdXRbOV0gPSAodXBUYW4gLSBkb3duVGFuKSAqIHlTY2FsZSAqIDAuNTtcclxuICAgICAgICBvdXRbMTBdID0gZmFyIC8gKG5lYXIgLSBmYXIpO1xyXG4gICAgICAgIG91dFsxMV0gPSAtMS4wO1xyXG4gICAgICAgIG91dFsxMl0gPSAwLjA7XHJcbiAgICAgICAgb3V0WzEzXSA9IDAuMDtcclxuICAgICAgICBvdXRbMTRdID0gZmFyICogbmVhciAvIChuZWFyIC0gZmFyKTtcclxuICAgICAgICBvdXRbMTVdID0gMC4wO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBvcnRobyhvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XHJcbiAgICAgICAgb3V0ID0gb3V0IHx8IG5ldyBNYXRUeXBlKDE2KTtcclxuICAgICAgICB2YXIgbHIgPSAxIC8gKGxlZnQgLSByaWdodCk7XHJcbiAgICAgICAgdmFyIGJ0ID0gMSAvIChib3R0b20gLSB0b3ApO1xyXG4gICAgICAgIHZhciBuZiA9IDEgLyAobmVhciAtIGZhcik7XHJcbiAgICAgICAgb3V0WzBdID0gLTIgKiBscjtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IC0yICogYnQ7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIG91dFs4XSA9IDA7XHJcbiAgICAgICAgb3V0WzldID0gMDtcclxuICAgICAgICBvdXRbMTBdID0gMiAqIG5mO1xyXG4gICAgICAgIG91dFsxMV0gPSAwO1xyXG4gICAgICAgIG91dFsxMl0gPSAobGVmdCArIHJpZ2h0KSAqIGxyO1xyXG4gICAgICAgIG91dFsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0O1xyXG4gICAgICAgIG91dFsxNF0gPSAoZmFyICsgbmVhcikgKiBuZjtcclxuICAgICAgICBvdXRbMTVdID0gMTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZW5lcmF0ZXMgYSBsb29rLWF0IG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBleWUgcG9zaXRpb24sIGZvY2FsIHBvaW50LCBhbmQgdXAgYXhpcy5cclxuICAgICAqIElmIHlvdSB3YW50IGEgbWF0cml4IHRoYXQgYWN0dWFsbHkgbWFrZXMgYW4gb2JqZWN0IGxvb2sgYXQgYW5vdGhlciBvYmplY3QsIHlvdSBzaG91bGQgdXNlIHRhcmdldFRvIGluc3RlYWQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGxvb2tBdChvdXQsIGV5ZSwgY2VudGVyLCB1cCkge1xyXG4gICAgICAgIG91dCA9IG91dCB8fCBuZXcgTWF0VHlwZSgxNik7XHJcbiAgICAgICAgdmFyIHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbjtcclxuICAgICAgICB2YXIgZXlleCA9IGV5ZVswXTtcclxuICAgICAgICB2YXIgZXlleSA9IGV5ZVsxXTtcclxuICAgICAgICB2YXIgZXlleiA9IGV5ZVsyXTtcclxuICAgICAgICB2YXIgdXB4ID0gdXBbMF07Ly8wXHJcbiAgICAgICAgdmFyIHVweSA9IHVwWzFdOy8vMVxyXG4gICAgICAgIHZhciB1cHogPSB1cFsyXTsvLzBcclxuICAgICAgICB2YXIgY2VudGVyeCA9IGNlbnRlclswXTsvLzBcclxuICAgICAgICB2YXIgY2VudGVyeSA9IGNlbnRlclsxXTsvLzBcclxuICAgICAgICB2YXIgY2VudGVyeiA9IGNlbnRlclsyXTsvLzBcclxuXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKGV5ZXggLSBjZW50ZXJ4KSA8IEVQU0lMT04gJiYgTWF0aC5hYnMoZXlleSAtIGNlbnRlcnkpIDwgRVBTSUxPTiAmJiBNYXRoLmFicyhleWV6IC0gY2VudGVyeikgPCBFUFNJTE9OKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpZGVudGl0eSQzKG91dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB6MCA9IGV5ZXggLSBjZW50ZXJ4O1xyXG4gICAgICAgIHoxID0gZXlleSAtIGNlbnRlcnk7XHJcbiAgICAgICAgejIgPSBleWV6IC0gY2VudGVyejtcclxuICAgICAgICAvL+W5s+aWueWSjOeahOW5s+aWueaguVxyXG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLmh5cG90KHowLCB6MSwgejIpO1xyXG4gICAgICAgIHowICo9IGxlbjtcclxuICAgICAgICB6MSAqPSBsZW47XHJcbiAgICAgICAgejIgKj0gbGVuO1xyXG4gICAgICAgIHgwID0gdXB5ICogejIgLSB1cHogKiB6MTtcclxuICAgICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejI7XHJcbiAgICAgICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xyXG4gICAgICAgIGxlbiA9IE1hdGguaHlwb3QoeDAsIHgxLCB4Mik7XHJcblxyXG4gICAgICAgIGlmICghbGVuKSB7XHJcbiAgICAgICAgICAgIHgwID0gMDtcclxuICAgICAgICAgICAgeDEgPSAwO1xyXG4gICAgICAgICAgICB4MiA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGVuID0gMSAvIGxlbjtcclxuICAgICAgICAgICAgeDAgKj0gbGVuO1xyXG4gICAgICAgICAgICB4MSAqPSBsZW47XHJcbiAgICAgICAgICAgIHgyICo9IGxlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHkwID0gejEgKiB4MiAtIHoyICogeDE7XHJcbiAgICAgICAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcclxuICAgICAgICB5MiA9IHowICogeDEgLSB6MSAqIHgwO1xyXG4gICAgICAgIGxlbiA9IE1hdGguaHlwb3QoeTAsIHkxLCB5Mik7XHJcblxyXG4gICAgICAgIGlmICghbGVuKSB7XHJcbiAgICAgICAgICAgIHkwID0gMDtcclxuICAgICAgICAgICAgeTEgPSAwO1xyXG4gICAgICAgICAgICB5MiA9IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGVuID0gMSAvIGxlbjtcclxuICAgICAgICAgICAgeTAgKj0gbGVuO1xyXG4gICAgICAgICAgICB5MSAqPSBsZW47XHJcbiAgICAgICAgICAgIHkyICo9IGxlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG91dFswXSA9IHgwO1xyXG4gICAgICAgIG91dFsxXSA9IHkwO1xyXG4gICAgICAgIG91dFsyXSA9IHowOyAgLy946L20XHJcbiAgICAgICAgb3V0WzNdID0gMDtcclxuXHJcbiAgICAgICAgb3V0WzRdID0geDE7XHJcbiAgICAgICAgb3V0WzVdID0geTE7XHJcbiAgICAgICAgb3V0WzZdID0gejE7ICAvL3novbRcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG5cclxuICAgICAgICBvdXRbOF0gPSB4MjtcclxuICAgICAgICBvdXRbOV0gPSB5MjtcclxuICAgICAgICBvdXRbMTBdID0gejI7IC8veui9tFxyXG4gICAgICAgIG91dFsxMV0gPSAwO1xyXG5cclxuICAgICAgICBvdXRbMTJdID0gLSh4MCAqIGV5ZXggKyB4MSAqIGV5ZXkgKyB4MiAqIGV5ZXopO1xyXG4gICAgICAgIG91dFsxM10gPSAtKHkwICogZXlleCArIHkxICogZXlleSArIHkyICogZXlleik7XHJcbiAgICAgICAgb3V0WzE0XSA9IC0oejAgKiBleWV4ICsgejEgKiBleWV5ICsgejIgKiBleWV6KTtcclxuICAgICAgICBvdXRbMTVdID0gMTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbG9va0F0IG1hdHJpeC5cclxuICAgICAqIFRoaXMgaXMgYSB3b3JsZCBtYXRyaXggZm9yIGEgY2FtZXJhLiBJbiBvdGhlciB3b3JkcyBpdCB3aWxsIHRyYW5zZm9ybVxyXG4gICAgICogZnJvbSB0aGUgb3JpZ2luIHRvIGEgcGxhY2UgYW5kIG9yaWVudGF0aW9uIGluIHRoZSB3b3JsZC4gRm9yIGEgdmlld1xyXG4gICAgICogbWF0cml4IHRha2UgdGhlIGludmVyc2Ugb2YgdGhpcy5cclxuICAgICAqIEBwYXJhbSB7VmVjdG9yM30gY2FtZXJhUG9zaXRpb24gcG9zaXRpb24gb2YgdGhlIGNhbWVyYVxyXG4gICAgICogQHBhcmFtIHtWZWN0b3IzfSB0YXJnZXQgcG9zaXRpb24gb2YgdGhlIHRhcmdldFxyXG4gICAgICogQHBhcmFtIHtWZWN0b3IzfSB1cCBkaXJlY3Rpb25cclxuICAgICAqIEBwYXJhbSB7TWF0cml4NH0gW2RzdF0gb3B0aW9uYWwgbWF0cml4IHRvIHN0b3JlIHJlc3VsdFxyXG4gICAgICogQHJldHVybiB7TWF0cml4NH0gZHN0IG9yIGEgbmV3IG1hdHJpeCBpZiBub25lIHByb3ZpZGVkXHJcbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLTNkLW1hdGhcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gbG9va0F0Mihkc3QsY2FtZXJhUG9zaXRpb24sIHRhcmdldCwgdXApIHtcclxuICAgICAgICBkc3QgPSBkc3QgfHwgbmV3IE1hdFR5cGUoMTYpO1xyXG4gICAgICAgIHZhciB6QXhpcyA9IFtdO1xyXG4gICAgICAgIHZhciBzdWJSID0gW107XHJcbiAgICAgICAgbm9ybWFsaXplKHpBeGlzLHN1YnRyYWN0VmVjdG9ycyhzdWJSLGNhbWVyYVBvc2l0aW9uLCB0YXJnZXQpKTtcclxuICAgICAgICB2YXIgeEF4aXMgPSBbXTtcclxuICAgICAgICB2YXIgY3Jvc3MxID0gW11cclxuICAgICAgICBub3JtYWxpemUoeEF4aXMsY3Jvc3MoY3Jvc3MxLHVwLCB6QXhpcykpO1xyXG4gICAgICAgIHZhciB5QXhpcyA9IFtdO1xyXG4gICAgICAgIHZhciBjcm9zczIgPSBbXTtcclxuICAgICAgICBub3JtYWxpemUoeUF4aXMsY3Jvc3MoY3Jvc3MyLHpBeGlzLCB4QXhpcykpO1xyXG5cclxuICAgIFxyXG4gICAgICAgIGRzdFsgMF0gPSB4QXhpc1swXTtcclxuICAgICAgICBkc3RbIDFdID0geEF4aXNbMV07XHJcbiAgICAgICAgZHN0WyAyXSA9IHhBeGlzWzJdO1xyXG4gICAgICAgIGRzdFsgM10gPSAwO1xyXG4gICAgICAgIGRzdFsgNF0gPSB5QXhpc1swXTtcclxuICAgICAgICBkc3RbIDVdID0geUF4aXNbMV07XHJcbiAgICAgICAgZHN0WyA2XSA9IHlBeGlzWzJdO1xyXG4gICAgICAgIGRzdFsgN10gPSAwO1xyXG4gICAgICAgIGRzdFsgOF0gPSB6QXhpc1swXTtcclxuICAgICAgICBkc3RbIDldID0gekF4aXNbMV07XHJcbiAgICAgICAgZHN0WzEwXSA9IHpBeGlzWzJdO1xyXG4gICAgICAgIGRzdFsxMV0gPSAwO1xyXG4gICAgICAgIGRzdFsxMl0gPSBjYW1lcmFQb3NpdGlvblswXTtcclxuICAgICAgICBkc3RbMTNdID0gY2FtZXJhUG9zaXRpb25bMV07XHJcbiAgICAgICAgZHN0WzE0XSA9IGNhbWVyYVBvc2l0aW9uWzJdO1xyXG4gICAgICAgIGRzdFsxNV0gPSAxO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIGRzdDtcclxuICAgICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGEgbWF0cml4IHRoYXQgbWFrZXMgc29tZXRoaW5nIGxvb2sgYXQgc29tZXRoaW5nIGVsc2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHRhcmdldFRvKG91dCwgZXllLCB0YXJnZXQsIHVwKSB7XHJcbiAgICAgICAgdmFyIGV5ZXggPSBleWVbMF0sXHJcbiAgICAgICAgICAgIGV5ZXkgPSBleWVbMV0sXHJcbiAgICAgICAgICAgIGV5ZXogPSBleWVbMl0sXHJcbiAgICAgICAgICAgIHVweCA9IHVwWzBdLFxyXG4gICAgICAgICAgICB1cHkgPSB1cFsxXSxcclxuICAgICAgICAgICAgdXB6ID0gdXBbMl07XHJcbiAgICAgICAgdmFyIHowID0gZXlleCAtIHRhcmdldFswXSxcclxuICAgICAgICAgICAgejEgPSBleWV5IC0gdGFyZ2V0WzFdLFxyXG4gICAgICAgICAgICB6MiA9IGV5ZXogLSB0YXJnZXRbMl07XHJcbiAgICAgICAgdmFyIGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcclxuXHJcbiAgICAgICAgaWYgKGxlbiA+IDApIHtcclxuICAgICAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xyXG4gICAgICAgICAgICB6MCAqPSBsZW47XHJcbiAgICAgICAgICAgIHoxICo9IGxlbjtcclxuICAgICAgICAgICAgejIgKj0gbGVuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHgwID0gdXB5ICogejIgLSB1cHogKiB6MSxcclxuICAgICAgICAgICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyLFxyXG4gICAgICAgICAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XHJcbiAgICAgICAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xyXG5cclxuICAgICAgICBpZiAobGVuID4gMCkge1xyXG4gICAgICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XHJcbiAgICAgICAgICAgIHgwICo9IGxlbjtcclxuICAgICAgICAgICAgeDEgKj0gbGVuO1xyXG4gICAgICAgICAgICB4MiAqPSBsZW47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRbMF0gPSB4MDtcclxuICAgICAgICBvdXRbMV0gPSB4MTtcclxuICAgICAgICBvdXRbMl0gPSB4MjtcclxuICAgICAgICBvdXRbM10gPSAwO1xyXG4gICAgICAgIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xyXG4gICAgICAgIG91dFs1XSA9IHoyICogeDAgLSB6MCAqIHgyO1xyXG4gICAgICAgIG91dFs2XSA9IHowICogeDEgLSB6MSAqIHgwO1xyXG4gICAgICAgIG91dFs3XSA9IDA7XHJcbiAgICAgICAgb3V0WzhdID0gejA7XHJcbiAgICAgICAgb3V0WzldID0gejE7XHJcbiAgICAgICAgb3V0WzEwXSA9IHoyO1xyXG4gICAgICAgIG91dFsxMV0gPSAwO1xyXG4gICAgICAgIG91dFsxMl0gPSBleWV4O1xyXG4gICAgICAgIG91dFsxM10gPSBleWV5O1xyXG4gICAgICAgIG91dFsxNF0gPSBleWV6O1xyXG4gICAgICAgIG91dFsxNV0gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQ0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzdHIkMyhhKSB7XHJcbiAgICAgICAgcmV0dXJuICdtYXQ0KCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJywgJyArIGFbNF0gKyAnLCAnICsgYVs1XSArICcsICcgKyBhWzZdICsgJywgJyArIGFbN10gKyAnLCAnICsgYVs4XSArICcsICcgKyBhWzldICsgJywgJyArIGFbMTBdICsgJywgJyArIGFbMTFdICsgJywgJyArIGFbMTJdICsgJywgJyArIGFbMTNdICsgJywgJyArIGFbMTRdICsgJywgJyArIGFbMTVdICsgJyknO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0NFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb2IkMyhhKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguaHlwb3QoYVswXSwgYVsxXSwgYVszXSwgYVs0XSwgYVs1XSwgYVs2XSwgYVs3XSwgYVs4XSwgYVs5XSwgYVsxMF0sIGFbMTFdLCBhWzEyXSwgYVsxM10sIGFbMTRdLCBhWzE1XSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdHdvIG1hdDQnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZCQzKG91dCwgYSwgYikge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xyXG4gICAgICAgIG91dFszXSA9IGFbM10gKyBiWzNdO1xyXG4gICAgICAgIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xyXG4gICAgICAgIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xyXG4gICAgICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xyXG4gICAgICAgIG91dFs3XSA9IGFbN10gKyBiWzddO1xyXG4gICAgICAgIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xyXG4gICAgICAgIG91dFs5XSA9IGFbOV0gKyBiWzldO1xyXG4gICAgICAgIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdO1xyXG4gICAgICAgIG91dFsxMV0gPSBhWzExXSArIGJbMTFdO1xyXG4gICAgICAgIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xyXG4gICAgICAgIG91dFsxM10gPSBhWzEzXSArIGJbMTNdO1xyXG4gICAgICAgIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdO1xyXG4gICAgICAgIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkMyhvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdIC0gYlszXTtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcclxuICAgICAgICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcclxuICAgICAgICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcclxuICAgICAgICBvdXRbN10gPSBhWzddIC0gYls3XTtcclxuICAgICAgICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcclxuICAgICAgICBvdXRbOV0gPSBhWzldIC0gYls5XTtcclxuICAgICAgICBvdXRbMTBdID0gYVsxMF0gLSBiWzEwXTtcclxuICAgICAgICBvdXRbMTFdID0gYVsxMV0gLSBiWzExXTtcclxuICAgICAgICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcclxuICAgICAgICBvdXRbMTNdID0gYVsxM10gLSBiWzEzXTtcclxuICAgICAgICBvdXRbMTRdID0gYVsxNF0gLSBiWzE0XTtcclxuICAgICAgICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyJDMob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAqIGI7XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSAqIGI7XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSAqIGI7XHJcbiAgICAgICAgb3V0WzNdID0gYVszXSAqIGI7XHJcbiAgICAgICAgb3V0WzRdID0gYVs0XSAqIGI7XHJcbiAgICAgICAgb3V0WzVdID0gYVs1XSAqIGI7XHJcbiAgICAgICAgb3V0WzZdID0gYVs2XSAqIGI7XHJcbiAgICAgICAgb3V0WzddID0gYVs3XSAqIGI7XHJcbiAgICAgICAgb3V0WzhdID0gYVs4XSAqIGI7XHJcbiAgICAgICAgb3V0WzldID0gYVs5XSAqIGI7XHJcbiAgICAgICAgb3V0WzEwXSA9IGFbMTBdICogYjtcclxuICAgICAgICBvdXRbMTFdID0gYVsxMV0gKiBiO1xyXG4gICAgICAgIG91dFsxMl0gPSBhWzEyXSAqIGI7XHJcbiAgICAgICAgb3V0WzEzXSA9IGFbMTNdICogYjtcclxuICAgICAgICBvdXRbMTRdID0gYVsxNF0gKiBiO1xyXG4gICAgICAgIG91dFsxNV0gPSBhWzE1XSAqIGI7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkcyB0d28gbWF0NCdzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcclxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkJDMob3V0LCBhLCBiLCBzY2FsZSkge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzRdID0gYVs0XSArIGJbNF0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFs2XSA9IGFbNl0gKyBiWzZdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzddID0gYVs3XSArIGJbN10gKiBzY2FsZTtcclxuICAgICAgICBvdXRbOF0gPSBhWzhdICsgYls4XSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFs5XSA9IGFbOV0gKyBiWzldICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzEwXSA9IGFbMTBdICsgYlsxMF0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbMTFdID0gYVsxMV0gKyBiWzExXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzEzXSA9IGFbMTNdICsgYlsxM10gKiBzY2FsZTtcclxuICAgICAgICBvdXRbMTRdID0gYVsxNF0gKyBiWzE0XSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdICogc2NhbGU7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZXhhY3RFcXVhbHMkMyhhLCBiKSB7XHJcbiAgICAgICAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XSAmJiBhWzhdID09PSBiWzhdICYmIGFbOV0gPT09IGJbOV0gJiYgYVsxMF0gPT09IGJbMTBdICYmIGFbMTFdID09PSBiWzExXSAmJiBhWzEyXSA9PT0gYlsxMl0gJiYgYVsxM10gPT09IGJbMTNdICYmIGFbMTRdID09PSBiWzE0XSAmJiBhWzE1XSA9PT0gYlsxNV07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICAgICAqIEBwYXJhbSB7bWF0NH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGVxdWFscyQ0KGEsIGIpIHtcclxuICAgICAgICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEyID0gYVsyXSxcclxuICAgICAgICAgICAgYTMgPSBhWzNdO1xyXG4gICAgICAgIHZhciBhNCA9IGFbNF0sXHJcbiAgICAgICAgICAgIGE1ID0gYVs1XSxcclxuICAgICAgICAgICAgYTYgPSBhWzZdLFxyXG4gICAgICAgICAgICBhNyA9IGFbN107XHJcbiAgICAgICAgdmFyIGE4ID0gYVs4XSxcclxuICAgICAgICAgICAgYTkgPSBhWzldLFxyXG4gICAgICAgICAgICBhMTAgPSBhWzEwXSxcclxuICAgICAgICAgICAgYTExID0gYVsxMV07XHJcbiAgICAgICAgdmFyIGExMiA9IGFbMTJdLFxyXG4gICAgICAgICAgICBhMTMgPSBhWzEzXSxcclxuICAgICAgICAgICAgYTE0ID0gYVsxNF0sXHJcbiAgICAgICAgICAgIGExNSA9IGFbMTVdO1xyXG4gICAgICAgIHZhciBiMCA9IGJbMF0sXHJcbiAgICAgICAgICAgIGIxID0gYlsxXSxcclxuICAgICAgICAgICAgYjIgPSBiWzJdLFxyXG4gICAgICAgICAgICBiMyA9IGJbM107XHJcbiAgICAgICAgdmFyIGI0ID0gYls0XSxcclxuICAgICAgICAgICAgYjUgPSBiWzVdLFxyXG4gICAgICAgICAgICBiNiA9IGJbNl0sXHJcbiAgICAgICAgICAgIGI3ID0gYls3XTtcclxuICAgICAgICB2YXIgYjggPSBiWzhdLFxyXG4gICAgICAgICAgICBiOSA9IGJbOV0sXHJcbiAgICAgICAgICAgIGIxMCA9IGJbMTBdLFxyXG4gICAgICAgICAgICBiMTEgPSBiWzExXTtcclxuICAgICAgICB2YXIgYjEyID0gYlsxMl0sXHJcbiAgICAgICAgICAgIGIxMyA9IGJbMTNdLFxyXG4gICAgICAgICAgICBiMTQgPSBiWzE0XSxcclxuICAgICAgICAgICAgYjE1ID0gYlsxNV07XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJiBNYXRoLmFicyhhNCAtIGI0KSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiYgTWF0aC5hYnMoYTUgLSBiNSkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpICYmIE1hdGguYWJzKGE2IC0gYjYpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE2KSwgTWF0aC5hYnMoYjYpKSAmJiBNYXRoLmFicyhhNyAtIGI3KSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNyksIE1hdGguYWJzKGI3KSkgJiYgTWF0aC5hYnMoYTggLSBiOCkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTgpLCBNYXRoLmFicyhiOCkpICYmIE1hdGguYWJzKGE5IC0gYjkpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE5KSwgTWF0aC5hYnMoYjkpKSAmJiBNYXRoLmFicyhhMTAgLSBiMTApIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMCksIE1hdGguYWJzKGIxMCkpICYmIE1hdGguYWJzKGExMSAtIGIxMSkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTExKSwgTWF0aC5hYnMoYjExKSkgJiYgTWF0aC5hYnMoYTEyIC0gYjEyKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTIpLCBNYXRoLmFicyhiMTIpKSAmJiBNYXRoLmFicyhhMTMgLSBiMTMpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMyksIE1hdGguYWJzKGIxMykpICYmIE1hdGguYWJzKGExNCAtIGIxNCkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTE0KSwgTWF0aC5hYnMoYjE0KSkgJiYgTWF0aC5hYnMoYTE1IC0gYjE1KSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTUpLCBNYXRoLmFicyhiMTUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayBtYXQ0Lm11bHRpcGx5fVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgbXVsJDMgPSBtdWx0aXBseSQzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQuc3VidHJhY3R9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzdWIkMyA9IHN1YnRyYWN0JDM7XHJcblxyXG4gICAgZXhwb3J0IHZhciBtYXQ0ID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIGNyZWF0ZTogY3JlYXRlJDMsXHJcbiAgICAgICAgY2xvbmU6IGNsb25lJDMsXHJcbiAgICAgICAgY29weTogY29weSQzLFxyXG4gICAgICAgIGFkZFZlY3RvcnM6IGFkZFZlY3RvcnMsXHJcbiAgICAgICAgc3VidHJhY3RWZWN0b3JzOiBzdWJ0cmFjdFZlY3RvcnMsXHJcbiAgICAgICAgc2NhbGVWZWN0b3I6IHNjYWxlVmVjdG9yLFxyXG4gICAgICAgIGNvbXBvc2U6Y29tcG9zZSxcclxuICAgICAgICBkZWNvbXBvc2U6ZGVjb21wb3NlLFxyXG4gICAgICAgIGZyb21WYWx1ZXM6IGZyb21WYWx1ZXMkMyxcclxuICAgICAgICBzZXQ6IHNldCQzLFxyXG4gICAgICAgIGlkZW50aXR5OiBpZGVudGl0eSQzLFxyXG4gICAgICAgIHRyYW5zcG9zZTogdHJhbnNwb3NlJDIsXHJcbiAgICAgICAgaW52ZXJ0OiBpbnZlcnQkMyxcclxuICAgICAgICBhZGpvaW50OiBhZGpvaW50JDIsXHJcbiAgICAgICAgZGV0ZXJtaW5hbnQ6IGRldGVybWluYW50JDMsXHJcbiAgICAgICAgbXVsdGlwbHk6IG11bHRpcGx5JDMsXHJcbiAgICAgICAgdHJhbnNsYXRlOiB0cmFuc2xhdGUkMixcclxuICAgICAgICBzY2FsZTogc2NhbGUkMyxcclxuICAgICAgICBzY2FsaW5nOnNjYWxpbmcsXHJcbiAgICAgICAgcm90YXRlOiByb3RhdGUkMyxcclxuICAgICAgICByb3RhdGVYOiByb3RhdGVYLFxyXG4gICAgICAgIHJvdGF0ZVk6IHJvdGF0ZVksXHJcbiAgICAgICAgcm90YXRlWjogcm90YXRlWixcclxuICAgICAgICBmcm9tVHJhbnNsYXRpb246IGZyb21UcmFuc2xhdGlvbiQyLFxyXG4gICAgICAgIHRyYW5zZm9ybURpcmVjdGlvbjp0cmFuc2Zvcm1EaXJlY3Rpb24sXHJcbiAgICAgICAgdHJhbnNmb3JtUG9pbnQ6dHJhbnNmb3JtUG9pbnQsXHJcbiAgICAgICAgdHJhbnNsYXRpb246dHJhbnNsYXRpb24sXHJcbiAgICAgICAgZnJvbVNjYWxpbmc6IGZyb21TY2FsaW5nJDMsXHJcbiAgICAgICAgZnJvbVJvdGF0aW9uOiBmcm9tUm90YXRpb24kMyxcclxuICAgICAgICBmcm9tWFJvdGF0aW9uOiBmcm9tWFJvdGF0aW9uLFxyXG4gICAgICAgIGZyb21ZUm90YXRpb246IGZyb21ZUm90YXRpb24sXHJcbiAgICAgICAgZnJvbVpSb3RhdGlvbjogZnJvbVpSb3RhdGlvbixcclxuICAgICAgICBmcm9tUm90YXRpb25UcmFuc2xhdGlvbjogZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sXHJcbiAgICAgICAgZnJvbVF1YXQyOiBmcm9tUXVhdDIsXHJcbiAgICAgICAgZ2V0VHJhbnNsYXRpb246IGdldFRyYW5zbGF0aW9uLFxyXG4gICAgICAgIGdldFNjYWxpbmc6IGdldFNjYWxpbmcsXHJcbiAgICAgICAgZ2V0Um90YXRpb246IGdldFJvdGF0aW9uLFxyXG4gICAgICAgIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGU6IGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGUsXHJcbiAgICAgICAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZU9yaWdpbjogZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZU9yaWdpbixcclxuICAgICAgICBmcm9tUXVhdDogZnJvbVF1YXQkMSxcclxuICAgICAgICBmcnVzdHVtOiBmcnVzdHVtLFxyXG4gICAgICAgIHBlcnNwZWN0aXZlOiBwZXJzcGVjdGl2ZSxcclxuICAgICAgICBwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldzogcGVyc3BlY3RpdmVGcm9tRmllbGRPZlZpZXcsXHJcbiAgICAgICAgb3J0aG86IG9ydGhvLFxyXG4gICAgICAgIGxvb2tBdDogbG9va0F0LFxyXG4gICAgICAgIGxvb2tBdDI6bG9va0F0MixcclxuICAgICAgICB0YXJnZXRUbzogdGFyZ2V0VG8sXHJcbiAgICAgICAgc3RyOiBzdHIkMyxcclxuICAgICAgICBmcm9iOiBmcm9iJDMsXHJcbiAgICAgICAgYWRkOiBhZGQkMyxcclxuICAgICAgICBzdWJ0cmFjdDogc3VidHJhY3QkMyxcclxuICAgICAgICBtdWx0aXBseVNjYWxhcjogbXVsdGlwbHlTY2FsYXIkMyxcclxuICAgICAgICBtdWx0aXBseVNjYWxhckFuZEFkZDogbXVsdGlwbHlTY2FsYXJBbmRBZGQkMyxcclxuICAgICAgICBleGFjdEVxdWFsczogZXhhY3RFcXVhbHMkMyxcclxuICAgICAgICBlcXVhbHM6IGVxdWFscyQ0LFxyXG4gICAgICAgIG11bDogbXVsJDMsXHJcbiAgICAgICAgc3ViOiBzdWIkM1xyXG4gICAgfSk7XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogTWFrZXMgYSB0cmFuc2xhdGlvbiBtYXRyaXhcclxuICAgICAqIOWwhuWNleS9jeefqemYteenu+WKqOWIsOaMh+WumuS9jee9rlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHR4IHggdHJhbnNsYXRpb24uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdHkgeSB0cmFuc2xhdGlvbi5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0eiB6IHRyYW5zbGF0aW9uLlxyXG4gICAgICogQHBhcmFtIHtNYXRyaXg0fSBbZHN0XSBvcHRpb25hbCBtYXRyaXggdG8gc3RvcmUgcmVzdWx0XHJcbiAgICAgKiBAcmV0dXJuIHtNYXRyaXg0fSBkc3Qgb3IgYSBuZXcgbWF0cml4IGlmIG5vbmUgcHJvdmlkZWRcclxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6d2ViZ2wtM2QtbWF0aFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGlvbihkc3QsdHgsIHR5LCB0eikge1xyXG4gICAgICAgIGRzdCA9IGRzdCB8fCBuZXcgTWF0VHlwZSgxNik7XHJcbiAgICAgICAgZHN0WyAwXSA9IDE7XHJcbiAgICAgICAgZHN0WyAxXSA9IDA7XHJcbiAgICAgICAgZHN0WyAyXSA9IDA7XHJcbiAgICAgICAgZHN0WyAzXSA9IDA7XHJcbiAgICAgICAgZHN0WyA0XSA9IDA7XHJcbiAgICAgICAgZHN0WyA1XSA9IDE7XHJcbiAgICAgICAgZHN0WyA2XSA9IDA7XHJcbiAgICAgICAgZHN0WyA3XSA9IDA7XHJcbiAgICAgICAgZHN0WyA4XSA9IDA7XHJcbiAgICAgICAgZHN0WyA5XSA9IDA7XHJcbiAgICAgICAgZHN0WzEwXSA9IDE7XHJcbiAgICAgICAgZHN0WzExXSA9IDA7XHJcbiAgICAgICAgZHN0WzEyXSA9IHR4O1xyXG4gICAgICAgIGRzdFsxM10gPSB0eTtcclxuICAgICAgICBkc3RbMTRdID0gdHo7XHJcbiAgICAgICAgZHN0WzE1XSA9IDE7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4gZHN0O1xyXG4gICAgICB9XHJcblxyXG4gICAgIC8qKlxyXG4gICAgICogVGFrZXMgYSA0LWJ5LTQgbWF0cml4IGFuZCBhIHZlY3RvciB3aXRoIDMgZW50cmllcyxcclxuICAgICAqIGludGVycHJldHMgdGhlIHZlY3RvciBhcyBhIHBvaW50LCB0cmFuc2Zvcm1zIHRoYXQgcG9pbnQgYnkgdGhlIG1hdHJpeCwgYW5kXHJcbiAgICAgKiByZXR1cm5zIHRoZSByZXN1bHQgYXMgYSB2ZWN0b3Igd2l0aCAzIGVudHJpZXMuXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeDR9IG0gVGhlIG1hdHJpeC5cclxuICAgICAqIEBwYXJhbSB7VmVjdG9yM30gdiBUaGUgcG9pbnQuXHJcbiAgICAgKiBAcGFyYW0ge1ZlY3RvcjR9IGRzdCBvcHRpb25hbCB2ZWN0b3I0IHRvIHN0b3JlIHJlc3VsdFxyXG4gICAgICogQHJldHVybiB7VmVjdG9yNH0gZHN0IG9yIG5ldyBWZWN0b3I0IGlmIG5vdCBwcm92aWRlZFxyXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTp3ZWJnbC0zZC1tYXRoXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVBvaW50KGRzdCxtLCB2KSB7XHJcbiAgICAgICAgZHN0ID0gZHN0fHxuZXcgTWF0VHlwZSgzKTtcclxuICAgICAgICB2YXIgdjAgPSB2WzBdO1xyXG4gICAgICAgIHZhciB2MSA9IHZbMV07XHJcbiAgICAgICAgdmFyIHYyID0gdlsyXTtcclxuICAgICAgICB2YXIgZCA9IHYwICogbVswICogNCArIDNdICsgdjEgKiBtWzEgKiA0ICsgM10gKyB2MiAqIG1bMiAqIDQgKyAzXSArIG1bMyAqIDQgKyAzXTtcclxuICAgIFxyXG4gICAgICAgIGRzdFswXSA9ICh2MCAqIG1bMCAqIDQgKyAwXSArIHYxICogbVsxICogNCArIDBdICsgdjIgKiBtWzIgKiA0ICsgMF0gKyBtWzMgKiA0ICsgMF0pIC8gZDtcclxuICAgICAgICBkc3RbMV0gPSAodjAgKiBtWzAgKiA0ICsgMV0gKyB2MSAqIG1bMSAqIDQgKyAxXSArIHYyICogbVsyICogNCArIDFdICsgbVszICogNCArIDFdKSAvIGQ7XHJcbiAgICAgICAgZHN0WzJdID0gKHYwICogbVswICogNCArIDJdICsgdjEgKiBtWzEgKiA0ICsgMl0gKyB2MiAqIG1bMiAqIDQgKyAyXSArIG1bMyAqIDQgKyAyXSkgLyBkO1xyXG4gICAgICAgIHJldHVybiBkc3Q7XHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUYWtlcyBhIDQtYnktNCBtYXRyaXggYW5kIGEgdmVjdG9yIHdpdGggMyBlbnRyaWVzLCBpbnRlcnByZXRzIHRoZSB2ZWN0b3IgYXMgYVxyXG4gICAgICogZGlyZWN0aW9uLCB0cmFuc2Zvcm1zIHRoYXQgZGlyZWN0aW9uIGJ5IHRoZSBtYXRyaXgsIGFuZCByZXR1cm5zIHRoZSByZXN1bHQ7XHJcbiAgICAgKiBhc3N1bWVzIHRoZSB0cmFuc2Zvcm1hdGlvbiBvZiAzLWRpbWVuc2lvbmFsIHNwYWNlIHJlcHJlc2VudGVkIGJ5IHRoZSBtYXRyaXhcclxuICAgICAqIGlzIHBhcmFsbGVsLXByZXNlcnZpbmcsIGkuZS4gYW55IGNvbWJpbmF0aW9uIG9mIHJvdGF0aW9uLCBzY2FsaW5nIGFuZFxyXG4gICAgICogdHJhbnNsYXRpb24sIGJ1dCBub3QgYSBwZXJzcGVjdGl2ZSBkaXN0b3J0aW9uLiBSZXR1cm5zIGEgdmVjdG9yIHdpdGggM1xyXG4gICAgICogZW50cmllcy5cclxuICAgICAqIEBwYXJhbSB7TWF0cml4NH0gbSBUaGUgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHtWZWN0b3IzfSB2IFRoZSBkaXJlY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0ge1ZlY3RvcjR9IGRzdCBvcHRpb25hbCB2ZWN0b3I0IHRvIHN0b3JlIHJlc3VsdFxyXG4gICAgICogQHJldHVybiB7VmVjdG9yNH0gZHN0IG9yIG5ldyBWZWN0b3I0IGlmIG5vdCBwcm92aWRlZFxyXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTp3ZWJnbC0zZC1tYXRoXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybURpcmVjdGlvbihtLCB2LCBkc3QpIHtcclxuICAgICAgICBkc3QgPSBkc3QgfHwgbmV3IE1hdFR5cGUoMyk7XHJcbiAgICBcclxuICAgICAgICB2YXIgdjAgPSB2WzBdO1xyXG4gICAgICAgIHZhciB2MSA9IHZbMV07XHJcbiAgICAgICAgdmFyIHYyID0gdlsyXTtcclxuICAgIFxyXG4gICAgICAgIGRzdFswXSA9IHYwICogbVswICogNCArIDBdICsgdjEgKiBtWzEgKiA0ICsgMF0gKyB2MiAqIG1bMiAqIDQgKyAwXTtcclxuICAgICAgICBkc3RbMV0gPSB2MCAqIG1bMCAqIDQgKyAxXSArIHYxICogbVsxICogNCArIDFdICsgdjIgKiBtWzIgKiA0ICsgMV07XHJcbiAgICAgICAgZHN0WzJdID0gdjAgKiBtWzAgKiA0ICsgMl0gKyB2MSAqIG1bMSAqIDQgKyAyXSArIHYyICogbVsyICogNCArIDJdO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIGRzdDtcclxuICAgICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogMyBEaW1lbnNpb25hbCBWZWN0b3JcclxuICAgICAqIEBtb2R1bGUgdmVjM1xyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWMzXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlJDQoKSB7XHJcbiAgICAgICAgdmFyIG91dCA9IG5ldyBBUlJBWV9UWVBFKDMpO1xyXG5cclxuICAgICAgICBpZiAoQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgICAgICAgICAgb3V0WzBdID0gMDtcclxuICAgICAgICAgICAgb3V0WzFdID0gMDtcclxuICAgICAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2xvbmVcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNsb25lJDQoYSkge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSgzKTtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbGVuZ3RoKGEpIHtcclxuICAgICAgICB2YXIgeCA9IGFbMF07XHJcbiAgICAgICAgdmFyIHkgPSBhWzFdO1xyXG4gICAgICAgIHZhciB6ID0gYVsyXTtcclxuICAgICAgICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyB2ZWMzIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21WYWx1ZXMkNCh4LCB5LCB6KSB7XHJcbiAgICAgICAgdmFyIG91dCA9IG5ldyBBUlJBWV9UWVBFKDMpO1xyXG4gICAgICAgIG91dFswXSA9IHg7XHJcbiAgICAgICAgb3V0WzFdID0geTtcclxuICAgICAgICBvdXRbMl0gPSB6O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMzIHRvIGFub3RoZXJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBzb3VyY2UgdmVjdG9yXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjb3B5JDQob3V0LCBhKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMyB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHNldCQ0KG91dCwgeCwgeSwgeikge1xyXG4gICAgICAgIG91dFswXSA9IHg7XHJcbiAgICAgICAgb3V0WzFdID0geTtcclxuICAgICAgICBvdXRbMl0gPSB6O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdHdvIHZlYzMnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGFkZCQ0KG91dCwgYSwgYikge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKyBiWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkNChvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNdWx0aXBsaWVzIHR3byB2ZWMzJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBtdWx0aXBseSQ0KG91dCwgYSwgYikge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKiBiWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERpdmlkZXMgdHdvIHZlYzMnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2VpbFxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY2VpbChvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XHJcbiAgICAgICAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xyXG4gICAgICAgIG91dFsyXSA9IE1hdGguY2VpbChhWzJdKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGZsb29yXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmbG9vcihvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xyXG4gICAgICAgIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XHJcbiAgICAgICAgb3V0WzJdID0gTWF0aC5mbG9vcihhWzJdKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMzJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XHJcbiAgICAgICAgb3V0WzFdID0gTWF0aC5taW4oYVsxXSwgYlsxXSk7XHJcbiAgICAgICAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMydzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbWF4KG91dCwgYSwgYikge1xyXG4gICAgICAgIG91dFswXSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pO1xyXG4gICAgICAgIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xyXG4gICAgICAgIG91dFsyXSA9IE1hdGgubWF4KGFbMl0sIGJbMl0pO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gcm91bmRcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XHJcbiAgICAgICAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcclxuICAgICAgICBvdXRbMl0gPSBNYXRoLnJvdW5kKGFbMl0pO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlcyBhIHZlYzMgYnkgYSBzY2FsYXIgbnVtYmVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGUkNChvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICogYjtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICogYjtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICogYjtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHR3byB2ZWMzJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcclxuICAgICAgICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xyXG4gICAgICAgIHZhciB5ID0gYlsxXSAtIGFbMV07XHJcbiAgICAgICAgdmFyIHogPSBiWzJdIC0gYVsyXTtcclxuICAgICAgICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcclxuICAgICAgICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xyXG4gICAgICAgIHZhciB5ID0gYlsxXSAtIGFbMV07XHJcbiAgICAgICAgdmFyIHogPSBiWzJdIC0gYVsyXTtcclxuICAgICAgICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XHJcbiAgICAgICAgdmFyIHggPSBhWzBdO1xyXG4gICAgICAgIHZhciB5ID0gYVsxXTtcclxuICAgICAgICB2YXIgeiA9IGFbMl07XHJcbiAgICAgICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBuZWdhdGVcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSAtYVswXTtcclxuICAgICAgICBvdXRbMV0gPSAtYVsxXTtcclxuICAgICAgICBvdXRbMl0gPSAtYVsyXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGludmVydFxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IDEuMCAvIGFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gMS4wIC8gYVsyXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBOb3JtYWxpemUgYSB2ZWMzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpemUob3V0LCBhKSB7XHJcbiAgICAgICAgb3V0ID0gb3V0IHx8IG5ldyBGbG9hdDMyQXJyYXkoMyk7XHJcbiAgICAgICAgdmFyIHggPSBhWzBdO1xyXG4gICAgICAgIHZhciB5ID0gYVsxXTtcclxuICAgICAgICB2YXIgeiA9IGFbMl07XHJcbiAgICAgICAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcclxuXHJcbiAgICAgICAgaWYgKGxlbiA+IDApIHtcclxuICAgICAgICAgICAgLy9UT0RPOiBldmFsdWF0ZSB1c2Ugb2YgZ2xtX2ludnNxcnQgaGVyZT9cclxuICAgICAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAqIGxlbjtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICogbGVuO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gKiBsZW47XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZG90KGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICAgICAgICBheiA9IGFbMl07XHJcbiAgICAgICAgdmFyIGJ4ID0gYlswXSxcclxuICAgICAgICAgICAgYnkgPSBiWzFdLFxyXG4gICAgICAgICAgICBieiA9IGJbMl07XHJcbiAgICAgICAgb3V0WzBdID0gYXkgKiBieiAtIGF6ICogYnk7XHJcbiAgICAgICAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XHJcbiAgICAgICAgb3V0WzJdID0gYXggKiBieSAtIGF5ICogYng7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMzJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xyXG4gICAgICAgIHZhciBheCA9IGFbMF07XHJcbiAgICAgICAgdmFyIGF5ID0gYVsxXTtcclxuICAgICAgICB2YXIgYXogPSBhWzJdO1xyXG4gICAgICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xyXG4gICAgICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xyXG4gICAgICAgIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGEgaGVybWl0ZSBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGQgdGhlIGZvdXJ0aCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBoZXJtaXRlKG91dCwgYSwgYiwgYywgZCwgdCkge1xyXG4gICAgICAgIHZhciBmYWN0b3JUaW1lczIgPSB0ICogdDtcclxuICAgICAgICB2YXIgZmFjdG9yMSA9IGZhY3RvclRpbWVzMiAqICgyICogdCAtIDMpICsgMTtcclxuICAgICAgICB2YXIgZmFjdG9yMiA9IGZhY3RvclRpbWVzMiAqICh0IC0gMikgKyB0O1xyXG4gICAgICAgIHZhciBmYWN0b3IzID0gZmFjdG9yVGltZXMyICogKHQgLSAxKTtcclxuICAgICAgICB2YXIgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqICgzIC0gMiAqIHQpO1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKiBmYWN0b3IxICsgYlswXSAqIGZhY3RvcjIgKyBjWzBdICogZmFjdG9yMyArIGRbMF0gKiBmYWN0b3I0O1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKiBmYWN0b3IxICsgYlsxXSAqIGZhY3RvcjIgKyBjWzFdICogZmFjdG9yMyArIGRbMV0gKiBmYWN0b3I0O1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gKiBmYWN0b3IxICsgYlsyXSAqIGZhY3RvcjIgKyBjWzJdICogZmFjdG9yMyArIGRbMl0gKiBmYWN0b3I0O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGEgYmV6aWVyIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjM30gZCB0aGUgZm91cnRoIG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGJlemllcihvdXQsIGEsIGIsIGMsIGQsIHQpIHtcclxuICAgICAgICB2YXIgaW52ZXJzZUZhY3RvciA9IDEgLSB0O1xyXG4gICAgICAgIHZhciBpbnZlcnNlRmFjdG9yVGltZXNUd28gPSBpbnZlcnNlRmFjdG9yICogaW52ZXJzZUZhY3RvcjtcclxuICAgICAgICB2YXIgZmFjdG9yVGltZXMyID0gdCAqIHQ7XHJcbiAgICAgICAgdmFyIGZhY3RvcjEgPSBpbnZlcnNlRmFjdG9yVGltZXNUd28gKiBpbnZlcnNlRmFjdG9yO1xyXG4gICAgICAgIHZhciBmYWN0b3IyID0gMyAqIHQgKiBpbnZlcnNlRmFjdG9yVGltZXNUd287XHJcbiAgICAgICAgdmFyIGZhY3RvcjMgPSAzICogZmFjdG9yVGltZXMyICogaW52ZXJzZUZhY3RvcjtcclxuICAgICAgICB2YXIgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqIHQ7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAqIGZhY3RvcjEgKyBiWzBdICogZmFjdG9yMiArIGNbMF0gKiBmYWN0b3IzICsgZFswXSAqIGZhY3RvcjQ7XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSAqIGZhY3RvcjEgKyBiWzFdICogZmFjdG9yMiArIGNbMV0gKiBmYWN0b3IzICsgZFsxXSAqIGZhY3RvcjQ7XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSAqIGZhY3RvcjEgKyBiWzJdICogZmFjdG9yMiArIGNbMl0gKiBmYWN0b3IzICsgZFsyXSAqIGZhY3RvcjQ7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XHJcbiAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XHJcbiAgICAgICAgdmFyIHIgPSBSQU5ET00oKSAqIDIuMCAqIE1hdGguUEk7XHJcbiAgICAgICAgdmFyIHogPSBSQU5ET00oKSAqIDIuMCAtIDEuMDtcclxuICAgICAgICB2YXIgelNjYWxlID0gTWF0aC5zcXJ0KDEuMCAtIHogKiB6KSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFswXSA9IE1hdGguY29zKHIpICogelNjYWxlO1xyXG4gICAgICAgIG91dFsxXSA9IE1hdGguc2luKHIpICogelNjYWxlO1xyXG4gICAgICAgIG91dFsyXSA9IHogKiBzY2FsZTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQ0LlxyXG4gICAgICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xyXG4gICAgICAgIHZhciB4ID0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGFbMV0sXHJcbiAgICAgICAgICAgIHogPSBhWzJdO1xyXG4gICAgICAgIHZhciB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xyXG4gICAgICAgIHcgPSB3IHx8IDEuMDtcclxuICAgICAgICBvdXRbMF0gPSAobVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6ICsgbVsxMl0pIC8gdztcclxuICAgICAgICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pIC8gdztcclxuICAgICAgICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgbWF0My5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IG0gdGhlIDN4MyBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XHJcbiAgICAgICAgdmFyIHggPSBhWzBdLFxyXG4gICAgICAgICAgICB5ID0gYVsxXSxcclxuICAgICAgICAgICAgeiA9IGFbMl07XHJcbiAgICAgICAgb3V0WzBdID0geCAqIG1bMF0gKyB5ICogbVszXSArIHogKiBtWzZdO1xyXG4gICAgICAgIG91dFsxXSA9IHggKiBtWzFdICsgeSAqIG1bNF0gKyB6ICogbVs3XTtcclxuICAgICAgICBvdXRbMl0gPSB4ICogbVsyXSArIHkgKiBtWzVdICsgeiAqIG1bOF07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgcXVhdFxyXG4gICAgICogQ2FuIGFsc28gYmUgdXNlZCBmb3IgZHVhbCBxdWF0ZXJuaW9ucy4gKE11bHRpcGx5IGl0IHdpdGggdGhlIHJlYWwgcGFydClcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcclxuICAgICAgICAvLyBiZW5jaG1hcmtzOiBodHRwczovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tdmVjMy1pbXBsZW1lbnRhdGlvbnMtZml4ZWRcclxuICAgICAgICB2YXIgcXggPSBxWzBdLFxyXG4gICAgICAgICAgICBxeSA9IHFbMV0sXHJcbiAgICAgICAgICAgIHF6ID0gcVsyXSxcclxuICAgICAgICAgICAgcXcgPSBxWzNdO1xyXG4gICAgICAgIHZhciB4ID0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGFbMV0sXHJcbiAgICAgICAgICAgIHogPSBhWzJdOyAvLyB2YXIgcXZlYyA9IFtxeCwgcXksIHF6XTtcclxuICAgICAgICAvLyB2YXIgdXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCBhKTtcclxuXHJcbiAgICAgICAgdmFyIHV2eCA9IHF5ICogeiAtIHF6ICogeSxcclxuICAgICAgICAgICAgdXZ5ID0gcXogKiB4IC0gcXggKiB6LFxyXG4gICAgICAgICAgICB1dnogPSBxeCAqIHkgLSBxeSAqIHg7IC8vIHZhciB1dXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCB1dik7XHJcblxyXG4gICAgICAgIHZhciB1dXZ4ID0gcXkgKiB1dnogLSBxeiAqIHV2eSxcclxuICAgICAgICAgICAgdXV2eSA9IHF6ICogdXZ4IC0gcXggKiB1dnosXHJcbiAgICAgICAgICAgIHV1dnogPSBxeCAqIHV2eSAtIHF5ICogdXZ4OyAvLyB2ZWMzLnNjYWxlKHV2LCB1diwgMiAqIHcpO1xyXG5cclxuICAgICAgICB2YXIgdzIgPSBxdyAqIDI7XHJcbiAgICAgICAgdXZ4ICo9IHcyO1xyXG4gICAgICAgIHV2eSAqPSB3MjtcclxuICAgICAgICB1dnogKj0gdzI7IC8vIHZlYzMuc2NhbGUodXV2LCB1dXYsIDIpO1xyXG5cclxuICAgICAgICB1dXZ4ICo9IDI7XHJcbiAgICAgICAgdXV2eSAqPSAyO1xyXG4gICAgICAgIHV1dnogKj0gMjsgLy8gcmV0dXJuIHZlYzMuYWRkKG91dCwgYSwgdmVjMy5hZGQob3V0LCB1diwgdXV2KSk7XHJcblxyXG4gICAgICAgIG91dFswXSA9IHggKyB1dnggKyB1dXZ4O1xyXG4gICAgICAgIG91dFsxXSA9IHkgKyB1dnkgKyB1dXZ5O1xyXG4gICAgICAgIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHgtYXhpc1xyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMzXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRlWCQxKG91dCwgYSwgYiwgYykge1xyXG4gICAgICAgIHZhciBwID0gW10sXHJcbiAgICAgICAgICAgIHIgPSBbXTsgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxyXG5cclxuICAgICAgICBwWzBdID0gYVswXSAtIGJbMF07XHJcbiAgICAgICAgcFsxXSA9IGFbMV0gLSBiWzFdO1xyXG4gICAgICAgIHBbMl0gPSBhWzJdIC0gYlsyXTsgLy9wZXJmb3JtIHJvdGF0aW9uXHJcblxyXG4gICAgICAgIHJbMF0gPSBwWzBdO1xyXG4gICAgICAgIHJbMV0gPSBwWzFdICogTWF0aC5jb3MoYykgLSBwWzJdICogTWF0aC5zaW4oYyk7XHJcbiAgICAgICAgclsyXSA9IHBbMV0gKiBNYXRoLnNpbihjKSArIHBbMl0gKiBNYXRoLmNvcyhjKTsgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxyXG5cclxuICAgICAgICBvdXRbMF0gPSByWzBdICsgYlswXTtcclxuICAgICAgICBvdXRbMV0gPSByWzFdICsgYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSByWzJdICsgYlsyXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB5LWF4aXNcclxuICAgICAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYyBUaGUgYW5nbGUgb2Ygcm90YXRpb25cclxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGF0ZVkkMShvdXQsIGEsIGIsIGMpIHtcclxuICAgICAgICB2YXIgcCA9IFtdLFxyXG4gICAgICAgICAgICByID0gW107IC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cclxuXHJcbiAgICAgICAgcFswXSA9IGFbMF0gLSBiWzBdO1xyXG4gICAgICAgIHBbMV0gPSBhWzFdIC0gYlsxXTtcclxuICAgICAgICBwWzJdID0gYVsyXSAtIGJbMl07IC8vcGVyZm9ybSByb3RhdGlvblxyXG5cclxuICAgICAgICByWzBdID0gcFsyXSAqIE1hdGguc2luKGMpICsgcFswXSAqIE1hdGguY29zKGMpO1xyXG4gICAgICAgIHJbMV0gPSBwWzFdO1xyXG4gICAgICAgIHJbMl0gPSBwWzJdICogTWF0aC5jb3MoYykgLSBwWzBdICogTWF0aC5zaW4oYyk7IC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cclxuXHJcbiAgICAgICAgb3V0WzBdID0gclswXSArIGJbMF07XHJcbiAgICAgICAgb3V0WzFdID0gclsxXSArIGJbMV07XHJcbiAgICAgICAgb3V0WzJdID0gclsyXSArIGJbMl07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgei1heGlzXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcclxuICAgICAqIEBwYXJhbSB7dmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGMgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGVaJDEob3V0LCBhLCBiLCBjKSB7XHJcbiAgICAgICAgdmFyIHAgPSBbXSxcclxuICAgICAgICAgICAgciA9IFtdOyAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXHJcblxyXG4gICAgICAgIHBbMF0gPSBhWzBdIC0gYlswXTtcclxuICAgICAgICBwWzFdID0gYVsxXSAtIGJbMV07XHJcbiAgICAgICAgcFsyXSA9IGFbMl0gLSBiWzJdOyAvL3BlcmZvcm0gcm90YXRpb25cclxuXHJcbiAgICAgICAgclswXSA9IHBbMF0gKiBNYXRoLmNvcyhjKSAtIHBbMV0gKiBNYXRoLnNpbihjKTtcclxuICAgICAgICByWzFdID0gcFswXSAqIE1hdGguc2luKGMpICsgcFsxXSAqIE1hdGguY29zKGMpO1xyXG4gICAgICAgIHJbMl0gPSBwWzJdOyAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXHJcblxyXG4gICAgICAgIG91dFswXSA9IHJbMF0gKyBiWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IHJbMV0gKyBiWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgYW5nbGUgYmV0d2VlbiB0d28gM0QgdmVjdG9yc1xyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gYW5nbGUoYSwgYikge1xyXG4gICAgICAgIHZhciB0ZW1wQSA9IGZyb21WYWx1ZXMkNChhWzBdLCBhWzFdLCBhWzJdKTtcclxuICAgICAgICB2YXIgdGVtcEIgPSBmcm9tVmFsdWVzJDQoYlswXSwgYlsxXSwgYlsyXSk7XHJcbiAgICAgICAgbm9ybWFsaXplKHRlbXBBLCB0ZW1wQSk7XHJcbiAgICAgICAgbm9ybWFsaXplKHRlbXBCLCB0ZW1wQik7XHJcbiAgICAgICAgdmFyIGNvc2luZSA9IGRvdCh0ZW1wQSwgdGVtcEIpO1xyXG5cclxuICAgICAgICBpZiAoY29zaW5lID4gMS4wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29zaW5lIDwgLTEuMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5QSTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHplcm9cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gemVybyhvdXQpIHtcclxuICAgICAgICBvdXRbMF0gPSAwLjA7XHJcbiAgICAgICAgb3V0WzFdID0gMC4wO1xyXG4gICAgICAgIG91dFsyXSA9IDAuMDtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzdHIkNChhKSB7XHJcbiAgICAgICAgcmV0dXJuICd2ZWMzKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcpJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGV4YWN0RXF1YWxzJDQoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGVxdWFscyQ1KGEsIGIpIHtcclxuICAgICAgICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICAgICAgICBhMSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGEyID0gYVsyXTtcclxuICAgICAgICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICAgICAgICBiMSA9IGJbMV0sXHJcbiAgICAgICAgICAgIGIyID0gYlsyXTtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zdWJ0cmFjdH1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIHN1YiQ0ID0gc3VidHJhY3QkNDtcclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLm11bHRpcGx5fVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgbXVsJDQgPSBtdWx0aXBseSQ0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuZGl2aWRlfVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgZGl2ID0gZGl2aWRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuZGlzdGFuY2V9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBkaXN0ID0gZGlzdGFuY2U7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zcXVhcmVkRGlzdGFuY2V9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzcXJEaXN0ID0gc3F1YXJlZERpc3RhbmNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMubGVuZ3RofVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgbGVuID0gbGVuZ3RoO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3F1YXJlZExlbmd0aH1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWMzcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWMzLiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjM3MgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cclxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdmVjID0gY3JlYXRlJDQoKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIHN0cmlkZSwgb2Zmc2V0LCBjb3VudCwgZm4sIGFyZykge1xyXG4gICAgICAgICAgICB2YXIgaSwgbDtcclxuXHJcbiAgICAgICAgICAgIGlmICghc3RyaWRlKSB7XHJcbiAgICAgICAgICAgICAgICBzdHJpZGUgPSAzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGwgPSBhLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcclxuICAgICAgICAgICAgICAgIHZlY1swXSA9IGFbaV07XHJcbiAgICAgICAgICAgICAgICB2ZWNbMV0gPSBhW2kgKyAxXTtcclxuICAgICAgICAgICAgICAgIHZlY1syXSA9IGFbaSArIDJdO1xyXG4gICAgICAgICAgICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XHJcbiAgICAgICAgICAgICAgICBhW2ldID0gdmVjWzBdO1xyXG4gICAgICAgICAgICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XHJcbiAgICAgICAgICAgICAgICBhW2kgKyAyXSA9IHZlY1syXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgfTtcclxuICAgIH0oKTtcclxuXHJcbiAgICBleHBvcnQgdmFyIHZlYzMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgY3JlYXRlOiBjcmVhdGUkNCxcclxuICAgICAgICBjbG9uZTogY2xvbmUkNCxcclxuICAgICAgICBsZW5ndGg6IGxlbmd0aCxcclxuICAgICAgICBmcm9tVmFsdWVzOiBmcm9tVmFsdWVzJDQsXHJcbiAgICAgICAgY29weTogY29weSQ0LFxyXG4gICAgICAgIHNldDogc2V0JDQsXHJcbiAgICAgICAgYWRkOiBhZGQkNCxcclxuICAgICAgICBzdWJ0cmFjdDogc3VidHJhY3QkNCxcclxuICAgICAgICBtdWx0aXBseTogbXVsdGlwbHkkNCxcclxuICAgICAgICBkaXZpZGU6IGRpdmlkZSxcclxuICAgICAgICBjZWlsOiBjZWlsLFxyXG4gICAgICAgIGZsb29yOiBmbG9vcixcclxuICAgICAgICBtaW46IG1pbixcclxuICAgICAgICBtYXg6IG1heCxcclxuICAgICAgICByb3VuZDogcm91bmQsXHJcbiAgICAgICAgc2NhbGU6IHNjYWxlJDQsXHJcbiAgICAgICAgc2NhbGVBbmRBZGQ6IHNjYWxlQW5kQWRkLFxyXG4gICAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZSxcclxuICAgICAgICBzcXVhcmVkRGlzdGFuY2U6IHNxdWFyZWREaXN0YW5jZSxcclxuICAgICAgICBzcXVhcmVkTGVuZ3RoOiBzcXVhcmVkTGVuZ3RoLFxyXG4gICAgICAgIG5lZ2F0ZTogbmVnYXRlLFxyXG4gICAgICAgIGludmVyc2U6IGludmVyc2UsXHJcbiAgICAgICAgbm9ybWFsaXplOiBub3JtYWxpemUsXHJcbiAgICAgICAgZG90OiBkb3QsXHJcbiAgICAgICAgY3Jvc3M6IGNyb3NzLFxyXG4gICAgICAgIGxlcnA6IGxlcnAsXHJcbiAgICAgICAgaGVybWl0ZTogaGVybWl0ZSxcclxuICAgICAgICBiZXppZXI6IGJlemllcixcclxuICAgICAgICByYW5kb206IHJhbmRvbSxcclxuICAgICAgICB0cmFuc2Zvcm1NYXQ0OiB0cmFuc2Zvcm1NYXQ0LFxyXG4gICAgICAgIHRyYW5zZm9ybU1hdDM6IHRyYW5zZm9ybU1hdDMsXHJcbiAgICAgICAgdHJhbnNmb3JtUXVhdDogdHJhbnNmb3JtUXVhdCxcclxuICAgICAgICByb3RhdGVYOiByb3RhdGVYJDEsXHJcbiAgICAgICAgcm90YXRlWTogcm90YXRlWSQxLFxyXG4gICAgICAgIHJvdGF0ZVo6IHJvdGF0ZVokMSxcclxuICAgICAgICBhbmdsZTogYW5nbGUsXHJcbiAgICAgICAgemVybzogemVybyxcclxuICAgICAgICBzdHI6IHN0ciQ0LFxyXG4gICAgICAgIGV4YWN0RXF1YWxzOiBleGFjdEVxdWFscyQ0LFxyXG4gICAgICAgIGVxdWFsczogZXF1YWxzJDUsXHJcbiAgICAgICAgc3ViOiBzdWIkNCxcclxuICAgICAgICBtdWw6IG11bCQ0LFxyXG4gICAgICAgIGRpdjogZGl2LFxyXG4gICAgICAgIGRpc3Q6IGRpc3QsXHJcbiAgICAgICAgc3FyRGlzdDogc3FyRGlzdCxcclxuICAgICAgICBsZW46IGxlbixcclxuICAgICAgICBzcXJMZW46IHNxckxlbixcclxuICAgICAgICBmb3JFYWNoOiBmb3JFYWNoXHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIDQgRGltZW5zaW9uYWwgVmVjdG9yXHJcbiAgICAgKiBAbW9kdWxlIHZlYzRcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjNFxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZSQ1KCkge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSg0KTtcclxuXHJcbiAgICAgICAgaWYgKEFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XHJcbiAgICAgICAgICAgIG91dFswXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFszXSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHZlYzQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNsb25lXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjbG9uZSQ1KGEpIHtcclxuICAgICAgICB2YXIgb3V0ID0gbmV3IEFSUkFZX1RZUEUoNCk7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHZlYzQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21WYWx1ZXMkNSh4LCB5LCB6LCB3KSB7XHJcbiAgICAgICAgdmFyIG91dCA9IG5ldyBBUlJBWV9UWVBFKDQpO1xyXG4gICAgICAgIG91dFswXSA9IHg7XHJcbiAgICAgICAgb3V0WzFdID0geTtcclxuICAgICAgICBvdXRbMl0gPSB6O1xyXG4gICAgICAgIG91dFszXSA9IHc7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzQgdG8gYW5vdGhlclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvcHkkNShvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc2V0JDUob3V0LCB4LCB5LCB6LCB3KSB7XHJcbiAgICAgICAgb3V0WzBdID0geDtcclxuICAgICAgICBvdXRbMV0gPSB5O1xyXG4gICAgICAgIG91dFsyXSA9IHo7XHJcbiAgICAgICAgb3V0WzNdID0gdztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHR3byB2ZWM0J3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBhZGQkNShvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICsgYlszXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDUob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXSAtIGJbM107XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTXVsdGlwbGllcyB0d28gdmVjNCdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkkNShvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICogYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICogYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICogYlsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICogYlszXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXZpZGVzIHR3byB2ZWM0J3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBkaXZpZGUkMShvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcclxuICAgICAgICBvdXRbM10gPSBhWzNdIC8gYlszXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2VpbFxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY2VpbCQxKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcclxuICAgICAgICBvdXRbMV0gPSBNYXRoLmNlaWwoYVsxXSk7XHJcbiAgICAgICAgb3V0WzJdID0gTWF0aC5jZWlsKGFbMl0pO1xyXG4gICAgICAgIG91dFszXSA9IE1hdGguY2VpbChhWzNdKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGZsb29yXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmbG9vciQxKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XHJcbiAgICAgICAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcclxuICAgICAgICBvdXRbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xyXG4gICAgICAgIG91dFszXSA9IE1hdGguZmxvb3IoYVszXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbWluaW11bSBvZiB0d28gdmVjNCdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbWluJDEob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XHJcbiAgICAgICAgb3V0WzFdID0gTWF0aC5taW4oYVsxXSwgYlsxXSk7XHJcbiAgICAgICAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XHJcbiAgICAgICAgb3V0WzNdID0gTWF0aC5taW4oYVszXSwgYlszXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjNCdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbWF4JDEob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XHJcbiAgICAgICAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XHJcbiAgICAgICAgb3V0WzJdID0gTWF0aC5tYXgoYVsyXSwgYlsyXSk7XHJcbiAgICAgICAgb3V0WzNdID0gTWF0aC5tYXgoYVszXSwgYlszXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byByb3VuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm91bmQkMShvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xyXG4gICAgICAgIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XHJcbiAgICAgICAgb3V0WzJdID0gTWF0aC5yb3VuZChhWzJdKTtcclxuICAgICAgICBvdXRbM10gPSBNYXRoLnJvdW5kKGFbM10pO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlcyBhIHZlYzQgYnkgYSBzY2FsYXIgbnVtYmVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGUkNShvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICogYjtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICogYjtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICogYjtcclxuICAgICAgICBvdXRbM10gPSBhWzNdICogYjtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHR3byB2ZWM0J3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHNjYWxlQW5kQWRkJDEob3V0LCBhLCBiLCBzY2FsZSkge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xyXG4gICAgICAgIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBkaXN0YW5jZSQxKGEsIGIpIHtcclxuICAgICAgICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xyXG4gICAgICAgIHZhciB5ID0gYlsxXSAtIGFbMV07XHJcbiAgICAgICAgdmFyIHogPSBiWzJdIC0gYVsyXTtcclxuICAgICAgICB2YXIgdyA9IGJbM10gLSBhWzNdO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmh5cG90KHgsIHksIHosIHcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWM0J3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UkMShhLCBiKSB7XHJcbiAgICAgICAgdmFyIHggPSBiWzBdIC0gYVswXTtcclxuICAgICAgICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xyXG4gICAgICAgIHZhciB6ID0gYlsyXSAtIGFbMl07XHJcbiAgICAgICAgdmFyIHcgPSBiWzNdIC0gYVszXTtcclxuICAgICAgICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBsZW5ndGgkMShhKSB7XHJcbiAgICAgICAgdmFyIHggPSBhWzBdO1xyXG4gICAgICAgIHZhciB5ID0gYVsxXTtcclxuICAgICAgICB2YXIgeiA9IGFbMl07XHJcbiAgICAgICAgdmFyIHcgPSBhWzNdO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmh5cG90KHgsIHksIHosIHcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3F1YXJlZExlbmd0aCQxKGEpIHtcclxuICAgICAgICB2YXIgeCA9IGFbMF07XHJcbiAgICAgICAgdmFyIHkgPSBhWzFdO1xyXG4gICAgICAgIHZhciB6ID0gYVsyXTtcclxuICAgICAgICB2YXIgdyA9IGFbM107XHJcbiAgICAgICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbmVnYXRlJDEob3V0LCBhKSB7XHJcbiAgICAgICAgb3V0WzBdID0gLWFbMF07XHJcbiAgICAgICAgb3V0WzFdID0gLWFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gLWFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gLWFbM107XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBpbnZlcnRcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGludmVyc2UkMShvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IDEuMCAvIGFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gMS4wIC8gYVsyXTtcclxuICAgICAgICBvdXRbM10gPSAxLjAgLyBhWzNdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE5vcm1hbGl6ZSBhIHZlYzRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSQxKG91dCwgYSkge1xyXG4gICAgICAgIHZhciB4ID0gYVswXTtcclxuICAgICAgICB2YXIgeSA9IGFbMV07XHJcbiAgICAgICAgdmFyIHogPSBhWzJdO1xyXG4gICAgICAgIHZhciB3ID0gYVszXTtcclxuICAgICAgICB2YXIgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XHJcblxyXG4gICAgICAgIGlmIChsZW4gPiAwKSB7XHJcbiAgICAgICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG91dFswXSA9IHggKiBsZW47XHJcbiAgICAgICAgb3V0WzFdID0geSAqIGxlbjtcclxuICAgICAgICBvdXRbMl0gPSB6ICogbGVuO1xyXG4gICAgICAgIG91dFszXSA9IHcgKiBsZW47XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZG90JDEoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl0gKyBhWzNdICogYlszXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgY3Jvc3MtcHJvZHVjdCBvZiB0aHJlZSB2ZWN0b3JzIGluIGEgNC1kaW1lbnNpb25hbCBzcGFjZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gcmVzdWx0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IFUgdGhlIGZpcnN0IHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBWIHRoZSBzZWNvbmQgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IFcgdGhlIHRoaXJkIHZlY3RvclxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IHJlc3VsdFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY3Jvc3MkMShvdXQsIHUsIHYsIHcpIHtcclxuICAgICAgICB2YXIgQSA9IHZbMF0gKiB3WzFdIC0gdlsxXSAqIHdbMF0sXHJcbiAgICAgICAgICAgIEIgPSB2WzBdICogd1syXSAtIHZbMl0gKiB3WzBdLFxyXG4gICAgICAgICAgICBDID0gdlswXSAqIHdbM10gLSB2WzNdICogd1swXSxcclxuICAgICAgICAgICAgRCA9IHZbMV0gKiB3WzJdIC0gdlsyXSAqIHdbMV0sXHJcbiAgICAgICAgICAgIEUgPSB2WzFdICogd1szXSAtIHZbM10gKiB3WzFdLFxyXG4gICAgICAgICAgICBGID0gdlsyXSAqIHdbM10gLSB2WzNdICogd1syXTtcclxuICAgICAgICB2YXIgRyA9IHVbMF07XHJcbiAgICAgICAgdmFyIEggPSB1WzFdO1xyXG4gICAgICAgIHZhciBJID0gdVsyXTtcclxuICAgICAgICB2YXIgSiA9IHVbM107XHJcbiAgICAgICAgb3V0WzBdID0gSCAqIEYgLSBJICogRSArIEogKiBEO1xyXG4gICAgICAgIG91dFsxXSA9IC0oRyAqIEYpICsgSSAqIEMgLSBKICogQjtcclxuICAgICAgICBvdXRbMl0gPSBHICogRSAtIEggKiBDICsgSiAqIEE7XHJcbiAgICAgICAgb3V0WzNdID0gLShHICogRCkgKyBIICogQiAtIEkgKiBBO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbGVycCQxKG91dCwgYSwgYiwgdCkge1xyXG4gICAgICAgIHZhciBheCA9IGFbMF07XHJcbiAgICAgICAgdmFyIGF5ID0gYVsxXTtcclxuICAgICAgICB2YXIgYXogPSBhWzJdO1xyXG4gICAgICAgIHZhciBhdyA9IGFbM107XHJcbiAgICAgICAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XHJcbiAgICAgICAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XHJcbiAgICAgICAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XHJcbiAgICAgICAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJhbmRvbSQxKG91dCwgc2NhbGUpIHtcclxuICAgICAgICBzY2FsZSA9IHNjYWxlIHx8IDEuMDsgLy8gTWFyc2FnbGlhLCBHZW9yZ2UuIENob29zaW5nIGEgUG9pbnQgZnJvbSB0aGUgU3VyZmFjZSBvZiBhXHJcbiAgICAgICAgLy8gU3BoZXJlLiBBbm4uIE1hdGguIFN0YXRpc3QuIDQzICgxOTcyKSwgbm8uIDIsIDY0NS0tNjQ2LlxyXG4gICAgICAgIC8vIGh0dHA6Ly9wcm9qZWN0ZXVjbGlkLm9yZy9ldWNsaWQuYW9tcy8xMTc3NjkyNjQ0O1xyXG5cclxuICAgICAgICB2YXIgdjEsIHYyLCB2MywgdjQ7XHJcbiAgICAgICAgdmFyIHMxLCBzMjtcclxuXHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICB2MSA9IFJBTkRPTSgpICogMiAtIDE7XHJcbiAgICAgICAgICAgIHYyID0gUkFORE9NKCkgKiAyIC0gMTtcclxuICAgICAgICAgICAgczEgPSB2MSAqIHYxICsgdjIgKiB2MjtcclxuICAgICAgICB9IHdoaWxlIChzMSA+PSAxKTtcclxuXHJcbiAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICB2MyA9IFJBTkRPTSgpICogMiAtIDE7XHJcbiAgICAgICAgICAgIHY0ID0gUkFORE9NKCkgKiAyIC0gMTtcclxuICAgICAgICAgICAgczIgPSB2MyAqIHYzICsgdjQgKiB2NDtcclxuICAgICAgICB9IHdoaWxlIChzMiA+PSAxKTtcclxuXHJcbiAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQoKDEgLSBzMSkgLyBzMik7XHJcbiAgICAgICAgb3V0WzBdID0gc2NhbGUgKiB2MTtcclxuICAgICAgICBvdXRbMV0gPSBzY2FsZSAqIHYyO1xyXG4gICAgICAgIG91dFsyXSA9IHNjYWxlICogdjMgKiBkO1xyXG4gICAgICAgIG91dFszXSA9IHNjYWxlICogdjQgKiBkO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIHZlYzQgd2l0aCBhIG1hdDQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gICAgICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtTWF0NCQxKG91dCwgYSwgbSkge1xyXG4gICAgICAgIHZhciB4ID0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGFbMV0sXHJcbiAgICAgICAgICAgIHogPSBhWzJdLFxyXG4gICAgICAgICAgICB3ID0gYVszXTtcclxuICAgICAgICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSAqIHc7XHJcbiAgICAgICAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10gKiB3O1xyXG4gICAgICAgIG91dFsyXSA9IG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSAqIHc7XHJcbiAgICAgICAgb3V0WzNdID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdICogdztcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSB2ZWM0IHdpdGggYSBxdWF0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gdHJhbnNmb3JtIHdpdGhcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVF1YXQkMShvdXQsIGEsIHEpIHtcclxuICAgICAgICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgICAgICAgIHkgPSBhWzFdLFxyXG4gICAgICAgICAgICB6ID0gYVsyXTtcclxuICAgICAgICB2YXIgcXggPSBxWzBdLFxyXG4gICAgICAgICAgICBxeSA9IHFbMV0sXHJcbiAgICAgICAgICAgIHF6ID0gcVsyXSxcclxuICAgICAgICAgICAgcXcgPSBxWzNdOyAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xyXG5cclxuICAgICAgICB2YXIgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XHJcbiAgICAgICAgdmFyIGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xyXG4gICAgICAgIHZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcclxuICAgICAgICB2YXIgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6OyAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XHJcblxyXG4gICAgICAgIG91dFswXSA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XHJcbiAgICAgICAgb3V0WzFdID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xejtcclxuICAgICAgICBvdXRbMl0gPSBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4O1xyXG4gICAgICAgIG91dFszXSA9IGFbM107XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNCB0byB6ZXJvXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHplcm8kMShvdXQpIHtcclxuICAgICAgICBvdXRbMF0gPSAwLjA7XHJcbiAgICAgICAgb3V0WzFdID0gMC4wO1xyXG4gICAgICAgIG91dFsyXSA9IDAuMDtcclxuICAgICAgICBvdXRbM10gPSAwLjA7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3RyJDUoYSkge1xyXG4gICAgICAgIHJldHVybiAndmVjNCgnICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnLCAnICsgYVszXSArICcpJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGV4YWN0RXF1YWxzJDUoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICAgICAqIEBwYXJhbSB7dmVjNH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZXF1YWxzJDYoYSwgYikge1xyXG4gICAgICAgIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGExID0gYVsxXSxcclxuICAgICAgICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMyA9IGFbM107XHJcbiAgICAgICAgdmFyIGIwID0gYlswXSxcclxuICAgICAgICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICAgICAgICBiMiA9IGJbMl0sXHJcbiAgICAgICAgICAgIGIzID0gYlszXTtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3VidHJhY3R9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzdWIkNSA9IHN1YnRyYWN0JDU7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5tdWx0aXBseX1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIG11bCQ1ID0gbXVsdGlwbHkkNTtcclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LmRpdmlkZX1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGRpdiQxID0gZGl2aWRlJDE7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5kaXN0YW5jZX1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGRpc3QkMSA9IGRpc3RhbmNlJDE7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5zcXVhcmVkRGlzdGFuY2V9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzcXJEaXN0JDEgPSBzcXVhcmVkRGlzdGFuY2UkMTtcclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lmxlbmd0aH1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGxlbiQxID0gbGVuZ3RoJDE7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5zcXVhcmVkTGVuZ3RofVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgc3FyTGVuJDEgPSBzcXVhcmVkTGVuZ3RoJDE7XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWM0cy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWM0LiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjNHMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cclxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgZm9yRWFjaCQxID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2ZWMgPSBjcmVhdGUkNSgpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XHJcbiAgICAgICAgICAgIHZhciBpLCBsO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFzdHJpZGUpIHtcclxuICAgICAgICAgICAgICAgIHN0cmlkZSA9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY291bnQpIHtcclxuICAgICAgICAgICAgICAgIGwgPSBNYXRoLm1pbihjb3VudCAqIHN0cmlkZSArIG9mZnNldCwgYS5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbCA9IGEubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xyXG4gICAgICAgICAgICAgICAgdmVjWzBdID0gYVtpXTtcclxuICAgICAgICAgICAgICAgIHZlY1sxXSA9IGFbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgdmVjWzJdID0gYVtpICsgMl07XHJcbiAgICAgICAgICAgICAgICB2ZWNbM10gPSBhW2kgKyAzXTtcclxuICAgICAgICAgICAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xyXG4gICAgICAgICAgICAgICAgYVtpXSA9IHZlY1swXTtcclxuICAgICAgICAgICAgICAgIGFbaSArIDFdID0gdmVjWzFdO1xyXG4gICAgICAgICAgICAgICAgYVtpICsgMl0gPSB2ZWNbMl07XHJcbiAgICAgICAgICAgICAgICBhW2kgKyAzXSA9IHZlY1szXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgfTtcclxuICAgIH0oKTtcclxuXHJcbiAgICBleHBvcnQgdmFyIHZlYzQgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgY3JlYXRlOiBjcmVhdGUkNSxcclxuICAgICAgICBjbG9uZTogY2xvbmUkNSxcclxuICAgICAgICBmcm9tVmFsdWVzOiBmcm9tVmFsdWVzJDUsXHJcbiAgICAgICAgY29weTogY29weSQ1LFxyXG4gICAgICAgIHNldDogc2V0JDUsXHJcbiAgICAgICAgYWRkOiBhZGQkNSxcclxuICAgICAgICBzdWJ0cmFjdDogc3VidHJhY3QkNSxcclxuICAgICAgICBtdWx0aXBseTogbXVsdGlwbHkkNSxcclxuICAgICAgICBkaXZpZGU6IGRpdmlkZSQxLFxyXG4gICAgICAgIGNlaWw6IGNlaWwkMSxcclxuICAgICAgICBmbG9vcjogZmxvb3IkMSxcclxuICAgICAgICBtaW46IG1pbiQxLFxyXG4gICAgICAgIG1heDogbWF4JDEsXHJcbiAgICAgICAgcm91bmQ6IHJvdW5kJDEsXHJcbiAgICAgICAgc2NhbGU6IHNjYWxlJDUsXHJcbiAgICAgICAgc2NhbGVBbmRBZGQ6IHNjYWxlQW5kQWRkJDEsXHJcbiAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlJDEsXHJcbiAgICAgICAgc3F1YXJlZERpc3RhbmNlOiBzcXVhcmVkRGlzdGFuY2UkMSxcclxuICAgICAgICBsZW5ndGg6IGxlbmd0aCQxLFxyXG4gICAgICAgIHNxdWFyZWRMZW5ndGg6IHNxdWFyZWRMZW5ndGgkMSxcclxuICAgICAgICBuZWdhdGU6IG5lZ2F0ZSQxLFxyXG4gICAgICAgIGludmVyc2U6IGludmVyc2UkMSxcclxuICAgICAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSQxLFxyXG4gICAgICAgIGRvdDogZG90JDEsXHJcbiAgICAgICAgY3Jvc3M6IGNyb3NzJDEsXHJcbiAgICAgICAgbGVycDogbGVycCQxLFxyXG4gICAgICAgIHJhbmRvbTogcmFuZG9tJDEsXHJcbiAgICAgICAgdHJhbnNmb3JtTWF0NDogdHJhbnNmb3JtTWF0NCQxLFxyXG4gICAgICAgIHRyYW5zZm9ybVF1YXQ6IHRyYW5zZm9ybVF1YXQkMSxcclxuICAgICAgICB6ZXJvOiB6ZXJvJDEsXHJcbiAgICAgICAgc3RyOiBzdHIkNSxcclxuICAgICAgICBleGFjdEVxdWFsczogZXhhY3RFcXVhbHMkNSxcclxuICAgICAgICBlcXVhbHM6IGVxdWFscyQ2LFxyXG4gICAgICAgIHN1Yjogc3ViJDUsXHJcbiAgICAgICAgbXVsOiBtdWwkNSxcclxuICAgICAgICBkaXY6IGRpdiQxLFxyXG4gICAgICAgIGRpc3Q6IGRpc3QkMSxcclxuICAgICAgICBzcXJEaXN0OiBzcXJEaXN0JDEsXHJcbiAgICAgICAgbGVuOiBsZW4kMSxcclxuICAgICAgICBzcXJMZW46IHNxckxlbiQxLFxyXG4gICAgICAgIGZvckVhY2g6IGZvckVhY2gkMVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBRdWF0ZXJuaW9uXHJcbiAgICAgKiBAbW9kdWxlIHF1YXRcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBxdWF0XHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZSQ2KCkge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSg0KTtcclxuXHJcbiAgICAgICAgaWYgKEFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XHJcbiAgICAgICAgICAgIG91dFswXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRbM10gPSAxO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIHF1YXQgdG8gdGhlIGlkZW50aXR5IHF1YXRlcm5pb25cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGlkZW50aXR5JDQob3V0KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMDtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIGEgcXVhdCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhbmQgcm90YXRpb24gYXhpcyxcclxuICAgICAqIHRoZW4gcmV0dXJucyBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICAgICAqIEBwYXJhbSB7dmVjM30gYXhpcyB0aGUgYXhpcyBhcm91bmQgd2hpY2ggdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSBpbiByYWRpYW5zXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKiovXHJcblxyXG4gICAgZnVuY3Rpb24gc2V0QXhpc0FuZ2xlKG91dCwgYXhpcywgcmFkKSB7XHJcbiAgICAgICAgcmFkID0gcmFkICogMC41O1xyXG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICAgICAgICBvdXRbMF0gPSBzICogYXhpc1swXTtcclxuICAgICAgICBvdXRbMV0gPSBzICogYXhpc1sxXTtcclxuICAgICAgICBvdXRbMl0gPSBzICogYXhpc1syXTtcclxuICAgICAgICBvdXRbM10gPSBNYXRoLmNvcyhyYWQpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIHJvdGF0aW9uIGF4aXMgYW5kIGFuZ2xlIGZvciBhIGdpdmVuXHJcbiAgICAgKiAgcXVhdGVybmlvbi4gSWYgYSBxdWF0ZXJuaW9uIGlzIGNyZWF0ZWQgd2l0aFxyXG4gICAgICogIHNldEF4aXNBbmdsZSwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIHNhbWVcclxuICAgICAqICB2YWx1ZXMgYXMgcHJvdmlkaWVkIGluIHRoZSBvcmlnaW5hbCBwYXJhbWV0ZXIgbGlzdFxyXG4gICAgICogIE9SIGZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHZhbHVlcy5cclxuICAgICAqIEV4YW1wbGU6IFRoZSBxdWF0ZXJuaW9uIGZvcm1lZCBieSBheGlzIFswLCAwLCAxXSBhbmRcclxuICAgICAqICBhbmdsZSAtOTAgaXMgdGhlIHNhbWUgYXMgdGhlIHF1YXRlcm5pb24gZm9ybWVkIGJ5XHJcbiAgICAgKiAgWzAsIDAsIDFdIGFuZCAyNzAuIFRoaXMgbWV0aG9kIGZhdm9ycyB0aGUgbGF0dGVyLlxyXG4gICAgICogQHBhcmFtICB7dmVjM30gb3V0X2F4aXMgIFZlY3RvciByZWNlaXZpbmcgdGhlIGF4aXMgb2Ygcm90YXRpb25cclxuICAgICAqIEBwYXJhbSAge3F1YXR9IHEgICAgIFF1YXRlcm5pb24gdG8gYmUgZGVjb21wb3NlZFxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSAgICAgQW5nbGUsIGluIHJhZGlhbnMsIG9mIHRoZSByb3RhdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0QXhpc0FuZ2xlKG91dF9heGlzLCBxKSB7XHJcbiAgICAgICAgdmFyIHJhZCA9IE1hdGguYWNvcyhxWzNdKSAqIDIuMDtcclxuICAgICAgICB2YXIgcyA9IE1hdGguc2luKHJhZCAvIDIuMCk7XHJcblxyXG4gICAgICAgIGlmIChzID4gRVBTSUxPTikge1xyXG4gICAgICAgICAgICBvdXRfYXhpc1swXSA9IHFbMF0gLyBzO1xyXG4gICAgICAgICAgICBvdXRfYXhpc1sxXSA9IHFbMV0gLyBzO1xyXG4gICAgICAgICAgICBvdXRfYXhpc1syXSA9IHFbMl0gLyBzO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIElmIHMgaXMgemVybywgcmV0dXJuIGFueSBheGlzIChubyByb3RhdGlvbiAtIGF4aXMgZG9lcyBub3QgbWF0dGVyKVxyXG4gICAgICAgICAgICBvdXRfYXhpc1swXSA9IDE7XHJcbiAgICAgICAgICAgIG91dF9heGlzWzFdID0gMDtcclxuICAgICAgICAgICAgb3V0X2F4aXNbMl0gPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJhZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTXVsdGlwbGllcyB0d28gcXVhdCdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG11bHRpcGx5JDYob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICAgICAgICBheiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGF3ID0gYVszXTtcclxuICAgICAgICB2YXIgYnggPSBiWzBdLFxyXG4gICAgICAgICAgICBieSA9IGJbMV0sXHJcbiAgICAgICAgICAgIGJ6ID0gYlsyXSxcclxuICAgICAgICAgICAgYncgPSBiWzNdO1xyXG4gICAgICAgIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnk7XHJcbiAgICAgICAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBiejtcclxuICAgICAgICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xyXG4gICAgICAgIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBYIGF4aXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxyXG4gICAgICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRlWCQyKG91dCwgYSwgcmFkKSB7XHJcbiAgICAgICAgcmFkICo9IDAuNTtcclxuICAgICAgICB2YXIgYXggPSBhWzBdLFxyXG4gICAgICAgICAgICBheSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGF6ID0gYVsyXSxcclxuICAgICAgICAgICAgYXcgPSBhWzNdO1xyXG4gICAgICAgIHZhciBieCA9IE1hdGguc2luKHJhZCksXHJcbiAgICAgICAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcclxuICAgICAgICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieDtcclxuICAgICAgICBvdXRbMV0gPSBheSAqIGJ3ICsgYXogKiBieDtcclxuICAgICAgICBvdXRbMl0gPSBheiAqIGJ3IC0gYXkgKiBieDtcclxuICAgICAgICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieDtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGVZJDIob3V0LCBhLCByYWQpIHtcclxuICAgICAgICByYWQgKj0gMC41O1xyXG4gICAgICAgIHZhciBheCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGF5ID0gYVsxXSxcclxuICAgICAgICAgICAgYXogPSBhWzJdLFxyXG4gICAgICAgICAgICBhdyA9IGFbM107XHJcbiAgICAgICAgdmFyIGJ5ID0gTWF0aC5zaW4ocmFkKSxcclxuICAgICAgICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xyXG4gICAgICAgIG91dFswXSA9IGF4ICogYncgLSBheiAqIGJ5O1xyXG4gICAgICAgIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5O1xyXG4gICAgICAgIG91dFsyXSA9IGF6ICogYncgKyBheCAqIGJ5O1xyXG4gICAgICAgIG91dFszXSA9IGF3ICogYncgLSBheSAqIGJ5O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWiBheGlzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGF0ZVokMihvdXQsIGEsIHJhZCkge1xyXG4gICAgICAgIHJhZCAqPSAwLjU7XHJcbiAgICAgICAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICAgICAgICBheiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGF3ID0gYVszXTtcclxuICAgICAgICB2YXIgYnogPSBNYXRoLnNpbihyYWQpLFxyXG4gICAgICAgICAgICBidyA9IE1hdGguY29zKHJhZCk7XHJcbiAgICAgICAgb3V0WzBdID0gYXggKiBidyArIGF5ICogYno7XHJcbiAgICAgICAgb3V0WzFdID0gYXkgKiBidyAtIGF4ICogYno7XHJcbiAgICAgICAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYno7XHJcbiAgICAgICAgb3V0WzNdID0gYXcgKiBidyAtIGF6ICogYno7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgVyBjb21wb25lbnQgb2YgYSBxdWF0IGZyb20gdGhlIFgsIFksIGFuZCBaIGNvbXBvbmVudHMuXHJcbiAgICAgKiBBc3N1bWVzIHRoYXQgcXVhdGVybmlvbiBpcyAxIHVuaXQgaW4gbGVuZ3RoLlxyXG4gICAgICogQW55IGV4aXN0aW5nIFcgY29tcG9uZW50IHdpbGwgYmUgaWdub3JlZC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICAgICAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBXIGNvbXBvbmVudCBvZlxyXG4gICAgICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlVyhvdXQsIGEpIHtcclxuICAgICAgICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgICAgICAgIHkgPSBhWzFdLFxyXG4gICAgICAgICAgICB6ID0gYVsyXTtcclxuICAgICAgICBvdXRbMF0gPSB4O1xyXG4gICAgICAgIG91dFsxXSA9IHk7XHJcbiAgICAgICAgb3V0WzJdID0gejtcclxuICAgICAgICBvdXRbM10gPSBNYXRoLnNxcnQoTWF0aC5hYnMoMS4wIC0geCAqIHggLSB5ICogeSAtIHogKiB6KSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzbGVycChvdXQsIGEsIGIsIHQpIHtcclxuICAgICAgICAvLyBiZW5jaG1hcmtzOlxyXG4gICAgICAgIC8vICAgIGh0dHA6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tc2xlcnAtaW1wbGVtZW50YXRpb25zXHJcbiAgICAgICAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICAgICAgICBheiA9IGFbMl0sXHJcbiAgICAgICAgICAgIGF3ID0gYVszXTtcclxuICAgICAgICB2YXIgYnggPSBiWzBdLFxyXG4gICAgICAgICAgICBieSA9IGJbMV0sXHJcbiAgICAgICAgICAgIGJ6ID0gYlsyXSxcclxuICAgICAgICAgICAgYncgPSBiWzNdO1xyXG4gICAgICAgIHZhciBvbWVnYSwgY29zb20sIHNpbm9tLCBzY2FsZTAsIHNjYWxlMTsgLy8gY2FsYyBjb3NpbmVcclxuXHJcbiAgICAgICAgY29zb20gPSBheCAqIGJ4ICsgYXkgKiBieSArIGF6ICogYnogKyBhdyAqIGJ3OyAvLyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcclxuXHJcbiAgICAgICAgaWYgKGNvc29tIDwgMC4wKSB7XHJcbiAgICAgICAgICAgIGNvc29tID0gLWNvc29tO1xyXG4gICAgICAgICAgICBieCA9IC1ieDtcclxuICAgICAgICAgICAgYnkgPSAtYnk7XHJcbiAgICAgICAgICAgIGJ6ID0gLWJ6O1xyXG4gICAgICAgICAgICBidyA9IC1idztcclxuICAgICAgICB9IC8vIGNhbGN1bGF0ZSBjb2VmZmljaWVudHNcclxuXHJcblxyXG4gICAgICAgIGlmICgxLjAgLSBjb3NvbSA+IEVQU0lMT04pIHtcclxuICAgICAgICAgICAgLy8gc3RhbmRhcmQgY2FzZSAoc2xlcnApXHJcbiAgICAgICAgICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcclxuICAgICAgICAgICAgc2lub20gPSBNYXRoLnNpbihvbWVnYSk7XHJcbiAgICAgICAgICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tO1xyXG4gICAgICAgICAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxyXG4gICAgICAgICAgICAvLyAgLi4uIHNvIHdlIGNhbiBkbyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uXHJcbiAgICAgICAgICAgIHNjYWxlMCA9IDEuMCAtIHQ7XHJcbiAgICAgICAgICAgIHNjYWxlMSA9IHQ7XHJcbiAgICAgICAgfSAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXHJcblxyXG5cclxuICAgICAgICBvdXRbMF0gPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xyXG4gICAgICAgIG91dFsxXSA9IHNjYWxlMCAqIGF5ICsgc2NhbGUxICogYnk7XHJcbiAgICAgICAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcclxuICAgICAgICBvdXRbM10gPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIHJhbmRvbSBxdWF0ZXJuaW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByYW5kb20kMihvdXQpIHtcclxuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiBvZiBodHRwOi8vcGxhbm5pbmcuY3MudWl1Yy5lZHUvbm9kZTE5OC5odG1sXHJcbiAgICAgICAgLy8gVE9ETzogQ2FsbGluZyByYW5kb20gMyB0aW1lcyBpcyBwcm9iYWJseSBub3QgdGhlIGZhc3Rlc3Qgc29sdXRpb25cclxuICAgICAgICB2YXIgdTEgPSBSQU5ET00oKTtcclxuICAgICAgICB2YXIgdTIgPSBSQU5ET00oKTtcclxuICAgICAgICB2YXIgdTMgPSBSQU5ET00oKTtcclxuICAgICAgICB2YXIgc3FydDFNaW51c1UxID0gTWF0aC5zcXJ0KDEgLSB1MSk7XHJcbiAgICAgICAgdmFyIHNxcnRVMSA9IE1hdGguc3FydCh1MSk7XHJcbiAgICAgICAgb3V0WzBdID0gc3FydDFNaW51c1UxICogTWF0aC5zaW4oMi4wICogTWF0aC5QSSAqIHUyKTtcclxuICAgICAgICBvdXRbMV0gPSBzcXJ0MU1pbnVzVTEgKiBNYXRoLmNvcygyLjAgKiBNYXRoLlBJICogdTIpO1xyXG4gICAgICAgIG91dFsyXSA9IHNxcnRVMSAqIE1hdGguc2luKDIuMCAqIE1hdGguUEkgKiB1Myk7XHJcbiAgICAgICAgb3V0WzNdID0gc3FydFUxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUzKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgcXVhdFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGludmVydCQ0KG91dCwgYSkge1xyXG4gICAgICAgIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGExID0gYVsxXSxcclxuICAgICAgICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMyA9IGFbM107XHJcbiAgICAgICAgdmFyIGRvdCA9IGEwICogYTAgKyBhMSAqIGExICsgYTIgKiBhMiArIGEzICogYTM7XHJcbiAgICAgICAgdmFyIGludkRvdCA9IGRvdCA/IDEuMCAvIGRvdCA6IDA7IC8vIFRPRE86IFdvdWxkIGJlIGZhc3RlciB0byByZXR1cm4gWzAsMCwwLDBdIGltbWVkaWF0ZWx5IGlmIGRvdCA9PSAwXHJcblxyXG4gICAgICAgIG91dFswXSA9IC1hMCAqIGludkRvdDtcclxuICAgICAgICBvdXRbMV0gPSAtYTEgKiBpbnZEb3Q7XHJcbiAgICAgICAgb3V0WzJdID0gLWEyICogaW52RG90O1xyXG4gICAgICAgIG91dFszXSA9IGEzICogaW52RG90O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXRcclxuICAgICAqIElmIHRoZSBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdC5pbnZlcnNlIGFuZCBwcm9kdWNlcyB0aGUgc2FtZSByZXN1bHQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjb25qdWdhdGUob3V0LCBhKSB7XHJcbiAgICAgICAgb3V0WzBdID0gLWFbMF07XHJcbiAgICAgICAgb3V0WzFdID0gLWFbMV07XHJcbiAgICAgICAgb3V0WzJdID0gLWFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiAzeDMgcm90YXRpb24gbWF0cml4LlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IFRoZSByZXN1bHRhbnQgcXVhdGVybmlvbiBpcyBub3Qgbm9ybWFsaXplZCwgc28geW91IHNob3VsZCBiZSBzdXJlXHJcbiAgICAgKiB0byByZW5vcm1hbGl6ZSB0aGUgcXVhdGVybmlvbiB5b3Vyc2VsZiB3aGVyZSBuZWNlc3NhcnkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IG0gcm90YXRpb24gbWF0cml4XHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21NYXQzKG91dCwgbSkge1xyXG4gICAgICAgIC8vIEFsZ29yaXRobSBpbiBLZW4gU2hvZW1ha2UncyBhcnRpY2xlIGluIDE5ODcgU0lHR1JBUEggY291cnNlIG5vdGVzXHJcbiAgICAgICAgLy8gYXJ0aWNsZSBcIlF1YXRlcm5pb24gQ2FsY3VsdXMgYW5kIEZhc3QgQW5pbWF0aW9uXCIuXHJcbiAgICAgICAgdmFyIGZUcmFjZSA9IG1bMF0gKyBtWzRdICsgbVs4XTtcclxuICAgICAgICB2YXIgZlJvb3Q7XHJcblxyXG4gICAgICAgIGlmIChmVHJhY2UgPiAwLjApIHtcclxuICAgICAgICAgICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxyXG4gICAgICAgICAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxLjApOyAvLyAyd1xyXG5cclxuICAgICAgICAgICAgb3V0WzNdID0gMC41ICogZlJvb3Q7XHJcbiAgICAgICAgICAgIGZSb290ID0gMC41IC8gZlJvb3Q7IC8vIDEvKDR3KVxyXG5cclxuICAgICAgICAgICAgb3V0WzBdID0gKG1bNV0gLSBtWzddKSAqIGZSb290O1xyXG4gICAgICAgICAgICBvdXRbMV0gPSAobVs2XSAtIG1bMl0pICogZlJvb3Q7XHJcbiAgICAgICAgICAgIG91dFsyXSA9IChtWzFdIC0gbVszXSkgKiBmUm9vdDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB8d3wgPD0gMS8yXHJcbiAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgaWYgKG1bNF0gPiBtWzBdKSBpID0gMTtcclxuICAgICAgICAgICAgaWYgKG1bOF0gPiBtW2kgKiAzICsgaV0pIGkgPSAyO1xyXG4gICAgICAgICAgICB2YXIgaiA9IChpICsgMSkgJSAzO1xyXG4gICAgICAgICAgICB2YXIgayA9IChpICsgMikgJSAzO1xyXG4gICAgICAgICAgICBmUm9vdCA9IE1hdGguc3FydChtW2kgKiAzICsgaV0gLSBtW2ogKiAzICsgal0gLSBtW2sgKiAzICsga10gKyAxLjApO1xyXG4gICAgICAgICAgICBvdXRbaV0gPSAwLjUgKiBmUm9vdDtcclxuICAgICAgICAgICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcclxuICAgICAgICAgICAgb3V0WzNdID0gKG1baiAqIDMgKyBrXSAtIG1bayAqIDMgKyBqXSkgKiBmUm9vdDtcclxuICAgICAgICAgICAgb3V0W2pdID0gKG1baiAqIDMgKyBpXSArIG1baSAqIDMgKyBqXSkgKiBmUm9vdDtcclxuICAgICAgICAgICAgb3V0W2tdID0gKG1bayAqIDMgKyBpXSArIG1baSAqIDMgKyBrXSkgKiBmUm9vdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGV1bGVyIGFuZ2xlIHgsIHksIHouXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3h9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWCBheGlzIGluIGRlZ3JlZXMuXHJcbiAgICAgKiBAcGFyYW0ge3l9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWSBheGlzIGluIGRlZ3JlZXMuXHJcbiAgICAgKiBAcGFyYW0ge3p9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWiBheGlzIGluIGRlZ3JlZXMuXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21FdWxlcihvdXQsIHgsIHksIHopIHtcclxuICAgICAgICB2YXIgaGFsZlRvUmFkID0gMC41ICogTWF0aC5QSSAvIDE4MC4wO1xyXG4gICAgICAgIHggKj0gaGFsZlRvUmFkO1xyXG4gICAgICAgIHkgKj0gaGFsZlRvUmFkO1xyXG4gICAgICAgIHogKj0gaGFsZlRvUmFkO1xyXG4gICAgICAgIHZhciBzeCA9IE1hdGguc2luKHgpO1xyXG4gICAgICAgIHZhciBjeCA9IE1hdGguY29zKHgpO1xyXG4gICAgICAgIHZhciBzeSA9IE1hdGguc2luKHkpO1xyXG4gICAgICAgIHZhciBjeSA9IE1hdGguY29zKHkpO1xyXG4gICAgICAgIHZhciBzeiA9IE1hdGguc2luKHopO1xyXG4gICAgICAgIHZhciBjeiA9IE1hdGguY29zKHopO1xyXG4gICAgICAgIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcclxuICAgICAgICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XHJcbiAgICAgICAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xyXG4gICAgICAgIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgcXVhdGVuaW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzdHIkNihhKSB7XHJcbiAgICAgICAgcmV0dXJuICdxdWF0KCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJyknO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIHF1YXRlcm5pb24gdG8gY2xvbmVcclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBhIG5ldyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBjbG9uZSQ2ID0gY2xvbmUkNTtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBxdWF0IGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gYSBuZXcgcXVhdGVybmlvblxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgZnJvbVZhbHVlcyQ2ID0gZnJvbVZhbHVlcyQ1O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgcXVhdCB0byBhbm90aGVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGEgdGhlIHNvdXJjZSBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBjb3B5JDYgPSBjb3B5JDU7XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHF1YXQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIHNldCQ2ID0gc2V0JDU7XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdHdvIHF1YXQnc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBhZGQkNiA9IGFkZCQ1O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubXVsdGlwbHl9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBtdWwkNiA9IG11bHRpcGx5JDY7XHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlcyBhIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxyXG4gICAgICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgc2NhbGUkNiA9IHNjYWxlJDU7XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0J3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGRvdCQyID0gZG90JDE7XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdCdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGxlcnAkMiA9IGxlcnAkMTtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgcXVhdFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICAgICAqL1xyXG5cclxuICAgIHZhciBsZW5ndGgkMiA9IGxlbmd0aCQxO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubGVuZ3RofVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgbGVuJDIgPSBsZW5ndGgkMjtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSBxdWF0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIHNxdWFyZWRMZW5ndGgkMiA9IHNxdWFyZWRMZW5ndGgkMTtcclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayBxdWF0LnNxdWFyZWRMZW5ndGh9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzcXJMZW4kMiA9IHNxdWFyZWRMZW5ndGgkMjtcclxuICAgIC8qKlxyXG4gICAgICogTm9ybWFsaXplIGEgcXVhdFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIHF1YXRlcm5pb24gdG8gbm9ybWFsaXplXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBub3JtYWxpemUkMiA9IG5vcm1hbGl6ZSQxO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBxdWF0ZXJuaW9ucyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIFRoZSBmaXJzdCBxdWF0ZXJuaW9uLlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBiIFRoZSBzZWNvbmQgcXVhdGVybmlvbi5cclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGV4YWN0RXF1YWxzJDYgPSBleGFjdEVxdWFscyQ1O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBxdWF0ZXJuaW9ucyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBlcXVhbHMkNyA9IGVxdWFscyQ2O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIGEgcXVhdGVybmlvbiB0byByZXByZXNlbnQgdGhlIHNob3J0ZXN0IHJvdGF0aW9uIGZyb20gb25lXHJcbiAgICAgKiB2ZWN0b3IgdG8gYW5vdGhlci5cclxuICAgICAqXHJcbiAgICAgKiBCb3RoIHZlY3RvcnMgYXJlIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uLlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBpbml0aWFsIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBkZXN0aW5hdGlvbiB2ZWN0b3JcclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIHZhciByb3RhdGlvblRvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0bXB2ZWMzID0gY3JlYXRlJDQoKTtcclxuICAgICAgICB2YXIgeFVuaXRWZWMzID0gZnJvbVZhbHVlcyQ0KDEsIDAsIDApO1xyXG4gICAgICAgIHZhciB5VW5pdFZlYzMgPSBmcm9tVmFsdWVzJDQoMCwgMSwgMCk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIGEsIGIpIHtcclxuICAgICAgICAgICAgdmFyIGRvdCQxID0gZG90KGEsIGIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRvdCQxIDwgLTAuOTk5OTk5KSB7XHJcbiAgICAgICAgICAgICAgICBjcm9zcyh0bXB2ZWMzLCB4VW5pdFZlYzMsIGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlbih0bXB2ZWMzKSA8IDAuMDAwMDAxKSBjcm9zcyh0bXB2ZWMzLCB5VW5pdFZlYzMsIGEpO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplKHRtcHZlYzMsIHRtcHZlYzMpO1xyXG4gICAgICAgICAgICAgICAgc2V0QXhpc0FuZ2xlKG91dCwgdG1wdmVjMywgTWF0aC5QSSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvdCQxID4gMC45OTk5OTkpIHtcclxuICAgICAgICAgICAgICAgIG91dFswXSA9IDA7XHJcbiAgICAgICAgICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgICAgICAgICAgb3V0WzJdID0gMDtcclxuICAgICAgICAgICAgICAgIG91dFszXSA9IDE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3Jvc3ModG1wdmVjMywgYSwgYik7XHJcbiAgICAgICAgICAgICAgICBvdXRbMF0gPSB0bXB2ZWMzWzBdO1xyXG4gICAgICAgICAgICAgICAgb3V0WzFdID0gdG1wdmVjM1sxXTtcclxuICAgICAgICAgICAgICAgIG91dFsyXSA9IHRtcHZlYzNbMl07XHJcbiAgICAgICAgICAgICAgICBvdXRbM10gPSAxICsgZG90JDE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9ybWFsaXplJDIob3V0LCBvdXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0oKTtcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICAgICAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBjIHRoZSB0aGlyZCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IGQgdGhlIGZvdXJ0aCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgc3FsZXJwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0ZW1wMSA9IGNyZWF0ZSQ2KCk7XHJcbiAgICAgICAgdmFyIHRlbXAyID0gY3JlYXRlJDYoKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG91dCwgYSwgYiwgYywgZCwgdCkge1xyXG4gICAgICAgICAgICBzbGVycCh0ZW1wMSwgYSwgZCwgdCk7XHJcbiAgICAgICAgICAgIHNsZXJwKHRlbXAyLCBiLCBjLCB0KTtcclxuICAgICAgICAgICAgc2xlcnAob3V0LCB0ZW1wMSwgdGVtcDIsIDIgKiB0ICogKDEgLSB0KSk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICAgICAgfTtcclxuICAgIH0oKTtcclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24gd2l0aCB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW5cclxuICAgICAqIGF4ZXMuIEVhY2ggYXhpcyBpcyBhIHZlYzMgYW5kIGlzIGV4cGVjdGVkIHRvIGJlIHVuaXQgbGVuZ3RoIGFuZFxyXG4gICAgICogcGVycGVuZGljdWxhciB0byBhbGwgb3RoZXIgc3BlY2lmaWVkIGF4ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2aWV3ICB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgdmlld2luZyBkaXJlY3Rpb25cclxuICAgICAqIEBwYXJhbSB7dmVjM30gcmlnaHQgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2FsIFwicmlnaHRcIiBkaXJlY3Rpb25cclxuICAgICAqIEBwYXJhbSB7dmVjM30gdXAgICAgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2FsIFwidXBcIiBkaXJlY3Rpb25cclxuICAgICAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzZXRBeGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtYXRyID0gY3JlYXRlJDIoKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG91dCwgdmlldywgcmlnaHQsIHVwKSB7XHJcbiAgICAgICAgICAgIG1hdHJbMF0gPSByaWdodFswXTtcclxuICAgICAgICAgICAgbWF0clszXSA9IHJpZ2h0WzFdO1xyXG4gICAgICAgICAgICBtYXRyWzZdID0gcmlnaHRbMl07XHJcbiAgICAgICAgICAgIG1hdHJbMV0gPSB1cFswXTtcclxuICAgICAgICAgICAgbWF0cls0XSA9IHVwWzFdO1xyXG4gICAgICAgICAgICBtYXRyWzddID0gdXBbMl07XHJcbiAgICAgICAgICAgIG1hdHJbMl0gPSAtdmlld1swXTtcclxuICAgICAgICAgICAgbWF0cls1XSA9IC12aWV3WzFdO1xyXG4gICAgICAgICAgICBtYXRyWzhdID0gLXZpZXdbMl07XHJcbiAgICAgICAgICAgIHJldHVybiBub3JtYWxpemUkMihvdXQsIGZyb21NYXQzKG91dCwgbWF0cikpO1xyXG4gICAgICAgIH07XHJcbiAgICB9KCk7XHJcblxyXG4gICAgZXhwb3J0IHZhciBxdWF0ID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG4gICAgICAgIGNyZWF0ZTogY3JlYXRlJDYsXHJcbiAgICAgICAgaWRlbnRpdHk6IGlkZW50aXR5JDQsXHJcbiAgICAgICAgc2V0QXhpc0FuZ2xlOiBzZXRBeGlzQW5nbGUsXHJcbiAgICAgICAgZ2V0QXhpc0FuZ2xlOiBnZXRBeGlzQW5nbGUsXHJcbiAgICAgICAgbXVsdGlwbHk6IG11bHRpcGx5JDYsXHJcbiAgICAgICAgcm90YXRlWDogcm90YXRlWCQyLFxyXG4gICAgICAgIHJvdGF0ZVk6IHJvdGF0ZVkkMixcclxuICAgICAgICByb3RhdGVaOiByb3RhdGVaJDIsXHJcbiAgICAgICAgY2FsY3VsYXRlVzogY2FsY3VsYXRlVyxcclxuICAgICAgICBzbGVycDogc2xlcnAsXHJcbiAgICAgICAgcmFuZG9tOiByYW5kb20kMixcclxuICAgICAgICBpbnZlcnQ6IGludmVydCQ0LFxyXG4gICAgICAgIGNvbmp1Z2F0ZTogY29uanVnYXRlLFxyXG4gICAgICAgIGZyb21NYXQzOiBmcm9tTWF0MyxcclxuICAgICAgICBmcm9tRXVsZXI6IGZyb21FdWxlcixcclxuICAgICAgICBzdHI6IHN0ciQ2LFxyXG4gICAgICAgIGNsb25lOiBjbG9uZSQ2LFxyXG4gICAgICAgIGZyb21WYWx1ZXM6IGZyb21WYWx1ZXMkNixcclxuICAgICAgICBjb3B5OiBjb3B5JDYsXHJcbiAgICAgICAgc2V0OiBzZXQkNixcclxuICAgICAgICBhZGQ6IGFkZCQ2LFxyXG4gICAgICAgIG11bDogbXVsJDYsXHJcbiAgICAgICAgc2NhbGU6IHNjYWxlJDYsXHJcbiAgICAgICAgZG90OiBkb3QkMixcclxuICAgICAgICBsZXJwOiBsZXJwJDIsXHJcbiAgICAgICAgbGVuZ3RoOiBsZW5ndGgkMixcclxuICAgICAgICBsZW46IGxlbiQyLFxyXG4gICAgICAgIHNxdWFyZWRMZW5ndGg6IHNxdWFyZWRMZW5ndGgkMixcclxuICAgICAgICBzcXJMZW46IHNxckxlbiQyLFxyXG4gICAgICAgIG5vcm1hbGl6ZTogbm9ybWFsaXplJDIsXHJcbiAgICAgICAgZXhhY3RFcXVhbHM6IGV4YWN0RXF1YWxzJDYsXHJcbiAgICAgICAgZXF1YWxzOiBlcXVhbHMkNyxcclxuICAgICAgICByb3RhdGlvblRvOiByb3RhdGlvblRvLFxyXG4gICAgICAgIHNxbGVycDogc3FsZXJwLFxyXG4gICAgICAgIHNldEF4ZXM6IHNldEF4ZXNcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRHVhbCBRdWF0ZXJuaW9uPGJyPlxyXG4gICAgICogRm9ybWF0OiBbcmVhbCwgZHVhbF08YnI+XHJcbiAgICAgKiBRdWF0ZXJuaW9uIGZvcm1hdDogWFlaVzxicj5cclxuICAgICAqIE1ha2Ugc3VyZSB0byBoYXZlIG5vcm1hbGl6ZWQgZHVhbCBxdWF0ZXJuaW9ucywgb3RoZXJ3aXNlIHRoZSBmdW5jdGlvbnMgbWF5IG5vdCB3b3JrIGFzIGludGVuZGVkLjxicj5cclxuICAgICAqIEBtb2R1bGUgcXVhdDJcclxuICAgICAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBkdWFsIHF1YXRcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IGEgbmV3IGR1YWwgcXVhdGVybmlvbiBbcmVhbCAtPiByb3RhdGlvbiwgZHVhbCAtPiB0cmFuc2xhdGlvbl1cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZSQ3KCkge1xyXG4gICAgICAgIHZhciBkcSA9IG5ldyBBUlJBWV9UWVBFKDgpO1xyXG5cclxuICAgICAgICBpZiAoQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgICAgICAgICAgZHFbMF0gPSAwO1xyXG4gICAgICAgICAgICBkcVsxXSA9IDA7XHJcbiAgICAgICAgICAgIGRxWzJdID0gMDtcclxuICAgICAgICAgICAgZHFbNF0gPSAwO1xyXG4gICAgICAgICAgICBkcVs1XSA9IDA7XHJcbiAgICAgICAgICAgIGRxWzZdID0gMDtcclxuICAgICAgICAgICAgZHFbN10gPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHFbM10gPSAxO1xyXG4gICAgICAgIHJldHVybiBkcTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBxdWF0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgcXVhdGVybmlvblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IGEgZHVhbCBxdWF0ZXJuaW9uIHRvIGNsb25lXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY2xvbmUkNyhhKSB7XHJcbiAgICAgICAgdmFyIGRxID0gbmV3IEFSUkFZX1RZUEUoOCk7XHJcbiAgICAgICAgZHFbMF0gPSBhWzBdO1xyXG4gICAgICAgIGRxWzFdID0gYVsxXTtcclxuICAgICAgICBkcVsyXSA9IGFbMl07XHJcbiAgICAgICAgZHFbM10gPSBhWzNdO1xyXG4gICAgICAgIGRxWzRdID0gYVs0XTtcclxuICAgICAgICBkcVs1XSA9IGFbNV07XHJcbiAgICAgICAgZHFbNl0gPSBhWzZdO1xyXG4gICAgICAgIGRxWzddID0gYVs3XTtcclxuICAgICAgICByZXR1cm4gZHE7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgZHVhbCBxdWF0IGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4MSBYIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkxIFkgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gejEgWiBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3MSBXIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHgyIFggY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geTIgWSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHcyIFcgY29tcG9uZW50XHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVZhbHVlcyQ3KHgxLCB5MSwgejEsIHcxLCB4MiwgeTIsIHoyLCB3Mikge1xyXG4gICAgICAgIHZhciBkcSA9IG5ldyBBUlJBWV9UWVBFKDgpO1xyXG4gICAgICAgIGRxWzBdID0geDE7XHJcbiAgICAgICAgZHFbMV0gPSB5MTtcclxuICAgICAgICBkcVsyXSA9IHoxO1xyXG4gICAgICAgIGRxWzNdID0gdzE7XHJcbiAgICAgICAgZHFbNF0gPSB4MjtcclxuICAgICAgICBkcVs1XSA9IHkyO1xyXG4gICAgICAgIGRxWzZdID0gejI7XHJcbiAgICAgICAgZHFbN10gPSB3MjtcclxuICAgICAgICByZXR1cm4gZHE7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgZHVhbCBxdWF0IGZyb20gdGhlIGdpdmVuIHZhbHVlcyAocXVhdCBhbmQgdHJhbnNsYXRpb24pXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHgxIFggY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB6MSBaIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHcxIFcgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkyIFkgY29tcG9uZW50ICh0cmFuc2xhdGlvbilcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudCAodHJhbnNsYXRpb24pXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25WYWx1ZXMoeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIpIHtcclxuICAgICAgICB2YXIgZHEgPSBuZXcgQVJSQVlfVFlQRSg4KTtcclxuICAgICAgICBkcVswXSA9IHgxO1xyXG4gICAgICAgIGRxWzFdID0geTE7XHJcbiAgICAgICAgZHFbMl0gPSB6MTtcclxuICAgICAgICBkcVszXSA9IHcxO1xyXG4gICAgICAgIHZhciBheCA9IHgyICogMC41LFxyXG4gICAgICAgICAgICBheSA9IHkyICogMC41LFxyXG4gICAgICAgICAgICBheiA9IHoyICogMC41O1xyXG4gICAgICAgIGRxWzRdID0gYXggKiB3MSArIGF5ICogejEgLSBheiAqIHkxO1xyXG4gICAgICAgIGRxWzVdID0gYXkgKiB3MSArIGF6ICogeDEgLSBheCAqIHoxO1xyXG4gICAgICAgIGRxWzZdID0gYXogKiB3MSArIGF4ICogeTEgLSBheSAqIHgxO1xyXG4gICAgICAgIGRxWzddID0gLWF4ICogeDEgLSBheSAqIHkxIC0gYXogKiB6MTtcclxuICAgICAgICByZXR1cm4gZHE7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBkdWFsIHF1YXQgZnJvbSBhIHF1YXRlcm5pb24gYW5kIGEgdHJhbnNsYXRpb25cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gcSBhIG5vcm1hbGl6ZWQgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSB0IHRyYW5sYXRpb24gdmVjdG9yXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvbiQxKG91dCwgcSwgdCkge1xyXG4gICAgICAgIHZhciBheCA9IHRbMF0gKiAwLjUsXHJcbiAgICAgICAgICAgIGF5ID0gdFsxXSAqIDAuNSxcclxuICAgICAgICAgICAgYXogPSB0WzJdICogMC41LFxyXG4gICAgICAgICAgICBieCA9IHFbMF0sXHJcbiAgICAgICAgICAgIGJ5ID0gcVsxXSxcclxuICAgICAgICAgICAgYnogPSBxWzJdLFxyXG4gICAgICAgICAgICBidyA9IHFbM107XHJcbiAgICAgICAgb3V0WzBdID0gYng7XHJcbiAgICAgICAgb3V0WzFdID0gYnk7XHJcbiAgICAgICAgb3V0WzJdID0gYno7XHJcbiAgICAgICAgb3V0WzNdID0gYnc7XHJcbiAgICAgICAgb3V0WzRdID0gYXggKiBidyArIGF5ICogYnogLSBheiAqIGJ5O1xyXG4gICAgICAgIG91dFs1XSA9IGF5ICogYncgKyBheiAqIGJ4IC0gYXggKiBiejtcclxuICAgICAgICBvdXRbNl0gPSBheiAqIGJ3ICsgYXggKiBieSAtIGF5ICogYng7XHJcbiAgICAgICAgb3V0WzddID0gLWF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSB0cmFuc2xhdGlvblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSB0IHRyYW5zbGF0aW9uIHZlY3RvclxyXG4gICAgICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uJDMob3V0LCB0KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMDtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMTtcclxuICAgICAgICBvdXRbNF0gPSB0WzBdICogMC41O1xyXG4gICAgICAgIG91dFs1XSA9IHRbMV0gKiAwLjU7XHJcbiAgICAgICAgb3V0WzZdID0gdFsyXSAqIDAuNTtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBkdWFsIHF1YXQgZnJvbSBhIHF1YXRlcm5pb25cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBwYXJhbSB7cXVhdH0gcSB0aGUgcXVhdGVybmlvblxyXG4gICAgICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVJvdGF0aW9uJDQob3V0LCBxKSB7XHJcbiAgICAgICAgb3V0WzBdID0gcVswXTtcclxuICAgICAgICBvdXRbMV0gPSBxWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IHFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gcVszXTtcclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgZHVhbCBxdWF0IGZyb20gYSBtYXRyaXggKDR4NClcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIGR1YWwgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXhcclxuICAgICAqIEByZXR1cm5zIHtxdWF0Mn0gZHVhbCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGZyb21NYXQ0JDEob3V0LCBhKSB7XHJcbiAgICAgICAgLy9UT0RPIE9wdGltaXplIHRoaXNcclxuICAgICAgICB2YXIgb3V0ZXIgPSBjcmVhdGUkNigpO1xyXG4gICAgICAgIGdldFJvdGF0aW9uKG91dGVyLCBhKTtcclxuICAgICAgICB2YXIgdCA9IG5ldyBBUlJBWV9UWVBFKDMpO1xyXG4gICAgICAgIGdldFRyYW5zbGF0aW9uKHQsIGEpO1xyXG4gICAgICAgIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uJDEob3V0LCBvdXRlciwgdCk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIGR1YWwgcXVhdCB0byBhbm90aGVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBzb3VyY2UgZHVhbCBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjb3B5JDcob3V0LCBhKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXTtcclxuICAgICAgICBvdXRbNF0gPSBhWzRdO1xyXG4gICAgICAgIG91dFs1XSA9IGFbNV07XHJcbiAgICAgICAgb3V0WzZdID0gYVs2XTtcclxuICAgICAgICBvdXRbN10gPSBhWzddO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIGR1YWwgcXVhdCB0byB0aGUgaWRlbnRpdHkgZHVhbCBxdWF0ZXJuaW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gICAgICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGlkZW50aXR5JDUob3V0KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMDtcclxuICAgICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgICAgb3V0WzNdID0gMTtcclxuICAgICAgICBvdXRbNF0gPSAwO1xyXG4gICAgICAgIG91dFs1XSA9IDA7XHJcbiAgICAgICAgb3V0WzZdID0gMDtcclxuICAgICAgICBvdXRbN10gPSAwO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIGR1YWwgcXVhdCB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHgxIFggY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB6MSBaIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHcxIFcgY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5MiBZIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHoyIFogY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdzIgVyBjb21wb25lbnRcclxuICAgICAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHNldCQ3KG91dCwgeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIsIHcyKSB7XHJcbiAgICAgICAgb3V0WzBdID0geDE7XHJcbiAgICAgICAgb3V0WzFdID0geTE7XHJcbiAgICAgICAgb3V0WzJdID0gejE7XHJcbiAgICAgICAgb3V0WzNdID0gdzE7XHJcbiAgICAgICAgb3V0WzRdID0geDI7XHJcbiAgICAgICAgb3V0WzVdID0geTI7XHJcbiAgICAgICAgb3V0WzZdID0gejI7XHJcbiAgICAgICAgb3V0WzddID0gdzI7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgcmVhbCBwYXJ0IG9mIGEgZHVhbCBxdWF0XHJcbiAgICAgKiBAcGFyYW0gIHtxdWF0fSBvdXQgcmVhbCBwYXJ0XHJcbiAgICAgKiBAcGFyYW0gIHtxdWF0Mn0gYSBEdWFsIFF1YXRlcm5pb25cclxuICAgICAqIEByZXR1cm4ge3F1YXR9IHJlYWwgcGFydFxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGdldFJlYWwgPSBjb3B5JDY7XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGR1YWwgcGFydCBvZiBhIGR1YWwgcXVhdFxyXG4gICAgICogQHBhcmFtICB7cXVhdH0gb3V0IGR1YWwgcGFydFxyXG4gICAgICogQHBhcmFtICB7cXVhdDJ9IGEgRHVhbCBRdWF0ZXJuaW9uXHJcbiAgICAgKiBAcmV0dXJuIHtxdWF0fSBkdWFsIHBhcnRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldER1YWwob3V0LCBhKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVs0XTtcclxuICAgICAgICBvdXRbMV0gPSBhWzVdO1xyXG4gICAgICAgIG91dFsyXSA9IGFbNl07XHJcbiAgICAgICAgb3V0WzNdID0gYVs3XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIHJlYWwgY29tcG9uZW50IG9mIGEgZHVhbCBxdWF0IHRvIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBxIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJlYWwgcGFydFxyXG4gICAgICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIHNldFJlYWwgPSBjb3B5JDY7XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZHVhbCBjb21wb25lbnQgb2YgYSBkdWFsIHF1YXQgdG8gdGhlIGdpdmVuIHF1YXRlcm5pb25cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IHEgYSBxdWF0ZXJuaW9uIHJlcHJlc2VudGluZyB0aGUgZHVhbCBwYXJ0XHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzZXREdWFsKG91dCwgcSkge1xyXG4gICAgICAgIG91dFs0XSA9IHFbMF07XHJcbiAgICAgICAgb3V0WzVdID0gcVsxXTtcclxuICAgICAgICBvdXRbNl0gPSBxWzJdO1xyXG4gICAgICAgIG91dFs3XSA9IHFbM107XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgdHJhbnNsYXRpb24gb2YgYSBub3JtYWxpemVkIGR1YWwgcXVhdFxyXG4gICAgICogQHBhcmFtICB7dmVjM30gb3V0IHRyYW5zbGF0aW9uXHJcbiAgICAgKiBAcGFyYW0gIHtxdWF0Mn0gYSBEdWFsIFF1YXRlcm5pb24gdG8gYmUgZGVjb21wb3NlZFxyXG4gICAgICogQHJldHVybiB7dmVjM30gdHJhbnNsYXRpb25cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uJDEob3V0LCBhKSB7XHJcbiAgICAgICAgdmFyIGF4ID0gYVs0XSxcclxuICAgICAgICAgICAgYXkgPSBhWzVdLFxyXG4gICAgICAgICAgICBheiA9IGFbNl0sXHJcbiAgICAgICAgICAgIGF3ID0gYVs3XSxcclxuICAgICAgICAgICAgYnggPSAtYVswXSxcclxuICAgICAgICAgICAgYnkgPSAtYVsxXSxcclxuICAgICAgICAgICAgYnogPSAtYVsyXSxcclxuICAgICAgICAgICAgYncgPSBhWzNdO1xyXG4gICAgICAgIG91dFswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDI7XHJcbiAgICAgICAgb3V0WzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcclxuICAgICAgICBvdXRbMl0gPSAoYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCkgKiAyO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zbGF0ZXMgYSBkdWFsIHF1YXQgYnkgdGhlIGdpdmVuIHZlY3RvclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHRyYW5zbGF0ZVxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcclxuICAgICAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUkMyhvdXQsIGEsIHYpIHtcclxuICAgICAgICB2YXIgYXgxID0gYVswXSxcclxuICAgICAgICAgICAgYXkxID0gYVsxXSxcclxuICAgICAgICAgICAgYXoxID0gYVsyXSxcclxuICAgICAgICAgICAgYXcxID0gYVszXSxcclxuICAgICAgICAgICAgYngxID0gdlswXSAqIDAuNSxcclxuICAgICAgICAgICAgYnkxID0gdlsxXSAqIDAuNSxcclxuICAgICAgICAgICAgYnoxID0gdlsyXSAqIDAuNSxcclxuICAgICAgICAgICAgYXgyID0gYVs0XSxcclxuICAgICAgICAgICAgYXkyID0gYVs1XSxcclxuICAgICAgICAgICAgYXoyID0gYVs2XSxcclxuICAgICAgICAgICAgYXcyID0gYVs3XTtcclxuICAgICAgICBvdXRbMF0gPSBheDE7XHJcbiAgICAgICAgb3V0WzFdID0gYXkxO1xyXG4gICAgICAgIG91dFsyXSA9IGF6MTtcclxuICAgICAgICBvdXRbM10gPSBhdzE7XHJcbiAgICAgICAgb3V0WzRdID0gYXcxICogYngxICsgYXkxICogYnoxIC0gYXoxICogYnkxICsgYXgyO1xyXG4gICAgICAgIG91dFs1XSA9IGF3MSAqIGJ5MSArIGF6MSAqIGJ4MSAtIGF4MSAqIGJ6MSArIGF5MjtcclxuICAgICAgICBvdXRbNl0gPSBhdzEgKiBiejEgKyBheDEgKiBieTEgLSBheTEgKiBieDEgKyBhejI7XHJcbiAgICAgICAgb3V0WzddID0gLWF4MSAqIGJ4MSAtIGF5MSAqIGJ5MSAtIGF6MSAqIGJ6MSArIGF3MjtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGFyb3VuZCB0aGUgWCBheGlzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBkdWFsIHF1YXRlcm5pb24gdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmFkIGhvdyBmYXIgc2hvdWxkIHRoZSByb3RhdGlvbiBiZVxyXG4gICAgICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGF0ZVgkMyhvdXQsIGEsIHJhZCkge1xyXG4gICAgICAgIHZhciBieCA9IC1hWzBdLFxyXG4gICAgICAgICAgICBieSA9IC1hWzFdLFxyXG4gICAgICAgICAgICBieiA9IC1hWzJdLFxyXG4gICAgICAgICAgICBidyA9IGFbM10sXHJcbiAgICAgICAgICAgIGF4ID0gYVs0XSxcclxuICAgICAgICAgICAgYXkgPSBhWzVdLFxyXG4gICAgICAgICAgICBheiA9IGFbNl0sXHJcbiAgICAgICAgICAgIGF3ID0gYVs3XSxcclxuICAgICAgICAgICAgYXgxID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSxcclxuICAgICAgICAgICAgYXkxID0gYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieixcclxuICAgICAgICAgICAgYXoxID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCxcclxuICAgICAgICAgICAgYXcxID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcclxuICAgICAgICByb3RhdGVYJDIob3V0LCBhLCByYWQpO1xyXG4gICAgICAgIGJ4ID0gb3V0WzBdO1xyXG4gICAgICAgIGJ5ID0gb3V0WzFdO1xyXG4gICAgICAgIGJ6ID0gb3V0WzJdO1xyXG4gICAgICAgIGJ3ID0gb3V0WzNdO1xyXG4gICAgICAgIG91dFs0XSA9IGF4MSAqIGJ3ICsgYXcxICogYnggKyBheTEgKiBieiAtIGF6MSAqIGJ5O1xyXG4gICAgICAgIG91dFs1XSA9IGF5MSAqIGJ3ICsgYXcxICogYnkgKyBhejEgKiBieCAtIGF4MSAqIGJ6O1xyXG4gICAgICAgIG91dFs2XSA9IGF6MSAqIGJ3ICsgYXcxICogYnogKyBheDEgKiBieSAtIGF5MSAqIGJ4O1xyXG4gICAgICAgIG91dFs3XSA9IGF3MSAqIGJ3IC0gYXgxICogYnggLSBheTEgKiBieSAtIGF6MSAqIGJ6O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBZIGF4aXNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWQgaG93IGZhciBzaG91bGQgdGhlIHJvdGF0aW9uIGJlXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRlWSQzKG91dCwgYSwgcmFkKSB7XHJcbiAgICAgICAgdmFyIGJ4ID0gLWFbMF0sXHJcbiAgICAgICAgICAgIGJ5ID0gLWFbMV0sXHJcbiAgICAgICAgICAgIGJ6ID0gLWFbMl0sXHJcbiAgICAgICAgICAgIGJ3ID0gYVszXSxcclxuICAgICAgICAgICAgYXggPSBhWzRdLFxyXG4gICAgICAgICAgICBheSA9IGFbNV0sXHJcbiAgICAgICAgICAgIGF6ID0gYVs2XSxcclxuICAgICAgICAgICAgYXcgPSBhWzddLFxyXG4gICAgICAgICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxyXG4gICAgICAgICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxyXG4gICAgICAgICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxyXG4gICAgICAgICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gICAgICAgIHJvdGF0ZVkkMihvdXQsIGEsIHJhZCk7XHJcbiAgICAgICAgYnggPSBvdXRbMF07XHJcbiAgICAgICAgYnkgPSBvdXRbMV07XHJcbiAgICAgICAgYnogPSBvdXRbMl07XHJcbiAgICAgICAgYncgPSBvdXRbM107XHJcbiAgICAgICAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgICAgICAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgICAgICAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgICAgICAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUm90YXRlcyBhIGR1YWwgcXVhdCBhcm91bmQgdGhlIFogYXhpc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHJvdGF0ZVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcclxuICAgICAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGVaJDMob3V0LCBhLCByYWQpIHtcclxuICAgICAgICB2YXIgYnggPSAtYVswXSxcclxuICAgICAgICAgICAgYnkgPSAtYVsxXSxcclxuICAgICAgICAgICAgYnogPSAtYVsyXSxcclxuICAgICAgICAgICAgYncgPSBhWzNdLFxyXG4gICAgICAgICAgICBheCA9IGFbNF0sXHJcbiAgICAgICAgICAgIGF5ID0gYVs1XSxcclxuICAgICAgICAgICAgYXogPSBhWzZdLFxyXG4gICAgICAgICAgICBhdyA9IGFbN10sXHJcbiAgICAgICAgICAgIGF4MSA9IGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnksXHJcbiAgICAgICAgICAgIGF5MSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnosXHJcbiAgICAgICAgICAgIGF6MSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngsXHJcbiAgICAgICAgICAgIGF3MSA9IGF3ICogYncgLSBheCAqIGJ4IC0gYXkgKiBieSAtIGF6ICogYno7XHJcbiAgICAgICAgcm90YXRlWiQyKG91dCwgYSwgcmFkKTtcclxuICAgICAgICBieCA9IG91dFswXTtcclxuICAgICAgICBieSA9IG91dFsxXTtcclxuICAgICAgICBieiA9IG91dFsyXTtcclxuICAgICAgICBidyA9IG91dFszXTtcclxuICAgICAgICBvdXRbNF0gPSBheDEgKiBidyArIGF3MSAqIGJ4ICsgYXkxICogYnogLSBhejEgKiBieTtcclxuICAgICAgICBvdXRbNV0gPSBheTEgKiBidyArIGF3MSAqIGJ5ICsgYXoxICogYnggLSBheDEgKiBiejtcclxuICAgICAgICBvdXRbNl0gPSBhejEgKiBidyArIGF3MSAqIGJ6ICsgYXgxICogYnkgLSBheTEgKiBieDtcclxuICAgICAgICBvdXRbN10gPSBhdzEgKiBidyAtIGF4MSAqIGJ4IC0gYXkxICogYnkgLSBhejEgKiBiejtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGJ5IGEgZ2l2ZW4gcXVhdGVybmlvbiAoYSAqIHEpXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBkdWFsIHF1YXRlcm5pb24gdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byByb3RhdGUgYnlcclxuICAgICAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGVCeVF1YXRBcHBlbmQob3V0LCBhLCBxKSB7XHJcbiAgICAgICAgdmFyIHF4ID0gcVswXSxcclxuICAgICAgICAgICAgcXkgPSBxWzFdLFxyXG4gICAgICAgICAgICBxeiA9IHFbMl0sXHJcbiAgICAgICAgICAgIHF3ID0gcVszXSxcclxuICAgICAgICAgICAgYXggPSBhWzBdLFxyXG4gICAgICAgICAgICBheSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGF6ID0gYVsyXSxcclxuICAgICAgICAgICAgYXcgPSBhWzNdO1xyXG4gICAgICAgIG91dFswXSA9IGF4ICogcXcgKyBhdyAqIHF4ICsgYXkgKiBxeiAtIGF6ICogcXk7XHJcbiAgICAgICAgb3V0WzFdID0gYXkgKiBxdyArIGF3ICogcXkgKyBheiAqIHF4IC0gYXggKiBxejtcclxuICAgICAgICBvdXRbMl0gPSBheiAqIHF3ICsgYXcgKiBxeiArIGF4ICogcXkgLSBheSAqIHF4O1xyXG4gICAgICAgIG91dFszXSA9IGF3ICogcXcgLSBheCAqIHF4IC0gYXkgKiBxeSAtIGF6ICogcXo7XHJcbiAgICAgICAgYXggPSBhWzRdO1xyXG4gICAgICAgIGF5ID0gYVs1XTtcclxuICAgICAgICBheiA9IGFbNl07XHJcbiAgICAgICAgYXcgPSBhWzddO1xyXG4gICAgICAgIG91dFs0XSA9IGF4ICogcXcgKyBhdyAqIHF4ICsgYXkgKiBxeiAtIGF6ICogcXk7XHJcbiAgICAgICAgb3V0WzVdID0gYXkgKiBxdyArIGF3ICogcXkgKyBheiAqIHF4IC0gYXggKiBxejtcclxuICAgICAgICBvdXRbNl0gPSBheiAqIHF3ICsgYXcgKiBxeiArIGF4ICogcXkgLSBheSAqIHF4O1xyXG4gICAgICAgIG91dFs3XSA9IGF3ICogcXcgLSBheCAqIHF4IC0gYXkgKiBxeSAtIGF6ICogcXo7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUm90YXRlcyBhIGR1YWwgcXVhdCBieSBhIGdpdmVuIHF1YXRlcm5pb24gKHEgKiBhKVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gcm90YXRlIGJ5XHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBkdWFsIHF1YXRlcm5pb24gdG8gcm90YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRlQnlRdWF0UHJlcGVuZChvdXQsIHEsIGEpIHtcclxuICAgICAgICB2YXIgcXggPSBxWzBdLFxyXG4gICAgICAgICAgICBxeSA9IHFbMV0sXHJcbiAgICAgICAgICAgIHF6ID0gcVsyXSxcclxuICAgICAgICAgICAgcXcgPSBxWzNdLFxyXG4gICAgICAgICAgICBieCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGJ5ID0gYVsxXSxcclxuICAgICAgICAgICAgYnogPSBhWzJdLFxyXG4gICAgICAgICAgICBidyA9IGFbM107XHJcbiAgICAgICAgb3V0WzBdID0gcXggKiBidyArIHF3ICogYnggKyBxeSAqIGJ6IC0gcXogKiBieTtcclxuICAgICAgICBvdXRbMV0gPSBxeSAqIGJ3ICsgcXcgKiBieSArIHF6ICogYnggLSBxeCAqIGJ6O1xyXG4gICAgICAgIG91dFsyXSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XHJcbiAgICAgICAgb3V0WzNdID0gcXcgKiBidyAtIHF4ICogYnggLSBxeSAqIGJ5IC0gcXogKiBiejtcclxuICAgICAgICBieCA9IGFbNF07XHJcbiAgICAgICAgYnkgPSBhWzVdO1xyXG4gICAgICAgIGJ6ID0gYVs2XTtcclxuICAgICAgICBidyA9IGFbN107XHJcbiAgICAgICAgb3V0WzRdID0gcXggKiBidyArIHF3ICogYnggKyBxeSAqIGJ6IC0gcXogKiBieTtcclxuICAgICAgICBvdXRbNV0gPSBxeSAqIGJ3ICsgcXcgKiBieSArIHF6ICogYnggLSBxeCAqIGJ6O1xyXG4gICAgICAgIG91dFs2XSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XHJcbiAgICAgICAgb3V0WzddID0gcXcgKiBidyAtIHF4ICogYnggLSBxeSAqIGJ5IC0gcXogKiBiejtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3RhdGVzIGEgZHVhbCBxdWF0IGFyb3VuZCBhIGdpdmVuIGF4aXMuIERvZXMgdGhlIG5vcm1hbGlzYXRpb24gYXV0b21hdGljYWxseVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZHVhbCBxdWF0ZXJuaW9uIHRvIHJvdGF0ZVxyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWQgaG93IGZhciB0aGUgcm90YXRpb24gc2hvdWxkIGJlXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRlQXJvdW5kQXhpcyhvdXQsIGEsIGF4aXMsIHJhZCkge1xyXG4gICAgICAgIC8vU3BlY2lhbCBjYXNlIGZvciByYWQgPSAwXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHJhZCkgPCBFUFNJTE9OKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3B5JDcob3V0LCBhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBheGlzTGVuZ3RoID0gTWF0aC5oeXBvdChheGlzWzBdLCBheGlzWzFdLCBheGlzWzJdKTtcclxuICAgICAgICByYWQgPSByYWQgKiAwLjU7XHJcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xyXG4gICAgICAgIHZhciBieCA9IHMgKiBheGlzWzBdIC8gYXhpc0xlbmd0aDtcclxuICAgICAgICB2YXIgYnkgPSBzICogYXhpc1sxXSAvIGF4aXNMZW5ndGg7XHJcbiAgICAgICAgdmFyIGJ6ID0gcyAqIGF4aXNbMl0gLyBheGlzTGVuZ3RoO1xyXG4gICAgICAgIHZhciBidyA9IE1hdGguY29zKHJhZCk7XHJcbiAgICAgICAgdmFyIGF4MSA9IGFbMF0sXHJcbiAgICAgICAgICAgIGF5MSA9IGFbMV0sXHJcbiAgICAgICAgICAgIGF6MSA9IGFbMl0sXHJcbiAgICAgICAgICAgIGF3MSA9IGFbM107XHJcbiAgICAgICAgb3V0WzBdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgICAgICAgb3V0WzFdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgICAgICAgb3V0WzJdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgICAgICAgb3V0WzNdID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcbiAgICAgICAgdmFyIGF4ID0gYVs0XSxcclxuICAgICAgICAgICAgYXkgPSBhWzVdLFxyXG4gICAgICAgICAgICBheiA9IGFbNl0sXHJcbiAgICAgICAgICAgIGF3ID0gYVs3XTtcclxuICAgICAgICBvdXRbNF0gPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xyXG4gICAgICAgIG91dFs1XSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XHJcbiAgICAgICAgb3V0WzZdID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcclxuICAgICAgICBvdXRbN10gPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdHdvIGR1YWwgcXVhdCdzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gYWRkJDcob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSArIGJbMF07XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSArIGJbMV07XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSArIGJbMl07XHJcbiAgICAgICAgb3V0WzNdID0gYVszXSArIGJbM107XHJcbiAgICAgICAgb3V0WzRdID0gYVs0XSArIGJbNF07XHJcbiAgICAgICAgb3V0WzVdID0gYVs1XSArIGJbNV07XHJcbiAgICAgICAgb3V0WzZdID0gYVs2XSArIGJbNl07XHJcbiAgICAgICAgb3V0WzddID0gYVs3XSArIGJbN107XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTXVsdGlwbGllcyB0d28gZHVhbCBxdWF0J3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkkNyhvdXQsIGEsIGIpIHtcclxuICAgICAgICB2YXIgYXgwID0gYVswXSxcclxuICAgICAgICAgICAgYXkwID0gYVsxXSxcclxuICAgICAgICAgICAgYXowID0gYVsyXSxcclxuICAgICAgICAgICAgYXcwID0gYVszXSxcclxuICAgICAgICAgICAgYngxID0gYls0XSxcclxuICAgICAgICAgICAgYnkxID0gYls1XSxcclxuICAgICAgICAgICAgYnoxID0gYls2XSxcclxuICAgICAgICAgICAgYncxID0gYls3XSxcclxuICAgICAgICAgICAgYXgxID0gYVs0XSxcclxuICAgICAgICAgICAgYXkxID0gYVs1XSxcclxuICAgICAgICAgICAgYXoxID0gYVs2XSxcclxuICAgICAgICAgICAgYXcxID0gYVs3XSxcclxuICAgICAgICAgICAgYngwID0gYlswXSxcclxuICAgICAgICAgICAgYnkwID0gYlsxXSxcclxuICAgICAgICAgICAgYnowID0gYlsyXSxcclxuICAgICAgICAgICAgYncwID0gYlszXTtcclxuICAgICAgICBvdXRbMF0gPSBheDAgKiBidzAgKyBhdzAgKiBieDAgKyBheTAgKiBiejAgLSBhejAgKiBieTA7XHJcbiAgICAgICAgb3V0WzFdID0gYXkwICogYncwICsgYXcwICogYnkwICsgYXowICogYngwIC0gYXgwICogYnowO1xyXG4gICAgICAgIG91dFsyXSA9IGF6MCAqIGJ3MCArIGF3MCAqIGJ6MCArIGF4MCAqIGJ5MCAtIGF5MCAqIGJ4MDtcclxuICAgICAgICBvdXRbM10gPSBhdzAgKiBidzAgLSBheDAgKiBieDAgLSBheTAgKiBieTAgLSBhejAgKiBiejA7XHJcbiAgICAgICAgb3V0WzRdID0gYXgwICogYncxICsgYXcwICogYngxICsgYXkwICogYnoxIC0gYXowICogYnkxICsgYXgxICogYncwICsgYXcxICogYngwICsgYXkxICogYnowIC0gYXoxICogYnkwO1xyXG4gICAgICAgIG91dFs1XSA9IGF5MCAqIGJ3MSArIGF3MCAqIGJ5MSArIGF6MCAqIGJ4MSAtIGF4MCAqIGJ6MSArIGF5MSAqIGJ3MCArIGF3MSAqIGJ5MCArIGF6MSAqIGJ4MCAtIGF4MSAqIGJ6MDtcclxuICAgICAgICBvdXRbNl0gPSBhejAgKiBidzEgKyBhdzAgKiBiejEgKyBheDAgKiBieTEgLSBheTAgKiBieDEgKyBhejEgKiBidzAgKyBhdzEgKiBiejAgKyBheDEgKiBieTAgLSBheTEgKiBieDA7XHJcbiAgICAgICAgb3V0WzddID0gYXcwICogYncxIC0gYXgwICogYngxIC0gYXkwICogYnkxIC0gYXowICogYnoxICsgYXcxICogYncwIC0gYXgxICogYngwIC0gYXkxICogYnkwIC0gYXoxICogYnowO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdDIubXVsdGlwbHl9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBtdWwkNyA9IG11bHRpcGx5JDc7XHJcbiAgICAvKipcclxuICAgICAqIFNjYWxlcyBhIGR1YWwgcXVhdCBieSBhIHNjYWxhciBudW1iZXJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdCB0byBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBkdWFsIHF1YXQgYnlcclxuICAgICAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHNjYWxlJDcob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAqIGI7XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSAqIGI7XHJcbiAgICAgICAgb3V0WzJdID0gYVsyXSAqIGI7XHJcbiAgICAgICAgb3V0WzNdID0gYVszXSAqIGI7XHJcbiAgICAgICAgb3V0WzRdID0gYVs0XSAqIGI7XHJcbiAgICAgICAgb3V0WzVdID0gYVs1XSAqIGI7XHJcbiAgICAgICAgb3V0WzZdID0gYVs2XSAqIGI7XHJcbiAgICAgICAgb3V0WzddID0gYVs3XSAqIGI7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIGR1YWwgcXVhdCdzIChUaGUgZG90IHByb2R1Y3Qgb2YgdGhlIHJlYWwgcGFydHMpXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGRvdCQzID0gZG90JDI7XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gZHVhbCBxdWF0cydzXHJcbiAgICAgKiBOT1RFOiBUaGUgcmVzdWx0aW5nIGR1YWwgcXVhdGVybmlvbnMgd29uJ3QgYWx3YXlzIGJlIG5vcm1hbGl6ZWQgKFRoZSBlcnJvciBpcyBtb3N0IG5vdGljZWFibGUgd2hlbiB0ID0gMC41KVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdFxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICAgICAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBsZXJwJDMob3V0LCBhLCBiLCB0KSB7XHJcbiAgICAgICAgdmFyIG10ID0gMSAtIHQ7XHJcbiAgICAgICAgaWYgKGRvdCQzKGEsIGIpIDwgMCkgdCA9IC10O1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKiBtdCArIGJbMF0gKiB0O1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKiBtdCArIGJbMV0gKiB0O1xyXG4gICAgICAgIG91dFsyXSA9IGFbMl0gKiBtdCArIGJbMl0gKiB0O1xyXG4gICAgICAgIG91dFszXSA9IGFbM10gKiBtdCArIGJbM10gKiB0O1xyXG4gICAgICAgIG91dFs0XSA9IGFbNF0gKiBtdCArIGJbNF0gKiB0O1xyXG4gICAgICAgIG91dFs1XSA9IGFbNV0gKiBtdCArIGJbNV0gKiB0O1xyXG4gICAgICAgIG91dFs2XSA9IGFbNl0gKiBtdCArIGJbNl0gKiB0O1xyXG4gICAgICAgIG91dFs3XSA9IGFbN10gKiBtdCArIGJbN10gKiB0O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2Ugb2YgYSBkdWFsIHF1YXQuIElmIHRoZXkgYXJlIG5vcm1hbGl6ZWQsIGNvbmp1Z2F0ZSBpcyBjaGVhcGVyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxyXG4gICAgICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGludmVydCQ1KG91dCwgYSkge1xyXG4gICAgICAgIHZhciBzcWxlbiA9IHNxdWFyZWRMZW5ndGgkMyhhKTtcclxuICAgICAgICBvdXRbMF0gPSAtYVswXSAvIHNxbGVuO1xyXG4gICAgICAgIG91dFsxXSA9IC1hWzFdIC8gc3FsZW47XHJcbiAgICAgICAgb3V0WzJdID0gLWFbMl0gLyBzcWxlbjtcclxuICAgICAgICBvdXRbM10gPSBhWzNdIC8gc3FsZW47XHJcbiAgICAgICAgb3V0WzRdID0gLWFbNF0gLyBzcWxlbjtcclxuICAgICAgICBvdXRbNV0gPSAtYVs1XSAvIHNxbGVuO1xyXG4gICAgICAgIG91dFs2XSA9IC1hWzZdIC8gc3FsZW47XHJcbiAgICAgICAgb3V0WzddID0gYVs3XSAvIHNxbGVuO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIGR1YWwgcXVhdFxyXG4gICAgICogSWYgdGhlIGR1YWwgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGZ1bmN0aW9uIGlzIGZhc3RlciB0aGFuIHF1YXQyLmludmVyc2UgYW5kIHByb2R1Y2VzIHRoZSBzYW1lIHJlc3VsdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIHF1YXQgdG8gY2FsY3VsYXRlIGNvbmp1Z2F0ZSBvZlxyXG4gICAgICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvbmp1Z2F0ZSQxKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IC1hWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IC1hWzFdO1xyXG4gICAgICAgIG91dFsyXSA9IC1hWzJdO1xyXG4gICAgICAgIG91dFszXSA9IGFbM107XHJcbiAgICAgICAgb3V0WzRdID0gLWFbNF07XHJcbiAgICAgICAgb3V0WzVdID0gLWFbNV07XHJcbiAgICAgICAgb3V0WzZdID0gLWFbNl07XHJcbiAgICAgICAgb3V0WzddID0gYVs3XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSBkdWFsIHF1YXRcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdCB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgbGVuZ3RoJDMgPSBsZW5ndGgkMjtcclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayBxdWF0Mi5sZW5ndGh9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBsZW4kMyA9IGxlbmd0aCQzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIGR1YWwgcXVhdFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7cXVhdDJ9IGEgZHVhbCBxdWF0IHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxyXG4gICAgICogQGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuXHJcbiAgICB2YXIgc3F1YXJlZExlbmd0aCQzID0gc3F1YXJlZExlbmd0aCQyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQyLnNxdWFyZWRMZW5ndGh9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzcXJMZW4kMyA9IHNxdWFyZWRMZW5ndGgkMztcclxuICAgIC8qKlxyXG4gICAgICogTm9ybWFsaXplIGEgZHVhbCBxdWF0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAgICAgKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdGVybmlvbiB0byBub3JtYWxpemVcclxuICAgICAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSQzKG91dCwgYSkge1xyXG4gICAgICAgIHZhciBtYWduaXR1ZGUgPSBzcXVhcmVkTGVuZ3RoJDMoYSk7XHJcblxyXG4gICAgICAgIGlmIChtYWduaXR1ZGUgPiAwKSB7XHJcbiAgICAgICAgICAgIG1hZ25pdHVkZSA9IE1hdGguc3FydChtYWduaXR1ZGUpO1xyXG4gICAgICAgICAgICB2YXIgYTAgPSBhWzBdIC8gbWFnbml0dWRlO1xyXG4gICAgICAgICAgICB2YXIgYTEgPSBhWzFdIC8gbWFnbml0dWRlO1xyXG4gICAgICAgICAgICB2YXIgYTIgPSBhWzJdIC8gbWFnbml0dWRlO1xyXG4gICAgICAgICAgICB2YXIgYTMgPSBhWzNdIC8gbWFnbml0dWRlO1xyXG4gICAgICAgICAgICB2YXIgYjAgPSBhWzRdO1xyXG4gICAgICAgICAgICB2YXIgYjEgPSBhWzVdO1xyXG4gICAgICAgICAgICB2YXIgYjIgPSBhWzZdO1xyXG4gICAgICAgICAgICB2YXIgYjMgPSBhWzddO1xyXG4gICAgICAgICAgICB2YXIgYV9kb3RfYiA9IGEwICogYjAgKyBhMSAqIGIxICsgYTIgKiBiMiArIGEzICogYjM7XHJcbiAgICAgICAgICAgIG91dFswXSA9IGEwO1xyXG4gICAgICAgICAgICBvdXRbMV0gPSBhMTtcclxuICAgICAgICAgICAgb3V0WzJdID0gYTI7XHJcbiAgICAgICAgICAgIG91dFszXSA9IGEzO1xyXG4gICAgICAgICAgICBvdXRbNF0gPSAoYjAgLSBhMCAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xyXG4gICAgICAgICAgICBvdXRbNV0gPSAoYjEgLSBhMSAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xyXG4gICAgICAgICAgICBvdXRbNl0gPSAoYjIgLSBhMiAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xyXG4gICAgICAgICAgICBvdXRbN10gPSAoYjMgLSBhMyAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIGR1YWwgcXVhdGVuaW9uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYSBkdWFsIHF1YXRlcm5pb24gdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGR1YWwgcXVhdFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc3RyJDcoYSkge1xyXG4gICAgICAgIHJldHVybiAncXVhdDIoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnLCAnICsgYVs0XSArICcsICcgKyBhWzVdICsgJywgJyArIGFbNl0gKyAnLCAnICsgYVs3XSArICcpJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgZHVhbCBxdWF0ZXJuaW9ucyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3QgZHVhbCBxdWF0ZXJuaW9uLlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYiB0aGUgc2Vjb25kIGR1YWwgcXVhdGVybmlvbi5cclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSBkdWFsIHF1YXRlcm5pb25zIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZXhhY3RFcXVhbHMkNyhhLCBiKSB7XHJcbiAgICAgICAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgZHVhbCBxdWF0ZXJuaW9ucyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3QgZHVhbCBxdWF0LlxyXG4gICAgICogQHBhcmFtIHtxdWF0Mn0gYiB0aGUgc2Vjb25kIGR1YWwgcXVhdC5cclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSBkdWFsIHF1YXRzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZXF1YWxzJDgoYSwgYikge1xyXG4gICAgICAgIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGExID0gYVsxXSxcclxuICAgICAgICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICAgICAgICBhMyA9IGFbM10sXHJcbiAgICAgICAgICAgIGE0ID0gYVs0XSxcclxuICAgICAgICAgICAgYTUgPSBhWzVdLFxyXG4gICAgICAgICAgICBhNiA9IGFbNl0sXHJcbiAgICAgICAgICAgIGE3ID0gYVs3XTtcclxuICAgICAgICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICAgICAgICBiMSA9IGJbMV0sXHJcbiAgICAgICAgICAgIGIyID0gYlsyXSxcclxuICAgICAgICAgICAgYjMgPSBiWzNdLFxyXG4gICAgICAgICAgICBiNCA9IGJbNF0sXHJcbiAgICAgICAgICAgIGI1ID0gYls1XSxcclxuICAgICAgICAgICAgYjYgPSBiWzZdLFxyXG4gICAgICAgICAgICBiNyA9IGJbN107XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJiBNYXRoLmFicyhhNCAtIGI0KSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiYgTWF0aC5hYnMoYTUgLSBiNSkgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpICYmIE1hdGguYWJzKGE2IC0gYjYpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE2KSwgTWF0aC5hYnMoYjYpKSAmJiBNYXRoLmFicyhhNyAtIGI3KSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNyksIE1hdGguYWJzKGI3KSk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IHZhciBxdWF0MiA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcclxuICAgICAgICBjcmVhdGU6IGNyZWF0ZSQ3LFxyXG4gICAgICAgIGNsb25lOiBjbG9uZSQ3LFxyXG4gICAgICAgIGZyb21WYWx1ZXM6IGZyb21WYWx1ZXMkNyxcclxuICAgICAgICBmcm9tUm90YXRpb25UcmFuc2xhdGlvblZhbHVlczogZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25WYWx1ZXMsXHJcbiAgICAgICAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb246IGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uJDEsXHJcbiAgICAgICAgZnJvbVRyYW5zbGF0aW9uOiBmcm9tVHJhbnNsYXRpb24kMyxcclxuICAgICAgICBmcm9tUm90YXRpb246IGZyb21Sb3RhdGlvbiQ0LFxyXG4gICAgICAgIGZyb21NYXQ0OiBmcm9tTWF0NCQxLFxyXG4gICAgICAgIGNvcHk6IGNvcHkkNyxcclxuICAgICAgICBpZGVudGl0eTogaWRlbnRpdHkkNSxcclxuICAgICAgICBzZXQ6IHNldCQ3LFxyXG4gICAgICAgIGdldFJlYWw6IGdldFJlYWwsXHJcbiAgICAgICAgZ2V0RHVhbDogZ2V0RHVhbCxcclxuICAgICAgICBzZXRSZWFsOiBzZXRSZWFsLFxyXG4gICAgICAgIHNldER1YWw6IHNldER1YWwsXHJcbiAgICAgICAgZ2V0VHJhbnNsYXRpb246IGdldFRyYW5zbGF0aW9uJDEsXHJcbiAgICAgICAgdHJhbnNsYXRlOiB0cmFuc2xhdGUkMyxcclxuICAgICAgICByb3RhdGVYOiByb3RhdGVYJDMsXHJcbiAgICAgICAgcm90YXRlWTogcm90YXRlWSQzLFxyXG4gICAgICAgIHJvdGF0ZVo6IHJvdGF0ZVokMyxcclxuICAgICAgICByb3RhdGVCeVF1YXRBcHBlbmQ6IHJvdGF0ZUJ5UXVhdEFwcGVuZCxcclxuICAgICAgICByb3RhdGVCeVF1YXRQcmVwZW5kOiByb3RhdGVCeVF1YXRQcmVwZW5kLFxyXG4gICAgICAgIHJvdGF0ZUFyb3VuZEF4aXM6IHJvdGF0ZUFyb3VuZEF4aXMsXHJcbiAgICAgICAgYWRkOiBhZGQkNyxcclxuICAgICAgICBtdWx0aXBseTogbXVsdGlwbHkkNyxcclxuICAgICAgICBtdWw6IG11bCQ3LFxyXG4gICAgICAgIHNjYWxlOiBzY2FsZSQ3LFxyXG4gICAgICAgIGRvdDogZG90JDMsXHJcbiAgICAgICAgbGVycDogbGVycCQzLFxyXG4gICAgICAgIGludmVydDogaW52ZXJ0JDUsXHJcbiAgICAgICAgY29uanVnYXRlOiBjb25qdWdhdGUkMSxcclxuICAgICAgICBsZW5ndGg6IGxlbmd0aCQzLFxyXG4gICAgICAgIGxlbjogbGVuJDMsXHJcbiAgICAgICAgc3F1YXJlZExlbmd0aDogc3F1YXJlZExlbmd0aCQzLFxyXG4gICAgICAgIHNxckxlbjogc3FyTGVuJDMsXHJcbiAgICAgICAgbm9ybWFsaXplOiBub3JtYWxpemUkMyxcclxuICAgICAgICBzdHI6IHN0ciQ3LFxyXG4gICAgICAgIGV4YWN0RXF1YWxzOiBleGFjdEVxdWFscyQ3LFxyXG4gICAgICAgIGVxdWFsczogZXF1YWxzJDhcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogMiBEaW1lbnNpb25hbCBWZWN0b3JcclxuICAgICAqIEBtb2R1bGUgdmVjMlxyXG4gICAgICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWMyXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlJDgoKSB7XHJcbiAgICAgICAgdmFyIG91dCA9IG5ldyBBUlJBWV9UWVBFKDIpO1xyXG5cclxuICAgICAgICBpZiAoQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgICAgICAgICAgb3V0WzBdID0gMDtcclxuICAgICAgICAgICAgb3V0WzFdID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gY2xvbmVcclxuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIGNsb25lJDgoYSkge1xyXG4gICAgICAgIHZhciBvdXQgPSBuZXcgQVJSQVlfVFlQRSgyKTtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyB2ZWMyIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZnJvbVZhbHVlcyQ4KHgsIHkpIHtcclxuICAgICAgICB2YXIgb3V0ID0gbmV3IEFSUkFZX1RZUEUoMik7XHJcbiAgICAgICAgb3V0WzBdID0geDtcclxuICAgICAgICBvdXRbMV0gPSB5O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMyIHRvIGFub3RoZXJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBzb3VyY2UgdmVjdG9yXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjb3B5JDgob3V0LCBhKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHNldCQ4KG91dCwgeCwgeSkge1xyXG4gICAgICAgIG91dFswXSA9IHg7XHJcbiAgICAgICAgb3V0WzFdID0geTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHR3byB2ZWMyJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBhZGQkOChvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDYob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgICAgICAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTXVsdGlwbGllcyB0d28gdmVjMidzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkkOChvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdICogYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICogYlsxXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXZpZGVzIHR3byB2ZWMyJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBkaXZpZGUkMihvdXQsIGEsIGIpIHtcclxuICAgICAgICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gY2VpbFxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gY2VpbCQyKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcclxuICAgICAgICBvdXRbMV0gPSBNYXRoLmNlaWwoYVsxXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBmbG9vclxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZmxvb3IkMihvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xyXG4gICAgICAgIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbWluaW11bSBvZiB0d28gdmVjMidzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbWluJDIob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gTWF0aC5taW4oYVswXSwgYlswXSk7XHJcbiAgICAgICAgb3V0WzFdID0gTWF0aC5taW4oYVsxXSwgYlsxXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMidzXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbWF4JDIob3V0LCBhLCBiKSB7XHJcbiAgICAgICAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XHJcbiAgICAgICAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byByb3VuZFxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm91bmQkMihvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSBNYXRoLnJvdW5kKGFbMF0pO1xyXG4gICAgICAgIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2NhbGVzIGEgdmVjMiBieSBhIHNjYWxhciBudW1iZXJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzY2FsZSQ4KG91dCwgYSwgYikge1xyXG4gICAgICAgIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZHMgdHdvIHZlYzIncyBhZnRlciBzY2FsaW5nIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gc2NhbGVBbmRBZGQkMihvdXQsIGEsIGIsIHNjYWxlKSB7XHJcbiAgICAgICAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcclxuICAgICAgICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZGlzdGFuY2UkMihhLCBiKSB7XHJcbiAgICAgICAgdmFyIHggPSBiWzBdIC0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGJbMV0gLSBhWzFdO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmh5cG90KHgsIHkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UkMihhLCBiKSB7XHJcbiAgICAgICAgdmFyIHggPSBiWzBdIC0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGJbMV0gLSBhWzFdO1xyXG4gICAgICAgIHJldHVybiB4ICogeCArIHkgKiB5O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gbGVuZ3RoJDQoYSkge1xyXG4gICAgICAgIHZhciB4ID0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGFbMV07XHJcbiAgICAgICAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjMlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoJDQoYSkge1xyXG4gICAgICAgIHZhciB4ID0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGFbMV07XHJcbiAgICAgICAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gbmVnYXRlXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBuZWdhdGUkMihvdXQsIGEpIHtcclxuICAgICAgICBvdXRbMF0gPSAtYVswXTtcclxuICAgICAgICBvdXRbMV0gPSAtYVsxXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGludmVydFxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gaW52ZXJzZSQyKG91dCwgYSkge1xyXG4gICAgICAgIG91dFswXSA9IDEuMCAvIGFbMF07XHJcbiAgICAgICAgb3V0WzFdID0gMS4wIC8gYVsxXTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBOb3JtYWxpemUgYSB2ZWMyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpemUkNChvdXQsIGEpIHtcclxuICAgICAgICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgICAgICAgIHkgPSBhWzFdO1xyXG4gICAgICAgIHZhciBsZW4gPSB4ICogeCArIHkgKiB5O1xyXG5cclxuICAgICAgICBpZiAobGVuID4gMCkge1xyXG4gICAgICAgICAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xyXG4gICAgICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xyXG4gICAgICAgIG91dFsxXSA9IGFbMV0gKiBsZW47XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzInc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gICAgICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZG90JDQoYSwgYikge1xyXG4gICAgICAgIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMidzXHJcbiAgICAgKiBOb3RlIHRoYXQgdGhlIGNyb3NzIHByb2R1Y3QgbXVzdCBieSBkZWZpbml0aW9uIHByb2R1Y2UgYSAzRCB2ZWN0b3JcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBjcm9zcyQyKG91dCwgYSwgYikge1xyXG4gICAgICAgIHZhciB6ID0gYVswXSAqIGJbMV0gLSBhWzFdICogYlswXTtcclxuICAgICAgICBvdXRbMF0gPSBvdXRbMV0gPSAwO1xyXG4gICAgICAgIG91dFsyXSA9IHo7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMyJ3NcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBsZXJwJDQob3V0LCBhLCBiLCB0KSB7XHJcbiAgICAgICAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgICAgICAgYXkgPSBhWzFdO1xyXG4gICAgICAgIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xyXG4gICAgICAgIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByYW5kb20kMyhvdXQsIHNjYWxlKSB7XHJcbiAgICAgICAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XHJcbiAgICAgICAgdmFyIHIgPSBSQU5ET00oKSAqIDIuMCAqIE1hdGguUEk7XHJcbiAgICAgICAgb3V0WzBdID0gTWF0aC5jb3MocikgKiBzY2FsZTtcclxuICAgICAgICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHNjYWxlO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQyKG91dCwgYSwgbSkge1xyXG4gICAgICAgIHZhciB4ID0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGFbMV07XHJcbiAgICAgICAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeTtcclxuICAgICAgICBvdXRbMV0gPSBtWzFdICogeCArIG1bM10gKiB5O1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDJkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gICAgICogQHBhcmFtIHttYXQyZH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICAgICAqL1xyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDJkKG91dCwgYSwgbSkge1xyXG4gICAgICAgIHZhciB4ID0gYVswXSxcclxuICAgICAgICAgICAgeSA9IGFbMV07XHJcbiAgICAgICAgb3V0WzBdID0gbVswXSAqIHggKyBtWzJdICogeSArIG1bNF07XHJcbiAgICAgICAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzNdICogeSArIG1bNV07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0M1xyXG4gICAgICogM3JkIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0ge21hdDN9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzJDEob3V0LCBhLCBtKSB7XHJcbiAgICAgICAgdmFyIHggPSBhWzBdLFxyXG4gICAgICAgICAgICB5ID0gYVsxXTtcclxuICAgICAgICBvdXRbMF0gPSBtWzBdICogeCArIG1bM10gKiB5ICsgbVs2XTtcclxuICAgICAgICBvdXRbMV0gPSBtWzFdICogeCArIG1bNF0gKiB5ICsgbVs3XTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQ0XHJcbiAgICAgKiAzcmQgdmVjdG9yIGNvbXBvbmVudCBpcyBpbXBsaWNpdGx5ICcwJ1xyXG4gICAgICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAgICAgKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0JDIob3V0LCBhLCBtKSB7XHJcbiAgICAgICAgdmFyIHggPSBhWzBdO1xyXG4gICAgICAgIHZhciB5ID0gYVsxXTtcclxuICAgICAgICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsxMl07XHJcbiAgICAgICAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bMTNdO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJvdGF0ZSBhIDJEIHZlY3RvclxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMyXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGEgVGhlIHZlYzIgcG9pbnQgdG8gcm90YXRlXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxyXG4gICAgICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gcm90YXRlJDQob3V0LCBhLCBiLCBjKSB7XHJcbiAgICAgICAgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxyXG4gICAgICAgIHZhciBwMCA9IGFbMF0gLSBiWzBdLFxyXG4gICAgICAgICAgICBwMSA9IGFbMV0gLSBiWzFdLFxyXG4gICAgICAgICAgICBzaW5DID0gTWF0aC5zaW4oYyksXHJcbiAgICAgICAgICAgIGNvc0MgPSBNYXRoLmNvcyhjKTsgLy9wZXJmb3JtIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxyXG5cclxuICAgICAgICBvdXRbMF0gPSBwMCAqIGNvc0MgLSBwMSAqIHNpbkMgKyBiWzBdO1xyXG4gICAgICAgIG91dFsxXSA9IHAwICogc2luQyArIHAxICogY29zQyArIGJbMV07XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBhbmdsZSBiZXR3ZWVuIHR3byAyRCB2ZWN0b3JzXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGEgVGhlIGZpcnN0IG9wZXJhbmRcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIG9wZXJhbmRcclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBhbmdsZSQxKGEsIGIpIHtcclxuICAgICAgICB2YXIgeDEgPSBhWzBdLFxyXG4gICAgICAgICAgICB5MSA9IGFbMV0sXHJcbiAgICAgICAgICAgIHgyID0gYlswXSxcclxuICAgICAgICAgICAgeTIgPSBiWzFdO1xyXG4gICAgICAgIHZhciBsZW4xID0geDEgKiB4MSArIHkxICogeTE7XHJcblxyXG4gICAgICAgIGlmIChsZW4xID4gMCkge1xyXG4gICAgICAgICAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xyXG4gICAgICAgICAgICBsZW4xID0gMSAvIE1hdGguc3FydChsZW4xKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsZW4yID0geDIgKiB4MiArIHkyICogeTI7XHJcblxyXG4gICAgICAgIGlmIChsZW4yID4gMCkge1xyXG4gICAgICAgICAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xyXG4gICAgICAgICAgICBsZW4yID0gMSAvIE1hdGguc3FydChsZW4yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjb3NpbmUgPSAoeDEgKiB4MiArIHkxICogeTIpICogbGVuMSAqIGxlbjI7XHJcblxyXG4gICAgICAgIGlmIChjb3NpbmUgPiAxLjApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb3NpbmUgPCAtMS4wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLlBJO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmFjb3MoY29zaW5lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzIgdG8gemVyb1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiB6ZXJvJDIob3V0KSB7XHJcbiAgICAgICAgb3V0WzBdID0gMC4wO1xyXG4gICAgICAgIG91dFsxXSA9IDAuMDtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBzdHIkOChhKSB7XHJcbiAgICAgICAgcmV0dXJuICd2ZWMyKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnKSc7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgZXhhY3RseSBoYXZlIHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuXHJcbiAgICBmdW5jdGlvbiBleGFjdEVxdWFscyQ4KGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICAgICAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcblxyXG4gICAgZnVuY3Rpb24gZXF1YWxzJDkoYSwgYikge1xyXG4gICAgICAgIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgICAgICAgIGExID0gYVsxXTtcclxuICAgICAgICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICAgICAgICBiMSA9IGJbMV07XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5sZW5ndGh9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBsZW4kNCA9IGxlbmd0aCQ0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3VidHJhY3R9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzdWIkNiA9IHN1YnRyYWN0JDY7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5tdWx0aXBseX1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIG11bCQ4ID0gbXVsdGlwbHkkODtcclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmRpdmlkZX1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGRpdiQyID0gZGl2aWRlJDI7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcblxyXG4gICAgdmFyIGRpc3QkMiA9IGRpc3RhbmNlJDI7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5zcXVhcmVkRGlzdGFuY2V9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzcXJEaXN0JDIgPSBzcXVhcmVkRGlzdGFuY2UkMjtcclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLnNxdWFyZWRMZW5ndGh9XHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBzcXJMZW4kNCA9IHNxdWFyZWRMZW5ndGgkNDtcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzJzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzIuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMycyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxyXG4gICAgICogQHJldHVybnMge0FycmF5fSBhXHJcbiAgICAgKiBAZnVuY3Rpb25cclxuICAgICAqL1xyXG5cclxuICAgIHZhciBmb3JFYWNoJDIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZlYyA9IGNyZWF0ZSQ4KCk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcclxuICAgICAgICAgICAgdmFyIGksIGw7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXN0cmlkZSkge1xyXG4gICAgICAgICAgICAgICAgc3RyaWRlID0gMjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFvZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb3VudCkge1xyXG4gICAgICAgICAgICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsID0gYS5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XHJcbiAgICAgICAgICAgICAgICB2ZWNbMF0gPSBhW2ldO1xyXG4gICAgICAgICAgICAgICAgdmVjWzFdID0gYVtpICsgMV07XHJcbiAgICAgICAgICAgICAgICBmbih2ZWMsIHZlYywgYXJnKTtcclxuICAgICAgICAgICAgICAgIGFbaV0gPSB2ZWNbMF07XHJcbiAgICAgICAgICAgICAgICBhW2kgKyAxXSA9IHZlY1sxXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgfTtcclxuICAgIH0oKTtcclxuXHJcbiAgICBleHBvcnQgdmFyIHZlYzIgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgY3JlYXRlOiBjcmVhdGUkOCxcclxuICAgICAgICBjbG9uZTogY2xvbmUkOCxcclxuICAgICAgICBmcm9tVmFsdWVzOiBmcm9tVmFsdWVzJDgsXHJcbiAgICAgICAgY29weTogY29weSQ4LFxyXG4gICAgICAgIHNldDogc2V0JDgsXHJcbiAgICAgICAgYWRkOiBhZGQkOCxcclxuICAgICAgICBzdWJ0cmFjdDogc3VidHJhY3QkNixcclxuICAgICAgICBtdWx0aXBseTogbXVsdGlwbHkkOCxcclxuICAgICAgICBkaXZpZGU6IGRpdmlkZSQyLFxyXG4gICAgICAgIGNlaWw6IGNlaWwkMixcclxuICAgICAgICBmbG9vcjogZmxvb3IkMixcclxuICAgICAgICBtaW46IG1pbiQyLFxyXG4gICAgICAgIG1heDogbWF4JDIsXHJcbiAgICAgICAgcm91bmQ6IHJvdW5kJDIsXHJcbiAgICAgICAgc2NhbGU6IHNjYWxlJDgsXHJcbiAgICAgICAgc2NhbGVBbmRBZGQ6IHNjYWxlQW5kQWRkJDIsXHJcbiAgICAgICAgZGlzdGFuY2U6IGRpc3RhbmNlJDIsXHJcbiAgICAgICAgc3F1YXJlZERpc3RhbmNlOiBzcXVhcmVkRGlzdGFuY2UkMixcclxuICAgICAgICBsZW5ndGg6IGxlbmd0aCQ0LFxyXG4gICAgICAgIHNxdWFyZWRMZW5ndGg6IHNxdWFyZWRMZW5ndGgkNCxcclxuICAgICAgICBuZWdhdGU6IG5lZ2F0ZSQyLFxyXG4gICAgICAgIGludmVyc2U6IGludmVyc2UkMixcclxuICAgICAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSQ0LFxyXG4gICAgICAgIGRvdDogZG90JDQsXHJcbiAgICAgICAgY3Jvc3M6IGNyb3NzJDIsXHJcbiAgICAgICAgbGVycDogbGVycCQ0LFxyXG4gICAgICAgIHJhbmRvbTogcmFuZG9tJDMsXHJcbiAgICAgICAgdHJhbnNmb3JtTWF0MjogdHJhbnNmb3JtTWF0MixcclxuICAgICAgICB0cmFuc2Zvcm1NYXQyZDogdHJhbnNmb3JtTWF0MmQsXHJcbiAgICAgICAgdHJhbnNmb3JtTWF0MzogdHJhbnNmb3JtTWF0MyQxLFxyXG4gICAgICAgIHRyYW5zZm9ybU1hdDQ6IHRyYW5zZm9ybU1hdDQkMixcclxuICAgICAgICByb3RhdGU6IHJvdGF0ZSQ0LFxyXG4gICAgICAgIGFuZ2xlOiBhbmdsZSQxLFxyXG4gICAgICAgIHplcm86IHplcm8kMixcclxuICAgICAgICBzdHI6IHN0ciQ4LFxyXG4gICAgICAgIGV4YWN0RXF1YWxzOiBleGFjdEVxdWFscyQ4LFxyXG4gICAgICAgIGVxdWFsczogZXF1YWxzJDksXHJcbiAgICAgICAgbGVuOiBsZW4kNCxcclxuICAgICAgICBzdWI6IHN1YiQ2LFxyXG4gICAgICAgIG11bDogbXVsJDgsXHJcbiAgICAgICAgZGl2OiBkaXYkMixcclxuICAgICAgICBkaXN0OiBkaXN0JDIsXHJcbiAgICAgICAgc3FyRGlzdDogc3FyRGlzdCQyLFxyXG4gICAgICAgIHNxckxlbjogc3FyTGVuJDQsXHJcbiAgICAgICAgZm9yRWFjaDogZm9yRWFjaCQyXHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBvcnQgdmFyIGdsTWF0cml4ID0gY29tbW9uO1xyXG4gICAgZXhwb3J0IHZhciBtYXQyID0gbWF0MjtcclxuICAgIGV4cG9ydCB2YXIgbWF0MmQgPSBtYXQyZDtcclxuICAgIGV4cG9ydCB2YXIgbWF0MyA9IG1hdDM7XHJcbiAgICBleHBvcnQgdmFyIG1hdDQgPSBtYXQ0O1xyXG4gICAgZXhwb3J0IHZhciBxdWF0ID0gcXVhdDtcclxuICAgIGV4cG9ydCB2YXIgcXVhdDIgPSBxdWF0MjtcclxuICAgIGV4cG9ydCB2YXIgdmVjMiA9IHZlYzI7XHJcbiAgICBleHBvcnQgdmFyIHZlYzMgPSB2ZWMzO1xyXG4gICAgZXhwb3J0IHZhciB2ZWM0ID0gdmVjNDtcclxufSIsImltcG9ydCB7IFNZIH0gZnJvbSBcIi4uL2Jhc2UvU3ByaXRlXCI7XG5pbXBvcnQgeyBSZW5kZXJUZXh0dXJlIH0gZnJvbSBcIi4uL2Fzc2V0cy9SZW5kZXJUZXh0dXJlXCI7XG5pbXBvcnQgRnJhbWVCdWZmZXIgZnJvbSBcIi4uL2dmeC9GcmFtZUJ1ZmZlclwiO1xuaW1wb3J0IERldmljZSBmcm9tIFwiLi4vLi4vLi4vRGV2aWNlXCI7XG5cblxuICAgIHZhciB2ZXJ0ZXh0QmFzZUNvZGUgPVxuICAgICdhdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uOycgK1xuICAgICdhdHRyaWJ1dGUgdmVjMiBhX3V2OycgK1xuXG4gICAgJ3VuaWZvcm0gbWF0NCB1X01WTWF0cml4OycgK1xuICAgICd1bmlmb3JtIG1hdDQgdV9QTWF0cml4OycgK1xuICAgICd2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZGluYXRlczsnICtcblxuICAgICd2b2lkIG1haW4oKSB7JyArXG4gICAgJ2dsX1Bvc2l0aW9uID0gdV9QTWF0cml4ICogdV9NVk1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTsnICtcbiAgICAndlRleHR1cmVDb29yZGluYXRlcyA9dmVjMihhX3V2LngsYV91di55KTsnICtcbiAgICAnfSdcbi8v5Z+656GA55qEc2hhZGVy55qE54mH5q61552A6Imy5ZmoXG52YXIgZnJhZ0Jhc2VDb2RlID1cbiAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXG5cbiAgICAndmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmRpbmF0ZXM7JyArXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVfdGV4Q29vcmQ7JyArXG5cbiAgICAndm9pZCBtYWluKCkgeycgK1xuICAgICdnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodV90ZXhDb29yZCwgdlRleHR1cmVDb29yZGluYXRlcyk7JyArXG4gICAgJ30nXG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJTcHJpdGUgZXh0ZW5kcyBTWS5TcHJpdGUyRHtcbiAgICBjb25zdHJ1Y3RvcihnbCl7XG4gICAgICAgIHN1cGVyKGdsKTtcbiAgICAgICAgdGhpcy5fY2FtZXJhVHlwZSA9IDE7XG4gICAgfVxuICAgIHByb3RlY3RlZCBvbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0Q29udGVudFNpemUoRGV2aWNlLkluc3RhbmNlLldpZHRoLzQsRGV2aWNlLkluc3RhbmNlLkhlaWdodC80KTtcbiAgICAgICAgdGhpcy5fdGV4dHVyZSA9IG5ldyBSZW5kZXJUZXh0dXJlKHRoaXMuZ2wpO1xuICAgICAgICB0aGlzLnNldFNoYWRlcih2ZXJ0ZXh0QmFzZUNvZGUsZnJhZ0Jhc2VDb2RlKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgU1kgfSBmcm9tIFwiLi4vYmFzZS9TcHJpdGVcIjtcclxuaW1wb3J0IHsgQ3ViZURhdGEsIEN1YmVGYWNlIH0gZnJvbSBcIi4uL2RhdGEvQ3ViZURhdGFcIjtcclxuXHJcblxyXG52YXIgdmVydGV4dEJhc2VDb2RlID1cclxuICAgICdhdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uOycgK1xyXG4gICAgJ2F0dHJpYnV0ZSB2ZWMyIGFfdXY7JyArXHJcblxyXG4gICAgJ3VuaWZvcm0gbWF0NCB1X01WTWF0cml4OycgK1xyXG4gICAgJ3VuaWZvcm0gbWF0NCB1X1BNYXRyaXg7JyArXHJcbiAgICAndmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmRpbmF0ZXM7JyArXHJcblxyXG4gICAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAgICdnbF9Qb3NpdGlvbiA9IHVfUE1hdHJpeCAqIHVfTVZNYXRyaXggKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCk7JyArXHJcbiAgICAndlRleHR1cmVDb29yZGluYXRlcyA9IGFfdXY7JyArXHJcbiAgICAnfSdcclxuLy/ln7rnoYDnmoRzaGFkZXLnmoTniYfmrrXnnYDoibLlmahcclxudmFyIGZyYWdCYXNlQ29kZSA9XHJcbiAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXHJcblxyXG4gICAgJ3ZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkaW5hdGVzOycgK1xyXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVfdGV4Q29vcmQ7JyArXHJcblxyXG4gICAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAgICdnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodV90ZXhDb29yZCwgdlRleHR1cmVDb29yZGluYXRlcyk7JyArXHJcbiAgICAnfSdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEN1YmUgZXh0ZW5kcyBTWS5TcHJpdGUge1xyXG4gICAgY29uc3RydWN0b3IoZ2wpIHtcclxuICAgICAgICBzdXBlcihnbCk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgb25Jbml0KCkge1xyXG4gICAgICAgIHZhciByZCA9IEN1YmVEYXRhLmdldERhdGEoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVZlcnRleHNCdWZmZXIocmQudmVydGV4LHJkLmRGLnZlcnRleF9pdGVtX3NpemUpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVVZzQnVmZmVyKHJkLnV2RGF0YSxyZC5kRi51dl9pdGVtX3NpemUpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlSW5kZXhzQnVmZmVyKHJkLmluZGV4cyk7XHJcbiAgICAgICAgdGhpcy5zZXRTaGFkZXIodmVydGV4dEJhc2VDb2RlLGZyYWdCYXNlQ29kZSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTWSB9IGZyb20gXCIuLi9iYXNlL1Nwcml0ZVwiO1xyXG5pbXBvcnQgeyBnbHByaW1pdGl2ZV90eXBlIH0gZnJvbSBcIi4uL2dmeC9HTEVudW1zXCI7XHJcbmltcG9ydCB7IEN1YmVEYXRhIH0gZnJvbSBcIi4uL2RhdGEvQ3ViZURhdGFcIjtcclxuXHJcbnZhciB2ZXJ0ZXh0QmFzZUNvZGUgPVxyXG4gICAgJ2F0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247JyArXHJcbiAgICAnYXR0cmlidXRlIHZlYzIgYV91djsnICtcclxuXHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfTVZNYXRyaXg7JyArXHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfUE1hdHJpeDsnICtcclxuICAgICd2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZGluYXRlczsnICtcclxuXHJcbiAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgJ2dsX1Bvc2l0aW9uID0gdV9QTWF0cml4ICogdV9NVk1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTsnICtcclxuICAgICd2VGV4dHVyZUNvb3JkaW5hdGVzID0gYV91djsnICtcclxuICAgICd9J1xyXG4vL+WfuuehgOeahHNoYWRlcueahOeJh+auteedgOiJsuWZqFxyXG52YXIgZnJhZ0Jhc2VDb2RlID1cclxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuXHJcbiAgICAndmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmRpbmF0ZXM7JyArXHJcbiAgICAndW5pZm9ybSBzYW1wbGVyMkQgdV90ZXhDb29yZDsnICtcclxuXHJcbiAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgJ2dsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1X3RleENvb3JkLCB2VGV4dHVyZUNvb3JkaW5hdGVzKTsnICtcclxuICAgICd9J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tVGV4dHVyZUN1YmUgZXh0ZW5kcyBTWS5TcHJpdGUge1xyXG4gICAgY29uc3RydWN0b3IoZ2wpIHtcclxuICAgICAgICBzdXBlcihnbCk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgb25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHZhciBwb3NpdGlvbnMgPVxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAtMC41LCAtMC41LCAtMC41LCAgICAgLy/lt6bkuIvlkI5cclxuICAgICAgICAgICAgICAgIC0wLjUsIDAuNSwgLTAuNSwgICAgICAvL+W3puS4iuWQjiAgIC8v6IOM6Z2i5bem5LiL5LiJ6KeS5b2iXHJcbiAgICAgICAgICAgICAgICAwLjUsIC0wLjUsIC0wLjUsICAgICAgLy/lj7PkuIvlkI5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/og4zpnaLmmK/kuKrnn6nlvaIg56uW552A5pS+IOaWnOinkuWIh+W8gFxyXG4gICAgICAgICAgICAgICAgLTAuNSwgMC41LCAtMC41LCAgICAgIC8v5bem5LiK5ZCOXHJcbiAgICAgICAgICAgICAgICAwLjUsIDAuNSwgLTAuNSwgICAgICAgLy/lj7PkuIrlkI4gICAvL+iDjOmdouWPs+S4iuS4ieinkuW9olxyXG4gICAgICAgICAgICAgICAgMC41LCAtMC41LCAtMC41LCAgICAgIC8v5Y+z5LiL5ZCOXHJcblxyXG4gICAgICAgICAgICAgICAgLTAuNSwgLTAuNSwgMC41LCAgICAgIC8v5bem5LiL5YmNXHJcbiAgICAgICAgICAgICAgICAwLjUsIC0wLjUsIDAuNSwgICAgICAgLy/lj7PkuIvliY0gICAvL+WJjemdouW3puS4i+S4ieinkuW9olxyXG4gICAgICAgICAgICAgICAgLTAuNSwgMC41LCAwLjUsICAgICAgIC8v5bem5LiK5YmNXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5YmN6Z2i5piv5Liq55+p5b2iIOerluedgOaUviDmlpzop5LliIflvIBcclxuICAgICAgICAgICAgICAgIC0wLjUsIDAuNSwgMC41LCAgICAgICAvL+W3puS4iuWJjVxyXG4gICAgICAgICAgICAgICAgMC41LCAtMC41LCAwLjUsICAgICAgIC8v5Y+z5LiL5YmNICAgLy/liY3pnaLlj7PkuIrkuInop5LlvaJcclxuICAgICAgICAgICAgICAgIDAuNSwgMC41LCAwLjUsICAgICAgICAvL+WPs+S4iuWJjVxyXG5cclxuICAgICAgICAgICAgICAgIC0wLjUsIDAuNSwgLTAuNSwgICAgICAvL+W3puS4iuWQjlxyXG4gICAgICAgICAgICAgICAgLTAuNSwgMC41LCAwLjUsICAgICAgIC8v5bem5LiK5YmNICAgIC8v5LiK6Z2i5bem5ZCO5LiJ6KeS5b2iXHJcbiAgICAgICAgICAgICAgICAwLjUsIDAuNSwgLTAuNSwgICAgICAgLy/lj7PkuIrlkI5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5LiK6Z2i5piv5Liq55+p5b2iIOW5s+mTuiAg5pac6KeS5YiH5byA77yIL++8iVxyXG4gICAgICAgICAgICAgICAgLTAuNSwgMC41LCAwLjUsICAgICAgIC8v5bem5LiK5YmNXHJcbiAgICAgICAgICAgICAgICAwLjUsIDAuNSwgMC41LCAgICAgICAgLy/lj7PkuIrliY0gICAgIC8v5LiK6Z2i5Y+z5YmN5LiJ6KeS5b2iXHJcbiAgICAgICAgICAgICAgICAwLjUsIDAuNSwgLTAuNSwgICAgICAgLy/lj7PkuIrlkI5cclxuXHJcbiAgICAgICAgICAgICAgICAtMC41LCAtMC41LCAtMC41LCAgICAgLy/lt6bkuIvlkI5cclxuICAgICAgICAgICAgICAgIDAuNSwgLTAuNSwgLTAuNSwgICAgICAvL+WPs+S4i+WQjiAgICAgLy/kuIvpnaLlt6blkI7kuInop5LlvaJcclxuICAgICAgICAgICAgICAgIC0wLjUsIC0wLjUsIDAuNSwgICAgICAvL+W3puS4i+WJjVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5LiL6Z2i5piv5Liq55+p5b2iIOW5s+mTuiDmlpzop5LliIflvIDvvIgv77yJXHJcbiAgICAgICAgICAgICAgICAtMC41LCAtMC41LCAwLjUsICAgICAgLy/lt6bkuIvliY1cclxuICAgICAgICAgICAgICAgIDAuNSwgLTAuNSwgLTAuNSwgICAgICAvL+WPs+S4i+WQjiAgICAgLy/kuIvpnaLlj7PliY3kuInop5LlvaJcclxuICAgICAgICAgICAgICAgIDAuNSwgLTAuNSwgMC41LCAgICAgICAvL+WPs+S4i+WJjVxyXG5cclxuICAgICAgICAgICAgICAgIC0wLjUsIC0wLjUsIC0wLjUsICAgICAvL+W3puS4i+WQjlxyXG4gICAgICAgICAgICAgICAgLTAuNSwgLTAuNSwgMC41LCAgICAgIC8v5bem5LiL5YmNICAgICAgLy/lt6bpnaLkuIvlkI7kuInop5LlvaJcclxuICAgICAgICAgICAgICAgIC0wLjUsIDAuNSwgLTAuNSwgICAgICAvL+W3puS4iuWQjlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+W3pumdouaYr+S4quefqeW9oiDpnaLmnJ3lt6blj7Mg5pac6KeS5YiH5byAXHJcbiAgICAgICAgICAgICAgICAtMC41LCAtMC41LCAwLjUsICAgICAgLy/lt6bkuIvliY1cclxuICAgICAgICAgICAgICAgIC0wLjUsIDAuNSwgMC41LCAgICAgICAvL+W3puS4iuWJjSAgICAgIC8v5bem6Z2i5LiK5YmN5LiJ6KeS5b2iXHJcbiAgICAgICAgICAgICAgICAtMC41LCAwLjUsIC0wLjUsICAgICAgLy/lt6bkuIrlkI5cclxuXHJcbiAgICAgICAgICAgICAgICAwLjUsIC0wLjUsIC0wLjUsICAgICAgLy/lj7PkuIvlkI4gIFxyXG4gICAgICAgICAgICAgICAgMC41LCAwLjUsIC0wLjUsICAgICAgIC8v5Y+z5LiK5ZCOICAgICAgLy/lj7PpnaLkuIvlkI7kuInop5LlvaIgXHJcbiAgICAgICAgICAgICAgICAwLjUsIC0wLjUsIDAuNSwgICAgICAgLy/lj7PkuIvliY1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lj7PpnaLmmK/kuKrnn6nlvaIg6Z2i5pyd5bem5Y+zIOaWnOinkuWIh+W8gFxyXG4gICAgICAgICAgICAgICAgMC41LCAtMC41LCAwLjUsICAgICAgIC8v5Y+z5LiL5YmNXHJcbiAgICAgICAgICAgICAgICAwLjUsIDAuNSwgLTAuNSwgICAgICAgLy/lj7PkuIrlkI4gICAgICAvL+WPs+mdouS4iuWJjeS4ieinkuW9olxyXG4gICAgICAgICAgICAgICAgMC41LCAwLjUsIDAuNSwgICAgICAgIC8v5Y+z5LiK5YmNXHJcblxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIHBvc2l0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKHYsaW5kZXgpe1xyXG4gICAgICAgICAgICBwb3NpdGlvbnNbaW5kZXhdID0gcG9zaXRpb25zW2luZGV4XSoyO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdmFyIHV2cyA9IFtcclxuICAgICAgICAgICAgMCwgMCxcclxuICAgICAgICAgICAgMCwgMSxcclxuICAgICAgICAgICAgMSwgMCxcclxuICAgICAgICAgICAgMCwgMSwgICAgLy/og4xcclxuICAgICAgICAgICAgMSwgMSxcclxuICAgICAgICAgICAgMSwgMCxcclxuXHJcbiAgICAgICAgICAgIDAsIDAsICAgIC8v5bem5LiL5YmNXHJcbiAgICAgICAgICAgIDAsIDEsICAgIC8v5Y+z5LiL5YmNXHJcbiAgICAgICAgICAgIDEsIDAsICAgIC8v5bem5LiK5YmNXHJcbiAgICAgICAgICAgIDEsIDAsICAgIC8v5bem5LiK5YmNXHJcbiAgICAgICAgICAgIDAsIDEsICAgIC8v5Y+z5LiL5YmNXHJcbiAgICAgICAgICAgIDEsIDEsICAgIC8v5Y+z5LiK5YmNXHJcblxyXG4gICAgICAgICAgICAwLCAwLFxyXG4gICAgICAgICAgICAwLCAxLFxyXG4gICAgICAgICAgICAxLCAwLFxyXG4gICAgICAgICAgICAwLCAxLFxyXG4gICAgICAgICAgICAxLCAxLFxyXG4gICAgICAgICAgICAxLCAwLFxyXG5cclxuICAgICAgICAgICAgMCwgMCxcclxuICAgICAgICAgICAgMCwgMSxcclxuICAgICAgICAgICAgMSwgMCxcclxuICAgICAgICAgICAgMSwgMCxcclxuICAgICAgICAgICAgMCwgMSxcclxuICAgICAgICAgICAgMSwgMSxcclxuXHJcbiAgICAgICAgICAgIDAsIDAsXHJcbiAgICAgICAgICAgIDAsIDEsXHJcbiAgICAgICAgICAgIDEsIDAsXHJcbiAgICAgICAgICAgIDAsIDEsXHJcbiAgICAgICAgICAgIDEsIDEsXHJcbiAgICAgICAgICAgIDEsIDAsXHJcblxyXG4gICAgICAgICAgICAwLCAwLFxyXG4gICAgICAgICAgICAwLCAxLFxyXG4gICAgICAgICAgICAxLCAwLFxyXG4gICAgICAgICAgICAxLCAwLFxyXG4gICAgICAgICAgICAwLCAxLFxyXG4gICAgICAgICAgICAxLCAxLFxyXG4gICAgICAgIF1cclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGVWZXJ0ZXhzQnVmZmVyKHBvc2l0aW9ucywgMyk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVVVnNCdWZmZXIodXZzLCAyKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9nbFByaW1pdGl2ZVR5cGUgPSBnbHByaW1pdGl2ZV90eXBlLlRSSUFOR0xFUztcclxuICAgICAgICB0aGlzLnNldFNoYWRlcih2ZXJ0ZXh0QmFzZUNvZGUsIGZyYWdCYXNlQ29kZSk7XHJcblxyXG5cclxuICAgIH1cclxufSIsImltcG9ydCB7IFNZIH0gZnJvbSBcIi4uL2Jhc2UvU3ByaXRlXCI7XHJcblxyXG5cclxudmFyIHZlcnRleHRCYXNlQ29kZSA9XHJcbiAgICAnYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsnICtcclxuICAgICdhdHRyaWJ1dGUgdmVjMiBhX3V2OycgK1xyXG5cclxuICAgICd1bmlmb3JtIG1hdDQgdV9NVk1hdHJpeDsnICtcclxuICAgICd1bmlmb3JtIG1hdDQgdV9QTWF0cml4OycgK1xyXG4gICAgJ3ZhcnlpbmcgdmVjMiB2VGV4dHVyZUNvb3JkaW5hdGVzOycgK1xyXG5cclxuICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAnZ2xfUG9zaXRpb24gPSB1X1BNYXRyaXggKiB1X01WTWF0cml4ICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOycgK1xyXG4gICAgJ3ZUZXh0dXJlQ29vcmRpbmF0ZXMgPSBhX3V2OycgK1xyXG4gICAgJ30nXHJcbi8v5Z+656GA55qEc2hhZGVy55qE54mH5q61552A6Imy5ZmoXHJcbnZhciBmcmFnQmFzZUNvZGUgPVxyXG4gICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xyXG5cclxuICAgICd2YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZGluYXRlczsnICtcclxuICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1X3RleENvb3JkOycgK1xyXG5cclxuICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAnZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVfdGV4Q29vcmQsIHZUZXh0dXJlQ29vcmRpbmF0ZXMpOycgK1xyXG4gICAgJ30nXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91bmQgZXh0ZW5kcyBTWS5TcHJpdGUge1xyXG4gICAgY29uc3RydWN0b3IoZ2wpIHtcclxuICAgICAgICBzdXBlcihnbCk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgb25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIOmhtueCueaVsOaNrlxyXG4gICAgICAgIHZhciBmbG9vclZlcnRleFBvc2l0aW9uID0gW1xyXG4gICAgICAgICAgICAvLyBQbGFuZSBpbiB5PTBcclxuICAgICAgICAgICAgNS4wLCAwLjAsIDUuMCwgLy92MFxyXG4gICAgICAgICAgICA1LjAsIDAuMCwgLTUuMCwgLy92MVxyXG4gICAgICAgICAgICAtNS4wLCAwLjAsIC01LjAsIC8vdjJcclxuICAgICAgICAgICAgLTUuMCwgMC4wLCA1LjBdOyAvL3YzXHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRlVmVydGV4c0J1ZmZlcihmbG9vclZlcnRleFBvc2l0aW9uLCAzKTtcclxuICAgICAgICAvL3V2IOaVsOaNrlxyXG4gICAgICAgIHZhciBmbG9vclZlcnRleFRleHR1cmVDb29yZGluYXRlcyA9IFtcclxuICAgICAgICAgICAgMi4wLCAwLjAsXHJcbiAgICAgICAgICAgIDIuMCwgMi4wLFxyXG4gICAgICAgICAgICAwLjAsIDIuMCxcclxuICAgICAgICAgICAgMC4wLCAwLjBcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVVZzQnVmZmVyKGZsb29yVmVydGV4VGV4dHVyZUNvb3JkaW5hdGVzLCAyKTtcclxuXHJcbiAgICAgICAgLy8g57Si5byV5pWw5o2uXHJcbiAgICAgICAgdmFyIGZsb29yVmVydGV4SW5kaWNlcyA9IFswLCAxLCAyLCAzXTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUluZGV4c0J1ZmZlcihmbG9vclZlcnRleEluZGljZXMpO1xyXG4gICAgICAgIHRoaXMuc2V0U2hhZGVyKHZlcnRleHRCYXNlQ29kZSxmcmFnQmFzZUNvZGUpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU1kgfSBmcm9tIFwiLi4vYmFzZS9TcHJpdGVcIjtcbmltcG9ydCB7IEN1YmVEYXRhIH0gZnJvbSBcIi4uL2RhdGEvQ3ViZURhdGFcIjtcbmltcG9ydCB7IGdscHJpbWl0aXZlX3R5cGUgfSBmcm9tIFwiLi4vZ2Z4L0dMRW51bXNcIjtcblxuLyoqXG4gKiDlpoLmnpzlsIbkuInnu7TniankvZPnmoTmnJ3lkJHlkozlhYnnmoTmlrnlkJHngrnkuZjvvIwg57uT5p6c5Li6IDEg5YiZ54mp5L2T5pyd5ZCR5ZKM5YWJ54Wn5pa55ZCR55u45ZCM77yM5Li6IC0xIOWImeeJqeS9k+acneWQkeWSjOWFieeFp+aWueWQkeebuOWPjVxuICog5omA5Lul5bqU6K+l5piv5Y+R546w5ZKM5YWJ55qE5Y+N5ZCR55u45LmY77yM5YaN5LmY5Lul5YWJ55qE6aKc6Imy77yM5bCx5piv5YWJ5Y+N5bCE55qE6aKc6Imy77yMXG4gKi9cbnZhciB2ZXJ0ZXhzaGFkZXIzZCA9IFxuJ2F0dHJpYnV0ZSB2ZWM0IGFfcG9zaXRpb247JytcbidhdHRyaWJ1dGUgdmVjMyBhX25vcm1hbDsnK1xuJ2F0dHJpYnV0ZSB2ZWMyIGFfdXY7JyArXG4ndW5pZm9ybSBtYXQ0IHVfTVZNYXRyaXg7JyArXG4ndW5pZm9ybSBtYXQ0IHVfUE1hdHJpeDsnICtcblxuJ3ZhcnlpbmcgdmVjMiB2X3V2OycgK1xuJ3ZhcnlpbmcgdmVjMyB2X25vcm1hbDsnK1xuJ3ZvaWQgbWFpbigpIHsnK1xuICAvLyBNdWx0aXBseSB0aGUgcG9zaXRpb24gYnkgdGhlIG1hdHJpeC5cbiAgJ2dsX1Bvc2l0aW9uID0gdV9QTWF0cml4ICp1X01WTWF0cml4KiBhX3Bvc2l0aW9uOycrXG4gIC8vIFBhc3MgdGhlIG5vcm1hbCB0byB0aGUgZnJhZ21lbnQgc2hhZGVyXG4gICd2X25vcm1hbCA9IGFfbm9ybWFsOycrXG4gICd2X3V2ID0gYV91djsnICtcbid9J1xuXG52YXIgZnJhZ21lbnRzaGFkZXIzZCA9IFxuJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycrXG4vLyBQYXNzZWQgaW4gZnJvbSB0aGUgdmVydGV4IHNoYWRlci5cbid2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7JysgICAgICAgICAgICAgICAgLy/ms5Xnur9cbid1bmlmb3JtIHZlYzMgdV9jb2xvcl9kaXI7JysgLy/lhYnnmoTmlrnlkJFcbid1bmlmb3JtIHZlYzQgdV9jb2xvcjsnKyAgICAgICAgICAgICAgIC8v5YWJ54WnXG4ndW5pZm9ybSBzYW1wbGVyMkQgdV90ZXhDb29yZDsnICsgICAgIC8v57q555CGXG4ndmFyeWluZyB2ZWMyIHZfdXY7JyArXG5cbid2b2lkIG1haW4oKSB7JytcblxuICAgJ3ZlYzQgY29sb3JTb3VyY2UgPSB0ZXh0dXJlMkQodV90ZXhDb29yZCwgdl91dik7JytcbiAgLy8gYmVjYXVzZSB2X25vcm1hbCBpcyBhIHZhcnlpbmcgaXQncyBpbnRlcnBvbGF0ZWRcbiAgLy8gc28gaXQgd2lsbCBub3QgYmUgYSB1bml0IHZlY3Rvci4gTm9ybWFsaXppbmcgaXRcbiAgLy8gd2lsbCBtYWtlIGl0IGEgdW5pdCB2ZWN0b3IgYWdhaW5cbiAgJ3ZlYzMgbm9ybWFsID0gbm9ybWFsaXplKHZfbm9ybWFsKTsnK1xuXG4gICdmbG9hdCBsaWdodCA9IGRvdChub3JtYWwsIHVfY29sb3JfZGlyKTsnK1xuXG4gICdnbF9GcmFnQ29sb3IgPSB1X2NvbG9yKmNvbG9yU291cmNlOycrXG5cbiAgLy8gTGV0cyBtdWx0aXBseSBqdXN0IHRoZSBjb2xvciBwb3J0aW9uIChub3QgdGhlIGFscGhhKVxuICAvLyBieSB0aGUgbGlnaHRcbiAgJ2dsX0ZyYWdDb2xvci5yZ2IgKj0gbGlnaHQ7Jytcbid9J1xuXG4vKipcbiAqIOWFieeFp+eri+aWueS9k1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaWdodEN1YmUgZXh0ZW5kcyBTWS5TcHJpdGUge1xuICAgIGNvbnN0cnVjdG9yKGdsKSB7XG4gICAgICAgIHN1cGVyKGdsKTtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJMaWdodEN1YmVcIjtcbiAgICB9XG4gICAgcHJvdGVjdGVkIG9uSW5pdCgpIHtcbiAgICAgICAgdmFyIHJkID0gQ3ViZURhdGEuZ2V0RGF0YSgpO1xuICAgICAgICB0aGlzLmNyZWF0ZVZlcnRleHNCdWZmZXIocmQudmVydGV4LHJkLmRGLnZlcnRleF9pdGVtX3NpemUpO1xuICAgICAgICB0aGlzLmNyZWF0ZVVWc0J1ZmZlcihyZC51dkRhdGEscmQuZEYudXZfaXRlbV9zaXplKTtcbiAgICAgICAgdGhpcy5jcmVhdGVJbmRleHNCdWZmZXIocmQuaW5kZXhzKTtcbiAgICAgICAgdGhpcy5jcmVhdGVOb3JtYWxzQnVmZmVyKHJkLm5vcm1hbHMscmQuZEYubm9ybWFsX2l0ZW1fc2l6ZSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldFNoYWRlcih2ZXJ0ZXhzaGFkZXIzZCxmcmFnbWVudHNoYWRlcjNkKTtcbiAgICAgICAgdGhpcy5fc2hhZGVyLlVTRV9MSUdIVCA9IHRydWU7XG5cbiAgICB9XG4gICAgcHVibGljIHJlYWR5RHJhdyh0aW1lKTp2b2lke1xuICAgICAgICAgICBzdXBlci5yZWFkeURyYXcodGltZSk7XG4gICAgfVxufSIsImltcG9ydCB7IFNZIH0gZnJvbSBcIi4uL2Jhc2UvU3ByaXRlXCI7XHJcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcclxuaW1wb3J0IEdhbWVNYWluQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvR2FtZU1haW5DYW1lcmFcIjtcclxuaW1wb3J0IFBlcnNwZWN0aXZlQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvUGVyc3BlY3RpdmVDYW1lcmFcIjtcclxuaW1wb3J0IHsgQ3ViZURhdGEgfSBmcm9tIFwiLi4vZGF0YS9DdWJlRGF0YVwiO1xyXG5cclxudmFyIHZlcnRleHNoYWRlcjNkID1cclxuICAgICAnYXR0cmlidXRlIHZlYzQgYV9wb3NpdGlvbjsnICtcclxuICAgICAndmFyeWluZyB2ZWM0IHZfcG9zaXRpb247JyArXHJcbiAgICAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAgICAndl9wb3NpdGlvbiA9IGFfcG9zaXRpb247JyArXHJcbiAgICAgJ2dsX1Bvc2l0aW9uID0gYV9wb3NpdGlvbjsnICtcclxuICAgICAnZ2xfUG9zaXRpb24ueiA9IDEuMDsnICtcclxuICAgICAnfSdcclxudmFyIGZyYWdtZW50c2hhZGVyM2QgPVxyXG4gICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuXHJcbiAgICAgJ3VuaWZvcm0gc2FtcGxlckN1YmUgdV9za3lib3g7JyArXHJcbiAgICAgJ3VuaWZvcm0gbWF0NCB1X1BWTV9NYXRyaXhfSW52ZXJzZTsnICtcclxuXHJcbiAgICAgJ3ZhcnlpbmcgdmVjNCB2X3Bvc2l0aW9uOycgK1xyXG4gICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAgJ3ZlYzQgdCA9IHVfUFZNX01hdHJpeF9JbnZlcnNlICogdl9wb3NpdGlvbjsnICtcclxuICAgICAndmVjMyBwb3MgPSBub3JtYWxpemUodC54eXogLyB0LncpOycgK1xyXG4gICAgICd2ZWM0IGNvbG9yID0gIHRleHR1cmVDdWJlKHVfc2t5Ym94LHBvcyk7JyArXHJcbiAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yOycgK1xyXG4gICAgICd9J1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2t5Qm94IGV4dGVuZHMgU1kuU3ByaXRlIHtcclxuICAgICBjb25zdHJ1Y3RvcihnbCkge1xyXG4gICAgICAgICAgc3VwZXIoZ2wpO1xyXG4gICAgIH1cclxuICAgICBwcm90ZWN0ZWQgb25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgICAgdmFyIHJkID0gQ3ViZURhdGEuZ2V0RGF0YSgpO1xyXG4gICAgICAgICAgdGhpcy5jcmVhdGVWZXJ0ZXhzQnVmZmVyKHJkLnZlcnRleCwgcmQuZEYudmVydGV4X2l0ZW1fc2l6ZSk7XHJcbiAgICAgICAgICB0aGlzLmNyZWF0ZUluZGV4c0J1ZmZlcihyZC5pbmRleHMpO1xyXG4gICAgICAgICAgdGhpcy5zZXRTaGFkZXIodmVydGV4c2hhZGVyM2QsIGZyYWdtZW50c2hhZGVyM2QpO1xyXG4gICAgICAgICAgdGhpcy5fc2hhZGVyLlVTRV9TS1lCT1ggPSB0cnVlO1xyXG4gICAgIH1cclxuXHJcbiAgICAgcHJpdmF0ZSBkZWZhdWx0UGF0aCA9IFtcclxuICAgICAgICAgICdyZXMvc2t5Ym94LzIvcmlnaHQreC5wbmcnLFxyXG4gICAgICAgICAgJ3Jlcy9za3lib3gvMi9sZWZ0LXgucG5nJyxcclxuICAgICAgICAgICdyZXMvc2t5Ym94LzIvdXAteS5wbmcnLFxyXG4gICAgICAgICAgJ3Jlcy9za3lib3gvMi9kb3duK3kucG5nJyxcclxuICAgICAgICAgICdyZXMvc2t5Ym94LzIvYmFjay16LnBuZycsXHJcbiAgICAgICAgICAncmVzL3NreWJveC8yL2Zyb250K3oucG5nJ1xyXG4gICAgIF1cclxuXHJcbiAgICAgcHVibGljIHNldERlZmF1bHRVcmwoKTogdm9pZCB7XHJcbiAgICAgICAgICB0aGlzLnVybCA9IHRoaXMuZGVmYXVsdFBhdGg7XHJcbiAgICAgfVxyXG4gICAgIHB1YmxpYyB1cGRhdGVDYW1lcmEodGltZTogbnVtYmVyKTogYW55IHtcclxuICAgICAgICAgcmV0dXJuIChHYW1lTWFpbkNhbWVyYS5pbnN0YW5jZS5nZXRDYW1lcmEodGhpcy5fY2FtZXJhVHlwZSkgYXMgUGVyc3BlY3RpdmVDYW1lcmEpLnVwZGF0ZUxvb2tBdCh0aW1lKTtcclxuICAgICB9XHJcblxyXG5cclxufSIsImltcG9ydCB7IFNZIH0gZnJvbSBcIi4uL2Jhc2UvU3ByaXRlXCI7XHJcblxyXG52YXIgdmVydGV4dEJhc2VDb2RlID1cclxuICAgICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7JytcclxuICAgICdhdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uOycgK1xyXG4gICAgJ3VuaWZvcm0gbWF0NCB1X01WTWF0cml4OycgK1xyXG4gICAgJ3VuaWZvcm0gbWF0NCB1X1BNYXRyaXg7JyArXHJcbiAgICAndmFyeWluZyB2ZWM0IGNvbG9yOycgK1xyXG5cclxuICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAnZ2xfUG9zaXRpb24gPSB1X1BNYXRyaXggKiB1X01WTWF0cml4ICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOycgK1xyXG4gICAgJ2NvbG9yPXZlYzQoZ2xfUG9zaXRpb24ueCxnbF9Qb3NpdGlvbi55LGdsX1Bvc2l0aW9uLnosMC44KTsnICtcclxuICAgICd9J1xyXG4vL+WfuuehgOeahHNoYWRlcueahOeJh+auteedgOiJsuWZqFxyXG52YXIgZnJhZ0Jhc2VDb2RlID1cclxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuICAgICd2YXJ5aW5nIHZlYzQgY29sb3I7JyArXHJcbiAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yOycgK1xyXG4gICAgJ30nXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3BoZXJlIGV4dGVuZHMgU1kuU3ByaXRlIHtcclxuXHJcbiAgICBwcml2YXRlIGRyYXdRaXUwMihyLCBtKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IG5ldyBBcnJheSgpO1xyXG5cclxuICAgICAgICB2YXIgYnVmUiA9IC1yO1xyXG4gICAgICAgIHZhciBnZXRNYXhZID0gZnVuY3Rpb24gKGEsIHosIHIpIHtcclxuICAgICAgICAgICAgdmFyIGFuZ2xlID0gMDtcclxuICAgICAgICAgICAgdmFyIGFkZEFuZyA9IDM2MCAvIGE7XHJcbiAgICAgICAgICAgIHZhciBkID0gbmV3IEFycmF5KCk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGE7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZC5wdXNoKE1hdGguc2luKE1hdGguUEkgLyAxODAgKiBhbmdsZSkgKiByLCBNYXRoLmNvcyhNYXRoLlBJIC8gMTgwICogYW5nbGUpICogciwgeik7XHJcbiAgICAgICAgICAgICAgICBhbmdsZSArPSBhZGRBbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBhZGRBbmcgPSAzNjAgLyBtO1xyXG4gICAgICAgIHZhciBhbmdsZSA9IDA7XHJcbiAgICAgICAgYnVmUiA9IHI7XHJcblxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG0gLyAyOyBpKyspIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChpID49IG0gLyA0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeiA9IE1hdGguc2luKE1hdGguUEkgLyAxODAgKiBhbmdsZSkgKiAtcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB6ID0gTWF0aC5zaW4oTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSAqIC1yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHopO1xyXG4gICAgICAgICAgICBhbmdsZSArPSBhZGRBbmc7XHJcblxyXG4gICAgICAgICAgICB2YXIgYXJyMSA9IGdldE1heFkobSwgeiwgYnVmUik7XHJcbiAgICAgICAgICAgIGlmIChpID49IG0gLyA0KSB7XHJcbiAgICAgICAgICAgICAgICB6ID0gTWF0aC5zaW4oTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSAqIC1yXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB6ID0gLU1hdGguc2luKE1hdGguUEkgLyAxODAgKiBhbmdsZSkgKiAtcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBidWZSID0gTWF0aC5zcXJ0KHIgKiByIC0gciAqIE1hdGguc2luKE1hdGguUEkgLyAxODAgKiBhbmdsZSkgKiByICogTWF0aC5zaW4oTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSk7XHJcbiAgICAgICAgICAgIHZhciBhcnIyID0gZ2V0TWF4WShtLCB6LCBidWZSKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIHEgPSAwOyBxIDwgYXJyMS5sZW5ndGg7IHEgKz0gMykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHEgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGFycjFbcV0sIGFycjFbcSArIDFdLCBhcnIxW3EgKyAyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goYXJyMltxXSwgYXJyMltxICsgMV0sIGFycjJbcSArIDJdKTtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChhcnIxW2FycjEubGVuZ3RoIC0gM10sIGFycjFbYXJyMS5sZW5ndGggLSAyXSwgYXJyMVthcnIxLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChhcnIxW3FdLCBhcnIxW3EgKyAxXSwgYXJyMVtxICsgMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGFycjJbcV0sIGFycjJbcSArIDFdLCBhcnIyW3EgKyAyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goYXJyMltxICsgM10sIGFycjJbcSArIDRdLCBhcnIyW3EgKyA1XSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHEgPT0gYXJyMS5sZW5ndGggLSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goYXJyMVtxXSwgYXJyMVtxICsgMV0sIGFycjFbcSArIDJdKTtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChhcnIyW3FdLCBhcnIyW3EgKyAxXSwgYXJyMltxICsgMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGFycjFbcSAtIDNdLCBhcnIxW3EgLSAyXSwgYXJyMVtxIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGFycjFbcV0sIGFycjFbcSArIDFdLCBhcnIxW3EgKyAyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goYXJyMltxXSwgYXJyMltxICsgMV0sIGFycjJbcSArIDJdKTtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChhcnIyWzBdLCBhcnIyWzFdLCBhcnIyWzJdKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goYXJyMVtxXSwgYXJyMVtxICsgMV0sIGFycjFbcSArIDJdKTtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChhcnIyW3FdLCBhcnIyW3EgKyAxXSwgYXJyMltxICsgMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGFycjFbcSAtIDNdLCBhcnIxW3EgLSAyXSwgYXJyMVtxIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGFycjFbcV0sIGFycjFbcSArIDFdLCBhcnIxW3EgKyAyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goYXJyMltxXSwgYXJyMltxICsgMV0sIGFycjJbcSArIDJdKTtcclxuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChhcnIyW3EgKyAzXSwgYXJyMltxICsgNF0sIGFycjJbcSArIDVdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBvbkluaXQoKSB7XHJcblxyXG5cclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZHJhd1FpdTAyKDEsIDE4KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVZlcnRleHNCdWZmZXIoZGF0YSwzKTtcclxuICAgICAgICB0aGlzLnNldFNoYWRlcih2ZXJ0ZXh0QmFzZUNvZGUsIGZyYWdCYXNlQ29kZSk7XHJcbiAgICAgICAgdGhpcy5fZ2xQcmltaXRpdmVUeXBlID0gdGhpcy5nbC5MSU5FX1NUUklQO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWFkeURyYXcodGltZSl7XHJcbiAgICAgICAgLy8gdGhpcy5yb3RhdGUoMC41LDAuNSwwLjUpO1xyXG4gICAgICAgIHN1cGVyLnJlYWR5RHJhdyh0aW1lKTtcclxuICAgIH1cclxuXHJcbn0iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IGdsTWF0cml4IH0gZnJvbSBcIi4uLy4uL01hdHJpeFwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcIi4uL2Jhc2UvVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlMkQgfSBmcm9tIFwiLi4vYmFzZS9UZXh0dXJlMkRcIjtcclxuaW1wb3J0IExvYWRlck1hbmFnZXIgZnJvbSBcIi4uLy4uLy4uL0xvYWRlck1hbmFnZXJcIjtcclxuaW1wb3J0IHsgU1kgfSBmcm9tIFwiLi4vYmFzZS9TcHJpdGVcIjtcclxuaW1wb3J0IEdhbWVNYWluQ2FtZXJhIGZyb20gXCIuLi9jYW1lcmEvR2FtZU1haW5DYW1lcmFcIjtcclxuaW1wb3J0IHsgR19TaGFkZXJGYWN0b3J5LCBTaGFkZXJEYXRhIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJcIjtcclxuaW1wb3J0IERldmljZSBmcm9tIFwiLi4vLi4vLi4vRGV2aWNlXCI7XHJcbmltcG9ydCB7IFJlbmRlckRhdGFQb29sLCBSZW5kZXJEYXRhVHlwZSwgU3BpbmVSZW5kZXJEYXRhIH0gZnJvbSBcIi4uL2Jhc2UvUmVuZGVyRGF0YVwiO1xyXG5cclxudmFyIHNraW5WUyA9XHJcbiAgICAnYXR0cmlidXRlIHZlYzQgYV9QT1NJVElPTjsnICsgIC8v6aG254K55L2N572uXHJcbiAgICAnYXR0cmlidXRlIHZlYzMgYV9OT1JNQUw7JyArICAgIC8v5rOV57q/XHJcbiAgICAnYXR0cmlidXRlIHZlYzQgYV9XRUlHSFRTXzA7JyArIC8v5p2D6YeNXHJcbiAgICAnYXR0cmlidXRlIHZlYzQgYV9KT0lOVFNfMDsnICtcclxuICAgICdhdHRyaWJ1dGUgdmVjMiBhX1RFWENPT1JEXzA7JyArXHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfcHJvamVjdGlvbjsnICsgIC8v5oqV5b2xXHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfdmlldzsnICsgICAgICAgIC8v6KeC5a+f56m66Ze0XHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfd29ybGQ7JyArICAgICAgIC8v5LiW55WM56m66Ze0XHJcbiAgICAndW5pZm9ybSBzYW1wbGVyMkQgdV9qb2ludFRleHR1cmU7JyArICAgLy/pqqjpqrznn6npmLXnurnnkIZcclxuXHJcbiAgICAndW5pZm9ybSBmbG9hdCB1X251bUpvaW50czsnICsgIC8vWzYsNyw4LDksMTAsMTFdXHJcbiAgICAndmFyeWluZyB2ZWMzIHZfbm9ybWFsOycgK1xyXG4gICAgJ3ZhcnlpbmcgdmVjMiBhX3V2OycgK1xyXG4gICAgLy/ojrflj5bpqqjpqrznn6npmLVcclxuICAgIC8v5LiA5YWx5pyJNuS4qumqqOmqvOefqemYtVxyXG4gICAgLy8wIDEgMiAzIDQgNVxyXG4gICAgLy/mr4/kuKrpobbngrnlj5fliLA05Liq6aqo6aq855+p6Zi155qE5b2x5ZONXHJcbiAgICAvKipcclxuICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgIC0t55+p6Zi1MSAgMTZcclxuICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgIC0t55+p6Zi1MiAgMTZcclxuICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgIC0t55+p6Zi1MyAgMTZcclxuICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgIC0t55+p6Zi1NCAgMTZcclxuICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgIC0t55+p6Zi1NSAgMTZcclxuICAgIFJHQkEgUkdCQSBSR0JBIFJHQkEgIC0t55+p6Zi1NiAgMTZcclxuICAgICAqL1xyXG4gICAgJ21hdDQgZ2V0Qm9uZU1hdHJpeChmbG9hdCBqb2ludE5keCkgeycgK1xyXG4gICAgJ2Zsb2F0IHYgPSAoam9pbnROZHggKyAwLjUpIC8gdV9udW1Kb2ludHM7JyArICAgICAgIC8v566X5Ye66KGMXHJcbiAgICAncmV0dXJuIG1hdDQoJyArICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcyAgICAgIFxyXG4gICAgJ3RleHR1cmUyRCh1X2pvaW50VGV4dHVyZSwgdmVjMigoKDAuNSArIDAuMCkgLyA0LiksIHYpKSwnICsgIC8vMC4xMjUgXHJcbiAgICAndGV4dHVyZTJEKHVfam9pbnRUZXh0dXJlLCB2ZWMyKCgoMC41ICsgMS4wKSAvIDQuKSwgdikpLCcgKyAgLy8wLjM3NSBcclxuICAgICd0ZXh0dXJlMkQodV9qb2ludFRleHR1cmUsIHZlYzIoKCgwLjUgKyAyLjApIC8gNC4pLCB2KSksJyArICAvLzAuNjI1IFxyXG4gICAgJ3RleHR1cmUyRCh1X2pvaW50VGV4dHVyZSwgdmVjMigoKDAuNSArIDMuMCkgLyA0LiksIHYpKSk7JyArIC8vMC44NzUgXHJcbiAgICAnfScgK1xyXG4gICAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAgICdtYXQ0IHNraW5NYXRyaXggPSAgIGdldEJvbmVNYXRyaXgoYV9KT0lOVFNfMFswXSkgKiBhX1dFSUdIVFNfMFswXSArJyArXHJcbiAgICAnZ2V0Qm9uZU1hdHJpeChhX0pPSU5UU18wWzFdKSAqIGFfV0VJR0hUU18wWzFdICsnICtcclxuICAgICdnZXRCb25lTWF0cml4KGFfSk9JTlRTXzBbMl0pICogYV9XRUlHSFRTXzBbMl0gKycgK1xyXG4gICAgJ2dldEJvbmVNYXRyaXgoYV9KT0lOVFNfMFszXSkgKiBhX1dFSUdIVFNfMFszXTsnICtcclxuICAgICdtYXQ0IHdvcmxkID0gdV93b3JsZCAqIHNraW5NYXRyaXg7JyArXHJcbiAgICAnZ2xfUG9zaXRpb24gPSB1X3Byb2plY3Rpb24gKiB1X3ZpZXcgKiB3b3JsZCAqIGFfUE9TSVRJT047JyArXHJcbiAgICAndl9ub3JtYWwgPSBtYXQzKHdvcmxkKSAqIGFfTk9STUFMOycgK1xyXG4gICAgJ2FfdXYgPSBhX1RFWENPT1JEXzA7JyArXHJcbiAgICAnfSdcclxuXHJcbnZhciBtZXNoVlMgPVxyXG4gICAgJ2F0dHJpYnV0ZSB2ZWM0IGFfUE9TSVRJT047JyArXHJcbiAgICAnYXR0cmlidXRlIHZlYzMgYV9OT1JNQUw7JyArXHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfcHJvamVjdGlvbjsnICtcclxuICAgICd1bmlmb3JtIG1hdDQgdV92aWV3OycgK1xyXG4gICAgJ3VuaWZvcm0gbWF0NCB1X3dvcmxkOycgK1xyXG4gICAgJ3ZhcnlpbmcgdmVjMyB2X25vcm1hbDsnICtcclxuICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAnZ2xfUG9zaXRpb24gPSB1X3Byb2plY3Rpb24gKiB1X3ZpZXcgKiB1X3dvcmxkICogYV9QT1NJVElPTjsnICtcclxuICAgICd2X25vcm1hbCA9IG1hdDModV93b3JsZCkgKiBhX05PUk1BTDsnICtcclxuICAgICd9J1xyXG5cclxudmFyIGZzID1cclxuICAgICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICsgICAgICAgIC8v57K+5bqmXHJcbiAgICAndmFyeWluZyB2ZWMzIHZfbm9ybWFsOycgKyAgICAgICAgICAvL+azlee6v1xyXG4gICAgJ3VuaWZvcm0gdmVjNCB1X2RpZmZ1c2U7JyArICAgICAgICAgLy/mvKvlj43lsIRcclxuICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1X3RleENvb3JkOycgKyAgIC8v6aqo6aq855+p6Zi157q555CGXHJcbiAgICAndW5pZm9ybSB2ZWMzIHVfbGlnaHREaXJlY3Rpb247JyArICAvL+WFieeahOaWueWQkVxyXG4gICAgJ3ZhcnlpbmcgdmVjMiBhX3V2OycgK1xyXG4gICAgJ3ZvaWQgbWFpbiAoKSB7JyArXHJcbiAgICAndmVjMyBub3JtYWwgPSBub3JtYWxpemUodl9ub3JtYWwpOycgK1xyXG4gICAgJ2Zsb2F0IGxpZ2h0ID0gZG90KHVfbGlnaHREaXJlY3Rpb24sbm9ybWFsKSAqIC41ICsgLjU7JyArXHJcbiAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1X3RleENvb3JkLG5vcm1hbGl6ZShhX3V2KSk7ICcgK1xyXG4gICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yK3ZlYzQodV9kaWZmdXNlLnJnYiAqIGxpZ2h0LCB1X2RpZmZ1c2UuYSk7JyArXHJcbiAgICAnfSdcclxuXHJcbmNsYXNzIHNrZWxldG9uX1NraW4ge1xyXG4gICAgcHVibGljIGpvaW50czogQXJyYXk8c2tlbGV0b25fTm9kZT47XHJcbiAgICBwcml2YXRlIGludmVyc2VCaW5kTWF0cmljZXM6IEFycmF5PEZsb2F0MzJBcnJheT47XHJcbiAgICBwcml2YXRlIGpvaW50TWF0cmljZXM6IEFycmF5PEZsb2F0MzJBcnJheT47XHJcbiAgICBwcml2YXRlIGpvaW50RGF0YTogRmxvYXQzMkFycmF5O1xyXG4gICAgcHVibGljIGpvaW50VGV4dHVyZTogV2ViR0xUZXh0dXJlO1xyXG4gICAgcHVibGljIF90ZXh0dXJlOiBUZXh0dXJlO1xyXG4gICAgcHJpdmF0ZSBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIC8vaW52ZXJzZUJpbmRNYXRyaXhEYXRhIEZsb2F0MzJBcnJheSg5NilcclxuICAgIGNvbnN0cnVjdG9yKGpvaW50cywgaW52ZXJzZUJpbmRNYXRyaXhEYXRhOiBGbG9hdDMyQXJyYXksIGdsKSB7XHJcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgICAgIHRoaXMuam9pbnRzID0gam9pbnRzO1xyXG4gICAgICAgIHRoaXMuaW52ZXJzZUJpbmRNYXRyaWNlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuam9pbnRNYXRyaWNlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuam9pbnREYXRhID0gbmV3IEZsb2F0MzJBcnJheShqb2ludHMubGVuZ3RoICogMTYpO1xyXG4gICAgICAgIC8vIGNyZWF0ZSB2aWV3cyBmb3IgZWFjaCBqb2ludCBhbmQgaW52ZXJzZUJpbmRNYXRyaXhcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGpvaW50cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLmludmVyc2VCaW5kTWF0cmljZXMucHVzaChuZXcgRmxvYXQzMkFycmF5KFxyXG4gICAgICAgICAgICAgICAgaW52ZXJzZUJpbmRNYXRyaXhEYXRhLmJ1ZmZlcixcclxuICAgICAgICAgICAgICAgIGludmVyc2VCaW5kTWF0cml4RGF0YS5ieXRlT2Zmc2V0ICsgRmxvYXQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UICogMTYgKiBpLFxyXG4gICAgICAgICAgICAgICAgMTYpKTtcclxuICAgICAgICAgICAgdGhpcy5qb2ludE1hdHJpY2VzLnB1c2gobmV3IEZsb2F0MzJBcnJheShcclxuICAgICAgICAgICAgICAgIHRoaXMuam9pbnREYXRhLmJ1ZmZlcixcclxuICAgICAgICAgICAgICAgIEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIDE2ICogaSxcclxuICAgICAgICAgICAgICAgIDE2KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNyZWF0ZSBhIHRleHR1cmUgdG8gaG9sZCB0aGUgam9pbnQgbWF0cmljZXNcclxuICAgICAgICB0aGlzLmpvaW50VGV4dHVyZSA9IHRoaXMuZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLmpvaW50VGV4dHVyZSk7XHJcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX01JTl9GSUxURVIsIHRoaXMuZ2wuTkVBUkVTVCk7XHJcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX01BR19GSUxURVIsIHRoaXMuZ2wuTkVBUkVTVCk7XHJcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfUywgdGhpcy5nbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULCB0aGlzLmdsLkNMQU1QX1RPX0VER0UpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmKERldmljZS5JbnN0YW5jZS5nZXRDb250ZXh0VHlwZSgpPT1cIndlYmdsMlwiKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKHRoaXMuZ2wuVEVYVFVSRV8yRCwgMCwgdGhpcy5nbC5SR0JBMzJGLCA0LCB0aGlzLmpvaW50cy5sZW5ndGgsIDAsXHJcbiAgICAgICAgICAgIHRoaXMuZ2wuUkdCQSwgdGhpcy5nbC5GTE9BVCwgdGhpcy5qb2ludERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy5nbC5URVhUVVJFXzJELCAwLCB0aGlzLmdsLlJHQkEsIDQsIHRoaXMuam9pbnRzLmxlbmd0aCwgMCxcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuUkdCQSwgdGhpcy5nbC5GTE9BVCwgdGhpcy5qb2ludERhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXHJcblxyXG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCBudWxsKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdGV4dHVyZSA9IG5ldyBUZXh0dXJlMkQodGhpcy5nbCk7XHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRlVGV4dHVyZTJEQnVmZmVyKFwicmVzL3dpY2tlci5qcGdcIik7XHJcbiAgICB9XHJcbiAgICAvL+WIm+W7uuS4gOS4que6ueeQhmJ1ZmZlclxyXG4gICAgcHJpdmF0ZSBjcmVhdGVUZXh0dXJlMkRCdWZmZXIodXJsOiBzdHJpbmcpOiBUZXh0dXJlIHtcclxuICAgICAgICAvLyAodGhpcy5fdGV4dHVyZSBhcyBUZXh0dXJlQ3VzdG9tKS51cmwgPSBDdXN0b21UZXh0dXJlRGF0YS5nZXRSYW5kb21EYXRhKDMwLDUwLCBnbHRleF9mb3JtYXQuUkdCOCk7XHJcbiAgICAgICAgKHRoaXMuX3RleHR1cmUgYXMgVGV4dHVyZTJEKS51cmwgPSB1cmw7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVcclxuICAgIH1cclxuICAgIHVwZGF0ZShub2RlOiBza2VsZXRvbl9Ob2RlKSB7XHJcbiAgICAgICAgY29uc3QgZ2xvYmFsV29ybGRJbnZlcnNlID0gZ2xNYXRyaXgubWF0NC5jcmVhdGUoKTtcclxuICAgICAgICBnbE1hdHJpeC5tYXQ0LmludmVydChnbG9iYWxXb3JsZEludmVyc2UsIG5vZGUud29ybGRNYXRyaXgpO1xyXG4gICAgICAgIC8vIGdvIHRocm91Z2ggZWFjaCBqb2ludCBhbmQgZ2V0IGl0cyBjdXJyZW50IHdvcmxkTWF0cml4XHJcbiAgICAgICAgLy8gYXBwbHkgdGhlIGludmVyc2UgYmluZCBtYXRyaWNlcyBhbmQgc3RvcmUgdGhlXHJcbiAgICAgICAgLy8gZW50aXJlIHJlc3VsdCBpbiB0aGUgdGV4dHVyZVxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5qb2ludHMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgY29uc3Qgam9pbnQgPSB0aGlzLmpvaW50c1tqXTtcclxuICAgICAgICAgICAgY29uc3QgZHN0ID0gdGhpcy5qb2ludE1hdHJpY2VzW2pdO1xyXG4gICAgICAgICAgICBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KGRzdCwgZ2xvYmFsV29ybGRJbnZlcnNlLCBqb2ludC53b3JsZE1hdHJpeCk7XHJcbiAgICAgICAgICAgIGdsTWF0cml4Lm1hdDQubXVsdGlwbHkoZHN0LCBkc3QsIHRoaXMuaW52ZXJzZUJpbmRNYXRyaWNlc1tqXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLmpvaW50VGV4dHVyZSk7XHJcbiAgICAgICAgaWYoRGV2aWNlLkluc3RhbmNlLmdldENvbnRleHRUeXBlKCk9PVwid2ViZ2wyXCIpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy5nbC5URVhUVVJFXzJELCAwLCB0aGlzLmdsLlJHQkEzMkYsIDQsIHRoaXMuam9pbnRzLmxlbmd0aCwgMCxcclxuICAgICAgICAgICAgdGhpcy5nbC5SR0JBLCB0aGlzLmdsLkZMT0FULCB0aGlzLmpvaW50RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2wudGV4SW1hZ2UyRCh0aGlzLmdsLlRFWFRVUkVfMkQsIDAsIHRoaXMuZ2wuUkdCQSwgNCwgdGhpcy5qb2ludHMubGVuZ3RoLCAwLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5SR0JBLCB0aGlzLmdsLkZMT0FULCB0aGlzLmpvaW50RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vL3RyYW5zZm9ybXNcclxuLy/kvY3nva4g5peL6L2sIOe8qeaUvlxyXG5jbGFzcyBza2VsZXRvbl9UcmFuc2Zvcm0ge1xyXG4gICAgcHVibGljIHBvc2l0aW9uOiBBcnJheTxudW1iZXI+O1xyXG4gICAgcHVibGljIHJvdGF0aW9uOiBBcnJheTxudW1iZXI+O1xyXG4gICAgcHVibGljIHNjYWxlOiBBcnJheTxudW1iZXI+O1xyXG4gICAgY29uc3RydWN0b3IocG9zaXRpb24gPSBbMCwgMCwgMF0sIHJvdGF0aW9uID0gWzAsIDAsIDAsIDFdLCBzY2FsZSA9IFsxLCAxLCAxXSkge1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICB0aGlzLnJvdGF0aW9uID0gcm90YXRpb247XHJcbiAgICAgICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldE1hdHJpeChkc3Q/KSB7XHJcbiAgICAgICAgZHN0ID0gZHN0IHx8IG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xyXG4gICAgICAgIGdsTWF0cml4Lm1hdDQuY29tcG9zZSh0aGlzLnBvc2l0aW9uLCB0aGlzLnJvdGF0aW9uLCB0aGlzLnNjYWxlLCBkc3QpO1xyXG4gICAgICAgIHJldHVybiBkc3Q7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8v6IqC54K5XHJcbmNsYXNzIHNrZWxldG9uX05vZGUge1xyXG4gICAgcHJpdmF0ZSBuYW1lOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgdHJhbnNmb3JtOiBza2VsZXRvbl9UcmFuc2Zvcm07XHJcbiAgICBwcml2YXRlIHBhcmVudDogc2tlbGV0b25fTm9kZTtcclxuXHJcbiAgICBwcml2YXRlIGNoaWxkcmVuOiBBcnJheTxza2VsZXRvbl9Ob2RlPjtcclxuICAgIHByaXZhdGUgbG9jYWxNYXRyaXg6IEZsb2F0MzJBcnJheSB8IGFueVtdO1xyXG4gICAgcHVibGljIHdvcmxkTWF0cml4OiBGbG9hdDMyQXJyYXkgfCBhbnlbXTtcclxuICAgIHB1YmxpYyBtZXNoX0RyYXdhYmxlczogQXJyYXk8c2tlbGV0b25fTWVzaFJlbmRlcmVyPiA9IFtdO1xyXG4gICAgcHVibGljIHNraW5fRHJhd2FibGVzOiBBcnJheTxza2VsZXRvbl9Ta2luUmVuZGVyZXI+ID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IodHJhbnNmb3JtOiBza2VsZXRvbl9UcmFuc2Zvcm0sIG5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAvLyB0aGlzLmxvY2FsTWF0cml4ID0gbTQuaWRlbnRpdHkoKTtcclxuICAgICAgICAvLyB0aGlzLndvcmxkTWF0cml4ID0gbTQuaWRlbnRpdHkoKTtcclxuICAgICAgICB0aGlzLmxvY2FsTWF0cml4ID0gZ2xNYXRyaXgubWF0NC5jcmVhdGUoKTtcclxuICAgICAgICB0aGlzLndvcmxkTWF0cml4ID0gZ2xNYXRyaXgubWF0NC5jcmVhdGUoKTtcclxuICAgICAgICBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KHRoaXMubG9jYWxNYXRyaXgpO1xyXG4gICAgICAgIGdsTWF0cml4Lm1hdDQuaWRlbnRpdHkodGhpcy53b3JsZE1hdHJpeCk7XHJcbiAgICAgICAgdGhpcy5tZXNoX0RyYXdhYmxlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2tpbl9EcmF3YWJsZXMgPSBbXTtcclxuICAgIH1cclxuICAgIHNldFBhcmVudChwYXJlbnQ6IHNrZWxldG9uX05vZGUpIHtcclxuICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQuX3JlbW92ZUNoaWxkKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICAgICAgcGFyZW50Ll9hZGRDaGlsZCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdXBkYXRlV29ybGRNYXRyaXgocGFyZW50V29ybGRNYXRyaXgpIHtcclxuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSB0aGlzLnRyYW5zZm9ybTtcclxuICAgICAgICBpZiAodHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybS5nZXRNYXRyaXgodGhpcy5sb2NhbE1hdHJpeCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFyZW50V29ybGRNYXRyaXgpIHtcclxuICAgICAgICAgICAgLy8gYSBtYXRyaXggd2FzIHBhc3NlZCBpbiBzbyBkbyB0aGUgbWF0aFxyXG4gICAgICAgICAgICBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KHRoaXMud29ybGRNYXRyaXgsIHBhcmVudFdvcmxkTWF0cml4LCB0aGlzLmxvY2FsTWF0cml4KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBubyBtYXRyaXggd2FzIHBhc3NlZCBpbiBzbyBqdXN0IGNvcHkgbG9jYWwgdG8gd29ybGRcclxuICAgICAgICAgICAgZ2xNYXRyaXgubWF0NC5jb3B5KHRoaXMubG9jYWxNYXRyaXgsIHRoaXMud29ybGRNYXRyaXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbm93IHByb2Nlc3MgYWxsIHRoZSBjaGlsZHJlblxyXG4gICAgICAgIGNvbnN0IHdvcmxkTWF0cml4ID0gdGhpcy53b3JsZE1hdHJpeDtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY2hpbGQudXBkYXRlV29ybGRNYXRyaXgod29ybGRNYXRyaXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHRyYXZlcnNlKGZuKSB7XHJcbiAgICAgICAgZm4odGhpcyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNoaWxkLnRyYXZlcnNlKGZuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBfYWRkQ2hpbGQoY2hpbGQ6IHNrZWxldG9uX05vZGUpIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG4gICAgfVxyXG4gICAgX3JlbW92ZUNoaWxkKGNoaWxkOiBza2VsZXRvbl9Ob2RlKSB7XHJcbiAgICAgICAgY29uc3QgbmR4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShuZHgsIDEpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbi8v55qu6IKk5riy5p+TXHJcbmNsYXNzIHNrZWxldG9uX1NraW5SZW5kZXJlciB7XHJcbiAgICBwcml2YXRlIG1lc2g7XHJcbiAgICBwcml2YXRlIHNraW46IHNrZWxldG9uX1NraW47XHJcbiAgICBwcml2YXRlIGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcbiAgICBwcml2YXRlIHNraW5Qcm9ncmFtSW5mbzogU2hhZGVyRGF0YTtcclxuICAgIGNvbnN0cnVjdG9yKG1lc2gsIHNraW4sIGdsKSB7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbWVzaDtcclxuICAgICAgICB0aGlzLnNraW4gPSBza2luO1xyXG4gICAgICAgIHRoaXMuZ2wgPSBnbDtcclxuICAgICAgICB0aGlzLnNraW5Qcm9ncmFtSW5mbyA9IEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVQcm9ncmFtSW5mbyhza2luVlMsIGZzKTtcclxuICAgIH1cclxuICAgIHJlbmRlcihub2RlOiBza2VsZXRvbl9Ob2RlLGV4dFZpZXdMZWZ0TWF0cml4LHNoYXJlZFVuaWZvcm1zKSB7XHJcbiAgICAgICAgdGhpcy5za2luLnVwZGF0ZShub2RlKTtcclxuICAgICAgICBmb3IgKGNvbnN0IHByaW1pdGl2ZSBvZiB0aGlzLm1lc2gucHJpbWl0aXZlcykge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVyRGF0YSA9IFJlbmRlckRhdGFQb29sLmdldChSZW5kZXJEYXRhVHlwZS5TcGluZSkgYXMgU3BpbmVSZW5kZXJEYXRhO1xyXG4gICAgICAgICAgICByZW5kZXJEYXRhLl9zaGFkZXJEYXRhID0gdGhpcy5za2luUHJvZ3JhbUluZm87XHJcbiAgICAgICAgICAgIHJlbmRlckRhdGEuX3VuaWZvcm1JbmZvcnMucHVzaCh7IFxyXG4gICAgICAgICAgICAgICAgdV93b3JsZDogbm9kZS53b3JsZE1hdHJpeCxcclxuICAgICAgICAgICAgICAgIHVfdGV4Q29vcmQ6IHRoaXMuc2tpbi5fdGV4dHVyZS5fZ2xJRCxcclxuICAgICAgICAgICAgICAgIHVfam9pbnRUZXh0dXJlOiB0aGlzLnNraW4uam9pbnRUZXh0dXJlLFxyXG4gICAgICAgICAgICAgICAgdV9udW1Kb2ludHM6IHRoaXMuc2tpbi5qb2ludHMubGVuZ3RoLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVuZGVyRGF0YS5fZXh0cmFWaWV3TGVmdE1hdHJpeCA9IGV4dFZpZXdMZWZ0TWF0cml4O1xyXG4gICAgICAgICAgICByZW5kZXJEYXRhLl9wcm9qS2V5ID0gXCJ1X3Byb2plY3Rpb25cIjtcclxuICAgICAgICAgICAgcmVuZGVyRGF0YS5fdmlld0tleSA9IFwidV92aWV3XCI7XHJcbiAgICAgICAgICAgIHJlbmRlckRhdGEuX3VuaWZvcm1JbmZvcnMucHVzaChwcmltaXRpdmUubWF0ZXJpYWwudW5pZm9ybXMpO1xyXG4gICAgICAgICAgICByZW5kZXJEYXRhLl91bmlmb3JtSW5mb3JzLnB1c2goc2hhcmVkVW5pZm9ybXMpO1xyXG4gICAgICAgICAgICByZW5kZXJEYXRhLl9hdHRyYnVmZmVySW5mbyA9IHByaW1pdGl2ZS5idWZmZXJJbmZvO1xyXG4gICAgICAgICAgICBEZXZpY2UuSW5zdGFuY2UuY29sbGVjdERhdGEocmVuZGVyRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vL+e9keagvOa4suafk1xyXG5jbGFzcyBza2VsZXRvbl9NZXNoUmVuZGVyZXIge1xyXG4gICAgcHJpdmF0ZSBtZXNoO1xyXG4gICAgcHJpdmF0ZSBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gICAgcHJpdmF0ZSBtZXNoUHJvZ3JhbUluZm86IFNoYWRlckRhdGE7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNoLCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy5tZXNoID0gbWVzaDtcclxuICAgICAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICAgICAgdGhpcy5tZXNoUHJvZ3JhbUluZm8gPSBHX1NoYWRlckZhY3RvcnkuY3JlYXRlUHJvZ3JhbUluZm8obWVzaFZTLCBmcyk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVuZGVyKG5vZGU6IHNrZWxldG9uX05vZGUsIGV4dCxzaGFyZWRVbmlmb3Jtcykge1xyXG4gICAgICAgIGZvciAoY29uc3QgcHJpbWl0aXZlIG9mIHRoaXMubWVzaC5wcmltaXRpdmVzKSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJEYXRhID0gUmVuZGVyRGF0YVBvb2wuZ2V0KFJlbmRlckRhdGFUeXBlLlNwaW5lKSBhcyBTcGluZVJlbmRlckRhdGE7XHJcbiAgICAgICAgICAgIHJlbmRlckRhdGEuX2V4dHJhVmlld0xlZnRNYXRyaXggPSBleHQ7XHJcbiAgICAgICAgICAgIHJlbmRlckRhdGEuX3Byb2pLZXkgPSBcInVfcHJvamVjdGlvblwiO1xyXG4gICAgICAgICAgICByZW5kZXJEYXRhLl92aWV3S2V5ID0gXCJ1X3ZpZXdcIjtcclxuICAgICAgICAgICAgcmVuZGVyRGF0YS5fc2hhZGVyRGF0YSA9IHRoaXMubWVzaFByb2dyYW1JbmZvO1xyXG4gICAgICAgICAgICByZW5kZXJEYXRhLl9hdHRyYnVmZmVySW5mbyA9IHByaW1pdGl2ZS5idWZmZXJJbmZvO1xyXG4gICAgICAgICAgICByZW5kZXJEYXRhLl91bmlmb3JtSW5mb3JzLnB1c2goe3Vfd29ybGQ6IG5vZGUud29ybGRNYXRyaXh9KTtcclxuICAgICAgICAgICAgcmVuZGVyRGF0YS5fdW5pZm9ybUluZm9ycy5wdXNoKHByaW1pdGl2ZS5tYXRlcmlhbC51bmlmb3Jtcyk7XHJcbiAgICAgICAgICAgIHJlbmRlckRhdGEuX3VuaWZvcm1JbmZvcnMucHVzaChzaGFyZWRVbmlmb3Jtcyk7XHJcbiAgICAgICAgICAgIERldmljZS5JbnN0YW5jZS5jb2xsZWN0RGF0YShyZW5kZXJEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbi8v6aqo6aq86Kej5p6Q5ZmoXHJcbmNsYXNzIHNrZWxldG9uX1BhcnNlIHtcclxuICAgIC8vaHR0cHM6Ly93ZWJnbGZ1bmRhbWVudGFscy5vcmcvd2ViZ2wvcmVzb3VyY2VzL21vZGVscy9raWxsZXJfd2hhbGUvd2hhbGUuQ1lDTEVTLmdsdGZcclxuICAgIC8qKlxyXG4gICAgICog6aqo6aq85paH5Lu26Kej5p6QXHJcbiAgICAgKiDlj5jph49hY2Nlc3NvcnNcclxuICAgICAqICAgICBidWZmZXJWaWV3OuWtmOWCqOeahOaYr2J1ZmZlcnZpZXdz55qE57Si5byVXHJcbiAgICAgKiAgICAgY29tcG9uZW50VHlwZe+8muWFg+e0oOeahOexu+Wei++8jOWFt+S9k+WPr+afpeeci2dsVHlwZVRvVHlwZWRBcnJheU1hcFxyXG4gICAgICogICAgIGNvdW5077ya5YWD57Sg55qE5pWw6YePXHJcbiAgICAgKiAgICAgbWF4OuWNleS9jeWFg+e0oOavj+S4gOS9jeWFg+e0oOeahOacgOWkp+WAvFxyXG4gICAgICogICAgIG1pbjrljZXkvY3lhYPntKDmr4/kuIDkvY3lhYPntKDnmoTmnIDlsI/lgLxcclxuICAgICAqICAgICB0eXBl77ya5Y2V5L2N5YWD57Sg55qE5pWw55uu77yM5YW35L2T5Y+v5p+l55yLYWNjZXNzb3JUeXBlVG9OdW1Db21wb25lbnRzTWFwXHJcbiAgICAgKuWPmOmHj2J1ZmZlcnZpZXdzXHJcbiAgICAgICAgICAgYnVmZmVyOuWcqGJ1ZmZlcuS4reeahOi1t+Wni+S9jee9rlxyXG4gICAgICAgICAgIGJ5dGVMZW5ndGjvvJpidWZmZXJ2aWV355qE5a2X6IqC6ZW/5bqmXHJcbiAgICAgICAgICAgYnl0ZU9mZnNldDrlnKhidWZmZXLkuK3nmoTlgY/np7vkvY3nva5cclxuICAgICAgICAgICB0YXJnZXQ655uu5qCH57yT5YayXHJcbiAgICAq5Y+Y6YePbm9kZXNcclxuICAgICAgICAgICDoioLngrnvvIzljIXlkKvmiYDmnInlj6/mmK/oioLngrnvvIzmr5TlpoLnm7jmnLrvvIznga/lhYnvvIzniankvZPvvIzpqqjpqrznrYlcclxuICAgICAgICAgICBuYW1l77ya6IqC54K555qE5ZCN5a2XXHJcbiAgICAgICAgICAgcm90YXRpb27vvJroioLngrnnmoTml4vovaxcclxuICAgICAgICAgICBzY2FsZe+8muiKgueCueeahOe8qeaUvlxyXG4gICAgICAgICAgIHRyYW5zbGF0aW9uOuiKgueCueeahOW5s+enu1xyXG4gICAgICAgICAgIGNoaWxkcmVu77ya6IqC54K555qE5a2p5a2Q6IqC54K55YiX6KGoXHJcbiAgICAgKuWPmOmHj3NraW5zXHJcbiAgICAgICAgICAgaW52ZXJzZUJpbmRNYXRyaWNlczrlrZjlgqjnmoTmmK9hY2Nlc3NvcnPnmoTntKLlvJVcclxuICAgICAgICAgICBqb2ludHM66aqo6aq86IqC54K55pWw57uE77yM5a2Y5YKo55qE5pivbm9kZXPnmoTntKLlvJVcclxuXHJcbiAgICAg5qC55o2u5LiK6Z2i55qEc2hhZGVy5Luj56CB77ya5oiR5Lus6ZyA6KaB5LiL6Z2i6L+Z5Lqb5pWw5o2uXHJcbiAgICAg6aG254K577yaXHJcbiAgICAg5rOV57q/77yaXHJcbiAgICAg5YiH57q/77yaXHJcbiAgICAg5p2D6YeN77yaXHJcbiAgICAg6aqo6aq85YWz6IqC55+p6Zi1OlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyB0aHJvd05vS2V5KGtleSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgbm8ga2V5OiAke2tleX1gKTtcclxuICAgIH1cclxuXHJcbiAgICAvL+WPmOmHj+exu+Wei+WNoOeUqOeahOWFg+e0oOS4quaVsFxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgYWNjZXNzb3JUeXBlVG9OdW1Db21wb25lbnRzTWFwID0ge1xyXG4gICAgICAgICdTQ0FMQVInOiAxLFxyXG4gICAgICAgICdWRUMyJzogMixcclxuICAgICAgICAnVkVDMyc6IDMsXHJcbiAgICAgICAgJ1ZFQzQnOiA0LCAgICAvL1xyXG4gICAgICAgICdNQVQyJzogNCxcclxuICAgICAgICAnTUFUMyc6IDksXHJcbiAgICAgICAgJ01BVDQnOiAxNiwgIC8vNOe7tOefqemYteWNoOeUqDE25Liq5YWD57SgXHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLzI3NDIwXHJcbiAgICAvLzQgIDIyODUgIDNcclxuICAgIHByaXZhdGUgc3RhdGljIGFjY2Vzc29yVHlwZVRvTnVtQ29tcG9uZW50cyh0eXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzb3JUeXBlVG9OdW1Db21wb25lbnRzTWFwW3R5cGVdIHx8IHRoaXMudGhyb3dOb0tleSh0eXBlKTtcclxuICAgIH1cclxuXHJcbiAgICAvL+WFg+e0oOaVsOe7hOexu+Wei1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgZ2xUeXBlVG9UeXBlZEFycmF5TWFwID0ge1xyXG4gICAgICAgICc1MTIwJzogSW50OEFycmF5LCAgICAvLyBnbC5CWVRFXHJcbiAgICAgICAgJzUxMjEnOiBVaW50OEFycmF5LCAgIC8vIGdsLlVOU0lHTkVEX0JZVEVcclxuICAgICAgICAnNTEyMic6IEludDE2QXJyYXksICAgLy8gZ2wuU0hPUlRcclxuICAgICAgICAnNTEyMyc6IFVpbnQxNkFycmF5LCAgLy8gZ2wuVU5TSUdORURfU0hPUlRcclxuICAgICAgICAnNTEyNCc6IEludDMyQXJyYXksICAgLy8gZ2wuSU5UXHJcbiAgICAgICAgJzUxMjUnOiBVaW50MzJBcnJheSwgIC8vIGdsLlVOU0lHTkVEX0lOVFxyXG4gICAgICAgICc1MTI2JzogRmxvYXQzMkFycmF5LCAvLyBnbC5GTE9BVFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBHaXZlbiBhIEdMIHR5cGUgcmV0dXJuIHRoZSBUeXBlZEFycmF5IG5lZWRlZFxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2xUeXBlVG9UeXBlZEFycmF5KHR5cGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nbFR5cGVUb1R5cGVkQXJyYXlNYXBbdHlwZV0gfHwgdGhpcy50aHJvd05vS2V5KHR5cGUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGdpdmVuIGFuIGFjY2Vzc29yIGluZGV4IHJldHVybiBib3RoIHRoZSBhY2Nlc3NvciBhbmRcclxuICAgIC8vIGEgVHlwZWRBcnJheSBmb3IgdGhlIGNvcnJlY3QgcG9ydGlvbiBvZiB0aGUgYnVmZmVyXHJcbiAgICBwcml2YXRlIHN0YXRpYyBnZXRBY2Nlc3NvclR5cGVkQXJyYXlBbmRTdHJpZGUoZ2wsIGdsdGYsIGFjY2Vzc29ySW5kZXgpIHtcclxuICAgICAgICAvL2dsdGYuYWNjZXNzb3Jz5pivYnVmZmVyVmlld+eahOaVsOe7hFxyXG4gICAgICAgIGNvbnN0IGFjY2Vzc29yID0gZ2x0Zi5hY2Nlc3NvcnNbYWNjZXNzb3JJbmRleF07XHJcbiAgICAgICAgLy9nbHRmLmJ1ZmZlclZpZXdz5a2Y5YKo5LqG5q+P5LiqYnVmZmVydmlld+eahOWcqOmhtueCueaVsOe7hOS4reeahOWtmOaUvuS9jee9ruS7peWPiuWkp+Wwj1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlclZpZXcgPSBnbHRmLmJ1ZmZlclZpZXdzW2FjY2Vzc29yLmJ1ZmZlclZpZXddO1xyXG4gICAgICAgIGNvbnN0IFR5cGVkQXJyYXkgPSB0aGlzLmdsVHlwZVRvVHlwZWRBcnJheShhY2Nlc3Nvci5jb21wb25lbnRUeXBlKTsgLy9GbG9hdDMyQXJyYXlcclxuICAgICAgICBjb25zdCBidWZmZXIgPSBnbHRmLmJ1ZmZlcnNbYnVmZmVyVmlldy5idWZmZXJdO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGdsdGYuYnVmZmVycyk7XHJcbiAgICAgICAgdmFyIGFycmF5ID0gbmV3IFR5cGVkQXJyYXkoXHJcbiAgICAgICAgICAgIGJ1ZmZlcixcclxuICAgICAgICAgICAgYnVmZmVyVmlldy5ieXRlT2Zmc2V0ICsgKGFjY2Vzc29yLmJ5dGVPZmZzZXQgfHwgMCksXHJcbiAgICAgICAgICAgIGFjY2Vzc29yLmNvdW50ICogdGhpcy5hY2Nlc3NvclR5cGVUb051bUNvbXBvbmVudHMoYWNjZXNzb3IudHlwZSkpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFjY2Vzc29yLFxyXG4gICAgICAgICAgICBhcnJheTogYXJyYXksXHJcbiAgICAgICAgICAgIHN0cmlkZTogYnVmZmVyVmlldy5ieXRlU3RyaWRlIHx8IDAsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2l2ZW4gYW4gYWNjZXNzb3IgaW5kZXggcmV0dXJuIGEgV2ViR0xCdWZmZXIgYW5kIGEgc3RyaWRlXHJcbiAgICBwcml2YXRlIHN0YXRpYyBnZXRBY2Nlc3NvckFuZFdlYkdMQnVmZmVyKGdsLCBnbHRmLCBhY2Nlc3NvckluZGV4LCBhdHRyaWJOYW1lID0gXCJcIikge1xyXG4gICAgICAgIGNvbnN0IGFjY2Vzc29yID0gZ2x0Zi5hY2Nlc3NvcnNbYWNjZXNzb3JJbmRleF07XHJcbiAgICAgICAgY29uc3QgYnVmZmVyVmlldyA9IGdsdGYuYnVmZmVyVmlld3NbYWNjZXNzb3IuYnVmZmVyVmlld107XHJcbiAgICAgICAgaWYgKCFidWZmZXJWaWV3LndlYmdsQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBidWZmZXJWaWV3LnRhcmdldCB8fCBnbC5BUlJBWV9CVUZGRVI7XHJcbiAgICAgICAgICAgIGNvbnN0IGFycmF5QnVmZmVyID0gZ2x0Zi5idWZmZXJzW2J1ZmZlclZpZXcuYnVmZmVyXTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyLCBidWZmZXJWaWV3LmJ5dGVPZmZzZXQsIGJ1ZmZlclZpZXcuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIC8v57uR5a6a57yT5YayXHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIodGFyZ2V0LCBidWZmZXIpO1xyXG4gICAgICAgICAgICAvL+S4iuS8oOaVsOaNrlxyXG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKHRhcmdldCwgZGF0YSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICBidWZmZXJWaWV3LndlYmdsQnVmZmVyID0gYnVmZmVyO1xyXG4gICAgICAgICAgICBpZiAoYXR0cmliTmFtZSA9PSBcIkpPSU5UU18wXCIgfHwgYXR0cmliTmFtZSA9PSBcIldFSUdIVFNfMFwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcERhdGE6IEFycmF5PG51bWJlcj4gPSBbXVxyXG4gICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgsIGFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcERhdGEucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFjY2Vzc29yLFxyXG4gICAgICAgICAgICBidWZmZXI6IGJ1ZmZlclZpZXcud2ViZ2xCdWZmZXIsXHJcbiAgICAgICAgICAgIHN0cmlkZTogYnVmZmVyVmlldy5zdHJpZGUgfHwgMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvL+ino+aekOmqqOmqvOWKqOeUu+aVsOaNrlxyXG4gICAgc3RhdGljIHBhcnNlR0xURihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBnbHRmUGF0aDogc3RyaW5nID0gXCJyZXMvbW9kZWxzL2tpbGxlcl93aGFsZS93aGFsZS5DWUNMRVMuZ2x0ZlwiLCBidWZmZXJQYXRoOiBzdHJpbmcgPSBcInJlcy9tb2RlbHMva2lsbGVyX3doYWxlL3doYWxlLkNZQ0xFUy5iaW5cIikge1xyXG4gICAgICAgIGNvbnN0IGdsdGYgPSBMb2FkZXJNYW5hZ2VyLmluc3RhbmNlLmdldENhY2hlRGF0YShnbHRmUGF0aCk7XHJcbiAgICAgICAgZ2x0Zi5idWZmZXJzID0gW0xvYWRlck1hbmFnZXIuaW5zdGFuY2UuZ2V0Q2FjaGVEYXRhKGJ1ZmZlclBhdGgpXTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coZ2x0Zik7XHJcbiAgICAgICAgLy/nvLrnnIHnmoTmnZDotKhcclxuICAgICAgICBjb25zdCBkZWZhdWx0TWF0ZXJpYWwgPSB7XHJcbiAgICAgICAgICAgIHVuaWZvcm1zOiB7XHJcbiAgICAgICAgICAgICAgICB1X2RpZmZ1c2U6IFswLjUsIDAsIDAsIDFdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gc2V0dXAgbWVzaGVzXHJcbiAgICAgICAgLy8g5Yib5bu6572R5qC8XHJcbiAgICAgICAgZ2x0Zi5tZXNoZXMuZm9yRWFjaCgobWVzaCkgPT4ge1xyXG4gICAgICAgICAgICBtZXNoLnByaW1pdGl2ZXMuZm9yRWFjaCgocHJpbWl0aXZlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJzID0ge307XHJcbiAgICAgICAgICAgICAgICBsZXQgbnVtRWxlbWVudHM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFthdHRyaWJOYW1lLCBpbmRleF0gb2YgT2JqZWN0LmVudHJpZXMocHJpbWl0aXZlLmF0dHJpYnV0ZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBhY2Nlc3NvciwgYnVmZmVyLCBzdHJpZGUgfSA9IHRoaXMuZ2V0QWNjZXNzb3JBbmRXZWJHTEJ1ZmZlcihnbCwgZ2x0ZiwgaW5kZXgsIGF0dHJpYk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG51bUVsZW1lbnRzID0gYWNjZXNzb3IuY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlic1tgYV8ke2F0dHJpYk5hbWV9YF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYWNjZXNzb3IuY29tcG9uZW50VHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtQ29tcG9uZW50czogdGhpcy5hY2Nlc3NvclR5cGVUb051bUNvbXBvbmVudHMoYWNjZXNzb3IudHlwZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlkZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBhY2Nlc3Nvci5ieXRlT2Zmc2V0IHwgMCxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlckluZm86IGFueSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJzLFxyXG4gICAgICAgICAgICAgICAgICAgIG51bUVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocHJpbWl0aXZlLmluZGljZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYWNjZXNzb3IsIGJ1ZmZlciB9ID0gdGhpcy5nZXRBY2Nlc3NvckFuZFdlYkdMQnVmZmVyKGdsLCBnbHRmLCBwcmltaXRpdmUuaW5kaWNlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVySW5mby5udW1FbGVtZW50cyA9IGFjY2Vzc29yLmNvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlckluZm8uaW5kaWNlcyA9IGJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJJbmZvLmVsZW1lbnRUeXBlID0gYWNjZXNzb3IuY29tcG9uZW50VHlwZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL+iuvue9rue8k+WGsuS/oeaBr1xyXG4gICAgICAgICAgICAgICAgcHJpbWl0aXZlLmJ1ZmZlckluZm8gPSBidWZmZXJJbmZvO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHNhdmUgdGhlIG1hdGVyaWFsIGluZm8gZm9yIHRoaXMgcHJpbWl0aXZlXHJcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUubWF0ZXJpYWwgPSBnbHRmLm1hdGVyaWFscyAmJiBnbHRmLm1hdGVyaWFsc1twcmltaXRpdmUubWF0ZXJpYWxdIHx8IGRlZmF1bHRNYXRlcmlhbDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNraW5Ob2RlcyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IG9yaWdOb2RlcyA9IGdsdGYubm9kZXM7XHJcbiAgICAgICAgZ2x0Zi5ub2RlcyA9IGdsdGYubm9kZXMubWFwKChuKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgc2tpbiwgbWVzaCwgdHJhbnNsYXRpb24sIHJvdGF0aW9uLCBzY2FsZSB9ID0gbjtcclxuICAgICAgICAgICAgY29uc3QgdHJzID0gbmV3IHNrZWxldG9uX1RyYW5zZm9ybSh0cmFuc2xhdGlvbiwgcm90YXRpb24sIHNjYWxlKTtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBza2VsZXRvbl9Ob2RlKHRycywgbmFtZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWxNZXNoID0gZ2x0Zi5tZXNoZXNbbWVzaF07XHJcbiAgICAgICAgICAgIGlmIChza2luICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHNraW5Ob2Rlcy5wdXNoKHsgbm9kZSwgbWVzaDogcmVhbE1lc2gsIHNraW5OZHg6IHNraW4gfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVhbE1lc2gpIHtcclxuICAgICAgICAgICAgICAgIG5vZGUubWVzaF9EcmF3YWJsZXMucHVzaChuZXcgc2tlbGV0b25fTWVzaFJlbmRlcmVyKHJlYWxNZXNoLCBnbCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBzZXR1cCBza2luc1xyXG4gICAgICAgIGdsdGYuc2tpbnMgPSBnbHRmLnNraW5zLm1hcCgoc2tpbikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBqb2ludHMgPSBza2luLmpvaW50cy5tYXAobmR4ID0+IGdsdGYubm9kZXNbbmR4XSk7XHJcbiAgICAgICAgICAgIC8vOTbkuKrlhYPntKAg5q+P5Liq5YWD57Sg5Zub5Liq5a2X6IqCXHJcbiAgICAgICAgICAgIC8v5LiA5Liq55+p6Zi1NHg0IDE25Liq5YWD57SgIOWPr+S7pee7hOaIkDbkuKrnn6npmLVcclxuICAgICAgICAgICAgY29uc3QgeyBhcnJheSB9ID0gdGhpcy5nZXRBY2Nlc3NvclR5cGVkQXJyYXlBbmRTdHJpZGUoZ2wsIGdsdGYsIHNraW4uaW52ZXJzZUJpbmRNYXRyaWNlcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgc2tlbGV0b25fU2tpbihqb2ludHMsIGFycmF5LCBnbCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBTa2luUmVuZGVyZXJzIHRvIG5vZGVzIHdpdGggc2tpbnNcclxuICAgICAgICBmb3IgKGNvbnN0IHsgbm9kZSwgbWVzaCwgc2tpbk5keCB9IG9mIHNraW5Ob2Rlcykge1xyXG4gICAgICAgICAgICBub2RlLnNraW5fRHJhd2FibGVzLnB1c2gobmV3IHNrZWxldG9uX1NraW5SZW5kZXJlcihtZXNoLCBnbHRmLnNraW5zW3NraW5OZHhdLCBnbCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgKiDorr7nva7oioLngrnnmoTniLblrZDlhbPns7tcclxuICAgICAqIEBwYXJhbSBub2RlcyDpqqjpqrzliqjnlLvkuK3nmoTmupDoioLngrnmlbDnu4RcclxuICAgICAqIEBwYXJhbSBub2RlIOeItuiKgueCuVxyXG4gICAgICogQHBhcmFtIGNoaWxkSW5kaWNlcyDpqqjpqrzliqjnlLvkuK3mupDoioLngrnntKLlvJUgXHJcbiAgICAgKi9cclxuICAgICAgICBmdW5jdGlvbiBhZGRDaGlsZHJlbihub2RlczogQXJyYXk8c2tlbGV0b25fTm9kZT4sIG5vZGU6IHNrZWxldG9uX05vZGUsIGNoaWxkSW5kaWNlczogQXJyYXk8bnVtYmVyPikge1xyXG4gICAgICAgICAgICBjaGlsZEluZGljZXMuZm9yRWFjaCgoY2hpbGROZHgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZXNbY2hpbGROZHhdO1xyXG4gICAgICAgICAgICAgICAgY2hpbGQuc2V0UGFyZW50KG5vZGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFycmFuZ2Ugbm9kZXMgaW50byBncmFwaFxyXG4gICAgICAgIC8vIOWcqOmqqOmqvOWKqOeUu+eahOmFjee9ruS4rSxub2Rlc+aYr+S4gOS4quWMheWQq+aJgOacieiKgueCueeahOWvueixoVxyXG4gICAgICAgIC8v6YGN5Y6Gbm9kZXMs5bCx5piv6YGN5Y6G5omA5pyJ6IqC54K5XHJcbiAgICAgICAgZ2x0Zi5ub2Rlcy5mb3JFYWNoKChub2RlLCBuZHgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBvcmlnTm9kZXNbbmR4XS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBhZGRDaGlsZHJlbihnbHRmLm5vZGVzLCBub2RlLCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gc2V0dXAgc2NlbmVzXHJcbiAgICAgICAgLy8g5Yib5bu65Zy65pmvXHJcbiAgICAgICAgZm9yIChjb25zdCBzY2VuZSBvZiBnbHRmLnNjZW5lcykge1xyXG4gICAgICAgICAgICBzY2VuZS5yb290ID0gbmV3IHNrZWxldG9uX05vZGUobmV3IHNrZWxldG9uX1RyYW5zZm9ybSgpLCBzY2VuZS5uYW1lKTtcclxuICAgICAgICAgICAgYWRkQ2hpbGRyZW4oZ2x0Zi5ub2Rlcywgc2NlbmUucm9vdCwgc2NlbmUubm9kZXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGdsdGY7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4vL+mqqOmqvOiKgueCuVxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTcGluZSBleHRlbmRzIFNZLlNwcml0ZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ2wpIHtcclxuICAgICAgICBzdXBlcihnbCk7XHJcbiAgICAgICAgdGhpcy5fY2FtZXJhVHlwZSA9IDA7XHJcbiAgICAgICAgdGhpcy5nbHRmID0gc2tlbGV0b25fUGFyc2UucGFyc2VHTFRGKGdsKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgZ2x0ZjtcclxuICAgIHByaXZhdGUgc2hhcmVkVW5pZm9ybXM7XHJcbiAgICBwcm90ZWN0ZWQgb25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMubG9jYWxGdW5jKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIG9yaWdNYXRyaWNlczogTWFwPHNrZWxldG9uX05vZGUsIEZsb2F0MzJBcnJheT4gPSBuZXcgTWFwKCk7XHJcbiAgICBwcml2YXRlIGFuaW1Ta2luKHNraW46IHNrZWxldG9uX1NraW4sIGE6IG51bWJlcikge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2tpbi5qb2ludHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3Qgam9pbnQgPSBza2luLmpvaW50c1tpXTtcclxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gbWF0cml4IHNhdmVkIGZvciB0aGlzIGpvaW50XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5vcmlnTWF0cmljZXMuaGFzKGpvaW50KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2F2ZSBhIG1hdHJpeCBmb3Igam9pbnRcclxuICAgICAgICAgICAgICAgIHRoaXMub3JpZ01hdHJpY2VzLnNldChqb2ludCwgam9pbnQudHJhbnNmb3JtLmdldE1hdHJpeCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBnZXQgdGhlIG9yaWdpbmFsIG1hdHJpeFxyXG4gICAgICAgICAgICBjb25zdCBvcmlnTWF0cml4ID0gdGhpcy5vcmlnTWF0cmljZXMuZ2V0KGpvaW50KTtcclxuICAgICAgICAgICAgLy8gcm90YXRlIGl0XHJcbiAgICAgICAgICAgIGNvbnN0IG0gPSBnbE1hdHJpeC5tYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBnbE1hdHJpeC5tYXQ0LnJvdGF0ZVgobSwgb3JpZ01hdHJpeCwgYSk7XHJcbiAgICAgICAgICAgIC8vIGRlY29tcG9zZSBpdCBiYWNrIGludG8gcG9zaXRpb24sIHJvdGF0aW9uLCBzY2FsZVxyXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBqb2ludFxyXG4gICAgICAgICAgICBnbE1hdHJpeC5tYXQ0LmRlY29tcG9zZShtLCBqb2ludC50cmFuc2Zvcm0ucG9zaXRpb24sIGpvaW50LnRyYW5zZm9ybS5yb3RhdGlvbiwgam9pbnQudHJhbnNmb3JtLnNjYWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHNwaW5lTWF0cml4O1xyXG4gICAgcHJpdmF0ZSBsb2NhbEZ1bmMoKTp2b2lke1xyXG4gICAgICAgIGNvbnN0IGNhbWVyYVBvc2l0aW9uID0gWzUsIDAsIC01XTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBbMCwgMCwgLTEwXTtcclxuICAgICAgICAvLyBmb3IgZGVidWdnaW5nIC4uIHNlZSBhcnRpY2xlXHJcbiAgICAgICAgLy8gY29uc3QgY2FtZXJhUG9zaXRpb24gPSBbNSwgMCwgNV07XHJcbiAgICAgICAgLy8gY29uc3QgdGFyZ2V0ID0gWzAsIDAsIDBdO1xyXG4gICAgICAgIGNvbnN0IHVwID0gWzAsIDEsIDBdO1xyXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIGNhbWVyYSdzIG1hdHJpeCB1c2luZyBsb29rIGF0LlxyXG4gICAgICAgIHRoaXMuc3BpbmVNYXRyaXggPSBnbE1hdHJpeC5tYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIGdsTWF0cml4Lm1hdDQubG9va0F0KHRoaXMuc3BpbmVNYXRyaXgsIGNhbWVyYVBvc2l0aW9uLCB0YXJnZXQsIHVwKTtcclxuXHJcbiAgICAgICAgdGhpcy5fZ2xNYXRyaXgubWF0NC5tdWwodGhpcy5fbW9kZWxNYXRyaXgsdGhpcy5fbW9kZWxNYXRyaXgsdGhpcy5zcGluZU1hdHJpeCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHJlbmRlckRyYXdhYmxlcyhub2RlOiBza2VsZXRvbl9Ob2RlKSB7XHJcbiAgICAgICAgbGV0IG1zTWF0cml4ID0gdGhpcy5fZ2xNYXRyaXgubWF0NC5tdWx0aXBseShudWxsLHRoaXMuX21vZGVsTWF0cml4LHRoaXMuc3BpbmVNYXRyaXgpO1xyXG4gICAgICAgIC8v5riy5p+T572R5qC8XHJcbiAgICAgICAgZm9yIChjb25zdCBkcmF3YWJsZSBvZiBub2RlLm1lc2hfRHJhd2FibGVzKSB7XHJcbiAgICAgICAgICAgIGRyYXdhYmxlLnJlbmRlcihub2RlLG1zTWF0cml4LHRoaXMuc2hhcmVkVW5pZm9ybXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL+a4suafk+earuiCpFxyXG4gICAgICAgIGZvciAoY29uc3QgZHJhd2FibGUgb2Ygbm9kZS5za2luX0RyYXdhYmxlcykge1xyXG4gICAgICAgICAgICBkcmF3YWJsZS5yZW5kZXIobm9kZSxtc01hdHJpeCx0aGlzLnNoYXJlZFVuaWZvcm1zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGRyYXcodGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgdGltZSAqPSAwLjAwMTsgIC8vIGNvbnZlcnQgdG8gc2Vjb25kc1xyXG4gICAgICAgIHRoaXMuYW5pbVNraW4odGhpcy5nbHRmLnNraW5zWzBdLCBNYXRoLnNpbih0aW1lKSAqIC41KTtcclxuICAgICAgICB2YXIgbGlnaHREaXJlY3Rpb24gPSBnbE1hdHJpeC52ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgXHJcbiAgICAgICAgZ2xNYXRyaXgudmVjMy5ub3JtYWxpemUobGlnaHREaXJlY3Rpb24sIFstMSwgMywgNV0pO1xyXG4gICAgICAgIHRoaXMuc2hhcmVkVW5pZm9ybXMgPSB7XHJcbiAgICAgICAgICAgIHVfbGlnaHREaXJlY3Rpb246IGxpZ2h0RGlyZWN0aW9uLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yIChjb25zdCBzY2VuZSBvZiB0aGlzLmdsdGYuc2NlbmVzKSB7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0dGUgYWxsIHdvcmxkIG1hdGljZXMgaW4gdGhlIHNjZW5lLlxyXG4gICAgICAgICAgICBzY2VuZS5yb290LnVwZGF0ZVdvcmxkTWF0cml4KCk7XHJcbiAgICAgICAgICAgIC8vIHdhbGsgdGhlIHNjZW5lIGFuZCByZW5kZXIgYWxsIHJlbmRlcmFibGVzXHJcbiAgICAgICAgICAgIHNjZW5lLnJvb3QudHJhdmVyc2UodGhpcy5yZW5kZXJEcmF3YWJsZXMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGdscmVuZGVyX2J1ZmZlcl9mb3JtYXQgfSBmcm9tIFwiLi4vZ2Z4L0dMRW51bXNcIjtcbmltcG9ydCB7IFRleHR1cmUyRCB9IGZyb20gXCIuLi9iYXNlL1RleHR1cmUyRFwiO1xuaW1wb3J0IEZyYW1lQnVmZmVyIGZyb20gXCIuLi9nZngvRnJhbWVCdWZmZXJcIjtcbmltcG9ydCBSZW5kZXJCdWZmZXIgZnJvbSBcIi4uL2dmeC9SZW5kZXJCdWZmZXJcIjtcblxuLyoqXG4gKiAhI2VuIFRoZSBkZXB0aCBidWZmZXIgYW5kIHN0ZW5jaWwgYnVmZmVyIGZvcm1hdCBmb3IgUmVuZGVyVGV4dHVyZS5cbiAqICEjemggUmVuZGVyVGV4dHVyZSDnmoTmt7HluqbnvJPlhrLku6Xlj4rmqKHmnb/nvJPlhrLmoLzlvI/jgIJcbiAqIEBlbnVtIFJlbmRlclRleHR1cmUuRGVwdGhTdGVuY2lsRm9ybWF0XG4gKi9cbmxldCBEZXB0aFN0ZW5jaWxGb3JtYXQgPSB7XG4gICAgLyoqXG4gICAgICogISNlbiAyNCBiaXQgZGVwdGggYnVmZmVyIGFuZCA4IGJpdCBzdGVuY2lsIGJ1ZmZlclxuICAgICAqICEjemggMjQg5L2N5rex5bqm57yT5Yay5ZKMIDgg5L2N5qih5p2/57yT5YayXG4gICAgICogQHByb3BlcnR5IFJCX0ZNVF9EMjRTOFxuICAgICAqIEByZWFkb25seVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgUkJfRk1UX0QyNFM4OiBnbHJlbmRlcl9idWZmZXJfZm9ybWF0LkQyNFM4LFxuICAgIC8qKlxuICAgICAqICEjZW4gT25seSA4IGJpdCBzdGVuY2lsIGJ1ZmZlclxuICAgICAqICEjemgg5Y+q55Sz6K+3IDgg5L2N5qih5p2/57yT5YayXG4gICAgICogQHByb3BlcnR5IFJCX0ZNVF9TOFxuICAgICAqIEByZWFkb25seVxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgUkJfRk1UX1M4OiBnbHJlbmRlcl9idWZmZXJfZm9ybWF0LlM4LFxuICAgIC8qKlxuICAgICAqICEjZW4gT25seSAxNiBiaXQgZGVwdGggYnVmZmVyXG4gICAgICogISN6aCDlj6rnlLPor7cgMTYg5L2N5rex5bqm57yT5YayXG4gICAgICogQHByb3BlcnR5IFJCX0ZNVF9EMTZcbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIFJCX0ZNVF9EMTY6IGdscmVuZGVyX2J1ZmZlcl9mb3JtYXQuRDE2XG59XG5cbi8qKlxuICogUmVuZGVyIHRleHR1cmVzIGFyZSB0ZXh0dXJlcyB0aGF0IGNhbiBiZSByZW5kZXJlZCB0by5cbiAqIEBjbGFzcyBSZW5kZXJUZXh0dXJlXG4gKiBAZXh0ZW5kcyBUZXh0dXJlMkRcbiAqL1xuZXhwb3J0IGNsYXNzIFJlbmRlclRleHR1cmUgZXh0ZW5kcyBUZXh0dXJlMkQge1xuXG4gICAgY29uc3RydWN0b3IoZ2wpIHtcbiAgICAgICAgc3VwZXIoZ2wpO1xuXG4gICAgICAgIHRoaXMuaW50RkJSdWZmZXJzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIF9mcmFtZUJ1ZmZlcjogYW55Oy8v5bin57yT5Yay55qEZ2xJRFxuICAgIHB1YmxpYyBfcmVuZGVyQnVmZmVyOiBhbnk7Ly/muLLmn5PnvJPlhrLnmoRnbElEXG4gICAgcHVibGljIGdsX3dpZHRoOiBudW1iZXI7XG4gICAgcHVibGljIGdsX2hlaWdodDogbnVtYmVyO1xuXG4gICAgcHVibGljIGludEZCUnVmZmVycygpIHtcbiAgICAgICAgdmFyIGdsID0gdGhpcy5fZ2w7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWwhueql+WPo+eahOWuvemrmOi1i+WAvOe7meW9k+WJjeeahOa4suafk+e8k+WGsuWMulxuICAgICAgICAgKiDlm6DkuLrlpoLmnpzmiJHku6zkuI3orr7nva7luKfnvJPlhrLnmoTor53vvIzlsY/luZXlsLHmmK/luKfnvJPlhrLnmoTmjIflkJFcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZ2xfd2lkdGggPSBnbC5jYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuZ2xfaGVpZ2h0ID1nbC5jYW52YXMuaGVpZ2h0O1xuICAgICAgICAvL+WIm+W7uuW4p+e8k+WGsuW5tue7keWumlxuICAgICAgICB0aGlzLl9mcmFtZUJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG4gICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5fZnJhbWVCdWZmZXIpO1xuXG4gICAgICAgIC8v5Yib5bu65riy5p+T57yT5Yay5bm257uR5a6a5Lul5Y+K5Yid5aeL5YyW5a2Y5YKoXG4gICAgICAgIHRoaXMuX3JlbmRlckJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuICAgICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgdGhpcy5fcmVuZGVyQnVmZmVyKTtcbiAgICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX0NPTVBPTkVOVDE2LCB0aGlzLmdsX3dpZHRoLCB0aGlzLmdsX2hlaWdodCk7XG5cbiAgICAgICAgLy/liJvlu7rnurnnkIZcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fZ2xJRCk7XG4gICAgICAgICAvLyBZIOi9tOWPluWPjVxuICAgICAgICB0aGlzLl9nbC5waXhlbFN0b3JlaSh0aGlzLl9nbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCBmYWxzZSk7XG5cbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuXG5cblxuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5SRVBFQVQpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5SRVBFQVQpO1xuXG4gICAgICAgXG5cbiAgICAgICAgLy/orr7nva7nurnnkIbmoLzlvI/vvIzkvZzkuLrluKfnvJPlhrLnmoTpopzoibLpmYTku7ZcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB0aGlzLmdsX3dpZHRoLCB0aGlzLmdsX2hlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG5cblxuICAgICAgICAvL+iuvue9ruS4iumdouWIm+W7uue6ueeQhuS9nOS4uuminOiJsumZhOS7tlxuICAgICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHRoaXMuX2dsSUQsIDApO1xuICAgICAgICAvL+iuvue9rua4suafk+e8k+WGsuWvueixoeS9nOS4uua3seW6pumZhOS7tlxuICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCB0aGlzLl9yZW5kZXJCdWZmZXIpO1xuXG4gICAgICAgIFxuXG5cbiAgICAgICAgLy8g5qOA5rWL5bin57yT5Yay5Yy65a+56LGh55qE6YWN572u54q25oCB5piv5ZCm5oiQ5YqfXG4gICAgICAgIHZhciBlID0gZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhnbC5GUkFNRUJVRkZFUik7XG4gICAgICAgIGlmIChnbC5GUkFNRUJVRkZFUl9DT01QTEVURSAhPT0gZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZyYW1lIGJ1ZmZlciBvYmplY3QgaXMgaW5jb21wbGV0ZTogJyArIGUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWIm+W7uuW4p+e8k+WtmOaIkOWKny0tLS0tLS0tLS1cIik7XG4gICAgICAgIH1cblxuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIG51bGwpO1xuXG4gICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcblxuICAgIH1cblxuXG5cblxuXG5cblxuXG4gICAgLy8gcHVibGljIF9mcmFtZWJ1ZmZlcjogRnJhbWVCdWZmZXI7XG4gICAgLy8gcHJpdmF0ZSBfZGVwdGhTdGVuY2lsQnVmZmVyOlJlbmRlckJ1ZmZlcjtcbiAgICAvLyBwcml2YXRlIF9wYWNrYWJsZTogYm9vbGVhbjtcbiAgICAvLyBwcml2YXRlIGxvYWRlZDogYm9vbGVhbjtcblxuICAgIC8vIHByaXZhdGUgX3RleHR1cmU6VGV4dHVyZTJEO1xuICAgIC8vIC8qKlxuICAgIC8vICAqICEjZW5cbiAgICAvLyAgKiBJbml0IHRoZSByZW5kZXIgdGV4dHVyZSB3aXRoIHNpemUuXG4gICAgLy8gICogISN6aFxuICAgIC8vICAqIOWIneWni+WMliByZW5kZXIgdGV4dHVyZSBcbiAgICAvLyAgKiBAcGFyYW0ge051bWJlcn0gW3dpZHRoXSBcbiAgICAvLyAgKiBAcGFyYW0ge051bWJlcn0gW2hlaWdodF1cbiAgICAvLyAgKiBAcGFyYW0ge051bWJlcn0gW2RlcHRoU3RlbmNpbEZvcm1hdF1cbiAgICAvLyAgKiBAbWV0aG9kIGluaXRXaXRoU2l6ZVxuICAgIC8vICAqL1xuICAgIC8vIGluaXRXaXRoU2l6ZSh3aWR0aCwgaGVpZ2h0LCBkZXB0aFN0ZW5jaWxGb3JtYXQpIHtcbiAgICAvLyAgICAgdGhpcy5fd2lkdGggPSBNYXRoLmZsb29yKHdpZHRoIHx8IDI1Nik7XG4gICAgLy8gICAgIHRoaXMuX2hlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0IHx8IDI1Nik7XG4gICAgLy8gICAgIHRoaXMuX3Jlc2V0VW5kZXJseWluZ01pcG1hcHMoKTtcblxuICAgIC8vICAgICBsZXQgb3B0cyA9IHtcbiAgICAvLyAgICAgICAgIGRlcHRoU3RlbmNpbDpudWxsLFxuICAgIC8vICAgICAgICAgc3RlbmNpbDpudWxsLFxuICAgIC8vICAgICAgICAgZGVwdGg6bnVsbCxcbiAgICAvLyAgICAgICAgIGNvbG9yczogW3RoaXMuX3RleHR1cmVdLFxuICAgIC8vICAgICB9O1xuXG4gICAgLy8gICAgIGlmICh0aGlzLl9kZXB0aFN0ZW5jaWxCdWZmZXIpIHRoaXMuX2RlcHRoU3RlbmNpbEJ1ZmZlci5kZXN0cm95KCk7XG4gICAgLy8gICAgIGxldCBkZXB0aFN0ZW5jaWxCdWZmZXI7XG4gICAgLy8gICAgIGlmIChkZXB0aFN0ZW5jaWxGb3JtYXQpIHtcbiAgICAvLyAgICAgICAgIGRlcHRoU3RlbmNpbEJ1ZmZlciA9IG5ldyBSZW5kZXJCdWZmZXIodGhpcy5fZ2wsIGRlcHRoU3RlbmNpbEZvcm1hdCwgd2lkdGgsIGhlaWdodCk7XG4gICAgLy8gICAgICAgICBpZiAoZGVwdGhTdGVuY2lsRm9ybWF0ID09PSBnbHJlbmRlcl9idWZmZXJfZm9ybWF0LkQyNFM4KSB7XG4gICAgLy8gICAgICAgICAgICAgb3B0cy5kZXB0aFN0ZW5jaWwgPSBkZXB0aFN0ZW5jaWxCdWZmZXI7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgICAgICBlbHNlIGlmIChkZXB0aFN0ZW5jaWxGb3JtYXQgPT09IGdscmVuZGVyX2J1ZmZlcl9mb3JtYXQuUzgpIHtcbiAgICAvLyAgICAgICAgICAgICBvcHRzLnN0ZW5jaWwgPSBkZXB0aFN0ZW5jaWxCdWZmZXI7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgICAgICBlbHNlIGlmIChkZXB0aFN0ZW5jaWxGb3JtYXQgPT09IGdscmVuZGVyX2J1ZmZlcl9mb3JtYXQuRDE2KSB7XG4gICAgLy8gICAgICAgICAgICAgb3B0cy5kZXB0aCA9IGRlcHRoU3RlbmNpbEJ1ZmZlcjtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgICB0aGlzLl9kZXB0aFN0ZW5jaWxCdWZmZXIgPSBkZXB0aFN0ZW5jaWxCdWZmZXI7XG4gICAgLy8gICAgIGlmICh0aGlzLl9mcmFtZWJ1ZmZlcikgdGhpcy5fZnJhbWVidWZmZXIuZGVzdHJveSgpO1xuICAgIC8vICAgICB0aGlzLl9mcmFtZWJ1ZmZlciA9IG5ldyBGcmFtZUJ1ZmZlcih0aGlzLl9nbCwgd2lkdGgsIGhlaWdodCwgb3B0cyk7XG5cbiAgICAvLyAgICAgdGhpcy5fcGFja2FibGUgPSBmYWxzZTtcblxuICAgIC8vICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgLy8gICAgIC8vIHRoaXMuZW1pdChcImxvYWRcIik7XG4gICAgLy8gfVxuXG4gICAgLy8gdXBkYXRlU2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gICAgIHRoaXMuX3dpZHRoID0gTWF0aC5mbG9vcih3aWR0aCB8fCAyNTYpO1xuICAgIC8vICAgICB0aGlzLl9oZWlnaHQgPSBNYXRoLmZsb29yKGhlaWdodCB8fCAyNTYpO1xuICAgIC8vICAgICB0aGlzLl9yZXNldFVuZGVybHlpbmdNaXBtYXBzKCk7XG5cbiAgICAvLyAgICAgbGV0IHJibyA9IHRoaXMuX2RlcHRoU3RlbmNpbEJ1ZmZlcjtcbiAgICAvLyAgICAgaWYgKHJibykgcmJvLnVwZGF0ZSh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcbiAgICAvLyAgICAgdGhpcy5fZnJhbWVidWZmZXIuX3dpZHRoID0gd2lkdGg7XG4gICAgLy8gICAgIHRoaXMuX2ZyYW1lYnVmZmVyLl9oZWlnaHQgPSBoZWlnaHQ7XG4gICAgLy8gfVxuXG4gICAgLy8gLyoqXG4gICAgLy8gICogISNlbiBEcmF3IGEgdGV4dHVyZSB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uXG4gICAgLy8gICogISN6aCDlsIbmjIflrprnmoTlm77niYfmuLLmn5PliLDmjIflrprnmoTkvY3nva7kuIpcbiAgICAvLyAgKiBAcGFyYW0ge1RleHR1cmUyRH0gdGV4dHVyZSBcbiAgICAvLyAgKiBAcGFyYW0ge051bWJlcn0geCBcbiAgICAvLyAgKiBAcGFyYW0ge051bWJlcn0geSBcbiAgICAvLyAgKi9cbiAgICAvLyBkcmF3VGV4dHVyZUF0KHRleHR1cmUsIHgsIHkpIHtcbiAgICAvLyAgICAgaWYgKCF0ZXh0dXJlLl9pbWFnZSB8fCB0ZXh0dXJlLl9pbWFnZS53aWR0aCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgLy8gICAgIC8vIHRoaXMuX3RleHR1cmUudXBkYXRlU3ViSW1hZ2Uoe1xuICAgIC8vICAgICAvLyAgICAgeCwgeSxcbiAgICAvLyAgICAgLy8gICAgIGltYWdlOiB0ZXh0dXJlLl9pbWFnZSxcbiAgICAvLyAgICAgLy8gICAgIHdpZHRoOiB0ZXh0dXJlLndpZHRoLFxuICAgIC8vICAgICAvLyAgICAgaGVpZ2h0OiB0ZXh0dXJlLmhlaWdodCxcbiAgICAvLyAgICAgLy8gICAgIGxldmVsOiAwLFxuICAgIC8vICAgICAvLyAgICAgZmxpcFk6IGZhbHNlLFxuICAgIC8vICAgICAvLyAgICAgcHJlbXVsdGlwbHlBbHBoYTogdGV4dHVyZS5fcHJlbXVsdGlwbHlBbHBoYVxuICAgIC8vICAgICAvLyB9KVxuICAgIC8vIH1cblxuICAgIC8vIC8qKlxuICAgIC8vICAqICEjZW5cbiAgICAvLyAgKiBHZXQgcGl4ZWxzIGZyb20gcmVuZGVyIHRleHR1cmUsIHRoZSBwaXhlbHMgZGF0YSBzdG9yZXMgaW4gYSBSR0JBIFVpbnQ4QXJyYXkuXG4gICAgLy8gICogSXQgd2lsbCByZXR1cm4gYSBuZXcgKHdpZHRoICogaGVpZ2h0ICogNCkgbGVuZ3RoIFVpbnQ4QXJyYXkgYnkgZGVmYXVsdOOAglxuICAgIC8vICAqIFlvdSBjYW4gc3BlY2lmeSBhIGRhdGEgdG8gc3RvcmUgdGhlIHBpeGVscyB0byByZXVzZSB0aGUgZGF0YSwgXG4gICAgLy8gICogeW91IGFuZCBjYW4gc3BlY2lmeSBvdGhlciBwYXJhbXMgdG8gc3BlY2lmeSB0aGUgdGV4dHVyZSByZWdpb24gdG8gcmVhZC5cbiAgICAvLyAgKiAhI3poXG4gICAgLy8gICog5LuOIHJlbmRlciB0ZXh0dXJlIOivu+WPluWDj+e0oOaVsOaNru+8jOaVsOaNruexu+Wei+S4uiBSR0JBIOagvOW8j+eahCBVaW50OEFycmF5IOaVsOe7hOOAglxuICAgIC8vICAqIOm7mOiupOavj+asoeiwg+eUqOatpOWHveaVsOS8mueUn+aIkOS4gOS4quWkp+Wwj+S4uiDvvIjplb8geCDpq5ggeCA077yJIOeahCBVaW50OEFycmF544CCXG4gICAgLy8gICog5L2g5Y+v5Lul6YCa6L+H5Lyg5YWlIGRhdGEg5p2l5o6l5pS25YOP57Sg5pWw5o2u77yM5Lmf5Y+v5Lul6YCa6L+H5Lyg5Y+C5p2l5oyH5a6a6ZyA6KaB6K+75Y+W55qE5Yy65Z+f55qE5YOP57Sg44CCXG4gICAgLy8gICogQG1ldGhvZCByZWFkUGl4ZWxzXG4gICAgLy8gICogQHBhcmFtIHtVaW50OEFycmF5fSBbZGF0YV1cbiAgICAvLyAgKiBAcGFyYW0ge051bWJlcn0gW3hdIFxuICAgIC8vICAqIEBwYXJhbSB7TnVtYmVyfSBbeV0gXG4gICAgLy8gICogQHBhcmFtIHtOdW1iZXJ9IFt3XSBcbiAgICAvLyAgKiBAcGFyYW0ge051bWJlcn0gW2hdIFxuICAgIC8vICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gICAgLy8gICovXG4gICAgLy8gcmVhZFBpeGVscyhkYXRhLCB4LCB5LCB3LCBoKSB7XG4gICAgLy8gICAgIGlmICghdGhpcy5fZnJhbWVidWZmZXIgfHwgIXRoaXMuX3RleHR1cmUpIHJldHVybiBkYXRhO1xuXG4gICAgLy8gICAgIHggPSB4IHx8IDA7XG4gICAgLy8gICAgIHkgPSB5IHx8IDA7XG4gICAgLy8gICAgIGxldCB3aWR0aCA9IHcgfHwgdGhpcy5fd2lkdGg7XG4gICAgLy8gICAgIGxldCBoZWlnaHQgPSBoIHx8IHRoaXMuX2hlaWdodFxuICAgIC8vICAgICBkYXRhID0gZGF0YSB8fCBuZXcgVWludDhBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpO1xuXG4gICAgLy8gICAgIGxldCBnbCA9IHRoaXMuX2dsO1xuICAgIC8vICAgICBsZXQgb2xkRkJPID0gZ2wuZ2V0UGFyYW1ldGVyKGdsLkZSQU1FQlVGRkVSX0JJTkRJTkcpO1xuICAgIC8vICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX2ZyYW1lYnVmZmVyLmdldEhhbmRsZSgpKTtcbiAgICAvLyAgICAgZ2wucmVhZFBpeGVscyh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhKTtcbiAgICAvLyAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBvbGRGQk8pO1xuXG4gICAgLy8gICAgIHJldHVybiBkYXRhO1xuICAgIC8vIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICAgICAgLy8gaWYgKHRoaXMuX2ZyYW1lYnVmZmVyKSB7XG4gICAgICAgIC8vICAgICB0aGlzLl9mcmFtZWJ1ZmZlci5kZXN0cm95KCk7XG4gICAgICAgIC8vICAgICB0aGlzLl9mcmFtZWJ1ZmZlciA9IG51bGw7XG4gICAgICAgIC8vIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9yZXNldFVuZGVybHlpbmdNaXBtYXBzKCk6IHZvaWQge1xuXG4gICAgfVxuXG5cbn1cblxuIiwiaW1wb3J0IFJlZiBmcm9tIFwiLi4vLi4vLi4vUmVmXCI7XG5pbXBvcnQgeyBnbE1hdHJpeCB9IGZyb20gXCIuLi8uLi9NYXRyaXhcIjtcblxuXG5leHBvcnQgY2xhc3MgTm9kZSBleHRlbmRzIFJlZiB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW5pdEJhc2VOb2RlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHg6IG51bWJlciA9IDA7XG4gICAgcHVibGljIHk6IG51bWJlciA9IDA7XG4gICAgcHVibGljIHo6IG51bWJlciA9IDA7XG5cbiAgICBwdWJsaWMgc2NhbGVYOiBudW1iZXIgPSAxO1xuICAgIHB1YmxpYyBzY2FsZVk6IG51bWJlciA9IDE7XG4gICAgcHVibGljIHNjYWxlWjogbnVtYmVyID0gMTtcblxuICAgIHB1YmxpYyByb3RhdGVYOiBudW1iZXIgPSAwO1xuICAgIHB1YmxpYyByb3RhdGVZOiBudW1iZXIgPSAwO1xuICAgIHB1YmxpYyByb3RhdGVaOiBudW1iZXIgPSAwO1xuXG4gICAgcHVibGljIHdpZHRoOiBudW1iZXIgPSAwOy8v5a695bqmXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyID0gMDsvL+mrmOW6plxuICAgIHB1YmxpYyBhbmNob3JYOiBudW1iZXIgPSAwLjU7Ly946L206ZSa54K5XG4gICAgcHVibGljIGFuY2hvclk6IG51bWJlciA9IDAuNTsvL3novbTplJrngrlcblxuICAgIHByb3RlY3RlZCBuYW1lOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIHRhZzogbnVtYmVyO1xuXG4gICAgcHJvdGVjdGVkIF9nbE1hdHJpeCA9IGdsTWF0cml4Oy8v55+p6Zi15pON5L2cYXBpXG4gICAgLyoqXG4gICAgICog5q2k5aSE5Yqh5b+F5rOo5oSPXG4gICAgICogbW9kZWxNYXRyaXjmmK/kuIDkuKrmqKHlnovkuJbnlYznn6npmLVcbiAgICAgKiB3b3JsZE1hdHJpeOaYr+eItuiKgueCueS8oOi/h+adpeeahOefqemYte+8jOWug+aYr+S4gOS4quihlOaOpeefqemYte+8jOecn+ato+i1t+S9nOeUqOeahG1vZGVsTWF0cml455+p6Zi1XG4gICAgICog5b2T5YmN6IqC54K55ZCE56eN5peL6L2s5bmz56e757yp5pS+6YO95Y+q6K6w5b2V5ZyobW9kZWxNYXRyaXjkuK3vvIzmnIDlkI5tb2RlbE1hdHJpeOWSjHdvcmxkTWF0cml455u45LmYLOWwseWPr+S7peW+l+WIsOS4gOS4quaooeWei+S4lueVjOefqemYte+8jOWGjei1i+e7mW1vZGVsTWF0cml4XG4gICAgICovXG4gICAgcHJvdGVjdGVkIF9tb2RlbE1hdHJpeDogRmxvYXQzMkFycmF5OyAvL+aooeWei+S4lueVjOefqemYtVxuICAgIHByb3RlY3RlZCBfd29ybGRNYXRyaXg6IEZsb2F0MzJBcnJheTsvL+eItuiKgueCueefqemYtVxuICAgIHByaXZhdGUgX3BhcmVudDogTm9kZTsvL+eItuS6slxuICAgIHByaXZhdGUgX2NoaWxkcmVuOiBBcnJheTxOb2RlPjsvL+WtqeWtkOiKgueCuVxuXG4gICAgcHJpdmF0ZSBpbml0QmFzZU5vZGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiZGVmYXVsdE5hbWVcIjtcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5fd29ybGRNYXRyaXggPSB0aGlzLl9nbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG51bGwpO1xuICAgICAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IHRoaXMuX2dsTWF0cml4Lm1hdDQuaWRlbnRpdHkobnVsbCk7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgcGFyZW50KG5vZGU6IE5vZGUpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gbm9kZTtcbiAgICB9XG4gICAgcHVibGljIGdldCBwYXJlbnQoKTogTm9kZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBub2RlIFxuICAgICAqL1xuICAgIHB1YmxpYyBhZGRDaGlsZChub2RlOiBOb2RlKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgIG5vZGUucGFyZW50ID0gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICog56e76Zmk5a2p5a2Q6IqC54K5XG4gICAgICogQHBhcmFtIG5vZGUgXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZUNoaWxkKG5vZGU6IE5vZGUpOiB2b2lkIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fY2hpbGRyZW4uaW5kZXhPZihub2RlKTtcbiAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICBub2RlLnBhcmVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy/mm7TmlrDkuJbnlYznn6npmLVcbiAgICBwcm90ZWN0ZWQgdXBkYXRlV29ybGRNYXRyaXgoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgICAgIC8v5LqM5aSE6LCD55SoXG4gICAgICAgICAgICB0aGlzLnNldEZhdGhlck1hdHJpeCh0aGlzLl9wYXJlbnQuZ2V0TW9kZWxWaWV3TWF0cml4KCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8v5ZCm5YiZ6L+Z5bCx5piv5Zy65pmv6IqC54K577yM5LiN6ZyA6KaB5Y+Y5o2iXG4gICAgfVxuICAgIC8v57uY5Yi25LmL5YmNXG4gICAgcHJvdGVjdGVkIG9uRHJhd0JlZm9yZSgpOiB2b2lkIHtcblxuICAgIH1cbiAgICBwcm90ZWN0ZWQgb25EcmF3QWZ0ZXIoKTogdm9pZCB7XG5cbiAgICB9XG4gICAgcHJpdmF0ZSBkcmF3QmVmb3JlKCk6IHZvaWQge1xuICAgICAgICAvL+abtOaWsOefqemYteaVsOaNrlxuXG4gICAgfVxuICAgIHByaXZhdGUgZHJhd0FmdGVyKCk6IHZvaWQge1xuXG4gICAgfVxuXG4gICAgLy/lvIDlkK/nu5jliLZcbiAgICBwdWJsaWMgcmVhZHlEcmF3KHRpbWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAvL+abtOaWsOS4lueVjOiKgueCuVxuICAgICAgICB0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCk7XG4gICAgICAgIC8v5pu05paw5b2T5YmN6IqC54K555qE55+p6Zi15pWw5o2uXG4gICAgICAgIHRoaXMudXBkYXRlTWF0cml4RGF0YSgpO1xuICAgICAgICAvL+W8gOWni+e7mOWItlxuICAgICAgICB0aGlzLmRyYXcodGltZSk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5fY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuW2pdLnJlYWR5RHJhdyh0aW1lKTtcbiAgICAgICAgfVxuXG4gICAgfVxuICAgIHByb3RlY3RlZCBkcmF3KHRpbWU6IG51bWJlcik6IHZvaWQge1xuXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBtdk1hdHJpeCDorr7nva7niLboioLngrnnn6npmLVcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RmF0aGVyTWF0cml4KG12TWF0cml4KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3dvcmxkTWF0cml4ID0gdGhpcy5tYXQ0Q2xvbmUkMyhtdk1hdHJpeCk7XG4gICAgfVxuICAgIC8qKlxuICAgICog5pu05pawMkTnn6npmLVcbiAgICAqIOWwhuatpOiKgueCueeahOaVsOaNruabtOaWsOWIsOi/meS4quefqemYteS4rVxuICAgICogXG4gICAgKiDkuJbnlYzlnZDmoIflj5jmjaLopoHlhYjnvKnmlL7jgIHlkI7ml4vovazjgIHlho3lubPnp7vnmoTljp/lm6BcbiAgICAqIFxuICAgICog57yp5pS+5Y+Y5o2i5LiN5pS55Y+Y5Z2Q5qCH6L2055qE6LWw5ZCR77yM5Lmf5LiN5pS55Y+Y5Y6f54K555qE5L2N572u77yM5omA5Lul5Lik5Liq5Z2Q5qCH57O75LuN54S26YeN5ZCI44CCIFxuICAgICAg5peL6L2s5Y+Y5o2i5pS55Y+Y5Z2Q5qCH6L2055qE6LWw5ZCR77yM5L2G5LiN5pS55Y+Y5Y6f54K555qE5L2N572u77yM5omA5Lul5Lik5Liq5Z2Q5qCH57O75Z2Q5qCH6L205LiN5YaN5aSE5LqO55u45ZCM6LWw5ZCR44CCIFxuICAgICAg5bmz56e75Y+Y5o2i5LiN5pS55Y+Y5Z2Q5qCH6L206LWw5ZCR77yM5L2G5pS55Y+Y5Y6f54K55L2N572u77yM5Lik5Liq5Z2Q5qCH57O75Y6f54K55LiN5YaN6YeN5ZCIXG4gICAgKi9cbiAgICBwcm90ZWN0ZWQgdXBkYXRlTWF0cml4RGF0YSgpOiB2b2lkIHtcbiAgICAgICAgLy/liJ3lp4vljJbmqKHlnovnn6npmLVcbiAgICAgICAgZ2xNYXRyaXgubWF0NC5pZGVudGl0eSh0aGlzLl9tb2RlbE1hdHJpeCk7XG4gICAgICAgIC8v5YWI57yp5pS+XG4gICAgICAgIHRoaXMubWF0NFNjYWxlJDModGhpcy5fbW9kZWxNYXRyaXgsIHRoaXMuX21vZGVsTWF0cml4LCBbdGhpcy5zY2FsZVgsIHRoaXMuc2NhbGVZLCB0aGlzLnNjYWxlWl0pO1xuICAgICAgICAvL+WGjeaXi+i9rFxuICAgICAgICB0aGlzLm1hdHJpeDRSb3RhdGVYKHRoaXMuX21vZGVsTWF0cml4LCB0aGlzLl9tb2RlbE1hdHJpeCwgdGhpcy5yb3RhdGVYICogKE1hdGguUEkgLyAxODApKTtcbiAgICAgICAgdGhpcy5tYXRyaXg0Um90YXRlWSh0aGlzLl9tb2RlbE1hdHJpeCwgdGhpcy5fbW9kZWxNYXRyaXgsIHRoaXMucm90YXRlWSAqIChNYXRoLlBJIC8gMTgwKSk7XG4gICAgICAgIHRoaXMubWF0cml4NFJvdGF0ZVoodGhpcy5fbW9kZWxNYXRyaXgsIHRoaXMuX21vZGVsTWF0cml4LCB0aGlzLnJvdGF0ZVogKiAoTWF0aC5QSSAvIDE4MCkpO1xuICAgICAgICAvL+acgOWQjuW5s+enu1xuICAgICAgICB0aGlzLm1hdDRUcmFuc2xhdGUkMih0aGlzLl9tb2RlbE1hdHJpeCwgdGhpcy5fbW9kZWxNYXRyaXgsIFt0aGlzLngsIHRoaXMueSwgdGhpcy56XSk7XG4gICAgICAgIGdsTWF0cml4Lm1hdDQubXVsdGlwbHkodGhpcy5fbW9kZWxNYXRyaXgsdGhpcy5fd29ybGRNYXRyaXgsdGhpcy5fbW9kZWxNYXRyaXgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDmqKHlnovkuJbnlYznn6npmLVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TW9kZWxWaWV3TWF0cml4KCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbE1hdHJpeDtcbiAgICB9XG4gICAgcHVibGljIHNldFBvc2l0aW9uKHgsIHksIHopOiB2b2lkIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICAgICAgdGhpcy56ID0gejtcbiAgICB9XG4gICAgcHVibGljIHNldFNjYWxlKHgsIHksIHopOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zY2FsZVggPSB4O1xuICAgICAgICB0aGlzLnNjYWxlWSA9IHk7XG4gICAgICAgIHRoaXMuc2NhbGVaID0gejtcbiAgICB9XG4gICAgcHVibGljIHNldFJvdGF0aW9uKHgsIHksIHopOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yb3RhdGVYID0geDtcbiAgICAgICAgdGhpcy5yb3RhdGVZID0geTtcbiAgICAgICAgdGhpcy5yb3RhdGVaID0gejtcbiAgICB9XG4gICAgcHVibGljIHJvdGF0ZSh4ID0gMCwgeSA9IDAsIHogPSAwKTogdm9pZCB7XG4gICAgICAgIHRoaXMucm90YXRlWCA9IHRoaXMucm90YXRlWCArIHg7XG4gICAgICAgIHRoaXMucm90YXRlWSA9IHRoaXMucm90YXRlWSArIHk7XG4gICAgICAgIHRoaXMucm90YXRlWiA9IHRoaXMucm90YXRlWiArIHo7XG4gICAgfVxuXG4gICAgLy/nn6npmLXov5DnrpctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFkgYXhpc1xuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAgICAgKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgbWF0cml4NFJvdGF0ZVkob3V0LCBhLCByYWQpIHtcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICAgICAgICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gICAgICAgIHZhciBhMDAgPSBhWzBdO1xuICAgICAgICB2YXIgYTAxID0gYVsxXTtcbiAgICAgICAgdmFyIGEwMiA9IGFbMl07XG4gICAgICAgIHZhciBhMDMgPSBhWzNdO1xuICAgICAgICB2YXIgYTIwID0gYVs4XTtcbiAgICAgICAgdmFyIGEyMSA9IGFbOV07XG4gICAgICAgIHZhciBhMjIgPSBhWzEwXTtcbiAgICAgICAgdmFyIGEyMyA9IGFbMTFdO1xuXG4gICAgICAgIGlmIChhICE9PSBvdXQpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIHJvd3NcbiAgICAgICAgICAgIG91dFs0XSA9IGFbNF07XG4gICAgICAgICAgICBvdXRbNV0gPSBhWzVdO1xuICAgICAgICAgICAgb3V0WzZdID0gYVs2XTtcbiAgICAgICAgICAgIG91dFs3XSA9IGFbN107XG4gICAgICAgICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICAgICAgICBvdXRbMTNdID0gYVsxM107XG4gICAgICAgICAgICBvdXRbMTRdID0gYVsxNF07XG4gICAgICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgICAgIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAg44CQMCAgNCAgOCAgIDEy44CRXG4gICAgICAgICAqICDjgJAxICA1ICA5ICAgMTPjgJFcbiAgICAgICAgICogIOOAkDIgIDYgIDEwICAxNOOAkVxuICAgICAgICAgKiAg44CQMyAgNyAgMTEgIDE144CRXG4gICAgICAgICAqICAgeOi9tCB56L20IHrovbQgXG4gICAgICAgICAqICDjgJAxICAwICAwICAgMOOAkVxuICAgICAgICAgKiAg44CQMCAgMSAgMCAgIDDjgJFcbiAgICAgICAgICogIOOAkDAgIDAgIDEgICAw44CRXG4gICAgICAgICAqICDjgJAwICAxICAwICAgMeOAkVxuICAgICAgICAgKi9cblxuICAgICAgICBvdXRbMF0gPSBhMDAgKiBjIC0gYTIwICogczsvL3jovbTnmoR45Z2Q5qCH5Zyo5LiW55WM5Z2Q5qCH57O75LiL55qE5oqV5b2xXG4gICAgICAgIG91dFsxXSA9IGEwMSAqIGMgLSBhMjEgKiBzOy8vXG4gICAgICAgIG91dFsyXSA9IGEwMiAqIGMgLSBhMjIgKiBzO1xuICAgICAgICBvdXRbM10gPSBhMDMgKiBjIC0gYTIzICogcztcbiAgICAgICAgb3V0WzhdID0gYTAwICogcyArIGEyMCAqIGM7XG4gICAgICAgIG91dFs5XSA9IGEwMSAqIHMgKyBhMjEgKiBjO1xuICAgICAgICBvdXRbMTBdID0gYTAyICogcyArIGEyMiAqIGM7XG4gICAgICAgIG91dFsxMV0gPSBhMDMgKiBzICsgYTIzICogYztcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gICAgICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gb3V0XG4gICAgICovXG4gICAgcHJvdGVjdGVkIG1hdHJpeDRSb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICAgICAgICB2YXIgYTEwID0gYVs0XTtcbiAgICAgICAgdmFyIGExMSA9IGFbNV07XG4gICAgICAgIHZhciBhMTIgPSBhWzZdO1xuICAgICAgICB2YXIgYTEzID0gYVs3XTtcbiAgICAgICAgdmFyIGEyMCA9IGFbOF07XG4gICAgICAgIHZhciBhMjEgPSBhWzldO1xuICAgICAgICB2YXIgYTIyID0gYVsxMF07XG4gICAgICAgIHZhciBhMjMgPSBhWzExXTtcblxuICAgICAgICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgICAgICAgICBvdXRbMF0gPSBhWzBdO1xuICAgICAgICAgICAgb3V0WzFdID0gYVsxXTtcbiAgICAgICAgICAgIG91dFsyXSA9IGFbMl07XG4gICAgICAgICAgICBvdXRbM10gPSBhWzNdO1xuICAgICAgICAgICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgICAgICAgICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgICAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgICAgICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gICAgICAgIG91dFs0XSA9IGExMCAqIGMgKyBhMjAgKiBzO1xuICAgICAgICBvdXRbNV0gPSBhMTEgKiBjICsgYTIxICogcztcbiAgICAgICAgb3V0WzZdID0gYTEyICogYyArIGEyMiAqIHM7XG4gICAgICAgIG91dFs3XSA9IGExMyAqIGMgKyBhMjMgKiBzO1xuICAgICAgICBvdXRbOF0gPSBhMjAgKiBjIC0gYTEwICogcztcbiAgICAgICAgb3V0WzldID0gYTIxICogYyAtIGExMSAqIHM7XG4gICAgICAgIG91dFsxMF0gPSBhMjIgKiBjIC0gYTEyICogcztcbiAgICAgICAgb3V0WzExXSA9IGEyMyAqIGMgLSBhMTMgKiBzO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXG4gICAgKlxuICAgICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcbiAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxuICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcbiAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAgICAqL1xuXG4gICAgcHJvdGVjdGVkIG1hdHJpeDRSb3RhdGVaKG91dCwgYSwgcmFkKSB7XG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgICAgICAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xuICAgICAgICB2YXIgYTAwID0gYVswXTtcbiAgICAgICAgdmFyIGEwMSA9IGFbMV07XG4gICAgICAgIHZhciBhMDIgPSBhWzJdO1xuICAgICAgICB2YXIgYTAzID0gYVszXTtcbiAgICAgICAgdmFyIGExMCA9IGFbNF07XG4gICAgICAgIHZhciBhMTEgPSBhWzVdO1xuICAgICAgICB2YXIgYTEyID0gYVs2XTtcbiAgICAgICAgdmFyIGExMyA9IGFbN107XG5cbiAgICAgICAgaWYgKGEgIT09IG91dCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICAgICAgICAgIG91dFs4XSA9IGFbOF07XG4gICAgICAgICAgICBvdXRbOV0gPSBhWzldO1xuICAgICAgICAgICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgICAgICAgICAgb3V0WzExXSA9IGFbMTFdO1xuICAgICAgICAgICAgb3V0WzEyXSA9IGFbMTJdO1xuICAgICAgICAgICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgICAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICAgICAgb3V0WzE1XSA9IGFbMTVdO1xuICAgICAgICB9IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuXG4gICAgICAgIG91dFswXSA9IGEwMCAqIGMgKyBhMTAgKiBzO1xuICAgICAgICBvdXRbMV0gPSBhMDEgKiBjICsgYTExICogcztcbiAgICAgICAgb3V0WzJdID0gYTAyICogYyArIGExMiAqIHM7XG4gICAgICAgIG91dFszXSA9IGEwMyAqIGMgKyBhMTMgKiBzO1xuICAgICAgICBvdXRbNF0gPSBhMTAgKiBjIC0gYTAwICogcztcbiAgICAgICAgb3V0WzVdID0gYTExICogYyAtIGEwMSAqIHM7XG4gICAgICAgIG91dFs2XSA9IGExMiAqIGMgLSBhMDIgKiBzO1xuICAgICAgICBvdXRbN10gPSBhMTMgKiBjIC0gYTAzICogcztcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIGEgbWF0NCBieSB0aGUgZ2l2ZW4gdmVjdG9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxuICAgICAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxuICAgICAqIEBwYXJhbSB7dmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XG4gICAgICogQHJldHVybnMge21hdDR9IG91dFxuICAgICAqL1xuICAgIHByb3RlY3RlZCBtYXQ0VHJhbnNsYXRlJDIob3V0LCBhLCB2KSB7XG4gICAgICAgIHZhciB4ID0gdlswXSxcbiAgICAgICAgICAgIHkgPSB2WzFdLFxuICAgICAgICAgICAgeiA9IHZbMl07XG4gICAgICAgIHZhciBhMDAsIGEwMSwgYTAyLCBhMDM7XG4gICAgICAgIHZhciBhMTAsIGExMSwgYTEyLCBhMTM7XG4gICAgICAgIHZhciBhMjAsIGEyMSwgYTIyLCBhMjM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICogIOOAkDAgIDQgIDggICAxMuOAkVxuICAgICAgICAqICDjgJAxICA1ICA5ICAgMTPjgJFcbiAgICAgICAgKiAg44CQMiAgNiAgMTAgIDE044CRXG4gICAgICAgICogIOOAkDMgIDcgIDExICAxNeOAkVxuICAgICAgICAqICAgeOi9tCB56L20IHrovbQgXG4gICAgICAgICogIOOAkDEgIDAgIDAgICAw44CRICBbeF1cbiAgICAgICAgKiAg44CQMCAgMSAgMCAgIDDjgJEgIFt5XVxuICAgICAgICAqICDjgJAwICAwICAxICAgMOOAkSAgW3pdXG4gICAgICAgICogIOOAkDAgIDEgIDAgICAx44CRXG4gICAgICAgICogICDop6PmnpBcbiAgICAgICAgKiAgIOS4lueVjOepuumXtOWdkOagh+ezu+WxnuS6juWPs+aJi+WdkOagh+ezu++8jOWPs+aJi+aJi+iDjOiDjOedgOWxj+W5le+8jOWkp+aLh+aMh+WQkeWPsyt4LOmjn+aMh+WQkeS4iit5LOS4reaMh+aMh+WQkeiHquW3sSt6XG4gICAgICAgICogICDkuIDkuKrlkJHph4/lj6/ku6XmnoTmiJDkuIDkuKrnur/vvIzkuKTkuKrlkJHph4/lj6/ku6XmnoTmiJDkuIDkuKrpnaLvvIzkuInkuKrlkJHph4/lj6/ku6XmnoTmiJDkuIDkuKrnqbrpl7RcbiAgICAgICAgKiAgIHjovbTlkJHph4/vvJrjgJAx77yMMO+8jDDjgJFcbiAgICAgICAgKiAgIHnovbTlkJHph4/vvJrjgJAw77yMMe+8jDDjgJFcbiAgICAgICAgKiAgIHrovbTlkJHph4/vvJrjgJAw77yMMO+8jDHjgJFcbiAgICAgICAgKiAgIFxuICAgICAgICAqICAg54m55Yir6KeE5a6aMe+8jOi/meS4ieS4quWdkOagh+i9tOmDveaYr+S4pOS4pOS6kuebuOWeguebtOeahFxuICAgICAgICAqICAg54m55Yir6KeE5a6aMu+8jOS4lueVjOepuumXtOWdkOagh+ezu+aYr+S7peS4gOS4quWPgueFp+eJqe+8jOaYr+S4jeWFgeiuuOWPkeeUn+S7u+S9leaUueWPmOeahO+8jOavlOWmguaXi+i9rCDnvKnmlL7vvIzlubPnp7tcbiAgICAgICAgKiAgIFxuICAgICAgICAqICAg56m66Ze05Z2Q5qCH57O755qE6ZW/5bqm5Y2V5L2N5bCx5piv44CQMe+8jDHvvIwx44CR77yM5LiJ5Liq6L205Lik5Lik5LqS55u45Z6C55u0XG4gICAgICAgICogICDov5nkuKrplb/luqbljZXkvY3lvojph43opoHvvIzkuI3lj6/ku6Xlv73op4bvvIzlroPlhbblrp7otbfliLDkuobkuIDkuKrnvKnmlL7nmoTkvZznlKjvvIzmiJHku6zlnKjlpJbnlYzkvJrmnInkuIDkuKrplb/luqbvvIzov5nkuKrplb/luqbmmKDlsITliLDnqbrpl7TlnZDmoIfns7vkuK3lsLHpnIDopoHlkozov5nkuKrljZXkvY3nm7jkuZhcbiAgICAgICAgKiAgIOS4vuS4quS+i+WtkO+8jOWvueS6juS4gOS4quWtmOWcqOS6juS4lueVjOepuumXtOWdkOagh+ezu+S4reeahOeCue+8jOaIkeS7rOWvueS6juWug+eahOWdkOagh+eahOWumuS5ieS4uu+8iHgxLHkxLHox77yJLOmCo+S7lueahOS9jee9rueptuern+WcqOWTquWRou+8jOeUseS6juWug+ebtOaOpeS9jeS6juS4lueVjOepuumXtOWdkOagh+ezu1xuICAgICAgICAqICAg57O75Lit77yM5omA5Lul5a6D55qE5Z2Q5qCH5L2N572u5bCx5piv77yIeDEseTEsejHvvIks5YW25a6e6L+Z5Liq57uT5p6c5piv5Z+65LqO5LiL6Z2i6L+Z5Liq6L+Q566X5pa55rOV77yaXG4gICAgICAgICogICDvvIh4MeWSjHjovbTlkJHph4/nm7jkuZjvvIx5MeWSjHnovbTlnZDmoIfnm7jkuZjvvIx6MeWSjHrovbTlkJHph4/nm7jkuZjvvInvvIzlj6rmmK/ku5bku6zmmK/ln7rkuo7ljp/ngrnvvIzlubbkuJTplb/luqbljZXkvY3kuLox77yM5omA5Lul57uT5p6c5bCx5piv77yIeDEseTEsejHvvIlcbiAgICAgICAgKiAgIOWFs+S6jui/meS4qiBcbiAgICAgICAgKiAgIOWvueS6juWunumZheeahOa4suafk+i/kOeul+S4re+8jOaIkeS7rOmAmuW4uOS8muaehOmAoOS4gOS4quefqemYteadpeWSjOS4lueVjOWdkOagh+ezu+ebuOWvueW6lO+8jOiZveeEtuS7luaYrzTnu7Tnn6npmLXvvIzkvYbmmK/ov5nlj6rmmK/mnoTpgKDlh7rmnaXnmoTogIzlt7LvvIzliY3pnaLkuInliJfmjIfnmoTmmK/lnZDmoIfovbTvvIxcbiAgICAgICAgKiAgIOWwseaYr+WSjOS4lueVjOepuumXtOWdkOagh+ezu+eahOmCo+S4quWdkOagh+i9tOS4gOagt+eahO+8jOWPquaYr+Wug+WFgeiuuOe8qeaUvu+8jOaXi+i9rO+8jOWSjOW5s+enu++8jOWQjumdoueahOS4gOWIl+WFtuWunuaYr+iusOW9lei/meS4quefqemYteeahOWdkOagh+ezu+eahOS9jee9rlxuICAgICAgICAqICAg5oiR5Lus6YCa5bi45Lya55So5LiA5Liq5pGE5YOP5py65p2l5bmy6L+Z5qC355qE5LqL5oOF77yM5pGE5YOP5py655qE5L2N572u77yIeCx5LHrvvIks5bCx5Y+v5Lul5p6E6YCg5Ye65p2l6L+Z5LmI5LiA5Liq5a+55bqU55qE55+p6Zi15Z2Q5qCH57O777yM5aaC5p6c5pGE5YOP5py655qE5L2N572u5Li644CQMO+8jDDvvIww44CR77yM6K+05piO6L+Z5Liq5pGE5YOP5py65p6E6YCg5Ye65p2lXG4gICAgICAgICogICDnmoTmkYTlg4/mnLrlnZDmoIfns7vkvY3kuo7kuJbnlYzlnZDmoIfns7vnmoTljp/ngrnvvIzlpoLmnpzmkYTlg4/mnLrlnZDmoIfns7vnmoTplb/luqbljZXkvY3mmK/jgJAx77yMMe+8jDHjgJHvvIzml4vovazjgJAw77yMMO+8jDDjgJHvvIzpgqPor7TmmI7ov5nkuKrmkYTlg4/mnLrmiYDmnoTpgKDnmoTnqbrpl7TlnZDmoIfns7vlsLHmmK/kuJbnlYznqbrpl7TlnZDmoIfns7tcbiAgICAgICAgKiAgIOeEtuiAjOS6i+WunuS4iuaIkeS7rOS4jeS8mui/meagt+WBmu+8jOaRhOWDj+acuuS9nOS4uuS4gOS4quiKgueCueWtmOWcqO+8jOWug+WPr+S7pei/m+ihjOS7u+S9leWPmOaNou+8jOi/memHjOeahOWPmOaNouaMh+eahOaYr+e8qeaUvu+8jOaXi+i9rO+8jOW5s+enu++8jOe8qeaUvuWPmOaNouS/ruaUueeahOaYr+avj+S4quWdkOagh+i9tOeahOmVv+W6puWNleS9jVxuICAgICAgICAqICAg5peL6L2s5Y+Y5o2i5L+u5pS555qE5piv5Z2Q5qCH6L205ZCR6YeP55qE77yIeCx5LHrvvInlgLzvvIzlubPnp7vlj5jmjaLkv67mlLnnmoTmmK/mlbTkuKroioLngrnnqbrpl7TlnZDmoIfns7vnmoTkvY3nva7vvIzpgqPkuYjmiJHku6zkuLrku4DkuYjkvJrmnoTpgKDkuIDkuKrlm5vnu7Tmlrnpkojnn6npmLXlkaLvvIzlsLHmmK/nlKjnrKzlm5vliJfmnaXlrZjmlL7lvZPliY3lnZDmoIfns7vnmoTkvY3nva7nlKjnmoRcbiAgICAgICAgKiAgICBcbiAgICAgICAgKiAgIOepuumXtOWdkOagh+ezu+aOqOa8lFxuICAgICAgICAqICAgXG4gICAgICAgICogICDkuJbnlYznqbrpl7TlnZDmoIfns7tcbiAgICAgICAgKiBcbiAgICAgICAgKiAgIOebuOacuu+8jOWug+S9nOS4uuS4gOS4quiKgueCueWtmOWcqOS6juS4lueVjOepuumXtOWdkOagh+ezu+S4re+8jOWug+S8muaehOmAoOS4gOS4quebuOacuueahOiKgueCueWdkOagh+ezu++8jOi/meS4quiKgueCueeahOS9jee9ruiusOW9leWcqOesrOWbm+WIl+WQkemHj+S4re+8jOWug+eahOWJjeS4ieWIl+iusOW9leeahOaYr+W9k+WJjeebuOacuuiKgueCueaYr+WmguS9leS/ruaUuei/meS4quiKgueCueWdkOagh+ezu+eahFxuICAgICAgICAqICAg5L+u5pS555qE6KGM5Li65YyF5ZCr5LqG57yp5pS+5ZKM5peL6L2s77yM5YW25a6e5bCx5piv5L+u5pS55LiJ5Liq5Z2Q5qCH6L2055qE5ZCR6YeP77yM5Yeh5piv5L2N5LqO6L+Z5Liq6IqC54K55Z2Q5qCH57O75LiL55qE6aG254K55LmY5Lul6L+Z5Liq55+p6Zi16YO95Y+v5Lul5b6X5Ye65p2l5LiW55WM56m66Ze05Z2Q5qCH57O75LiL55qE5L2N572uXG4gICAgICAgICogICBcbiAgICAgICAgKiAgICDlro/op4LkuIrnnIvvvIzkuIDkuKroioLngrnlnZDmoIfns7vvvIzkuI3ov4fmmK/lr7nkuJbnlYzlnZDmoIfns7vov5vooYzlj5jmjaJcbiAgICAgICAgKiBcbiAgICAgICAgKiAgICDlnKjnm7jmnLrnmoToioLngrnlnZDmoIfns7vkuK3vvIzlj4jljIXlkKvlvojlpJroioLngrnvvIzmr5TlpoLlnLrmma/oioLngrnvvIzlkIzmoLflnLrmma/kvZzkuLrkuIDkuKroioLngrnlrZjlnKjvvIzku5bkuZ/kvJrljrvmnoTpgKDkuIDkuKroioLngrnlnZDmoIfns7vvvIxcbiAgICAgICAgKiBcbiAgICAgICAgKiAgICDlnLrmma/kuK3kuZ/kvJrljIXlkKvlvojlpJroioLngrnvvIzmr4/kuKroioLngrnkuZ/kvJrljrvmnoTpgKDoh6rlt7HnmoToioLngrnlnZDmoIfns7tcbiAgICAgICAgKiBcbiAgICAgICAgKiAgICDoioLngrnmnKzouqvkuZ/mmK/lj6/ku6XljIXlkKvlvojlpJroioLngrnvvIzov5nkupvoioLngrnpg73mnInoh6rlt7HnmoToioLngrnlnZDmoIfns7tcbiAgICAgICAgKiBcbiAgICAgICAgKiAgICBcbiAgICAgICAgKiAgICDnm7jmnLrmmK/kuJbnlYzlnZDmoIfns7vnmoToioLngrnvvIzmiornm7jmnLrnnIvmiJDkuIDkuKrngrnvvIznlLHkuo7kuJbnlYzlnZDmoIfns7vkuI3kvJrnlJ/ku7vkvZXlj5jmjaLvvIzmiYDku6Xov5nkuKrngrnlsLHlpITlnKjkuJbnlYzlnZDmoIfns7vnqbrpl7TkuK1cbiAgICAgICAgKiAgICDkvYbmmK/nm7jmnLrkuI3mmK/lkIPphovnmoTvvIzku5bopoHnlJ/moLnlj5Hoir3vvIzmiYDku6XlroPkuZ/kvJrmnoTpgKDkuIDkuKrnqbrpl7TlnZDmoIfns7vlh7rmnaXvvIzov5nkuKrlnZDmoIfns7votbfliJ3lkozkuJbnlYzlnZDmoIfns7vmmK/lrozlhajlkLvlkIjnmoTvvIzkvYbnlLHkuo7nm7jmnLrlpKnnlJ/lpb3liqjvvIzlroPkvJrnvKnmlL7vvIzml4vovazvvIzlubPnp7tcbiAgICAgICAgKiAgICDov5nkvJrpgKDmiJDov5nkuKrnqbrpl7TlnZDmoIfns7vkuI3lkIzkuo7kuJbnlYzlnZDmoIfns7vvvIznm7jmnLrnmoTnqbrpl7TlnZDmoIfns7vph4zljIXlkKvkuoblvojlpJrngrnvvIzpgqPov5nkupvngrnlpoLmnpzmg7PovazmjaLkuLrkuJbnlYznqbrpl7TlnZDmoIfns7vkuIvvvIzlsLHpnIDopoHkuZjku6Xnm7jmnLrov5nkuKrnqbrpl7TlnZDmoIfns7tcbiAgICAgICAgKiBcbiAgICAgICAgKiAgICDlnLrmma/mmK/nm7jmnLrnqbrpl7TlnZDmoIfns7vkuIvnmoTkuIDkuKroioLngrnvvIzmiorlnLrmma/nnIvmiJDkuIDkuKrngrnvvIzlj6ropoHkuZjku6Xnm7jmnLrnmoTnqbrpl7TlnZDmoIfns7vlsLHlj6/ku6XovazmjaLliLDkuJbnlYzlnZDmoIfns7vkuIvnmoTngrlcbiAgICAgICAgKiAgICDkvYblnLrmma/kuZ/kuI3mmK/lkIPphovnmoTvvIzlroPkuZ/opoHnlJ/moLnlj5Hoir3vvIzmiYDku6XlroPkuZ/opoHpgKDkuIDkuKrnqbrpl7TlnZDmoIfns7vlh7rmnaXvvIzotbfliJ3ov5nkuKrlnZDmoIfns7vlkoznm7jmnLrlnZDmoIfns7vlrozlhajlkLvlkIjnmoTvvIzkvYbnlLHkuo7lnLrmma/lpKnnlJ/lpb3liqjvvIzlroPkuZ/kvJrnvKnmlL7vvIzml4vovazvvIzlubPnp7tcbiAgICAgICAgKiAgICDov5nkvJrpgKDmiJDov5nkuKrnqbrpl7TlnZDmoIfns7vkuI3lkIzkuI7nm7jmnLrnmoTlnZDmoIfns7vvvIzlnLrmma/nmoTnqbrpl7TlnZDmoIfns7vph4zljIXlkKvkuoblvojlpJrngrnvvIzpgqPov5nkupvngrnlpoLmnpzopoHmg7PovazmjaLkuLrnm7jmnLrnqbrpl7TlnZDmoIfkuIvnmoTngrnvvIzlsLHpnIDopoHkuZjku6XlnLrmma/ov5nkuKrnqbrpl7TlnZDmoIfns7tcbiAgICAgICAgKiBcbiAgICAgICAgKiAgICDoioLngrnmmK/lnLrmma/nqbrpl7TlnZDmoIfns7vkuIvnmoTkuIDkuKroioLngrnvvIzmioroioLngrnnnIvmiJDkuIDkuKrngrnvvIzlj6ropoHkuZjku6XlnLrmma/nmoTnqbrpl7TlnZDmoIfns7vlsLHlj6/ku6XovazmjaLliLDnm7jmnLrnmoTlnZDmoIfns7vkuIvnmoTngrlcbiAgICAgICAgKiAgICDkvYboioLngrnkuZ/kuI3mmK/lkIPphovnmoTvvIzlroPkuZ/opoHnlJ/moLnlj5Hoir3vvIzmiYDku6XlroPkuZ/opoHpgKDkuIDkuKroioLngrnlnZDmoIfns7vvvIzotbfliJ3ov5nkuKroioLngrnlnZDmoIfns7vlkozlnLrmma/nmoToioLngrnlnZDmoIfns7vlrozlhajlkLvlkIjnmoTvvIzkvYbnlLHkuo7ov5nkuKroioLngrnlpKnnlJ/lpb3liqjvvIzlroPkuZ/kvJrnvKnmlL7vvIzml4vovazvvIzlubPnp7tcbiAgICAgICAgKiAgICDov5nkvJrpgKDmiJDov5nkuKroioLngrnlnZDmoIfns7vkuI3lkIzkuo7lnLrmma/nmoTnqbrpl7TlnZDmoIfns7vvvIzlr7nkuo7oioLngrnkuK3nmoTngrnvvIzlpoLmnpzlroPopoHmg7Plj5jkuLrlnLrmma/nqbrpl7TlnZDmoIfns7vkuIvnmoTngrnvvIzlsLHpnIDopoHkuZjku6Xov5nkuKroioLngrnlnZDmoIfns7tcbiAgICAgICAgKiBcbiAgICAgICAgKiAgICDjgILjgILjgILmjqXkuIvmnaXlsLHmmK/oioLngrnnmoTlkITnp43nu6fmib/kuoZcbiAgICAgICAgKiAgICBcbiAgICAgICAgKiAgICDlr7nkuo7ml4vovazlkoznvKnmlL7vvIzmiJHku6zliLblrprkuobkuIDkuKrliY3kuInliJflkJHph4/liIbliKvnlKjmnaXorrDlvZXvvIzlvZPliY3oioLngrnlr7nkuo7lroPmnoTpgKDnmoTnqbrpl7TlnZDmoIfns7vnmoTlj5jmjaLvvIzlhbblrp7ov5nkuKrliY3kuInliJflkJHph4/lsLHmmK/mjIfnmoTmmK946L2077yMeei9tO+8jHrovbRcbiAgICAgICAgKiAgICDlr7nkuo7nrKzlm5vliJfvvIzmiJHku6znlKjmnaXkv53lrZjlvZPliY3oioLngrnlsIboh6rlt7HnmoTnqbrpl7TlnZDmoIfns7vlubPnp7vlj5jmjaLnmoTkvY3nva5cbiAgICAgICAgKi9cblxuICAgICAgICBpZiAoYSA9PT0gb3V0KSB7XG4gICAgICAgICAgICBvdXRbMTJdID0gYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl07XG4gICAgICAgICAgICBvdXRbMTNdID0gYVsxXSAqIHggKyBhWzVdICogeSArIGFbOV0gKiB6ICsgYVsxM107XG4gICAgICAgICAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgICAgICAgICAgb3V0WzE1XSA9IGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGEwMCA9IGFbMF07XG4gICAgICAgICAgICBhMDEgPSBhWzFdO1xuICAgICAgICAgICAgYTAyID0gYVsyXTtcbiAgICAgICAgICAgIGEwMyA9IGFbM107XG4gICAgICAgICAgICBhMTAgPSBhWzRdO1xuICAgICAgICAgICAgYTExID0gYVs1XTtcbiAgICAgICAgICAgIGExMiA9IGFbNl07XG4gICAgICAgICAgICBhMTMgPSBhWzddO1xuICAgICAgICAgICAgYTIwID0gYVs4XTtcbiAgICAgICAgICAgIGEyMSA9IGFbOV07XG4gICAgICAgICAgICBhMjIgPSBhWzEwXTtcbiAgICAgICAgICAgIGEyMyA9IGFbMTFdO1xuICAgICAgICAgICAgb3V0WzBdID0gYTAwO1xuICAgICAgICAgICAgb3V0WzFdID0gYTAxO1xuICAgICAgICAgICAgb3V0WzJdID0gYTAyO1xuICAgICAgICAgICAgb3V0WzNdID0gYTAzO1xuICAgICAgICAgICAgb3V0WzRdID0gYTEwO1xuICAgICAgICAgICAgb3V0WzVdID0gYTExO1xuICAgICAgICAgICAgb3V0WzZdID0gYTEyO1xuICAgICAgICAgICAgb3V0WzddID0gYTEzO1xuICAgICAgICAgICAgb3V0WzhdID0gYTIwO1xuICAgICAgICAgICAgb3V0WzldID0gYTIxO1xuICAgICAgICAgICAgb3V0WzEwXSA9IGEyMjtcbiAgICAgICAgICAgIG91dFsxMV0gPSBhMjM7XG4gICAgICAgICAgICBvdXRbMTJdID0gYTAwICogeCArIGExMCAqIHkgKyBhMjAgKiB6ICsgYVsxMl07XG4gICAgICAgICAgICBvdXRbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgYVsxM107XG4gICAgICAgICAgICBvdXRbMTRdID0gYTAyICogeCArIGExMiAqIHkgKyBhMjIgKiB6ICsgYVsxNF07XG4gICAgICAgICAgICBvdXRbMTVdID0gYTAzICogeCArIGExMyAqIHkgKyBhMjMgKiB6ICsgYVsxNV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgdGhlIG1hdDQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzMgbm90IHVzaW5nIHZlY3Rvcml6YXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XG4gICAgICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHYgdGhlIHZlYzMgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBvdXRcbiAgICAgKiovXG5cbiAgICBwcm90ZWN0ZWQgbWF0NFNjYWxlJDMob3V0LCBhLCB2KSB7XG4gICAgICAgIHZhciB4ID0gdlswXSxcbiAgICAgICAgICAgIHkgPSB2WzFdLFxuICAgICAgICAgICAgeiA9IHZbMl07XG4gICAgICAgIG91dFswXSA9IGFbMF0gKiB4O1xuICAgICAgICBvdXRbMV0gPSBhWzFdICogeDtcbiAgICAgICAgb3V0WzJdID0gYVsyXSAqIHg7XG4gICAgICAgIG91dFszXSA9IGFbM10gKiB4O1xuICAgICAgICBvdXRbNF0gPSBhWzRdICogeTtcbiAgICAgICAgb3V0WzVdID0gYVs1XSAqIHk7XG4gICAgICAgIG91dFs2XSA9IGFbNl0gKiB5O1xuICAgICAgICBvdXRbN10gPSBhWzddICogeTtcbiAgICAgICAgb3V0WzhdID0gYVs4XSAqIHo7XG4gICAgICAgIG91dFs5XSA9IGFbOV0gKiB6O1xuICAgICAgICBvdXRbMTBdID0gYVsxMF0gKiB6O1xuICAgICAgICBvdXRbMTFdID0gYVsxMV0gKiB6O1xuICAgICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBDcmVhdGVzIGEgbmV3IG1hdDQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcbiAgICAqXG4gICAgKiBAcGFyYW0ge21hdDR9IGEgbWF0cml4IHRvIGNsb25lXG4gICAgKiBAcmV0dXJucyB7bWF0NH0gYSBuZXcgNHg0IG1hdHJpeFxuICAgICovXG5cbiAgICBwcm90ZWN0ZWQgbWF0NENsb25lJDMoYSkge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XG4gICAgICAgIG91dFswXSA9IGFbMF07XG4gICAgICAgIG91dFsxXSA9IGFbMV07XG4gICAgICAgIG91dFsyXSA9IGFbMl07XG4gICAgICAgIG91dFszXSA9IGFbM107XG4gICAgICAgIG91dFs0XSA9IGFbNF07XG4gICAgICAgIG91dFs1XSA9IGFbNV07XG4gICAgICAgIG91dFs2XSA9IGFbNl07XG4gICAgICAgIG91dFs3XSA9IGFbN107XG4gICAgICAgIG91dFs4XSA9IGFbOF07XG4gICAgICAgIG91dFs5XSA9IGFbOV07XG4gICAgICAgIG91dFsxMF0gPSBhWzEwXTtcbiAgICAgICAgb3V0WzExXSA9IGFbMTFdO1xuICAgICAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgICAgIG91dFsxM10gPSBhWzEzXTtcbiAgICAgICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgICAgICBvdXRbMTVdID0gYVsxNV07XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG5cblxuXG5cbn1cblxuIiwiaW1wb3J0IHsgVm9pZEV4cHJlc3Npb24gfSBmcm9tIFwidHlwZXNjcmlwdFwiO1xyXG5pbXBvcnQgeyBnbE1hdHJpeCB9IGZyb20gXCIuLi8uLi9NYXRyaXhcIjtcclxuaW1wb3J0IHsgZ2xwcmltaXRpdmVfdHlwZSB9IGZyb20gXCIuLi9nZngvR0xFbnVtc1wiO1xyXG5pbXBvcnQgeyBTaGFkZXIsIFNoYWRlckRhdGEgfSBmcm9tIFwiLi4vc2hhZGVyL1NoYWRlclwiO1xyXG5cclxuXHJcbmxldCByZW5kZXJEYXRhSWQ6bnVtYmVyID0gMDtcclxuZXhwb3J0IGVudW0gUmVuZGVyRGF0YVR5cGV7XHJcbiAgICBCYXNlID0gMSxcclxuICAgIFNwaW5lXHJcbn1cclxuLyoqXHJcbiAqIOWumuS5iea4suafk+aVsOaNrlxyXG4gKi9cclxuZXhwb3J0ICBjbGFzcyBSZW5kZXJEYXRhe1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLmlkID0gcmVuZGVyRGF0YUlkKys7XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIF90eXBlOlJlbmRlckRhdGFUeXBlID0gUmVuZGVyRGF0YVR5cGUuQmFzZTtcclxuICAgIHB1YmxpYyBpZDpudW1iZXI7Ly/mr4/kuIDkuKrmuLLmn5PmlbDmja7pg73kuIDkuKrllK/kuIDnmoRpZFxyXG4gICAgcHVibGljIF9jYW1lcmFUeXBlOm51bWJlcjsvL+ebuOacuueahOexu+Wei1xyXG4gICAgcHVibGljIF9zaGFkZXI6U2hhZGVyOy8v552A6Imy5ZmoXHJcbiAgICBwdWJsaWMgX3ZlcnRHTElEOldlYkdMQnVmZmVyOy8v6aG254K5YnVmZmVy55qE5pi+5a2Y5Zyw5Z2AXHJcbiAgICBwdWJsaWMgX3ZlcnRJdGVtU2l6ZTpudW1iZXI7Ly/kuIDkuKrpobbngrlidWZmZXLljZXlhYPnmoTpobbngrnmlbDnm65cclxuICAgIHB1YmxpYyBfdmVydEl0ZW1OdW1zOm51bWJlcjsvL+aJgOaciemhtueCuWJ1ZmZlcuWNleWFg+eahOaVsOebrlxyXG4gICAgcHVibGljIF9pbmRleEdMSUQ6V2ViR0xCdWZmZXI7Ly/ntKLlvJVidWZmZXLnmoTmmL7lrZjlnLDlnYBcclxuICAgIHB1YmxpYyBfaW5kZXhJdGVtU2l6ZTpudW1iZXI7Ly/kuIDkuKrntKLlvJVidWZmZXLljZXlhYPnmoTpobbngrnmlbDnm65cclxuICAgIHB1YmxpYyBfaW5kZXhJdGVtTnVtczpudW1iZXI7Ly/miYDmnInntKLlvJVidWZmZXLljZXlhYPnmoTmlbDnm65cclxuICAgIHB1YmxpYyBfdXZHTElEOldlYkdMQnVmZmVyOy8vdXYgYnVmZmVy55qE5pi+5a2Y5Zyw5Z2AXHJcbiAgICBwdWJsaWMgX3V2SXRlbVNpemU6bnVtYmVyOy8v5LiA5LiqdXYgYnVmZmVy5Y2V5YWD55qE6aG254K55pWw55uuXHJcbiAgICBwdWJsaWMgX25vcm1hbEdMSUQ6V2ViR0xCdWZmZXI7Ly/ms5Xnur9idWZmZXLnmoTmmL7lrZjlnLDlnYBcclxuICAgIHB1YmxpYyBfbm9ybWFsSXRlbVNpemU6bnVtYmVyOy8v5LiA5Liq5rOV57q/YnVmZmVy5Y2V5YWD55qE6aG254K55pWw55uuXHJcbiAgICBwdWJsaWMgX2xpZ2h0Q29sb3I6QXJyYXk8bnVtYmVyPjsvL+WFieeahOminOiJslxyXG4gICAgcHVibGljIF9saWdodERpcmVjdGlvbjpBcnJheTxudW1iZXI+Oy8v5YWJ55qE5pa55ZCRXHJcbiAgICBwdWJsaWMgX3RleHR1cmVHTElEQXJyYXk6QXJyYXk8V2ViR0xUZXh0dXJlPjtcclxuICAgIHB1YmxpYyBfZ2xQcmltaXRpdmVUeXBlOiBnbHByaW1pdGl2ZV90eXBlOy8v57uY5Yi255qE57G75Z6LXHJcbiAgICBwdWJsaWMgX21vZGVsTWF0cml4OkZsb2F0MzJBcnJheTsvL+aooeWei+efqemYtVxyXG4gICAgcHVibGljIF91X3B2bV9tYXRyaXhfaW52ZXJzZTpGbG9hdDMyQXJyYXk7Ly9cclxuICAgIHB1YmxpYyBfdGltZTpudW1iZXI7XHJcbiAgICBwdWJsaWMgX2lzVXNlOmJvb2xlYW4gPSBmYWxzZTsvL+S9v+eUqOeKtuaAgVxyXG4gICAgcHVibGljIHJlc2V0KCk6dm9pZHtcclxuICAgICAgICB0aGlzLl9jYW1lcmFUeXBlID0gMDsvL+m7mOiupOaDheWGteS4i+aYr+mAj+inhuaKleW9sVxyXG4gICAgICAgIHRoaXMuX3NoYWRlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fdmVydEdMSUQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3ZlcnRJdGVtU2l6ZSA9IC0xO1xyXG4gICAgICAgIHRoaXMuX2luZGV4R0xJRCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faW5kZXhJdGVtU2l6ZSA9IC0xO1xyXG4gICAgICAgIHRoaXMuX3V2R0xJRCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fdXZJdGVtU2l6ZSA9IC0xO1xyXG4gICAgICAgIHRoaXMuX25vcm1hbEdMSUQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX25vcm1hbEl0ZW1TaXplID0gLTE7XHJcbiAgICAgICAgdGhpcy5fbGlnaHRDb2xvciA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2xpZ2h0RGlyZWN0aW9uID0gW107XHJcbiAgICAgICAgdGhpcy5fdGV4dHVyZUdMSURBcnJheSA9IFtdO1xyXG4gICAgICAgIHRoaXMuX21vZGVsTWF0cml4ID0gIG51bGw7XHJcbiAgICAgICAgdGhpcy5fdV9wdm1fbWF0cml4X2ludmVyc2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3RpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuX2dsUHJpbWl0aXZlVHlwZSA9IGdscHJpbWl0aXZlX3R5cGUuVFJJQU5HTEVfRkFOO1xyXG4gICAgICAgIHRoaXMuX2lzVXNlID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTcGluZVJlbmRlckRhdGEgZXh0ZW5kcyBSZW5kZXJEYXRhe1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX2V4dHJhVmlld0xlZnRNYXRyaXggPSBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG51bGwpO1xyXG4gICAgICAgIHRoaXMuX3RlbXBNYXRyaXgxID0gZ2xNYXRyaXgubWF0NC5pZGVudGl0eShudWxsKTtcclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVzZXQoKXtcclxuICAgICAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMuX3VuaWZvcm1JbmZvcnMgPSBbXTtcclxuICAgICAgICB0aGlzLl9zaGFkZXJEYXRhID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9hdHRyYnVmZmVySW5mbyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fcHJvaktleSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5fdmlld0tleSA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5fdHlwZSA9IFJlbmRlckRhdGFUeXBlLlNwaW5lO1xyXG4gICAgICAgIHRoaXMuX2dsUHJpbWl0aXZlVHlwZSA9IGdscHJpbWl0aXZlX3R5cGUuVFJJQU5HTEVTO1xyXG4gICAgICAgIGdsTWF0cml4Lm1hdDQuaWRlbnRpdHkodGhpcy5fZXh0cmFWaWV3TGVmdE1hdHJpeCk7XHJcbiAgICAgICAgZ2xNYXRyaXgubWF0NC5pZGVudGl0eSh0aGlzLl90ZW1wTWF0cml4MSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgX3NoYWRlckRhdGE6U2hhZGVyRGF0YTtcclxuICAgIHB1YmxpYyBfYXR0cmJ1ZmZlckluZm86YW55O1xyXG4gICAgcHVibGljIF91bmlmb3JtSW5mb3JzOkFycmF5PGFueT47XHJcbiAgICBwdWJsaWMgX2V4dHJhVmlld0xlZnRNYXRyaXg6RmxvYXQzMkFycmF5O1xyXG4gICAgcHVibGljIF90ZW1wTWF0cml4MTpGbG9hdDMyQXJyYXk7XHJcbiAgICBwdWJsaWMgX3Byb2pLZXk6c3RyaW5nO1xyXG4gICAgcHVibGljIF92aWV3S2V5OnN0cmluZztcclxufVxyXG5cclxuLyoqXHJcbiAqIOa4suafk+aVsOaNrue8k+WtmOaxoFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFJlbmRlckRhdGFQb29se1xyXG4gICAgIHByaXZhdGUgc3RhdGljIF9wb29sOkFycmF5PFJlbmRlckRhdGE+ID0gW107XHJcbiAgICAgc3RhdGljIGdldCh0eXBlOlJlbmRlckRhdGFUeXBlKTpSZW5kZXJEYXRhe1xyXG4gICAgICAgICAgICBsZXQgcG9vbCA9IFJlbmRlckRhdGFQb29sLl9wb29sO1xyXG4gICAgICAgICAgICBsZXQgcmV0SXRlbTpSZW5kZXJEYXRhO1xyXG4gICAgICAgICAgICBmb3IodmFyIGogPSAwO2o8cG9vbC5sZW5ndGg7aisrKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IHBvb2xbal07XHJcbiAgICAgICAgICAgICAgICBpZihpdGVtLl90eXBlPT10eXBlJiZpdGVtLl9pc1VzZT09ZmFsc2UpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0SXRlbSA9ICBpdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzd2l0Y2godHlwZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBSZW5kZXJEYXRhVHlwZS5CYXNlOnJldEl0ZW0gPSBuZXcgUmVuZGVyRGF0YSgpO3Bvb2wucHVzaChyZXRJdGVtKTticmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgUmVuZGVyRGF0YVR5cGUuU3BpbmU6cmV0SXRlbSA9IG5ldyBTcGluZVJlbmRlckRhdGEoKTtwb29sLnB1c2gocmV0SXRlbSk7YnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0SXRlbS5faXNVc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0SXRlbTtcclxuICAgICB9XHJcbiAgICAgc3RhdGljIHJldHVybihyZXREYXRhOlJlbmRlckRhdGF8QXJyYXk8UmVuZGVyRGF0YT4pOnZvaWR7XHJcbiAgICAgICAgICBpZihyZXREYXRhIGluc3RhbmNlb2YgQXJyYXkpXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgbGV0IGFyciA9IHJldERhdGEgYXMgQXJyYXk8UmVuZGVyRGF0YT47XHJcbiAgICAgICAgICAgICAgZm9yKGxldCBqID0gMDtqPGFyci5sZW5ndGg7aisrKVxyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgYXJyW2pdLnJlc2V0KCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAgIChyZXREYXRhIGFzIFJlbmRlckRhdGEpLnJlc2V0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgfVxyXG59IiwiaW1wb3J0IHsgU1kgfSBmcm9tIFwiLi9TcHJpdGVcIjtcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gXCIuL05vZGVcIjtcclxuXHJcbi8qKlxyXG4gKiDlnLrmma/nmoTmoLnoioLngrlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5lIGV4dGVuZHMgTm9kZXtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi9Ob2RlXCI7XG5pbXBvcnQgU2NlbmUgZnJvbSBcIi4vU2NlbmVcIjtcbmltcG9ydCBPcnRob0NhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL09ydGhvQ2FtZXJhXCI7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vMmQvUmVjdGFuZ2xlXCI7XG5pbXBvcnQgRGV2aWNlIGZyb20gXCIuLi8uLi8uLi9EZXZpY2VcIjtcbmltcG9ydCB7IExhYmVsIH0gZnJvbSBcIi4uLzJkL0xhYmVsXCI7XG5pbXBvcnQgeyBSZW5kZXJTcHJpdGUgfSBmcm9tIFwiLi4vMmQvUmVuZGVyU3ByaXRlXCI7XG5pbXBvcnQgRmlyc3RTcHJpdGUgZnJvbSBcIi4uLzJkL0ZpcnN0U3ByaXRlXCI7XG5pbXBvcnQgVHdvU3ByaXRlIGZyb20gXCIuLi8yZC9Ud29TcHJpdGVcIjtcbmltcG9ydCBHYW1lTWFpbkNhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0dhbWVNYWluQ2FtZXJhXCI7XG5pbXBvcnQgZW51bXMgZnJvbSBcIi4uL2NhbWVyYS9lbnVtc1wiO1xuaW1wb3J0IHsgUmVuZGVyVGV4dHVyZSB9IGZyb20gXCIuLi9hc3NldHMvUmVuZGVyVGV4dHVyZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2VuZTJEIGV4dGVuZHMgU2NlbmUge1xuICAgIFxuICAgIHByaXZhdGUgXzJkQ2FtZXJhOiBPcnRob0NhbWVyYTtcbiAgICBwcml2YXRlIF9yZWN0YW5nbGU6UmVjdGFuZ2xlO1xuICAgIHByaXZhdGUgX2ZpcnN0U3ByaXRlOkZpcnN0U3ByaXRlO1xuICAgIHByaXZhdGUgX3R3b1Nwcml0ZTpUd29TcHJpdGU7XG4gICAgcHJpdmF0ZSBfbGFiZWw6TGFiZWw7XG4gICAgcHJpdmF0ZSBfcmVuZGVyU3ByaXRlOlJlbmRlclNwcml0ZTtcbiAgICBcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0KCk6IHZvaWQge1xuXG4gICAgICAgIHZhciBnbCA9IERldmljZS5JbnN0YW5jZS5nbDtcbiAgICAgICAgdGhpcy5fMmRDYW1lcmEgID0gR2FtZU1haW5DYW1lcmEuaW5zdGFuY2Uuc2V0Q2FtZXJhKGVudW1zLlBST0pfT1JUSE8sZ2wuY2FudmFzLndpZHRoL2dsLmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLl8yZENhbWVyYS5sb29rQXQoWzAsIDAsIDBdKTtcbiAgICAgICAgdGhpcy5zZXRGYXRoZXJNYXRyaXgodGhpcy5fMmRDYW1lcmEuZ2V0TW9kZWxWaWV3TWF0cml4KCkpO1xuXG4gICAgICAgIC8vIHRoaXMuX3JlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoZ2wpO1xuICAgICAgICAvLyB0aGlzLl9yZWN0YW5nbGUuc2V0UG9zaXRpb24oMC41LCAwLCAwKTtcbiAgICAgICAgLy8gdGhpcy5fcmVjdGFuZ2xlLnVybCA9IFwicmVzL3RyZWUuanBnXCI7XG4gICAgICAgIC8vIHRoaXMuYWRkQ2hpbGQodGhpcy5fcmVjdGFuZ2xlKTtcblxuICAgICAgICAvLyB0aGlzLl9maXJzdFNwcml0ZSA9IG5ldyBGaXJzdFNwcml0ZShnbCk7XG4gICAgICAgIC8vIHRoaXMuX2ZpcnN0U3ByaXRlLnNldFBvc2l0aW9uKDAsMSwwKTtcbiAgICAgICAgLy8gdGhpcy5hZGRDaGlsZCh0aGlzLl9maXJzdFNwcml0ZSk7XG5cbiAgICAgICAgLy8gdGhpcy5fdHdvU3ByaXRlID0gbmV3IFR3b1Nwcml0ZShnbCk7XG4gICAgICAgIC8vIHRoaXMuX3R3b1Nwcml0ZS5zZXRTY2FsZSgwLjIsMC4yLDAuMik7XG4gICAgICAgIC8vIHRoaXMuYWRkQ2hpbGQodGhpcy5fdHdvU3ByaXRlKTtcblxuICAgICAgICB0aGlzLl9yZW5kZXJTcHJpdGUgPSBuZXcgUmVuZGVyU3ByaXRlKGdsKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyU3ByaXRlLnNldFBvc2l0aW9uKDAuNiwwLjgsMCk7XG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fcmVuZGVyU3ByaXRlKTtcblxuICAgICAgICB0aGlzLl8yZENhbWVyYS50YXJnZXRUZXh0dXJlID0gdGhpcy5fcmVuZGVyU3ByaXRlLnRleHR1cmUgYXMgUmVuZGVyVGV4dHVyZTs7XG5cbiAgICAgICAgLy8gdGhpcy5fbGFiZWwgPSBuZXcgTGFiZWwoZ2wpO1xuICAgICAgICAvLyB0aGlzLl9sYWJlbC5zZXRQb3NpdGlvbigwLjAsMC4wLDApO1xuICAgICAgICAvLyB0aGlzLl9sYWJlbC51cmwgPSBcInJlcy84eDgtZm9udC5wbmdcIjtcbiAgICAgICAgLy8gdGhpcy5fbGFiZWwuY29udGVudCA9IFwiem01XCJcbiAgICAgICAgLy8gdGhpcy5hZGRDaGlsZCh0aGlzLl9sYWJlbCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZyYW1lQnVmZmVyKCk6YW55e1xuICAgICAgICByZXR1cm4gdGhpcy5fMmRDYW1lcmEuZ2V0RnJhbWVidWZmZXIoKTtcbiAgICB9XG59IiwiaW1wb3J0IFNjZW5lIGZyb20gXCIuL1NjZW5lXCI7XHJcbmltcG9ydCBHcm91bmQgZnJvbSBcIi4uLzNkL0dyb3VuZFwiO1xyXG5pbXBvcnQgQ3ViZSBmcm9tIFwiLi4vM2QvQ3ViZVwiO1xyXG5pbXBvcnQgTGlnaHRDdWJlIGZyb20gXCIuLi8zZC9MaWdodEN1YmVcIjtcclxuaW1wb3J0IFNreUJveCBmcm9tIFwiLi4vM2QvU2t5Qm94XCI7XHJcbmltcG9ydCBEZXZpY2UgZnJvbSBcIi4uLy4uLy4uL0RldmljZVwiO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4vTm9kZVwiO1xyXG5pbXBvcnQgQ2FtZXJhVmlldyBmcm9tIFwiLi4vY2FtZXJhL0NhbWVyYVZpZXdcIjtcclxuaW1wb3J0IEN1c3RvbVRleHR1cmVDdWJlIGZyb20gXCIuLi8zZC9DdXN0b21UZXh0dXJlQ3ViZVwiO1xyXG5pbXBvcnQgQ3VzdG9tVGV4dHVyZURhdGEgZnJvbSBcIi4uL2RhdGEvQ3VzdG9tVGV4dHVyZURhdGFcIjtcclxuaW1wb3J0IHsgZ2x0ZXhfZm9ybWF0IH0gZnJvbSBcIi4uL2dmeC9HTEVudW1zXCI7XHJcbmltcG9ydCBHYW1lTWFpbkNhbWVyYSBmcm9tIFwiLi4vY2FtZXJhL0dhbWVNYWluQ2FtZXJhXCI7XHJcbmltcG9ydCB7IGNvdWxkU3RhcnRUcml2aWEgfSBmcm9tIFwidHlwZXNjcmlwdFwiO1xyXG5pbXBvcnQgZW51bXMgZnJvbSBcIi4uL2NhbWVyYS9lbnVtc1wiO1xyXG5pbXBvcnQgT3J0aG9DYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9PcnRob0NhbWVyYVwiO1xyXG5pbXBvcnQgUGVyc3BlY3RpdmVDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9QZXJzcGVjdGl2ZUNhbWVyYVwiO1xyXG5pbXBvcnQgU3BoZXJlIGZyb20gXCIuLi8zZC9TcGhlcmVcIjtcclxuaW1wb3J0IFNwaW5lIGZyb20gXCIuLi8zZC9TcGluZVwiO1xyXG5pbXBvcnQgeyBDYW1lcmFGcnVzdHVtIH0gZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFGcnVzdHVtXCI7XHJcbmltcG9ydCB7IGdsTWF0cml4IH0gZnJvbSBcIi4uLy4uL01hdHJpeFwiO1xyXG5pbXBvcnQgeyBNYXRoVXRpbHMgfSBmcm9tIFwiLi4vLi4vdXRpbHMvTWF0aFV0aWxzXCI7XHJcbmltcG9ydCBDYW1lcmEgZnJvbSBcIi4uL2NhbWVyYS9DYW1lcmFcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5lM0QgZXh0ZW5kcyBTY2VuZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBfbGlnaHRDdWJlOiBMaWdodEN1YmU7XHJcbiAgICBwcml2YXRlIF9za3lib3g6IFNreUJveDtcclxuICAgIHByaXZhdGUgX2Zsb29yTm9kZTogR3JvdW5kO1xyXG4gICAgcHJpdmF0ZSBfY3ViZU5vZGU6IEN1YmU7XHJcbiAgICBwcml2YXRlIF90YWJsZU5vZGU6IEN1YmU7XHJcbiAgICBwcml2YXRlIF9zcGluZU5vZGU6IFNwaW5lO1xyXG4gICAgcHJpdmF0ZSBfY3VzdG9tVGV4dHVyZTogQ3VzdG9tVGV4dHVyZUN1YmU7XHJcbiAgICBwcml2YXRlIF9jZW50ZXJOb2RlOiBOb2RlO1xyXG4gICAgcHJpdmF0ZSBfM2RDYW1lcmE6IFBlcnNwZWN0aXZlQ2FtZXJhO1xyXG4gICAgcHJpdmF0ZSBfc3BoZXJlOiBTcGhlcmU7XHJcblxyXG4gICAgcHJpdmF0ZSBzZXR0aW5ncyA9IHtcclxuICAgICAgICBwb3NYOiAwLFxyXG4gICAgICAgIHBvc1k6IDAsXHJcbiAgICAgICAgcG9zWjogMCxcclxuICAgICAgICByb3RhdGlvbjogMTUwLCAgLy8gaW4gZGVncmVlc1xyXG4gICAgICAgIGNhbTFGaWVsZE9mVmlldzogNjAsICAvLyBpbiBkZWdyZWVzXHJcbiAgICAgICAgY2FtMVBvc1g6IDAsXHJcbiAgICAgICAgY2FtMVBvc1k6IDAsXHJcbiAgICAgICAgY2FtMVBvc1o6IDIwLFxyXG4gICAgICAgIGNhbTFSb3RYOiAwLFxyXG4gICAgICAgIGNhbTFSb3RZOiAwLFxyXG4gICAgICAgIGNhbTFSb3RaOiAwLFxyXG4gICAgICAgIGNhbTFOZWFyOiAxLFxyXG4gICAgICAgIGNhbTFGYXI6IDIwMCxcclxuICAgICAgICBjYW0xT3J0aG86IGZhbHNlLFxyXG4gICAgICAgIGNhbTFPcnRob1VuaXRzOiAxMjAsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFVJKCk7XHJcbiAgICAgICAgdmFyIGdsID0gRGV2aWNlLkluc3RhbmNlLmdsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX2NlbnRlck5vZGUgPSBuZXcgTm9kZSgpO1xyXG4gICAgICAgIHRoaXMuX2NlbnRlck5vZGUuc2V0UG9zaXRpb24oMCwgMS4xLCAwKTtcclxuICAgICAgICB0aGlzLmFkZENoaWxkKHRoaXMuX2NlbnRlck5vZGUpO1xyXG5cclxuICAgICAgICB2YXIgc3BOb2RlID0gbmV3IE5vZGUoKTtcclxuICAgICAgICB0aGlzLl9zcGhlcmUgPSBuZXcgU3BoZXJlKGdsKTtcclxuICAgICAgICBzcE5vZGUuc2V0UG9zaXRpb24oMCwgNSwgMCk7XHJcbiAgICAgICAgc3BOb2RlLmFkZENoaWxkKHRoaXMuX3NwaGVyZSk7XHJcbiAgICAgICAgdGhpcy5fY2VudGVyTm9kZS5hZGRDaGlsZChzcE5vZGUpO1xyXG5cclxuICAgICAgICB0aGlzLl9mbG9vck5vZGUgPSBuZXcgR3JvdW5kKGdsKTtcclxuICAgICAgICB0aGlzLl9mbG9vck5vZGUudXJsID0gXCJyZXMvZ3JvdW5kLmpwZ1wiO1xyXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQodGhpcy5fZmxvb3JOb2RlKTtcclxuXHJcbiAgICAgICAgdGhpcy5fc3BpbmVOb2RlID0gbmV3IFNwaW5lKGdsKTtcclxuICAgICAgICB0aGlzLl9zcGluZU5vZGUueCA9IDA7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9zcGluZU5vZGUpO1xyXG5cclxuICAgICAgICB0aGlzLl9jdXN0b21UZXh0dXJlID0gbmV3IEN1c3RvbVRleHR1cmVDdWJlKGdsKTtcclxuICAgICAgICB0aGlzLl9jdXN0b21UZXh0dXJlLnVybCA9IEN1c3RvbVRleHR1cmVEYXRhLmdldFJhbmRvbURhdGEoMywgNSwgZ2x0ZXhfZm9ybWF0LlJHQjgpO1xyXG4gICAgICAgIHRoaXMuX2N1c3RvbVRleHR1cmUuc2V0UG9zaXRpb24oMCwgMy4xLCAwKTtcclxuICAgICAgICB0aGlzLl9jZW50ZXJOb2RlLmFkZENoaWxkKHRoaXMuX2N1c3RvbVRleHR1cmUpO1xyXG5cclxuICAgICAgICB0aGlzLl90YWJsZU5vZGUgPSBuZXcgQ3ViZShnbCk7XHJcbiAgICAgICAgdGhpcy5fdGFibGVOb2RlLnVybCA9IFwicmVzL3dvb2QuanBnXCI7XHJcbiAgICAgICAgdGhpcy5fdGFibGVOb2RlLnNldFBvc2l0aW9uKDAsIDEsIDApO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlTm9kZS5zZXRTY2FsZSgyLjAsIDAuMSwgMi4wKTtcclxuICAgICAgICB0aGlzLl9jZW50ZXJOb2RlLmFkZENoaWxkKHRoaXMuX3RhYmxlTm9kZSk7XHJcbiAgICAgICAgdGhpcy5fY3ViZU5vZGUgPSBuZXcgQ3ViZShnbCk7XHJcbiAgICAgICAgdGhpcy5fY3ViZU5vZGUudXJsID0gXCJyZXMvd2lja2VyLmpwZ1wiO1xyXG4gICAgICAgIHRoaXMuX2N1YmVOb2RlLnNldFBvc2l0aW9uKDAsIDEuNywgMCk7XHJcbiAgICAgICAgdGhpcy5fY3ViZU5vZGUuc2V0U2NhbGUoMC41LCAwLjUsIDAuNSk7XHJcbiAgICAgICAgdGhpcy5fY2VudGVyTm9kZS5hZGRDaGlsZCh0aGlzLl9jdWJlTm9kZSk7XHJcblxyXG4gICAgICAgIC8vIOe7mOWItiA0IOS4quiFv1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAtMTsgaSA8PSAxOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IC0xOyBqIDw9IDE7IGogKz0gMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBuZXcgQ3ViZShnbCk7XHJcbiAgICAgICAgICAgICAgICBub2RlLnNldFBvc2l0aW9uKGkgKiAxOSwgLTAuMSwgaiAqIDE5KTtcclxuICAgICAgICAgICAgICAgIG5vZGUuc2V0U2NhbGUoMC4xLCAxLjAsIDAuMSk7XHJcbiAgICAgICAgICAgICAgICBub2RlLnVybCA9IFwicmVzL3dvb2QuanBnXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jZW50ZXJOb2RlLmFkZENoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9saWdodEN1YmUgPSBuZXcgTGlnaHRDdWJlKGdsKTtcclxuICAgICAgICB0aGlzLl9saWdodEN1YmUudXJsID0gXCJyZXMvd2lja2VyLmpwZ1wiO1xyXG4gICAgICAgIHRoaXMuX2xpZ2h0Q3ViZS5zZXRQb3NpdGlvbigxLCAyLjcsIDApO1xyXG4gICAgICAgIHRoaXMuX2xpZ2h0Q3ViZS5zZXRTY2FsZSgwLjUsIDAuNSwgMC41KTtcclxuICAgICAgICB0aGlzLl9jZW50ZXJOb2RlLmFkZENoaWxkKHRoaXMuX2xpZ2h0Q3ViZSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3NreWJveCA9IG5ldyBTa3lCb3goZ2wpO1xyXG4gICAgICAgIHRoaXMuX3NreWJveC5zZXREZWZhdWx0VXJsKCk7XHJcbiAgICAgICAgdGhpcy5hZGRDaGlsZCh0aGlzLl9za3lib3gpO1xyXG5cclxuXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbigwLCAwLCAwKTtcclxuXHJcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLnJvdGF0ZUNlbnRlck5vZGUuYmluZCh0aGlzKSwgMjApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyAvL+WIneWni+WMllVJXHJcbiAgICBwcml2YXRlIHNldFVJKCk6dm9pZHtcclxuICAgICAgICB2YXIgcmVuZGVyID0gdGhpcy5yZW5kZXIuYmluZCh0aGlzKTtcclxuICAgICAgICB2YXIgd2ViZ2xMZXNzb25zVUkgPSB3aW5kb3dbXCJ3ZWJnbExlc3NvbnNVSVwiXVxyXG4gICAgICAgIHdlYmdsTGVzc29uc1VJLnNldHVwVUkoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3VpJyksIHRoaXMuc2V0dGluZ3MsIFtcclxuICAgICAgICB7IHR5cGU6ICdzbGlkZXInLCBrZXk6ICdyb3RhdGlvbicsIG1pbjogMCwgbWF4OiAzNjAsIGNoYW5nZTogcmVuZGVyLCBwcmVjaXNpb246IDIsIHN0ZXA6IDAuMDAxLCB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NsaWRlcicsIGtleTogJ3Bvc1gnLCBtaW46IC0yMDAsIG1heDogMjAwLCBjaGFuZ2U6IHJlbmRlciwgfSxcclxuICAgICAgICB7IHR5cGU6ICdzbGlkZXInLCBrZXk6ICdwb3NZJywgbWluOiAtMjAwLCBtYXg6IDIwMCwgY2hhbmdlOiByZW5kZXIsIH0sXHJcbiAgICAgICAgeyB0eXBlOiAnc2xpZGVyJywga2V5OiAncG9zWicsIG1pbjogLTIwMCwgbWF4OiAyMDAsIGNoYW5nZTogcmVuZGVyLCB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NsaWRlcicsIGtleTogJ2NhbTFGaWVsZE9mVmlldycsIG1pbjogMCwgbWF4OiAxODAsIGNoYW5nZTogcmVuZGVyLCB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NsaWRlcicsIGtleTogJ2NhbTFQb3NYJywgbWluOiAtNTAsIG1heDogNTAsIGNoYW5nZTogcmVuZGVyLCB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NsaWRlcicsIGtleTogJ2NhbTFQb3NZJywgbWluOiAtNTAsIG1heDogNTAsIGNoYW5nZTogcmVuZGVyLCB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NsaWRlcicsIGtleTogJ2NhbTFQb3NaJywgbWluOiAtNTAsIG1heDogNTAsIGNoYW5nZTogcmVuZGVyLCB9LFxyXG5cclxuICAgICAgICB7IHR5cGU6ICdzbGlkZXInLCBrZXk6ICdjYW0xUm90WCcsIG1pbjogMCwgbWF4OiAzNjAsIGNoYW5nZTogcmVuZGVyLCB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NsaWRlcicsIGtleTogJ2NhbTFSb3RZJywgbWluOiAwLCBtYXg6IDM2MCwgY2hhbmdlOiByZW5kZXIsIH0sXHJcbiAgICAgICAgeyB0eXBlOiAnc2xpZGVyJywga2V5OiAnY2FtMVJvdFonLCBtaW46IDAsIG1heDogMzYwLCBjaGFuZ2U6IHJlbmRlciwgfSxcclxuXHJcbiAgICAgICAgeyB0eXBlOiAnc2xpZGVyJywga2V5OiAnY2FtMU5lYXInLCBtaW46IDEsIG1heDozMDAsIGNoYW5nZTogcmVuZGVyLCB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NsaWRlcicsIGtleTogJ2NhbTFGYXInLCBtaW46IDEsIG1heDogMzAwLCBjaGFuZ2U6IHJlbmRlciwgfSxcclxuICAgICAgICB7IHR5cGU6ICdjaGVja2JveCcsIGtleTogJ2NhbTFPcnRobycsIGNoYW5nZTogcmVuZGVyLCB9LFxyXG4gICAgICAgIHsgdHlwZTogJ3NsaWRlcicsIGtleTogJ2NhbTFPcnRob1VuaXRzJywgbWluOiAxLCBtYXg6IDE1MCwgY2hhbmdlOiByZW5kZXIsIH0sXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgcmVuZGVyKCk6dm9pZHtcclxuICAgICAgICBsZXQgZ2wgPSBEZXZpY2UuSW5zdGFuY2UuZ2w7XHJcbiAgICAgICAgdGhpcy5fM2RDYW1lcmEgPSBHYW1lTWFpbkNhbWVyYS5pbnN0YW5jZS5zZXRDYW1lcmEoZW51bXMuUFJPSl9QRVJTUEVDVElWRSwgZ2wuY2FudmFzLndpZHRoIC8gZ2wuY2FudmFzLmhlaWdodCxcclxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5jYW0xRmllbGRPZlZpZXcsdGhpcy5zZXR0aW5ncy5jYW0xTmVhcix0aGlzLnNldHRpbmdzLmNhbTFGYXIpIGFzIFBlcnNwZWN0aXZlQ2FtZXJhO1xyXG4gICAgICAgIHRoaXMuXzNkQ2FtZXJhLnNldFBvc2l0aW9uKHRoaXMuc2V0dGluZ3MuY2FtMVBvc1gsdGhpcy5zZXR0aW5ncy5jYW0xUG9zWSx0aGlzLnNldHRpbmdzLmNhbTFQb3NaKTtcclxuICAgICAgICB0aGlzLl8zZENhbWVyYS5zZXRSb3RhdGlvbih0aGlzLnNldHRpbmdzLmNhbTFSb3RYLHRoaXMuc2V0dGluZ3MuY2FtMVJvdFksdGhpcy5zZXR0aW5ncy5jYW0xUm90Wik7XHJcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbih0aGlzLnNldHRpbmdzLnBvc1gsdGhpcy5zZXR0aW5ncy5wb3NZLHRoaXMuc2V0dGluZ3MucG9zWik7XHJcbiAgICAgICAgLy8gdGhpcy5fM2RDYW1lcmEuc2V0UG9zaXRpb24oMCwwLDIwKTtcclxuICAgICAgICAvLyB0aGlzLl8zZENhbWVyYS5zZXRSb3RhdGlvbigwLDAsMCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcm90YXRlQ2VudGVyTm9kZSgpIHtcclxuICAgICAgICB0aGlzLl9jZW50ZXJOb2RlLnJvdGF0ZSgwLCAxLCAwKTtcclxuICAgICAgICBzZXRUaW1lb3V0KHRoaXMucm90YXRlQ2VudGVyTm9kZS5iaW5kKHRoaXMpLCAyMCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHJlYWR5UmVuZGVyRHJhdygpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGRlbGV0ZUdQVVRleHR1cmUoKTogdm9pZCB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Zsb29yTm9kZS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1YmVOb2RlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5fdGFibGVOb2RlLmRlc3Ryb3koKTtcclxuICAgICAgICB9LCA1MDAwKVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9mbG9vck5vZGUudXJsID0gXCJyZXMvZ3JvdW5kLmpwZ1wiO1xyXG4gICAgICAgICAgICB0aGlzLl9jdWJlTm9kZS51cmwgPSBcInJlcy93aWNrZXIuanBnXCI7XHJcbiAgICAgICAgICAgIHRoaXMuX3RhYmxlTm9kZS51cmwgPSBcInJlcy93b29kLmpwZ1wiO1xyXG4gICAgICAgIH0sIDcwMDApXHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8v6I635Y+W5pGE5YOP5py6XHJcbiAgICBwdWJsaWMgZ2V0Q2FtZXJhKCk6Q2FtZXJhe1xyXG4gICAgICAgIHJldHVybiB0aGlzLl8zZENhbWVyYTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVhZHlEcmF3KHRpbWUpOiB2b2lkIHtcclxuICAgICAgICAvLyB0aGlzLl8zZENhbWVyYS5yb3RhdGUoMCwwLDEpO1xyXG4gICAgICAgIHRoaXMuXzNkQ2FtZXJhLnJlYWR5RHJhdyh0aW1lKTtcclxuICAgICAgICBzdXBlci5yZWFkeURyYXcodGltZSk7XHJcbiAgICB9XHJcbn0iLCJcclxuLyoqXHJcbiAqIOWtl+iKguaVsOe7hOeahOS9v+eUqFxyXG4gKiDmlbTlnovvvJrov5nkuKrlj6/ku6XmmK/kuIDkuKrlrZfoioJVaW50OEFycmF5LEludDhBcnJheSzkuZ/lj6/mmK/lj4zlrZfoioJVaW50MTZBcnJheSxJbnQxNkFycmF5LFxyXG4gKiDkuZ/lj6/mmK/lm5vlrZfoioJVbml0MzJBcnJheSxJbnQzMkFycmF5XHJcbiAqIOa1rueCueWei++8mui/meS4quimgeWbm+S4quWtl+iKgu+8jOmAgueUqOS6jmZsb2F057G75Z6L77yM5L6L5aaCRmxvYXQzMkFycmF5LOW9k+eEtuS5n+WPquaciei/meS4gOenjeexu+Wei1xyXG4gKiDlj4znsr7luqblnovvvJrov5nkuKropoHlhavkuKrlrZfoioLvvIzpgILnlKjkuo5kb3VibGXnsbvlnovvvIzkvovlpoJGbG9hdDY0QXJyYXks5b2T54S25Lmf5Y+q5pyJ6L+Z5LiA56eN57G75Z6LXHJcbiAqIFxyXG4gKiDkvb/nlKhcclxuICogIC8vIEZyb20gYSBsZW5ndGhcclxudmFyIGZsb2F0MzIgPSBuZXcgRmxvYXQzMkFycmF5KDIpO1xyXG5mbG9hdDMyWzBdID0gNDI7XHJcbmNvbnNvbGUubG9nKGZsb2F0MzJbMF0pOyAvLyA0MlxyXG5jb25zb2xlLmxvZyhmbG9hdDMyLmxlbmd0aCk7IC8vIDJcclxuY29uc29sZS5sb2coZmxvYXQzMi5CWVRFU19QRVJfRUxFTUVOVCk7IC8vIDRcclxuXHJcbi8vIEZyb20gYW4gYXJyYXlcclxudmFyIGFyciA9IG5ldyBGbG9hdDMyQXJyYXkoWzIxLDMxXSk7XHJcbmNvbnNvbGUubG9nKGFyclsxXSk7IC8vIDMxXHJcblxyXG4vLyBGcm9tIGFub3RoZXIgVHlwZWRBcnJheVxyXG52YXIgeCA9IG5ldyBGbG9hdDMyQXJyYXkoWzIxLCAzMV0pO1xyXG52YXIgeSA9IG5ldyBGbG9hdDMyQXJyYXkoeCk7XHJcbmNvbnNvbGUubG9nKHlbMF0pOyAvLyAyMVxyXG5cclxuLy8gRnJvbSBhbiBBcnJheUJ1ZmZlclxyXG4vLyB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDE2KTtcclxudmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcigxNik7XHJcbi8vIGJ1ZmZlclswXSA9IDEwO1xyXG4vLyBidWZmZXJbMV0gPSAyMDtcclxuLy8gYnVmZmVyWzJdID0gMzA7XHJcbi8vIGJ1ZmZlclszXSA9IDQwO1xyXG4vLyBidWZmZXJbNF0gPSA1MDtcclxudmFyIHogPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciwgMCwgNCk7XHJcbmNvbnNvbGUubG9nKHopO1xyXG4vLyB6LmZvckVhY2goZnVuY3Rpb24odmFsdWUsaW5kZXgsYXJyKXtcclxuLy8gICAgIGNvbnNvbGUubG9nKHZhbHVlLGluZGV4LGFycik7XHJcbi8vIH0pXHJcblxyXG4gKi9cclxuXHJcblxyXG4gLyoqXHJcbiAgKiDnjrDpmLbmrrUg5qC45b+D5riy5p+T6K6h566X6YO96KaB5pS+5Zyo5q2k57G75LitXHJcbiAgKi9cclxuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSBcIi4uL3NoYWRlci9TaGFkZXJcIjtcclxuaW1wb3J0IHsgZ2xwcmltaXRpdmVfdHlwZSB9IGZyb20gXCIuLi9nZngvR0xFbnVtc1wiO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4vTm9kZVwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcIi4vVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBUZXh0dXJlMkQgfSBmcm9tIFwiLi9UZXh0dXJlMkRcIjtcclxuaW1wb3J0IFRleHR1cmVDdWJlIGZyb20gXCIuL1RleHR1cmVDdWJlXCI7XHJcbmltcG9ydCBUZXh0dXJlQ3VzdG9tIGZyb20gXCIuL1RleHR1cmVDdXN0b21cIjtcclxuaW1wb3J0IERldmljZSBmcm9tIFwiLi4vLi4vLi4vRGV2aWNlXCI7XHJcbmltcG9ydCB7IFJlbmRlckRhdGEsIFJlbmRlckRhdGFQb29sLCBSZW5kZXJEYXRhVHlwZSB9IGZyb20gXCIuL1JlbmRlckRhdGFcIjtcclxuXHJcbi8qKlxyXG4gKiDnvJPlhrLljLrkuK3nmoTmlbDmja7lsLHmmK/kuIDkuKrkuozov5vliLbmtYHvvIzkuIDoiKzmiJHku6zkvJrmjInnhaflrZfoioLlpITnkIbvvIzlhavkuKrkuozov5vliLbkuLrkuIDkuKrlrZfoioLvvIzlj4jnp7DlrZfoioLmtYFcclxuICog5oiR5Lus55So5a2X6IqC5rWB5p2l6KGo56S65pWw5o2u77yM5LiA5Liq5pWw5o2u5Y+v5Lul55So6Iul5bmy5Liq5a2X6IqC5p2l6KGo56S6XHJcbiAqIOS4gOiIrOeUqOS4i+mdoui/meWHoOS4quaVsOe7hOadpee7hOe7h+Wtl+iKgua1gVxyXG4gKiBJbnQ4QXJyYXnvvJrmr4/kuKrmlbDmja7ljaAx5Liq5a2X6IqCXHJcbiAqIFVpbnQ4QXJyYXnvvJrmr4/kuKrmlbDmja7ljaAx5Liq5a2X6IqCXHJcbiAqIEludDE2QXJyYXnvvJrmr4/kuKrmlbDmja7ljaAy5Liq5a2X6IqCXHJcbiAqIFVpbnQxNkFycmF577ya5q+P5Liq5pWw5o2u5Y2gMuS4quWtl+iKglxyXG4gKiBGbG9hdDMyQXJyYXnvvJrmr4/kuKrmlbDmja7ljaA05Liq5a2X6IqCXHJcbiAqL1xyXG5hYnN0cmFjdCBjbGFzcyBnbEJhc2VCdWZmZXIge1xyXG4gICAgY29uc3RydWN0b3IoZ2w6V2ViR0xSZW5kZXJpbmdDb250ZXh0LCBkYXRhOiBBcnJheTxudW1iZXI+LCBpdGVtU2l6ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fZ2xJRCA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgIHRoaXMuc291cmNlRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5pdGVtU2l6ZSA9IGl0ZW1TaXplO1xyXG4gICAgICAgIHRoaXMuaXRlbU51bXMgPSBkYXRhLmxlbmd0aC9pdGVtU2l6ZTtcclxuICAgICAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICB9XHJcbiAgICBzb3VyY2VEYXRhOiBBcnJheTxudW1iZXI+Oy8v5rqQ5pWw5o2u77yMXHJcbiAgICBpdGVtU2l6ZTogbnVtYmVyID0gMDsgICAgIC8v5Zyo57yT5Yay5Yy65Lit77yM5LiA5Liq5Y2V5L2N5pWw5o2u5pyJ5Yeg5Liq5pWw5o2u57uE5oiQXHJcbiAgICBpdGVtTnVtczogbnVtYmVyID0gMDsgICAgIC8v5Zyo57yT5Yay5Yy65Lit77yM5Y2V5L2N5pWw5o2u55qE5pWw55uuXHJcbiAgICBpdGVtQnl0ZXM6IG51bWJlciA9IDI7ICAgIC8v5q+P5Liq5pWw5o2u55qE5a2Y5YKo5a2X6IqC5pWwXHJcbiAgICBfZ2xJRDogV2ViR0xCdWZmZXI7Ly/mmL7lrZjlrZjlgqjmlbDmja7nmoTlnLDlnYBcclxuICAgIHByb3RlY3RlZCBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xyXG4gICAgXHJcbiAgICAvL+S4iuS8oOaVsOaNruWIsEdQVeaYvuWtmFxyXG4gICAgcHVibGljIHVwbG9hZERhdGEyR1BVKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYmluZEJ1ZmZlcigpO1xyXG4gICAgICAgIHRoaXMuYmluZERhdGEoKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBiaW5kQnVmZmVyKCk7XHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgYmluZERhdGEoKTtcclxuXHJcbiAgICAvKipcclxuICAgKiBAbWV0aG9kIGRlc3Ryb3lcclxuICAgKi9cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2dsSUQgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSBidWZmZXIgYWxyZWFkeSBkZXN0cm95ZWQnKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9nbElEKTtcclxuICAgICAgICB0aGlzLl9nbElEID0gLTE7XHJcbiAgICB9XHJcbn1cclxuLy/pobbngrlidWZmZXJcclxuY2xhc3MgVmVydGV4c0J1ZmZlciBleHRlbmRzIGdsQmFzZUJ1ZmZlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihnbCwgdmVydGV4czogQXJyYXk8bnVtYmVyPiwgaXRlbVNpemU6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGdsLCB2ZXJ0ZXhzLCBpdGVtU2l6ZSk7XHJcbiAgICB9XHJcbiAgICBiaW5kQnVmZmVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fZ2xJRCk7XHJcbiAgICB9XHJcbiAgICBiaW5kRGF0YSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLml0ZW1CeXRlcyA9IDMyIC8gODtcclxuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEodGhpcy5nbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodGhpcy5zb3VyY2VEYXRhKSwgdGhpcy5nbC5TVEFUSUNfRFJBVyk7XHJcbiAgICB9XHJcbn1cclxuLy/ntKLlvJVidWZmZXJcclxuY2xhc3MgSW5kZXhzQnVmZmVyIGV4dGVuZHMgZ2xCYXNlQnVmZmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGdsLCBpbmRleHM6IEFycmF5PG51bWJlcj4sIGl0ZW1TaXplOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihnbCwgaW5kZXhzLCBpdGVtU2l6ZSk7XHJcbiAgICB9XHJcbiAgICBiaW5kQnVmZmVyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9nbElEKTtcclxuICAgIH1cclxuICAgIGJpbmREYXRhKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXRlbUJ5dGVzID0gMTYgLyA4O1xyXG4gICAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkodGhpcy5zb3VyY2VEYXRhKSwgdGhpcy5nbC5TVEFUSUNfRFJBVyk7XHJcbiAgICB9XHJcbn1cclxuLy91dmJ1ZmZlclxyXG5jbGFzcyBVVnNCdWZmZXIgZXh0ZW5kcyBnbEJhc2VCdWZmZXIge1xyXG4gICAgY29uc3RydWN0b3IoZ2wsIHV2czogQXJyYXk8bnVtYmVyPiwgaXRlbVNpemU6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGdsLCB1dnMsIGl0ZW1TaXplKTtcclxuICAgIH1cclxuICAgIGJpbmRCdWZmZXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl9nbElEKTtcclxuICAgIH1cclxuICAgIGJpbmREYXRhKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaXRlbUJ5dGVzID0gMzIgLyA4O1xyXG4gICAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh0aGlzLnNvdXJjZURhdGEpLCB0aGlzLmdsLlNUQVRJQ19EUkFXKTtcclxuICAgIH1cclxufVxyXG4vL+azlee6v2J1ZmZlclxyXG5jbGFzcyBOb3JtYWxCdWZmZXIgZXh0ZW5kcyBnbEJhc2VCdWZmZXIge1xyXG4gICAgY29uc3RydWN0b3IoZ2wsIG5vcm1hbHM6IEFycmF5PG51bWJlcj4sIGl0ZW1TaXplOiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihnbCwgbm9ybWFscywgaXRlbVNpemUpO1xyXG4gICAgfVxyXG4gICAgYmluZEJ1ZmZlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2dsSUQpO1xyXG4gICAgfVxyXG4gICAgYmluZERhdGEoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pdGVtQnl0ZXMgPSAzMiAvIDg7XHJcbiAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRoaXMuc291cmNlRGF0YSksIHRoaXMuZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICog5pi+56S66IqC54K5XHJcbiAqIGF1dGhvcjpoempcclxuICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgU1kge1xyXG4gICAgZXhwb3J0IGVudW0gR0xJRF9UWVBFIHtcclxuICAgICAgICBWRVJURVggPSAxLCAvL+mhtueCuVxyXG4gICAgICAgIElOREVYLCAgIC8v57Si5byVXHJcbiAgICAgICAgTk9STUFMLCAvL+azlee6v1xyXG4gICAgICAgIFVWLCAgICAgLy91dlxyXG4gICAgICAgIFRFWFRVUkVfMkQsIC8vMkTnurnnkIZcclxuICAgICAgICBURVhUVVJFX0NVQkUgLy/nq4vmlrnkvZPnurnnkIZcclxuICAgIH1cclxuICAgIGV4cG9ydCBjbGFzcyBTcHJpdGUgZXh0ZW5kcyBOb2RlIHtcclxuICAgICAgICAvL+iKgueCuWJ1ZmZlclxyXG4gICAgICAgIHByaXZhdGUgX3ZlcnRleHNCdWZmZXI6IFZlcnRleHNCdWZmZXI7XHJcbiAgICAgICAgLy/ntKLlvJVidWZmZXJcclxuICAgICAgICBwcml2YXRlIF9pbmRleHNCdWZmZXI6IEluZGV4c0J1ZmZlcjtcclxuICAgICAgICAvL+azlee6v2J1ZmZlclxyXG4gICAgICAgIHByaXZhdGUgX25vcm1hbHNCdWZmZXI6IE5vcm1hbEJ1ZmZlcjtcclxuICAgICAgICAvL+e6ueeQhmJ1ZmZlclxyXG4gICAgICAgIHByaXZhdGUgX3V2c0J1ZmZlcjogVVZzQnVmZmVyO1xyXG4gICAgICAgIHByb3RlY3RlZCBfdGV4dHVyZTogVGV4dHVyZTtcclxuXHJcblxyXG4gICAgICAgIHByb3RlY3RlZCBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dDtcclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIF9zaGFkZXI6IFNoYWRlcjtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBfcmVuZGVyRGF0YTpSZW5kZXJEYXRhO1xyXG5cclxuICAgICAgICAvL+WPguiAg2dscHJpbWl0aXZlX3R5cGVcclxuICAgICAgICBwcm90ZWN0ZWQgX2dsUHJpbWl0aXZlVHlwZTogZ2xwcmltaXRpdmVfdHlwZTsvL+e7mOWItueahOexu+Wei1xyXG5cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIF9jYW1lcmFUeXBlOiBudW1iZXIgPSAwOy8v55u45py655qE57G75Z6LKDDooajnpLrpgI/op4Yx6KGo56S65q2j5LqkKVxyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihnbCkge1xyXG4gICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmdsID0gZ2w7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsUHJpbWl0aXZlVHlwZSA9IGdscHJpbWl0aXZlX3R5cGUuVFJJQU5HTEVfRkFOO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhID0gUmVuZGVyRGF0YVBvb2wuZ2V0KFJlbmRlckRhdGFUeXBlLkJhc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5vbkluaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvdGVjdGVkIG9uSW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v6I635Y+Wc2hhZGVyXHJcbiAgICAgICAgcHVibGljIGdldCBzaGFkZXIoKTogU2hhZGVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NoYWRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzZXRTaGFkZXIodmVydDogc3RyaW5nLCBmcmFnOiBzdHJpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyID0gU2hhZGVyLmNyZWF0ZSh2ZXJ0LCBmcmFnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5Yib5bu66aG254K557yT5YayXHJcbiAgICAgICAgcHVibGljIGNyZWF0ZVZlcnRleHNCdWZmZXIodmVydGV4czogQXJyYXk8bnVtYmVyPiwgaXRlbVNpemU6IG51bWJlcik6IFZlcnRleHNCdWZmZXIge1xyXG4gICAgICAgICAgICB0aGlzLl92ZXJ0ZXhzQnVmZmVyID0gbmV3IFZlcnRleHNCdWZmZXIodGhpcy5nbCwgdmVydGV4cywgaXRlbVNpemUpO1xyXG4gICAgICAgICAgICB0aGlzLl92ZXJ0ZXhzQnVmZmVyLnVwbG9hZERhdGEyR1BVKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92ZXJ0ZXhzQnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL+WIm+W7uuazlee6v+e8k+WGslxyXG4gICAgICAgIHB1YmxpYyBjcmVhdGVOb3JtYWxzQnVmZmVyKG5vcm1hbHM6IEFycmF5PG51bWJlcj4sIGl0ZW1TaXplOiBudW1iZXIpOiBOb3JtYWxCdWZmZXIge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3JtYWxzQnVmZmVyID0gbmV3IE5vcm1hbEJ1ZmZlcih0aGlzLmdsLCBub3JtYWxzLCBpdGVtU2l6ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vcm1hbHNCdWZmZXIudXBsb2FkRGF0YTJHUFUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vcm1hbHNCdWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5Yib5bu657Si5byV57yT5YayXHJcbiAgICAgICAgLy/ntKLlvJXnvJPlhrLnmoTljZXkvY3mlbDmja7kuKrmlbDogq/lrprkuLoxXHJcbiAgICAgICAgcHVibGljIGNyZWF0ZUluZGV4c0J1ZmZlcihpbmRleHM6IEFycmF5PG51bWJlcj4pOiBJbmRleHNCdWZmZXIge1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRleHNCdWZmZXIgPSBuZXcgSW5kZXhzQnVmZmVyKHRoaXMuZ2wsIGluZGV4cywxKTtcclxuICAgICAgICAgICAgdGhpcy5faW5kZXhzQnVmZmVyLnVwbG9hZERhdGEyR1BVKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbmRleHNCdWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5Yib5bu6dXbnvJPlhrJcclxuICAgICAgICBwdWJsaWMgY3JlYXRlVVZzQnVmZmVyKHV2czogQXJyYXk8bnVtYmVyPiwgaXRlbVNpemU6IG51bWJlcik6IFVWc0J1ZmZlciB7XHJcbiAgICAgICAgICAgIHRoaXMuX3V2c0J1ZmZlciA9IG5ldyBVVnNCdWZmZXIodGhpcy5nbCwgdXZzLCBpdGVtU2l6ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3V2c0J1ZmZlci51cGxvYWREYXRhMkdQVSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdXZzQnVmZmVyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5Yib5bu65LiA5Liq57q555CGYnVmZmVyXHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGVUZXh0dXJlMkRCdWZmZXIodXJsOiBzdHJpbmcpOiBUZXh0dXJlIHtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IG5ldyBUZXh0dXJlMkQodGhpcy5nbCk7XHJcbiAgICAgICAgICAgICh0aGlzLl90ZXh0dXJlIGFzIFRleHR1cmUyRCkudXJsID0gdXJsO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGNyZWF0ZVRleHR1cmVDdWJlQnVmZmVyKGFycjogQXJyYXk8c3RyaW5nPik6IFRleHR1cmUge1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gbmV3IFRleHR1cmVDdWJlKHRoaXMuZ2wpO1xyXG4gICAgICAgICAgICAodGhpcy5fdGV4dHVyZSBhcyBUZXh0dXJlQ3ViZSkudXJsID0gYXJyO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGVDdXN0b21UZXh0dXJlQnVmZmVyKGRhdGEpOiBUZXh0dXJlIHtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IG5ldyBUZXh0dXJlQ3VzdG9tKHRoaXMuZ2wpO1xyXG4gICAgICAgICAgICAodGhpcy5fdGV4dHVyZSBhcyBUZXh0dXJlQ3VzdG9tKS51cmwgPSBkYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBzZXQgdXJsKHVybDogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiB8IG9iamVjdCkge1xyXG4gICAgICAgICAgICAvL+aZrumAmuWbvueJh1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHVybCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVRleHR1cmUyREJ1ZmZlcih1cmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8v5aSp56m655uSXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHVybCBpbnN0YW5jZW9mIEFycmF5ICYmIHVybC5sZW5ndGggPT0gNikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVUZXh0dXJlQ3ViZUJ1ZmZlcih1cmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8v6Ieq5a6a5LmJ57q555CGXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiAodXJsKSA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUN1c3RvbVRleHR1cmVCdWZmZXIodXJsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRHTElEKHR5cGU6IEdMSURfVFlQRSk6IGFueSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBHTElEX1RZUEUuSU5ERVg6IHJldHVybiB0aGlzLl9pbmRleHNCdWZmZXIgPyB0aGlzLl9pbmRleHNCdWZmZXIuX2dsSUQgOiAtMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgR0xJRF9UWVBFLlRFWFRVUkVfMkQ6IHJldHVybiB0aGlzLl90ZXh0dXJlID8gdGhpcy5fdGV4dHVyZS5fZ2xJRCA6IC0xO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBHTElEX1RZUEUuVEVYVFVSRV9DVUJFOiByZXR1cm4gdGhpcy5fdGV4dHVyZSA/IHRoaXMuX3RleHR1cmUuX2dsSUQgOiAtMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgR0xJRF9UWVBFLlVWOiByZXR1cm4gdGhpcy5fdXZzQnVmZmVyID8gdGhpcy5fdXZzQnVmZmVyLl9nbElEIDogLTE7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEdMSURfVFlQRS5OT1JNQUw6IHJldHVybiB0aGlzLl9ub3JtYWxzQnVmZmVyID8gdGhpcy5fbm9ybWFsc0J1ZmZlci5fZ2xJRCA6IC0xO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBHTElEX1RZUEUuVkVSVEVYOiByZXR1cm4gdGhpcy5fdmVydGV4c0J1ZmZlciA/IHRoaXMuX3ZlcnRleHNCdWZmZXIuX2dsSUQgOiAtMTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAtMTsvL+acquefpVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBnZXRCdWZmZXIodHlwZTogR0xJRF9UWVBFKTogZ2xCYXNlQnVmZmVyIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEdMSURfVFlQRS5JTkRFWDogcmV0dXJuIHRoaXMuX2luZGV4c0J1ZmZlcjtcclxuICAgICAgICAgICAgICAgIGNhc2UgR0xJRF9UWVBFLlVWOiByZXR1cm4gdGhpcy5fdXZzQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBHTElEX1RZUEUuTk9STUFMOiByZXR1cm4gdGhpcy5fbm9ybWFsc0J1ZmZlcjtcclxuICAgICAgICAgICAgICAgIGNhc2UgR0xJRF9UWVBFLlZFUlRFWDogcmV0dXJuIHRoaXMuX3ZlcnRleHNCdWZmZXI7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDsvL+acquefpVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3RlY3RlZCBnZXRCdWZmZXJJdGVtU2l6ZSh0eXBlOiBHTElEX1RZUEUpOiBudW1iZXIge1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5nZXRCdWZmZXIodHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBidWZmZXIgPyBidWZmZXIuaXRlbVNpemUgOiAtMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJvdGVjdGVkIHVwZGF0ZUNhbWVyYSh0aW1lOiBudW1iZXIpOiBhbnkge1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICBcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBcclxuICAgICAgICAgKiBAcGFyYW0gdGV4dHVyZSDnurnnkIbnmoRHTElEXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcHJvdGVjdGVkIGRyYXcodGltZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXh0dXJlICYmIHRoaXMuX3RleHR1cmUubG9hZGVkID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyRGF0YS5fY2FtZXJhVHlwZSA9IHRoaXMuX2NhbWVyYVR5cGU7Ly/pu5jorqTmg4XlhrXkuIvmmK/pgI/op4bmipXlvbFcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyRGF0YS5fc2hhZGVyID0gdGhpcy5fc2hhZGVyO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLl92ZXJ0R0xJRCA9IHRoaXMuZ2V0R0xJRChTWS5HTElEX1RZUEUuVkVSVEVYKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyRGF0YS5fdmVydEl0ZW1TaXplID0gdGhpcy5nZXRCdWZmZXJJdGVtU2l6ZShTWS5HTElEX1RZUEUuVkVSVEVYKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyRGF0YS5fdmVydEl0ZW1OdW1zID0gdGhpcy5nZXRCdWZmZXIoU1kuR0xJRF9UWVBFLlZFUlRFWCkuaXRlbU51bXM7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckRhdGEuX2luZGV4R0xJRCA9IHRoaXMuZ2V0R0xJRChTWS5HTElEX1RZUEUuSU5ERVgpO1xyXG4gICAgICAgICAgICBpZih0aGlzLl9yZW5kZXJEYXRhLl9pbmRleEdMSUQhPS0xKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLl9pbmRleEl0ZW1TaXplID0gdGhpcy5nZXRCdWZmZXIoU1kuR0xJRF9UWVBFLklOREVYKS5pdGVtU2l6ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlckRhdGEuX2luZGV4SXRlbU51bXMgPSB0aGlzLmdldEJ1ZmZlcihTWS5HTElEX1RZUEUuSU5ERVgpLml0ZW1OdW1zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckRhdGEuX3V2R0xJRCA9IHRoaXMuZ2V0R0xJRChTWS5HTElEX1RZUEUuVVYpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLl91dkl0ZW1TaXplID0gdGhpcy5nZXRCdWZmZXJJdGVtU2l6ZShTWS5HTElEX1RZUEUuVVYpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLl9ub3JtYWxHTElEID0gdGhpcy5nZXRHTElEKFNZLkdMSURfVFlQRS5OT1JNQUwpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLl9ub3JtYWxJdGVtU2l6ZSA9IHRoaXMuZ2V0QnVmZmVySXRlbVNpemUoU1kuR0xJRF9UWVBFLk5PUk1BTCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckRhdGEuX2xpZ2h0Q29sb3IgPSBbMC4wLCAxLCAxLjAsIDFdO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLl9tb2RlbE1hdHJpeCA9IHRoaXMuX21vZGVsTWF0cml4O1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLl90aW1lID0gdGltZTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyRGF0YS5fbGlnaHREaXJlY3Rpb24gPSB0aGlzLl9nbE1hdHJpeC52ZWMzLm5vcm1hbGl6ZShudWxsLCBbOCwgNSwgLTEwXSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zaGFkZXIuVVNFX1NLWUJPWCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyRGF0YS5fdV9wdm1fbWF0cml4X2ludmVyc2UgPSAodGhpcykudXBkYXRlQ2FtZXJhKHRpbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXh0dXJlICYmIHRoaXMuX3RleHR1cmUuX2dsSUQgJiYgIXRoaXMuX3NoYWRlci5VU0VfU0tZQk9YKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJEYXRhLl90ZXh0dXJlR0xJREFycmF5LnB1c2godGhpcy5nZXRHTElEKFNZLkdMSURfVFlQRS5URVhUVVJFXzJEKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyRGF0YS5fZ2xQcmltaXRpdmVUeXBlID0gdGhpcy5fZ2xQcmltaXRpdmVUeXBlO1xyXG4gICAgICAgICAgICBEZXZpY2UuSW5zdGFuY2UuY29sbGVjdERhdGEodGhpcy5fcmVuZGVyRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHB1YmxpYyBnZXQgdGV4dHVyZSgpOlRleHR1cmV7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdWJsaWMgZGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLzJk5pi+56S66IqC54K5XHJcbiAgICBleHBvcnQgY2xhc3MgU3ByaXRlMkQgZXh0ZW5kcyBTWS5TcHJpdGUge1xyXG5cclxuICAgICAgICBwcml2YXRlIF9sdDogQXJyYXk8bnVtYmVyPiA9IFtdOy8v5bem5LiKXHJcbiAgICAgICAgcHJpdmF0ZSBfbGI6IEFycmF5PG51bWJlcj4gPSBbXTsvL+W3puS4i1xyXG4gICAgICAgIHByaXZhdGUgX3J0OiBBcnJheTxudW1iZXI+ID0gW107Ly/lj7PkuIpcclxuICAgICAgICBwcml2YXRlIF9yYjogQXJyYXk8bnVtYmVyPiA9IFtdOy8v5Y+z5LiLXHJcbiAgICAgICAgY29uc3RydWN0b3IoZ2wpIHtcclxuICAgICAgICAgICAgc3VwZXIoZ2wpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIHVwZGF0ZVVWKCk6dm9pZHtcclxuICAgICAgICAgICAgIC8vdXYg5pWw5o2uXHJcbiAgICAgICAgICAgIHZhciBmbG9vclZlcnRleFRleHR1cmVDb29yZGluYXRlcyA9IFtcclxuICAgICAgICAgICAgICAgIDAuMCwgMC4wLCAvL3YwXHJcbiAgICAgICAgICAgICAgICAxLjAsIDAuMCwgLy92MVxyXG4gICAgICAgICAgICAgICAgMS4wLCAxLjAsIC8vdjJcclxuICAgICAgICAgICAgICAgIDAuMCwgMS4wLCAvL3YzXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlVVZzQnVmZmVyKGZsb29yVmVydGV4VGV4dHVyZUNvb3JkaW5hdGVzLCAyKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOe0ouW8leaVsOaNrlxyXG4gICAgICAgICAgICB2YXIgZmxvb3JWZXJ0ZXhJbmRpY2VzID0gWzAsIDEsIDIsIDNdO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUluZGV4c0J1ZmZlcihmbG9vclZlcnRleEluZGljZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKipcclxuICAgICAgICAqXHJcbiAgICAgICAgKiBAcGFyYW0gd2lkdGhcclxuICAgICAgICAqIEBwYXJhbSBoZWlnaHRcclxuICAgICAgICAqL1xyXG4gICAgICAgIHB1YmxpYyBzZXRDb250ZW50U2l6ZSh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdmFyIGNsaXBXID0gdGhpcy53aWR0aCAvIERldmljZS5JbnN0YW5jZS5XaWR0aDtcclxuICAgICAgICAgICAgdmFyIGNsaXBIID0gdGhpcy5oZWlnaHQgLyBEZXZpY2UuSW5zdGFuY2UuSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdmFyIHogPSAtMC4xO1xyXG5cclxuICAgICAgICAgICAgLy9bLTEsMV0gPSA+WzAsMV1cclxuICAgICAgICAgICAgdmFyIHcgPSAyICogY2xpcFc7XHJcbiAgICAgICAgICAgIHZhciBoID0gMiAqIGNsaXBIO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fbGIgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5fbGIucHVzaCgtdGhpcy5hbmNob3JYICogdyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xiLnB1c2goLXRoaXMuYW5jaG9yWSAqIGgpO1xyXG4gICAgICAgICAgICB0aGlzLl9sYi5wdXNoKHopOyAgICAgICAgICAgICAgICAgICAgLy/lt6bkuItcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JiID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX3JiLnB1c2godyAtIHRoaXMuYW5jaG9yWCAqIHcpOyAgLy/lj7PkuItcclxuICAgICAgICAgICAgdGhpcy5fcmIucHVzaCgtdGhpcy5hbmNob3JZICogaCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JiLnB1c2goeik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9ydCA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9ydC5wdXNoKHcgLSB0aGlzLmFuY2hvclggKiB3KTsgLy/lj7PkuIpcclxuICAgICAgICAgICAgdGhpcy5fcnQucHVzaChoIC0gdGhpcy5hbmNob3JZICogaCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3J0LnB1c2goeik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9sdCA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9sdC5wdXNoKC10aGlzLmFuY2hvclggKiB3KTtcclxuICAgICAgICAgICAgdGhpcy5fbHQucHVzaChoIC0gdGhpcy5hbmNob3JZICogaCk7ICAvL+W3puS4ilxyXG4gICAgICAgICAgICB0aGlzLl9sdC5wdXNoKHopXHJcblxyXG5cclxuICAgICAgICAgICAgdmFyIGZsb29yVmVydGV4UG9zaXRpb24gPSBbXS5jb25jYXQodGhpcy5fbGIsIHRoaXMuX3JiLCB0aGlzLl9ydCwgdGhpcy5fbHQpO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVZlcnRleHNCdWZmZXIoZmxvb3JWZXJ0ZXhQb3NpdGlvbiwgMyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVVWKCk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxufSIsImltcG9ydCB7IGdsdGV4X2ZpbHRlciwgZ2x0ZXhfd3JhcCwgZ2x0ZXhfZm9ybWF0LCBnbFRleHR1cmVDaGFuZWxUb3RhbEJ5dGVzIH0gZnJvbSBcIi4uL2dmeC9HTEVudW1zXCI7XG5cblxuXG4vKipcbiAqIOWIm+W7uuS4gOS4que6ueeQhueahOS4gOS6m+iuvue9ruWPguaVsFxuICovXG5leHBvcnQgY2xhc3MgVGV4dHVyZVVwZGF0ZU9wdHN7XG4gICAgaW1hZ2U6SFRNTEltYWdlRWxlbWVudDtcbiAgICB3aWR0aDpudW1iZXIgICAgICAgPSAxO1xuICAgIGhlaWdodDpudW1iZXIgICAgICA9IDE7XG4gICAgZ2VuTWlwbWFwczpib29sZWFuID0gZmFsc2U7Ly/mmK/lkKblvIDlkK9taXBtYXDmioDmnK9cbiAgICBjb21wcmVzc2VkOmJvb2xlYW4gPSBmYWxzZTsvL+e6ueeQhuaYr+WQpuaYr+WOi+e8qeeahFxuICAgIGFuaXNvdHJvcHk6bnVtYmVyICA9IDE7Ly/orr7nva7nurnnkIbmiYDmnInmlrnlkJHnmoTmnIDlpKflgLxcbiAgICBtaW5GaWx0ZXI6bnVtYmVyICAgPSBnbHRleF9maWx0ZXIuTElORUFSOy8v57q555CG57yp5bCP6L+H5ruk5qih5byPXG4gICAgbWFnRmlsdGVyOm51bWJlciAgID0gZ2x0ZXhfZmlsdGVyLkxJTkVBUjsvL+e6ueeQhuaUvuWkp+i/h+a7pOaooeW8j1xuICAgIG1pcEZpbHRlcjpudW1iZXIgICA9IGdsdGV4X2ZpbHRlci5MSU5FQVJfTUlQTUFQX0xJTkVBUjsgLy/orr7nva7nurnnkIbnvKnlsI/ov4fmu6TnmoTmqKHlvI/kuLrnibnmrornmoTnur/mgKfov4fmu6RHTF9MSU5FQVJfTUlQTUFQX05FQVJFU1RcbiAgICB3cmFwUyAgICAgICAgICAgICAgPSBnbHRleF93cmFwLk1JUlJPUjsvL+iuvue9rnPmlrnlkJHkuIrnmoTotLTlm77mqKHlvI/kuLrplZzlg4/lr7nnp7Dph43lpI1cbiAgICB3cmFwVCAgICAgICAgICAgICAgPSBnbHRleF93cmFwLk1JUlJPUjsvL+iuvue9rnTmlrnlkJHkuIrnmoTotLTlm77mqKHlvI/kuLrplZzlg4/lr7nnp7Dph43lpI1cbiAgICBmb3JtYXQ6Z2x0ZXhfZm9ybWF0PSBnbHRleF9mb3JtYXQuUkdCQTg7Ly/nurnnkIbnmoTmoLzlvI9cbn1cblxuY29uc3QgX251bGxXZWJHTFRleHR1cmUgPSBudWxsO1xuXG5sZXQgX3RleHR1cmVJRCA9IDA7XG5cbmV4cG9ydCAgY2xhc3MgVGV4dHVyZSB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1dlYkdMQ29udGV4dH1cbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgX2dsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG4gICAgcHVibGljIF9nbElEOiBXZWJHTFRleHR1cmU7XG5cbiAgICBwcm90ZWN0ZWQgX3dpZHRoOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF9oZWlnaHQ6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgX2dlbk1pcG1hcHM6IGJvb2xlYW47Ly/mmK/lkKblvIDlkK9taXBtYXDmioDmnK9cbiAgICBwcm90ZWN0ZWQgX2NvbXByZXNzZWQ6IGJvb2xlYW47Ly/nurnnkIbmmK/lkKbmmK/ljovnvKnnmoRcbiAgICBwcm90ZWN0ZWQgX2FuaXNvdHJvcHk6IG51bWJlcjsvL+iuvue9rue6ueeQhuaJgOacieaWueWQkeeahOacgOWkp+WAvFxuICAgIHByb3RlY3RlZCBfbWluRmlsdGVyOiBudW1iZXI7Ly/nurnnkIbnvKnlsI/ov4fmu6TmqKHlvI9cbiAgICBwcm90ZWN0ZWQgX21hZ0ZpbHRlcjogbnVtYmVyOy8v57q555CG5pS+5aSn6L+H5ruk5qih5byPXG4gICAgcHJvdGVjdGVkIF9taXBGaWx0ZXI6IG51bWJlcjsvLy/orr7nva7nurnnkIbnvKnlsI/ov4fmu6TnmoTmqKHlvI/kuLrnibnmrornmoTnur/mgKfov4fmu6RcbiAgICBwcm90ZWN0ZWQgX3dyYXBTOy8v6K6+572uc+aWueWQkeS4iueahOi0tOWbvuaooeW8j1xuICAgIHByb3RlY3RlZCBfd3JhcFQ7Ly/orr7nva505pa55ZCR5LiK55qE6LS05Zu+5qih5byPXG4gICAgcHJvdGVjdGVkIF9mb3JtYXQ6IGdsdGV4X2Zvcm1hdDsvL+e6ueeQhueahOagvOW8j1xuXG4gICAgcHJvdGVjdGVkIF90YXJnZXQ7Ly/nm67moIfnvJPlhrLljLpcbiAgICBwcm90ZWN0ZWQgX2lkOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgbG9hZGVkOmJvb2xlYW4gPSBmYWxzZTsvL+aYr+WQpuWKoOi9veWIsOWGheWtmFxuXG4gICAgcHJvdGVjdGVkIF9iaXRlczpudW1iZXIgPSAwOy8v57q555CG5ZyoR1BV56uv5omA5Y2g55qE5YaF5a2YXG5cbiAgICBjb25zdHJ1Y3RvcihnbCkge1xuICAgICAgICB0aGlzLl9nbCA9IGdsO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSAtMTtcbiAgICAgICAgdGhpcy5faWQgPSBfdGV4dHVyZUlEKys7XG4gICAgICAgIHRoaXMuX2dsSUQgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIHRoaXMuX2JpdGVzID0gMDtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc29sZS5sb2coXCItX2lkLS0tLS0tLVwiLCB0aGlzLl9pZCk7XG4gICAgfVxuICAgIHByb3RlY3RlZCB1cGRhdGVPcHRpb25zKG9wdGlvbnM6IFRleHR1cmVVcGRhdGVPcHRzKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3dpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQ7XG4gICAgICAgIHRoaXMuX2dlbk1pcG1hcHMgPSBvcHRpb25zLmdlbk1pcG1hcHM7XG4gICAgICAgIHRoaXMuX2FuaXNvdHJvcHkgPSBvcHRpb25zLmFuaXNvdHJvcHk7XG4gICAgICAgIHRoaXMuX21pbkZpbHRlciA9IG9wdGlvbnMubWluRmlsdGVyO1xuICAgICAgICB0aGlzLl9tYWdGaWx0ZXIgPSBvcHRpb25zLm1hZ0ZpbHRlcjtcbiAgICAgICAgdGhpcy5fbWlwRmlsdGVyID0gb3B0aW9ucy5taXBGaWx0ZXI7XG4gICAgICAgIHRoaXMuX3dyYXBTID0gb3B0aW9ucy53cmFwUztcbiAgICAgICAgdGhpcy5fd3JhcFQgPSBvcHRpb25zLndyYXBUO1xuICAgICAgICAvLyB3cmFwUiBhdmFpbGFibGUgaW4gd2ViZ2wyXG4gICAgICAgIC8vIHRoaXMuX3dyYXBSID0gZW51bXMuV1JBUF9SRVBFQVQ7XG4gICAgICAgIHRoaXMuX2Zvcm1hdCA9IG9wdGlvbnMuZm9ybWF0O1xuXG4gICAgICAgIHRoaXMuX2Zvcm1hdCA9IG9wdGlvbnMuZm9ybWF0O1xuICAgICAgICB0aGlzLl9jb21wcmVzc2VkID0gXG4gICAgICAgICAgKHRoaXMuX2Zvcm1hdCA+PSBnbHRleF9mb3JtYXQuUkdCX0RYVDEgJiYgdGhpcy5fZm9ybWF0IDw9IGdsdGV4X2Zvcm1hdC5SR0JBX1BWUlRDXzRCUFBWMSkgfHwgXG4gICAgICAgICAgKHRoaXMuX2Zvcm1hdCA+PSBnbHRleF9mb3JtYXQuUkdCX0VUQzIgJiYgdGhpcy5fZm9ybWF0IDw9IGdsdGV4X2Zvcm1hdC5SR0JBX0VUQzIpO1xuXG4gICAgICAgICAgdGhpcy51cGRhdGVOb3JtYWxCeXRlcygpO1xuICAgIH1cbiAgICBcbiAgICAvL+abtOaWsOWtl+iKguaVsFxuICAgIHByaXZhdGUgdXBkYXRlTm9ybWFsQnl0ZXMoKTp2b2lke1xuICAgICAgICBpZih0aGlzLl9jb21wcmVzc2VkPT1mYWxzZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fYml0ZXMgPSAodGhpcy5fd2lkdGggKiB0aGlzLl9oZWlnaHQgKiBnbFRleHR1cmVDaGFuZWxUb3RhbEJ5dGVzKHRoaXMuX2Zvcm1hdCkpLzEwMjQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy/mm7TmlrDnlLHkuo7lvIDlkK/kuoZtaXBtYXDogIzpgKDmiJDnmoTnurnnkIblhoXlrZjlop7lpKfnmoTlrZfoioLmlbBcbiAgICBwcm90ZWN0ZWQgdXBkYXRlR2VuTWlwTWFwc0FkZEJpdGVzKCk6dm9pZHtcbiAgICAgICAgICAvL++8iDEv77yJXG4gICAgICAgICAgdGhpcy51cGRhdGVOb3JtYWxCeXRlcygpO1xuICAgICAgICAgIHRoaXMuX2JpdGVzID0gdGhpcy5fYml0ZXMqKDQvMyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG1ldGhvZCBkZXN0cm95XG4gICAgICovXG4gICAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLl9nbElEID09PSBfbnVsbFdlYkdMVGV4dHVyZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVGhlIHRleHR1cmUgYWxyZWFkeSBkZXN0cm95ZWQnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nbC5kZWxldGVUZXh0dXJlKHRoaXMuX2dsSUQpO1xuICAgICAgICB0aGlzLl9nbElEID0gX251bGxXZWJHTFRleHR1cmU7XG4gICAgfVxufSIsImltcG9ydCBMb2FkZXJNYW5hZ2VyIGZyb20gXCIuLi8uLi8uLi9Mb2FkZXJNYW5hZ2VyXCI7XG5pbXBvcnQge2dsdGV4X2ZpbHRlciwgZ2xUZXh0dXJlRm10SW5mb3IgfSBmcm9tIFwiLi4vZ2Z4L0dMRW51bXNcIjtcbmltcG9ydCB7IFRleHR1cmUsIFRleHR1cmVVcGRhdGVPcHRzIH0gZnJvbSBcIi4vVGV4dHVyZVwiO1xuXG4vKlxuXG4vL2dsLnRleEltYWdlMkTlsIYgcGl4ZWxzIOaMh+Wumue7mee7keWumueahOe6ueeQhuWvueixoVxuLy8gV2ViR0wxOlxudm9pZCBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBib3JkZXIsIGZvcm1hdCwgdHlwZSwgQXJyYXlCdWZmZXJWaWV3PyBwaXhlbHMpO1xudm9pZCBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCBmb3JtYXQsIHR5cGUsIEltYWdlRGF0YT8gcGl4ZWxzKTtcbnZvaWQgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIGxldmVsLCBpbnRlcm5hbGZvcm1hdCwgZm9ybWF0LCB0eXBlLCBIVE1MSW1hZ2VFbGVtZW50PyBwaXhlbHMpO1xudm9pZCBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCBmb3JtYXQsIHR5cGUsIEhUTUxDYW52YXNFbGVtZW50PyBwaXhlbHMpO1xudm9pZCBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCBmb3JtYXQsIHR5cGUsIEhUTUxWaWRlb0VsZW1lbnQ/IHBpeGVscyk7XG52b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIGZvcm1hdCwgdHlwZSwgSW1hZ2VCaXRtYXA/IHBpeGVscyk7XG5cbi8vIFdlYkdMMjpcbnZvaWQgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIGxldmVsLCBpbnRlcm5hbGZvcm1hdCwgd2lkdGgsIGhlaWdodCwgYm9yZGVyLCBmb3JtYXQsIHR5cGUsIEdMaW50cHRyIG9mZnNldCk7XG52b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgZm9ybWF0LCB0eXBlLCBIVE1MQ2FudmFzRWxlbWVudCBzb3VyY2UpO1xudm9pZCBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBib3JkZXIsIGZvcm1hdCwgdHlwZSwgSFRNTEltYWdlRWxlbWVudCBzb3VyY2UpOyBcbnZvaWQgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIGxldmVsLCBpbnRlcm5hbGZvcm1hdCwgd2lkdGgsIGhlaWdodCwgYm9yZGVyLCBmb3JtYXQsIHR5cGUsIEhUTUxWaWRlb0VsZW1lbnQgc291cmNlKTsgXG52b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgZm9ybWF0LCB0eXBlLCBJbWFnZUJpdG1hcCBzb3VyY2UpO1xudm9pZCBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBib3JkZXIsIGZvcm1hdCwgdHlwZSwgSW1hZ2VEYXRhIHNvdXJjZSk7XG52b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgZm9ybWF0LCB0eXBlLCBBcnJheUJ1ZmZlclZpZXcgc3JjRGF0YSwgc3JjT2Zmc2V0KTtcblxu5Y+C5pWw5YC86Kej5p6QXG5pbnRlcm5hbGZvcm1hdCAgICAgICAgdHlwZSAgICAgICAgICAgIOmAmumBk+aVsCDpgJrpgZPlrZfoioLmlbBcblJHQkEgICAgICAgICBcdCBVTlNJR05FRF9CWVRFXHQgICAgICAgIDRcdCAgICA0XG5SR0JcdCAgICAgICAgICAgICBVTlNJR05FRF9CWVRFXHQgICAgICAgIDNcdCAgICAzXG5SR0JBICAgICAgICAgICAgIFVOU0lHTkVEX1NIT1JUXzRfNF80XzRcdDRcdCAgICAyXG5SR0JBICAgICAgICAgXHQgVU5TSUdORURfU0hPUlRfNV81XzVfMVx0NFx0ICAgIDJcblJHQlx0ICAgICAgICAgICAgIFVOU0lHTkVEX1NIT1JUXzVfNl81ICAgM1x0ICAgIDJcbkxVTUlOQU5DRV9BTFBIQVx0IFVOU0lHTkVEX0JZVEUgICAgICAgXHQyXHQgICAgMlxuTFVNSU5BTkNFICAgXHQgVU5TSUdORURfQllURSAgICAgIFx0MVx0ICAgIDFcbkFMUEhBICAgICAgIFx0IFVOU0lHTkVEX0JZVEUgICAgICAgXHQxXHQgICAgMVxu5rOo5oSPaW50ZXJuYWxmb3JtYXTnmoTlgLzlv4Xpobvlkoxmb3JtYXTlgLzkv53mjIHkuIDoh7RcblxuXG4vL2dsLnRleFBhcmFtZXRlcmnorr7nva7nurnnkIblj4LmlbBcbmdsLnRleFBhcmFtZXRlcmkodGFyZ2V0LCBwbmFtZSwgcGFyYW0pIO+8jOWwhnBhcmFt55qE5YC86LWL57uZ57uR5a6a5Yiw55uu5qCH55qE57q555CG5a+56LGh55qEcG5hbWXlj4LmlbDkuIrjgIJcbuWPguaVsO+8mlxudGFyZ2V0OiBnbC5URVhUVVJFXzJEIOaIliBnbC5URVhUVVJFX0NVQkVfTUFQXG5wbmFtZTog5Y+v5oyH5a6aNOS4que6ueeQhuWPguaVsFxuXG7mlL7lpKfvvIhnbC5URVhUVVJFX01BUF9GSUxURVLvvIk65b2T57q555CG55qE57uY5Yi26IyD5Zu05q+U57q555CG5pys6Lqr5pu05aSn5pe277yM5aaC5L2V6I635Y+W57q555CG6aKc6Imy44CC5q+U5aaC77yM5bCGMTYqMTbnmoTnurnnkIblm77lg4/mmKDlsITliLAzMiozMuWDj+e0oOeahOepuumXtOaXtu+8jOe6ueeQhueahOWwuuWvuOWPmOS4uuWOn+Wni+eahOS4pOWAjeOAgum7mOiupOWAvOS4umdsLkxJTkVBUuOAglxu57yp5bCP77yIZ2wuVEVYVFVSRV9NSU5fRklMVEVS77yJOiDlvZPnurnnkIbnmoTnu5jliLbov5Tlm57mr5TnurnnkIbmnKzouqvmm7TlsI/ml7bvvIzlpoLkvZXojrflj5bnurnntKDpopzoibLjgILmr5TlpoLvvIzlsIYzMiozMueahOe6ueeQhuWbvuWDj+aYoOWwhOWIsDE2KjE25YOP57Sg56m66Ze06YeM77yM57q555CG55qE5bC65a+45bCx5Y+q5pyJ5Y6f5aeL55qE5LiA6Iis44CC6buY6K6k5YC85Li6Z2wuTkVBUkVTVF9NSVBNQVBfTElORUFS44CCXG7msLTlubPloavlhYXvvIhnbC5URVhUVVJFX1dSQVBfU++8iTog6KGo56S65aaC5L2V5a+557q555CG5Zu+5YOP5bem5L6n5oiW5Y+z5L6n5Yy65Z+f6L+b6KGM5aGr5YWF44CC6buY6K6k5YC85Li6Z2wuUkVQRUFU44CCXG7lnoLnm7TloavlhYXvvIhnbC5URVhUVVJFX1dSQVBfVO+8iTog6KGo56S65aaC5L2V5a+557q555CG5Zu+5YOP5LiK5pa55ZKM5LiL5pa555qE5Yy65Z+f6L+b6KGM5aGr5YWF44CC6buY6K6k5YC85Li6Z2wuUkVQRUFU44CCXG5wYXJhbTog57q555CG5Y+C5pWw55qE5YC8XG5cbuWPr+i1i+e7mSBnbC5URVhUVVJFX01BUF9GSUxURVIg5ZKMIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiDlj4LmlbDnmoTlgLxcblxuZ2wuTkVBUkVTVDog5L2/55So5Y6f57q555CG5LiK6Led56a75pig5bCE5ZCO5YOP57Sg5Lit5b+D5pyA6L+R55qE6YKj5Liq5YOP57Sg55qE6aKc6Imy5YC877yM5L2c5Li65paw5YOP57Sg55qE5YC844CCXG5cbmdsLkxJTkVBUjog5L2/55So6Led56a75paw5YOP57Sg5Lit5b+D5pyA6L+R55qE5Zub5Liq5YOP57Sg55qE6aKc6Imy5YC855qE5Yqg5p2D5bmz5Z2H77yM5L2c5Li65paw5YOP57Sg55qE5YC877yI5ZKMZ2wuTkVBUkVTVOebuOavlO+8jOivpeaWueazleWbvuWDj+i0qOmHj+abtOWlve+8jOS9huS5n+S8muaciei+g+Wkp+eahOW8gOmUgOOAgu+8iVxuXG7lj6/otYvnu5kgZ2wuVEVYVFVSRV9XUkFQX1Mg5ZKMIGdsLlRFWFRVUkVfV1JBUF9UIOeahOW4uOmHj++8mlxuXG5nbC5SRVBFQVQ6IOW5s+mTuuW8j+eahOmHjeWkjee6ueeQhlxuXG5nbC5NSVJST1JFRF9SRVBFQVQ6IOmVnOWDj+WvueensOeahOmHjeWkjee6ueeQhlxuXG5nbC5DTEFNUF9UT19FREdFOiDkvb/nlKjnurnnkIblm77lg4/ovrnnvJjlgLxcbiovXG5cbmV4cG9ydCBjbGFzcyBUZXh0dXJlMkQgZXh0ZW5kcyBUZXh0dXJle1xuICAgIGNvbnN0cnVjdG9yKGdsKXtcbiAgICAgICAgc3VwZXIoZ2wpO1xuICAgICAgICB0aGlzLl90YXJnZXQgPSBnbC5URVhUVVJFXzJEO1xuICAgIH1cbiAgICBwcml2YXRlIF91cmw6c3RyaW5nO1xuICAgIHB1YmxpYyBzZXQgdXJsKHNvdWNlUGF0aCl7XG4gICAgICAgIHZhciBpbWFnZSA9IExvYWRlck1hbmFnZXIuaW5zdGFuY2UuZ2V0Q2FjaGVJbWFnZShzb3VjZVBhdGgpO1xuICAgICAgICB0aGlzLl91cmwgPSBzb3VjZVBhdGg7XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSBuZXcgVGV4dHVyZVVwZGF0ZU9wdHMoKTtcbiAgICAgICAgb3B0aW9ucy5pbWFnZSA9IGltYWdlO1xuICAgICAgICBvcHRpb25zLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub25Mb2FkSW1hZ2VGaW5pc2goaW1hZ2UpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiYnl0ZXMtLS0tLS0tLS0tXCIsdGhpcy5fYml0ZXMpO1xuICAgIH1cblxuICAgIC8v5Yqg6L295Zu+54mH5a6M5oiQXG4gICAgcHJpdmF0ZSBvbkxvYWRJbWFnZUZpbmlzaChpbWFnZTpIVE1MSW1hZ2VFbGVtZW50KTp2b2lke1xuICAgICAgICBcbiAgICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgICAgLy8g5oyH5a6a5b2T5YmN5pON5L2c55qE6LS05Zu+XG4gICAgICAgIHRoaXMuX2dsLmJpbmRUZXh0dXJlKHRoaXMuX3RhcmdldCx0aGlzLl9nbElEKTtcbiAgICAgICAgLy8gWSDovbTlj5blj41cbiAgICAgICAgdGhpcy5fZ2wucGl4ZWxTdG9yZWkodGhpcy5fZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIGZvcm1hdEluZm8gPSBnbFRleHR1cmVGbXRJbmZvcih0aGlzLl9mb3JtYXQpO1xuXG4gICAgICAgIC8vIOWIm+W7uui0tOWbviwg57uR5a6a5a+55bqU55qE5Zu+5YOP5bm26K6+572u5pWw5o2u5qC85byPXG4gICAgICAgICAvLyB0aGlzLl9nbC50ZXhJbWFnZTJEKFxuICAgICAgICAgLy8gICAgICB0aGlzLl90YXJnZXQsXG4gICAgICAgICAvLyAgICAgIDAsIC8vIOWwseaYr+i/meS4quWPguaVsOaMh+WumuWHoOe6pyBNaXBtYXBcbiAgICAgICAgIC8vICAgICAgdGhpcy5fZ2wuUkdCQSwgXG4gICAgICAgICAvLyAgICAgIHRoaXMuX2dsLlJHQkEsIFxuICAgICAgICAgLy8gICAgICB0aGlzLl9nbC5VTlNJR05FRF9CWVRFLCBcbiAgICAgICAgIC8vICAgICAgaW1hZ2UpO1xuICAgICAgICAgLy8yNTYqMjU2ICAgcChncHXlhoXlrZgpID0gd2lkdGggKiBoZWlnaHQgKiA0IC8xMDI0ID0gMjU2a1xuICAgICAgICAgdGhpcy5fZ2wudGV4SW1hZ2UyRCh0aGlzLl90YXJnZXQsMCwgZm9ybWF0SW5mby5mb3JtYXQsZm9ybWF0SW5mby5pbnRlcm5hbEZvcm1hdCxmb3JtYXRJbmZvLnBpeGVsVHlwZSwgaW1hZ2UpO1xuICAgICAgICAgLy8yNTYqMjU2ICBwKGdwdeWGheWtmCkgPSB3aWR0aCAqIGhlaWdodCAqIDMgLzEwMjQgPTM0MiAtIDM0Mi80ID0gMTkyayDnm7jlvZPkuo7lhoXlrZjlh4/lsJExLzRcbiAgICAgICAgICAvL3RoaXMuX2dsLnRleEltYWdlMkQodGhpcy5fdGFyZ2V0LCAwLCB0aGlzLl9nbC5SR0IsdGhpcy5fZ2wuUkdCLCB0aGlzLl9nbC5VTlNJR05FRF9CWVRFLCBpbWFnZSk7XG4gICAgICAgIFxuICAgICAgICAvLyAgIHRoaXMuX2dsLnBpeGVsU3RvcmVpKHRoaXMuX2dsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xuXG4gICAgICAgICAvLyDnlJ/miJAgTWlwTWFwIOaYoOWwhFxuICAgICAgICAgLy8g6aaW5YWI6KaB6LCD55So5q2k5pa55rOVXG4gICAgICAgICAvLyDopoHlnKh0ZXhJbWFnZTJEIOWQjuiwg+eUqO+8jOWQpuWImeS8muaKpemUmWVycm9yOkdMX0lOVkFMSURfT1BFUkFUSU9OICBnbC5nZW5lcmF0ZU1pcG1hcCh0aGlzLl90YXJnZXQpXG4gICAgICAgICAvL+WmguaenOW8gOWQr+atpOaKgOacr+WvueS6jjI1NioyNTbov5nkuKrotLTlm74g5a6D55qE5YaF5a2Y5Y2g55So5Lya5q+U5Y6f5p2l5aSa5Ye65LiJ5YiG5LmL5LiAXG4gICAgICAgICAvLzI1NioyNTYgcChncHXlhoXlrZgpID0gKHdpZHRoICogaGVpZ2h0ICogNCAvMTAyNCkqKDQvMykgPTM0MlxuICAgICAgICAgLy/og73lpJ/kvb/nlKjov5nkuKrmioDmnK/nmoTlm77niYfnmoTlrr3pq5jlv4XpobvmmK8y55qE5bmCXG4gICAgICAgICAvL+atpOaKgOacr+W8gOWQr+S7peWQju+8jOS8mueUn+aIkOS7peS4i+e6p+WIq+eahOWbvueJh++8jDI1NioyNTbov5nkuKrmmK8w57qnXG4gICAgICAgICAvL+e6p+WIq++8mjEyOCoxMjjvvIgx77yJLDY0KjY077yIMe+8iSwzMiozMu+8iDHvvIksMTYqMTbvvIgx77yJLDgqOO+8iDHvvIksNCo077yIMe+8iSwyKjLvvIgx77yJLDEqMe+8iDHvvIlcbiAgICAgICAgIC8v5a6e5pe25riy5p+T5pe277yM5qC55o2u6YeH5qC35a+G5bqm6YCJ5oup5YW25Lit55qE5p+Q5LiA57qn57q555CG77yM5Lul5q2k6YG/5YWN6L+Q6KGM5pe255qE5aSn6YeP6K6h566XXG4gICAgICAgICBpZih0aGlzLl9nZW5NaXBtYXBzJiZ0aGlzLmlzUG93MihpbWFnZS53aWR0aCkmJnRoaXMuaXNQb3cyKGltYWdlLmhlaWdodCkpXG4gICAgICAgICB7XG4gICAgICAgICAgICAvLyAgdGhpcy5fZ2wuaGludCh0aGlzLl9nbC5HRU5FUkFURV9NSVBNQVBfSElOVCwgdGhpcy5fZ2wuTklDRVNUKTtcbiAgICAgICAgICAgIHRoaXMuX2dsLmdlbmVyYXRlTWlwbWFwKHRoaXMuX3RhcmdldCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUdlbk1pcE1hcHNBZGRCaXRlcygpO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSBpZih0aGlzLl9nZW5NaXBtYXBzKVxuICAgICAgICAge1xuICAgICAgICAgICAgIGNvbnNvbGUud2FybignTlBPVCB0ZXh0dXJlcyBkbyBub3Qgc3VwcG9ydCBtaXBtYXAgZmlsdGVyJyk7XG4gICAgICAgICAgICAgdGhpcy5fZ2VuTWlwbWFwcyA9IGZhbHNlO1xuICAgICAgICAgfVxuXG5cbiAgICAgICAgLy/nibnliKvms6jmhI9cbiAgICAgICAgaWYodGhpcy5pc1BvdzIoaW1hZ2Uud2lkdGgpPT1mYWxzZXx8dGhpcy5pc1BvdzIoaW1hZ2UuaGVpZ2h0KT09ZmFsc2UpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignV2ViR0wxIGRvZXNuXFwndCBzdXBwb3J0IGFsbCB3cmFwIG1vZGVzIHdpdGggTlBPVCB0ZXh0dXJlcycpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogTUlOX0ZJTFRFUiDlkowgTUFHX0ZJTFRFUlxuICAgICAgICAgKiAtLS0tLS0tLS0tLS0t5a+55LqO57q555CG55qE5pS+5aSnXG4gICAgICAgICAqIOS4gOS4que6ueeQhuaYr+eUseemu+aVo+eahOaVsOaNrue7hOaIkOeahO+8jOavlOWmguS4gOS4qiAyeDIg55qE57q555CG5piv55SxIDQg5Liq5YOP57Sg57uE5oiQ55qE77yM5L2/55SoICgwLDAp44CBKDAsIDEpIOetieWbm+S4quWdkOagh+WOu+e6ueeQhuS4iuWPluagt++8jOiHqueEtuWPr+S7peWPluWIsOWvueW6lOeahOWDj+e0oOminOiJsu+8m1xuICAgICAgICAgKiDkvYbmmK/vvIzlpoLmnpzkvb/nlKjpnZ7mlbTmlbDlnZDmoIfliLDov5nkuKrnurnnkIbkuIrljrvlj5boibLjgILmr5TlpoLvvIzlvZPov5nkuKrnurnnkIbooqvjgIzmi4nov5HjgI3kuYvlkI7vvIzlnKjlsY/luZXkuIrljaDmja7kuoYgNHg0IOS4gOWFsSAxNiDkuKrlg4/ntKDvvIxcbiAgICAgICAgICog6YKj5LmI5bCx5Lya5L2/55SoICgwLjMzLDApIOS5i+exu+eahOWdkOagh+WOu+WPluWAvO+8jOWmguS9leagueaNruemu+aVo+eahCA0IOS4quWDj+e0oOminOiJsuWOu+iuoeeulyAoMC4zMywwKSDlpITnmoTpopzoibLvvIzlsLHlj5blhrPkuo7lj4LmlbAgTUFHX0ZJTFRFUlxuICAgICAgICAgKiBNQUdfRklMVEVS77yI5pS+5aSn77yJIOacieS4pOS4quWPr+mAiemhue+8jE5FQVJFU1Qg5ZKMIExJTkVBUuOAglxuICAgICAgICAgKiDpob7lkI3mgJ3kuYnvvIxORUFSRVNUIOWwseaYr+WOu+WPlui3neemu+W9k+WJjeWdkOagh+acgOi/keeahOmCo+S4quWDj+e0oOeahOminOiJsu+8jOiAjCBMSU5FQVIg5YiZ5Lya5qC55o2u6Led56a75b2T5YmN5Z2Q5qCH5pyA6L+R55qEIDQg5Liq54K55Y675YaF5o+S6K6h566X5Ye65LiA5Liq5pWw5YC8XG4gICAgICAgICAqIE5FQVJFU1TvvJrpgJ/luqblv6vvvIzkvYblm77niYfooqvmlL7nmoTmr5TovoPlpKfnmoTml7blgJks5Zu+54mH55qE6aKX57KS5oSf5Lya5q+U6L6D5piO5pi+XG4gICAgICAgICAqIExJTkVBUu+8miDpgJ/luqbmhaLngrnvvIzkvYblm77niYfkvJrmmL7npLrnmoTmm7Tpobrmu5HkuIDngrlcbiAgICAgICAgICogLS0tLS0tLS0tLS0tLeWvueS6jue6ueeQhueahOe8qeWwj1xuICAgICAgICAgKiBNSU5fRklMVEVS77yI57yp5bCP77yJIOacieS7peS4iyA2IOS4quWPr+mAiemFjee9rumhue+8mlxuICAgICAgICAgKiBORUFSRVNUXG4gICAgICAgICAqIExJTkVBUlxuICAgICAgICAgKiBORUFSRVNUX01JUE1BUF9ORUFSRVNUXG4gICAgICAgICAqIE5FQVJFU1RfTUlQTUFQX0xJTkVBUlxuICAgICAgICAgKiBMSU5FQVJfTUlQTUFQX05FQVJFU1RcbiAgICAgICAgICogTElORUFSX01JUE1BUF9MSU5FQVJcbiAgICAgICAgICog5YmN5Lik5Liq6YWN572u6aG55ZKMIE1BR19GSUxURVIg55qE5ZCr5LmJ5ZKM5L2c55So5piv5a6M5YWo5LiA5qC355qE44CCXG4gICAgICAgICAqIOS9humXrumimOaYr++8jOW9k+e6ueeQhuiiq+e8qeWwj+aXtu+8jOWOn+e6ueeQhuS4reW5tuS4jeaYr+avj+S4gOS4quWDj+e0oOWRqOWbtOmDveS8muiQveS4iumHh+agt+eCue+8jOi/meWwseWvvOiHtOS6huafkOS6m+WDj+e0oO+8jOWujOWFqOayoeacieWPguS4jue6ueeQhueahOiuoeeul++8jOaWsOe6ueeQhuS4ouWkseS6huS4gOS6m+S/oeaBr+OAglxuICAgICAgICAgKiDlgYforr7kuIDnp43mnoHnq6/nmoTmg4XlhrXvvIzlsLHmmK/kuIDkuKrnurnnkIblvbvlupXnvKnlsI/kuLrkuobkuIDkuKrngrnvvIzpgqPkuYjov5nkuKrngrnnmoTlgLzlupTlvZPmmK/nurnnkIbkuIrmiYDmnInlg4/ntKDpopzoibLnmoTlubPlnYflgLzvvIzov5nmiY3mr5TovoPlkIjnkIbjgIJcbiAgICAgICAgICog5L2G5pivIE5FQVJFU1Qg5Y+q5Lya5LuO57q555CG5Lit5Y+W5LiA5Liq54K577yM6ICMIExJTkVBUiDkuZ/lj6rmmK/ku47nurnnkIbkuK3lj5bkuoblm5vkuKrngrnorqHnrpfkuobkuIDkuIvogIzlt7LjgILov5nml7blgJnvvIzlsLHor6XnlKjkuIogTUlQTUFQIOS6hlxuICAgICAgICAgKiBcbiAgICAgICAgICog5Li65LqG5Zyo57q555CG57yp5bCP5Lmf6I635b6X5q+U6L6D5aW955qE5pWI5p6c77yM6ZyA6KaB5oyJ54Wn6YeH5qC35a+G5bqm77yM6YCJ5oup5LiA5a6a5pWw6YeP77yI6YCa5bi45aSn5LqOIExJTkVBUiDnmoQgNCDkuKrvvIzmnoHnq6/mg4XlhrXkuIvkuLrljp/nurnnkIbkuIrmiYDmnInlg4/ntKDvvInnmoTlg4/ntKDov5vooYzorqHnrpfjgIJcbiAgICAgICAgICog5a6e5pe26L+b6KGM6K6h566X55qE5byA6ZSA5piv5b6I5aSn55qE77yM5omA5pyJ5pyJ5LiA56eN56ew5Li6IE1JUE1BUO+8iOmHkeWtl+WhlO+8ieeahOaKgOacr+OAglxuICAgICAgICAgKiDlnKjnurnnkIbliJvlu7rkuYvliJ3vvIzlsLHkuLrnurnnkIbliJvlu7rlpb0gTUlQTUFQ77yM5q+U5aaC5a+5IDUxMng1MTIg55qE57q555CG77yM5L6d5qyh5bu656uLIDI1NngyNTbvvIjnp7DkuLogMSDnuqcgTWlwbWFw77yJ44CBMTI4eDEyOO+8iOensOS4uiAyIOe6pyBNaXBtYXDvvIkg5LmD6IezIDJ4MuOAgTF4MSDnmoTnurnnkIbjgIJcbiAgICAgICAgICog5a6e5pe25riy5p+T5pe277yM5qC55o2u6YeH5qC35a+G5bqm6YCJ5oup5YW25Lit55qE5p+Q5LiA57qn57q555CG77yM5Lul5q2k6YG/5YWN6L+Q6KGM5pe255qE5aSn6YeP6K6h566XXG4gICAgICAgICAqL1xuICAgICAgICAvLyDorr7lrprlj4LmlbAsIOaUvuWkp+a7pOmVnOWSjOe8qeWwj+a7pOmVnOeahOmHh+agt+aWueW8j1xuICAgICAgICAvL+aUvuWkp1xuICAgICAgICB0aGlzLl9nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuX3RhcmdldCwgdGhpcy5fZ2wuVEVYVFVSRV9NQUdfRklMVEVSLGdsdGV4X2ZpbHRlci5MSU5FQVIpO1xuICAgICAgICAvL+e8qeWwj1xuICAgICAgICAvL+S4gOaXpuS9v+eUqChORUFSRVNUX01JUE1BUF9ORUFSRVNU77yMTkVBUkVTVF9NSVBNQVBfTElORUFS77yMTElORUFSX01JUE1BUF9ORUFSRVNU77yMTElORUFSX01JUE1BUF9MSU5FQVIpXG4gICAgICAgIGlmKHRoaXMuX2dlbk1pcG1hcHMpXG4gICAgICAgIHtcbiAgICAgICAgICAgICAvL+ivtOaYjuWwseimgeS9v+eUqG1pcG1hcOS6huWVilxuICAgICAgICAgICAgdGhpcy5fZ2wudGV4UGFyYW1ldGVyaSh0aGlzLl90YXJnZXQsIHRoaXMuX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUixnbHRleF9maWx0ZXIuTElORUFSX01JUE1BUF9MSU5FQVIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fZ2wudGV4UGFyYW1ldGVyaSh0aGlzLl90YXJnZXQsIHRoaXMuX2dsLlRFWFRVUkVfTUlOX0ZJTFRFUixnbHRleF9maWx0ZXIuTElORUFSKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOiuvuWumuWPguaVsCwgeCDovbTlkowgeSDovbTkuLrplZzpnaLph43lpI3nu5jliLZcbiAgICAgICAgLy/nurnnkIbnmoTloavlhYXmqKHlvI9cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGdsLlJFUEVBVFxuICAgICAgICAgKiBnbC5DTEFNUF9UT19FREdFXG4gICAgICAgICAqIGdsLk1JUlJPUkVEX1JFUEVBVFxuICAgICAgICAgKi9cbiAgICAgICAgLy/msLTlubPmlrnlkJFcbiAgICAgICAgdGhpcy5fZ2wudGV4UGFyYW1ldGVyaSh0aGlzLl90YXJnZXQsIHRoaXMuX2dsLlRFWFRVUkVfV1JBUF9TLHRoaXMuX3dyYXBTKTtcbiAgICAgICAgLy/lnoLnm7TmlrnlkJFcbiAgICAgICAgdGhpcy5fZ2wudGV4UGFyYW1ldGVyaSh0aGlzLl90YXJnZXQsIHRoaXMuX2dsLlRFWFRVUkVfV1JBUF9ULHRoaXMuX3dyYXBUKTtcblxuICAgICAgICBcblxuICAgICAgICAvLyDmuIXpmaTlvZPliY3mk43kvZznmoTotLTlm75cbiAgICAgICAgdGhpcy5fZ2wuYmluZFRleHR1cmUodGhpcy5fdGFyZ2V0LCBudWxsKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpOnZvaWR7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICAvL+WIpOaWreW9k+WJjeaVsOaYr+S4jeaYrzLnmoTluYJcbiAgICBwdWJsaWMgaXNQb3cyKHYpIHtcbiAgICByZXR1cm4gISh2ICYgKHYgLSAxKSkgJiYgKCEhdik7XG59XG5cbn0iLCJpbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcIi4vVGV4dHVyZVwiO1xyXG5pbXBvcnQgeyBnbHRleF93cmFwLCBnbHRleF9maWx0ZXIgfSBmcm9tIFwiLi4vZ2Z4L0dMRW51bXNcIjtcclxuXHJcbi8qKlxyXG4gKiDnq4vmlrnkvZPnurnnkIZcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRleHR1cmVDdWJlIGV4dGVuZHMgVGV4dHVyZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihnbCkge1xyXG4gICAgICAgIHN1cGVyKGdsKTtcclxuICAgICAgICB0aGlzLl90YXJnZXQgPSBnbC5URVhUVVJFX0NVQkVfTUFQO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBmYWNlSW5mb3M6IEFycmF5PHsgdGFyZ2V0LCB1cmwgfT47XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBwYXRoIFxyXG4gICAgICogMDpyaWdodFxyXG4gICAgICogMTpsZWZ0XHJcbiAgICAgKiAyOnVwXHJcbiAgICAgKiAzOmRvd25cclxuICAgICAqIDQ6YmFja1xyXG4gICAgICogNTpmcm9udFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IHVybChwYXRoOiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICAgICAgdGhpcy5mYWNlSW5mb3MgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcy5fZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YLFxyXG4gICAgICAgICAgICAgICAgdXJsOiBwYXRoWzBdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMuX2dsLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWCxcclxuICAgICAgICAgICAgICAgIHVybDogcGF0aFsxXSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLl9nbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ksXHJcbiAgICAgICAgICAgICAgICB1cmw6IHBhdGhbMl0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcy5fZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZLFxyXG4gICAgICAgICAgICAgICAgdXJsOiBwYXRoWzNdLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRoaXMuX2dsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWixcclxuICAgICAgICAgICAgICAgIHVybDogcGF0aFs0XSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLl9nbC5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1osXHJcbiAgICAgICAgICAgICAgICB1cmw6IHBhdGhbNV0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkRmFjZUluZm9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/liqDovb3lkITkuKrpnaLkv6Hmga9cclxuICAgIHByaXZhdGUgbG9hZEZhY2VJbmZvcigpOiB2b2lkIHtcclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLl9nbDtcclxuICAgICAgICB2YXIgdGV4dHVyZSA9IHRoaXMuX2dsSUQ7XHJcbiAgICAgICAgZ2wuYmluZFRleHR1cmUodGhpcy5fdGFyZ2V0LCB0ZXh0dXJlKTtcclxuICAgICAgICB2YXIgbG9hZGVkQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuZmFjZUluZm9zLmZvckVhY2goKGZhY2VJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdGFyZ2V0LCB1cmwgfSA9IGZhY2VJbmZvO1xyXG5cclxuICAgICAgICAgICAgLy8gVXBsb2FkIHRoZSBjYW52YXMgdG8gdGhlIGN1YmVtYXAgZmFjZS5cclxuICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSAwO1xyXG4gICAgICAgICAgICBjb25zdCBpbnRlcm5hbEZvcm1hdCA9IGdsLlJHQkE7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IGdsLlJHQkE7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IDUxMjtcclxuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gNTEyO1xyXG4gICAgICAgICAgICAvLyBzZXR1cCBlYWNoIGZhY2Ugc28gaXQncyBpbW1lZGlhdGVseSByZW5kZXJhYmxlXHJcbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCAwLCBpbnRlcm5hbEZvcm1hdCwgdHlwZSwgbnVsbCk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gQXN5bmNocm9ub3VzbHkgbG9hZCBhbiBpbWFnZVxyXG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICBpbWFnZS5zcmMgPSB1cmw7XHJcbiAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIuWKoOi9veWbvueJh+aIkOWKn+WVpi0tLVwiKTtcclxuICAgICAgICAgICAgICAgIC8vIE5vdyB0aGF0IHRoZSBpbWFnZSBoYXMgbG9hZGVkIG1ha2UgY29weSBpdCB0byB0aGUgdGV4dHVyZS5cclxuICAgICAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKHRoaXMuX3RhcmdldCwgdGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgLy8gWSDovbTlj5blj41cclxuICAgICAgICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGZvcm1hdCwgaW50ZXJuYWxGb3JtYXQsIHR5cGUsIGltYWdlKTtcclxuICAgICAgICAgICAgICAgIGxvYWRlZENvdW50Kys7XHJcbiAgICAgICAgICAgICAgICBpZihsb2FkZWRDb3VudD09NilcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vICAgZ2wuZ2VuZXJhdGVNaXBtYXAoZ2wuVEVYVFVSRV9DVUJFX01BUCk7XHJcblxyXG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvL2dsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfQ1VCRV9NQVApO1xyXG5cclxuICAgICAgICAvL+aUvuWkp1xyXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGhpcy5fdGFyZ2V0LCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsdGV4X2ZpbHRlci5MSU5FQVIpO1xyXG4gICAgICAgIC8v57yp5bCPXHJcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaSh0aGlzLl90YXJnZXQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2x0ZXhfZmlsdGVyLkxJTkVBUik7XHJcbiAgICAgICAgLy/msLTlubPmlrnlkJFcclxuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRoaXMuX3RhcmdldCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsdGV4X3dyYXAuTUlSUk9SKTtcclxuICAgICAgICAvL+WeguebtOaWueWQkVxyXG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGhpcy5fdGFyZ2V0LCBnbC5URVhUVVJFX1dSQVBfVCwgZ2x0ZXhfd3JhcC5NSVJST1IpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gXCIuL1RleHR1cmVcIjtcclxuaW1wb3J0IHsgR0xhcGkgfSBmcm9tIFwiLi4vZ2Z4L0dMYXBpXCI7XHJcblxyXG4vKipcclxuICog6Ieq5a6a5LmJ57q555CGXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXh0dXJlQ3VzdG9tIGV4dGVuZHMgVGV4dHVyZXtcclxuICAgIGNvbnN0cnVjdG9yKGdsKXtcclxuICAgICAgICBzdXBlcihnbCk7XHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRDtcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtsZXZlbCxpbnRlcm5hbEZvcm1hdCx3aWR0aCxoZWlnaHQsYm9yZGVyLGZvcm1hdCx0eXBlLGRhdGEsYWxpZ25tZW50fSB1cmxEYXRhXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgdXJsKHVybERhdGEpe1xyXG4gICAgICAgIHRoaXMuaW5pdFRleHR1cmUodXJsRGF0YSk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGluaXRUZXh0dXJlKHVybERhdGE6e2xldmVsLGludGVybmFsRm9ybWF0LHdpZHRoLGhlaWdodCxib3JkZXIsZm9ybWF0LHR5cGUsZGF0YSxhbGlnbm1lbnR9KSB7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLl9nbDtcclxuICAgICAgICBnbC5iaW5kVGV4dHVyZSh0aGlzLl90YXJnZXQsdGhpcy5fZ2xJRCk7XHJcblxyXG4gICAgICAgIC8vIGZpbGwgdGV4dHVyZSB3aXRoIDN4MiBwaXhlbHNcclxuICAgICAgICB2YXIgbGV2ZWwgPSB1cmxEYXRhLmxldmVsfHwwO1xyXG4gICAgICAgIHZhciBpbnRlcm5hbEZvcm1hdCA9IHVybERhdGEuaW50ZXJuYWxGb3JtYXQ7XHJcbiAgICAgICAgdmFyIHdpZHRoID0gdXJsRGF0YS53aWR0aDtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdXJsRGF0YS5oZWlnaHQ7XHJcbiAgICAgICAgdmFyIGJvcmRlciA9IHVybERhdGEuYm9yZGVyfHwwO1xyXG4gICAgICAgIHZhciBmb3JtYXQgPSB1cmxEYXRhLmZvcm1hdDtcclxuICAgICAgICB2YXIgdHlwZSA9IHVybERhdGEudHlwZXx8Z2wuVU5TSUdORURfQllURTtcclxuICAgICAgICB2YXIgZGF0YSA9IHVybERhdGEuZGF0YTtcclxuICAgICAgICB2YXIgYWxpZ25tZW50ID0gdXJsRGF0YS5hbGlnbm1lbnR8fDE7XHJcblxyXG5cclxuICAgICAgICBHTGFwaS5waXhlbFN0b3JlaShnbC5VTlBBQ0tfQUxJR05NRU5ULCBhbGlnbm1lbnQpO1xyXG4gICAgICAgIEdMYXBpLnRleEltYWdlMkQodGhpcy5fdGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlcixcclxuICAgICAgICAgICAgZm9ybWF0LCB0eXBlLCBkYXRhKTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHRoZSBmaWx0ZXJpbmcgc28gd2UgZG9uJ3QgbmVlZCBtaXBzIGFuZCBpdCdzIG5vdCBmaWx0ZXJlZFxyXG4gICAgICAgIEdMYXBpLnRleFBhcmFtZXRlcmkodGhpcy5fdGFyZ2V0LCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xyXG4gICAgICAgIEdMYXBpLnRleFBhcmFtZXRlcmkodGhpcy5fdGFyZ2V0LCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xyXG4gICAgICAgIEdMYXBpLnRleFBhcmFtZXRlcmkodGhpcy5fdGFyZ2V0LCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XHJcbiAgICAgICAgR0xhcGkudGV4UGFyYW1ldGVyaSh0aGlzLl90YXJnZXQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcclxuICAgIH1cclxuXHJcbn0iLCJcbmltcG9ydCBlbnVtcyBmcm9tIFwiLi9lbnVtc1wiO1xuaW1wb3J0IHsgUmVuZGVyVGV4dHVyZSB9IGZyb20gXCIuLi9hc3NldHMvUmVuZGVyVGV4dHVyZVwiO1xuaW1wb3J0IEZyYW1lQnVmZmVyIGZyb20gXCIuLi9nZngvRnJhbWVCdWZmZXJcIjtcbmltcG9ydCB7IE5vZGUgfSBmcm9tIFwiLi4vYmFzZS9Ob2RlXCI7XG5pbXBvcnQgeyBnbE1hdHJpeCB9IGZyb20gXCIuLi8uLi9NYXRyaXhcIjtcblxuLyoqXG4gKiBcbiAqIOOAkDAgIDQgIDggICAxMuOAkVxuICog44CQMSAgNSAgOSAgIDEz44CRXG4gKiDjgJAyICA2ICAxMCAgMTTjgJFcbiAqIOOAkDMgIDcgIDExICAxNeOAkVxuICogXG4gKiDln7rnoYDnkIbop6Mx77yaXG4gKiDmkYTlg4/mnLrkvJrpgKDkuIDkuKrmqKHlnovnn6npmLXlkozkuIDkuKrpgI/op4bnn6npmLVcbiAqIOaooeWei+efqemYtVZNXG4gKiBcbiAqIOW5s+enuy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIOWPquacie+8iDEy77yMMTPvvIwxNO+8jDE177yJ5Y+C5LiO6L+Q566XXG4gKiAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xuICAgIG91dFsxM10gPSBhWzFdICogeCArIGFbNV0gKiB5ICsgYVs5XSAqIHogKyBhWzEzXTtcbiAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XG4gKiAgICAoNHg0KSAgICAgICAgICAoNHgxKVxuICogICB4ICB5ICB6ICB3XG4gKiDjgJAxICAwICAwICAw44CRICAgIOOAkHgx44CRICAgICAgICAgICAgICAgICDjgJB4MeOAkSAgICAgICAgICAgICAgICAg44CQMSAgMCAgMCAgeDHjgJFcbiAqIOOAkDAgIDEgIDAgIDDjgJEgICAg44CQeTHjgJEgICAgICAgICAgICAgICAgIOOAkHkx44CRdHJuc2xhdGUgICAgICAgICDjgJAwICAxICAwICB5MeOAkVxuICog44CQMCAgMCAgMSAgMOOAkS0tLT7jgJB6MeOAkS0tPuS4pOS4quefqemYteebuOS5mC0tPuOAkHox44CRLS0tLS0tLS0tLS0tLT4gICDjgJAwICAwICAxICB6MeOAkVxuICog44CQMCAgMCAgMCAgMeOAkSAgICDjgJAxIOOAkSAgICAgICAgICAgICAgICAg44CQMSDjgJEgIHNlbGYgYnVpbGQgICAgIOOAkDAgIDAgIDAgIDEg44CRXG4gKiBcbiAqIOe8qeaUvi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIG91dFswXSA9IGFbMF0gKiB4O1xuICAgIG91dFsxXSA9IGFbMV0gKiB4O1xuICAgIG91dFsyXSA9IGFbMl0gKiB4O1xuICAgIG91dFszXSA9IGFbM10gKiB4O1xuXG4gICAgb3V0WzRdID0gYVs0XSAqIHk7XG4gICAgb3V0WzVdID0gYVs1XSAqIHk7XG4gICAgb3V0WzZdID0gYVs2XSAqIHk7XG4gICAgb3V0WzddID0gYVs3XSAqIHk7XG5cbiAgICBvdXRbOF0gPSBhWzhdICogejtcbiAgICBvdXRbOV0gPSBhWzldICogejtcbiAgICBvdXRbMTBdID0gYVsxMF0gKiB6O1xuICAgIG91dFsxMV0gPSBhWzExXSAqIHo7XG4gKiDjgJAxICAwICAwICAw44CRICAgIOOAkHgy44CRICAgICAgICAgICAgICAgICDjgJB4MuOAkSAgICAgICAgICAgICAgICAg44CQeDIgIDAgICAwICAgeDHjgJFcbiAqIOOAkDAgIDEgIDAgIDDjgJEgICAg44CQeTLjgJEgICAgICAgICAgICAgICAgIOOAkHky44CRc2NhbGUgICAgICAgICAgICDjgJAwICAgeTIgIDAgICB5MeOAkVxuICog44CQMCAgMCAgMSAgMOOAkS0tLT7jgJB6MuOAkS0tPuS4pOS4quefqemYteebuOS5mC0tPuOAkHoy44CRLS0tLS0tLS0tLS0tLT4gICDjgJAwICAgMCAgIHoyICB6MeOAkVxuICog44CQMCAgMCAgMCAgMeOAkSAgICDjgJAxIOOAkSAgICAgICAgICAgICAgICAg44CQMSDjgJEgIHNlbGYgYnVpbGQgICAgIOOAkDAgICAwICAgMCAgICAx44CRXG4gKiBcbiAqIOaXi+i9rC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFxuICog6L+Z5piv5LiA5Liq6Z2e5bi45bmy5YeA55qE5qih5Z6L55+p6Zi177yM5Lu75L2V5LiA5Liq5ZCR6YeP5LmY5Lul6L+Z5Liq55+p6Zi16YO9562J5LqO5a6D6Ieq6LqrXG4gKiDnm7jmnLrnmoTkvY3nva5wb3Mg44CQeDEseTEsejHjgJFcbiAqIOebuOacuueahOe8qeaUvnNjYWzjgJB4Mix5Mix6MuOAkVxuICog55u45py655qE5bmz56e7dHJhc+OAkHgzLHkzLHoz44CRXG4gKiDlgYforr7nm7jmnLrmlL7lnKjkuJbnlYzlnZDmoIfns7vnmoTmraPkuK3lv4PjgJAwLDAsMOOAkVsxLDEsMV1bMCwwLDBdXG4gKiBcbiAqIOWcuuaZr+S8muS7juebuOacuuWTqumHjOe7p+aJv+i/meS4quefqemYtVZNXG4gKiDlnLrmma/kuZ/nu6fmib/oioLngrlOb2RlIOS7luS5n+aciei/meS4quS9jee9riDnvKnmlL4g5bmz56e755qE5Y+Y5YyWXG4gKi9cblxuLyoqXG4gKiDlnZDmoIfns7vvvJpcbiAqIOesm+WNoeWwlOWdkOagh+ezu++8mljovbTkuLrmsLTlubPmlrnlkJHvvIxZ6L205Li65Z6C55u05pa55ZCRXG4gKiDop4blj6PlnZDmoIc65bem5LiL6KeS5Li6KDAsMCks5Y+z5LiK6KeS5Li677yIMSwxKVxuICog5bGP5bmV5Z2Q5qCHOuWxj+W5leeahOW3puS4i+inkuS4uigwLDApLOS9huWPs+S4iuinkuS4uihzY3JlZW4ud2lkdGgsc2NyZWVuLmhlaWdodCnvvIxzY3JlZW4ud2lkdGjooajnpLrlsY/luZXlrr3luqbvvIxzY3JlZW4uaGVpZ2h06KGo56S65bGP5bmV6auY5bqmXG4gKiBVSeWdkOagh+ezuzrov5nkuKrlnZDmoIfns7vkuI7lsY/luZXlnZDmoIfns7vnm7jkvLzvvIzlt6bkuIvop5LkuLrvvIgw77yMMO+8ieeCue+8jOWPs+S4iuinkuS4uu+8iFNjcmVlbi53aWR0aO+8jFNjcmVlbi5oZWlnaHTvvIlcbiAqIHV25Z2Q5qCH57O777ya5bem5LiL6KeS5Li644CQMO+8jDDjgJHvvIzlj7PkuIrop5LkuLrjgJAxLDHjgJFcbiAqIOm9kOasoeijgeWIh+WdkOaghzrlsY/luZXmraPkuK3lv4PkuLrljp/ngrnvvIgwLDDvvInvvIzlnZDmoIfojIPlm7TmmK/jgJAtMSwx44CRXG4gKiBcbiAqIOW3puaJi+WdkOagh+ezu++8muWkp+aLh+aMh+WQkeWPs++8iCt477yJLOmjn+aMh+WQkeS4iu+8iCt577yJLOS4reaMh+WQkeWJje+8iCt677yJXG4gKiDlj7PmiYvlnZDmoIfns7vvvJrlpKfmi4fmjIflkJHlt6bvvIgreO+8iSzpo5/mjIflkJHkuIrvvIgree+8iSzkuK3mjIflkJHliY3vvIgreu+8iVxuICogXG4gKiDkuIA6b3Blbmds5bGe5LqO5Y+z5omL5Z2Q5qCH57O7XG4gKiDkuozvvJrorr7lpIflnZDmoIfns7vlsZ7kuo7lt6bmiYvlnZDmoIfns7tcbiAqIOS4ie+8mnVuaXR55bGe5LqO5bem5omL5Z2Q5qCH57O7XG4gKiDlm5vvvJpEaXJlY3QzROS9v+eUqOeahOaYr+W3puaJi+WdkOagh+ezu1xuICovXG5cbi8qKlxuICogISNlbiBWYWx1ZXMgZm9yIENhbWVyYS5jbGVhckZsYWdzLCBkZXRlcm1pbmluZyB3aGF0IHRvIGNsZWFyIHdoZW4gcmVuZGVyaW5nIGEgQ2FtZXJhLlxuICogISN6aCDmkYTlg4/mnLrmuIXpmaTmoIforrDkvY3vvIzlhrPlrprmkYTlg4/mnLrmuLLmn5Pml7bkvJrmuIXpmaTlk6rkupvnirbmgIFcbiAqIEBlbnVtIENhbWVyYS5DbGVhckZsYWdzXG4gKi9cblxuZW51bSBDbGVhckZsYWdzIHtcbiAgICAvKipcbiAgICAqICEjZW5cbiAgICAqIENsZWFyIHRoZSBiYWNrZ3JvdW5kIGNvbG9yLlxuICAgICogISN6aFxuICAgICog5riF6Zmk6IOM5pmv6aKc6ImyXG4gICAgKiBAcHJvcGVydHkgQ09MT1JcbiAgICAqL1xuICAgIENPTE9SID0gMSxcbiAgICAvKipcbiAgICAgKiAhI2VuXG4gICAgICogQ2xlYXIgdGhlIGRlcHRoIGJ1ZmZlci5cbiAgICAgKiAhI3poXG4gICAgICog5riF6Zmk5rex5bqm57yT5Yay5Yy6XG4gICAgICogQHByb3BlcnR5IERFUFRIXG4gICAgICovXG4gICAgREVQVEggPSAyLFxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBDbGVhciB0aGUgc3RlbmNpbC5cbiAgICAgKiAhI3poXG4gICAgICog5riF6Zmk5qih5p2/57yT5Yay5Yy6XG4gICAgICogQHByb3BlcnR5IFNURU5DSUxcbiAgICAgKi9cbiAgICBTVEVOQ0lMID0gNCxcbn1cbmVudW0gU3RhZ2VGbGFncyB7XG4gICAgT1BBUVVFID0gMSxcbiAgICBUUkFOU1BBUkVOVCA9IDJcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FtZXJhIGV4dGVuZHMgTm9kZSB7XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIGZvdnkgICAgLy/nm7jmnLrlvKDlvIDnmoTop5LluqZcbiAgICAgKiBAcGFyYW0gYXNwZWN0IC8v5a696auY5qiq57q15q+UXG4gICAgICogQHBhcmFtIG5lYXIgICAvL+acgOi/keiDveeci+WIsOeahOi3neemu1xuICAgICAqIEBwYXJhbSBmYXIgICAgLy/mnIDov5zog73nnIvliLDnmoTot53nprtcbiAgICAgKiBAcGFyYW0gdHlwZSAgIC8v55u45py655qE57G75Z6LICAgIFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGZvdnksIGFzcGVjdCwgbmVhciwgZmFyLCB0eXBlOiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fZm92eSA9IGZvdnk7XG4gICAgICAgIHRoaXMuX2FzcGVjdCA9IGFzcGVjdDtcbiAgICAgICAgdGhpcy5fbmVhciA9IG5lYXI7XG4gICAgICAgIHRoaXMuX2ZhciA9IGZhcjtcbiAgICAgICAgLy/liJvlu7rpgI/op4bnn6npmLVcbiAgICAgICAgdGhpcy5fcHJvamVjdGlvbk1hdHJpeCA9IHRoaXMuX2dsTWF0cml4Lm1hdDQuY3JlYXRlKCk7XG4gICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLl9jZW50ZXIgPSBbMCwgMCwgMF07Ly/nnIvlkJHljp/ngrlcbiAgICAgICAgdGhpcy5fdXAgPSBbMCwgMSwgMF07Ly/lkJHkuIrnnItcbiAgICAgICAgdGhpcy5fZXllID0gWzAsIDAsIDBdOy8v6buY6K6k55yL5ZCR5Y6f54K5XG4gICAgICAgIHRoaXMuX2Zvb3RNYXRyaXggPSBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG51bGwpO1xuICAgICAgICB0aGlzLnVwZGF0ZUNhbWVyYU1hdHJpeCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICog5Lmf5Y+v5Lul55CG6Kej5Li65LuW5piv5LiA5Liq6b2Q5qyh6KOB5YiH56m66Ze0XG4gICAgKiDlm6DkuLrkuIDkuKrop4blj6PlnZDmoIfns7vkuIvnmoTngrnlt6bkuZjku6Xov5nkuKrnn6npmLXlsLHlj6/ku6XovazmjaLkuLrpvZDmrKHoo4HliIfnqbrpl7TlnZDmoIfns7vkuIvnmoTngrnkuoZcbiAgICAqIOi/meS4quefqemYteacieS4pOS4quexu+Wei1xuICAgICog6YCP6KeG5oqV5b2x77ya5Lya5pyJ6L+R5aSn6L+c5bCP55qE5L2c55SoXG4gICAgKiDmraPkuqTmipXlvbHvvJrnm67op4bliY3mlrnvvIzmiormiYDmnInnmoTog73nnIvliLDnmoTniankvZPpg73mlL7liLDlkIzkuIDkuKp65YC85aSE77yM5ZGI5YOPXG4gICAgKiDov5nph4znmoTmipXlvbHmjIfnmoTmmK/vvJrmiJHku6zlsY/luZXkvZzkuLrkuIDkuKrlubPpnaLvvIznnLznnZvkuZ/mnoTpgKDkuIDkuKrlubPpnaLlh7rmnaXvvIznnLznnZvlubPpnaLlnKjlsY/luZXlubPpnaLkuIrnmoTmipXlvbFcbiAgICAqL1xuICAgIHByb3RlY3RlZCBfcHJvamVjdGlvbk1hdHJpeDogYW55Oy8v6YCP6KeG55+p6Zi1XG5cbiAgICBwcm90ZWN0ZWQgX2Zvdnk6IG51bWJlcjsvL+ebuOacuuW8oOW8gOeahOW8p+W6plxuICAgIHByb3RlY3RlZCBfYXNwZWN0OiBudW1iZXI7Ly/nm7jmnLrnmoTmqKrnurXmr5Qod2lkdGgvaGVpZ2h0KVxuICAgIHByb3RlY3RlZCBfbmVhcjogbnVtYmVyOy8v55u45py65pyA6L+R6IO955yL5Yiw55qE5L2N572uXG4gICAgcHJvdGVjdGVkIF9mYXI6IG51bWJlcjsvL+ebuOacuuacgOi/nOiDveeci+WIsOeahOS9jee9rlxuICAgIHByaXZhdGUgX2NlbnRlcjogQXJyYXk8bnVtYmVyPjsvL+ebuOacuuato+WcqOeci+WQkeeahOS9jee9rlxuICAgIHByaXZhdGUgX3VwOiBBcnJheTxudW1iZXI+Oy8v55u45py655qE5pGG5pS+XG4gICAgcHJpdmF0ZSBfZXllOiBBcnJheTxudW1iZXI+O1xuICAgIHByaXZhdGUgX3RhcmdldFRleHR1cmU6IFJlbmRlclRleHR1cmU7Ly/nm67moIfmuLLmn5PnurnnkIZcbiAgICBwcml2YXRlIF9mcmFtZWJ1ZmZlcjogRnJhbWVCdWZmZXI7Ly/muLLmn5NidWZmZXJcblxuICAgIHByaXZhdGUgX2Zvb3RNYXRyaXg6RmxvYXQzMkFycmF5Oy8v6ISa55+p6Zi1XG4gICAgXG4gICAgLyoqXG4gICAgICog5byn5bqmXG4gICAgICovXG4gICAgcHVibGljIHNldCBGb3Z5KGZvdjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2ZvdnkgPSBmb3Y7XG4gICAgfVxuICAgIHB1YmxpYyBzZXQgQXNwZWN0KGFzcGVjdDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2FzcGVjdCA9IGFzcGVjdDtcbiAgICB9XG4gICAgcHVibGljIHNldCBOZWFyKG5lYXI6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9uZWFyID0gbmVhcjtcbiAgICB9XG4gICAgcHVibGljIHNldCBGYXIoZmFyKSB7XG4gICAgICAgIHRoaXMuX2ZhciA9IGZhcjtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICog5byn5bqmXG4gICAgICovXG4gICAgcHVibGljIGdldCBGb3Z5KCk6bnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvdnk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgQXNwZWN0KCk6bnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FzcGVjdDtcbiAgICB9XG4gICAgcHVibGljIGdldCBOZWFyKCk6bnVtYmVye1xuICAgICAgICByZXR1cm4gdGhpcy5fbmVhcjtcbiAgICB9XG4gICAgcHVibGljIGdldCBGYXIoKTpudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmFyO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICog5riF6Zmk5qCH5b+XXG4gICAgICog5ZyoR1BV55qE5LiA5qyh57uY5Yi26L+H56iL5Lit77yM5Lya5Zyo5Zyo5bin57yT5Yay5Yy65Lqn55Sf5LiJ5Liq6ZmE5Lu2XG4gICAgICog6aKc6Imy57yT5Yay6ZmE5Lu2OuWtmOWCqFJHQlxuICAgICAqIOa3seW6pumZhOS7tjrlrZjlgqjmt7HluqZ65YC8XG4gICAgICog5qih5p2/57yT5Yay6ZmE5Lu277ya5a2Y5YKo5qih5p2/5YC877yM55So5LqO5rWL6K+V77yM5q+U5aaC5oiR5Lus5Y+q57uY5Yi25p+Q5LiA5Lqb5YW35pyJ54m55a6a5qih5p2/5YC855qE5YOP57SgXG4gICAgICog5oiR5Lus5bCG5YOP57Sg5L+h5oGv57uY5Yi25Yiw5bGP5bmV77yM6YO95piv5L6d6Z2g6L+Z5LiJ5Liq6ZmE5Lu255qE77yMXG4gICAgICog57uY5Yi257uT5p2f5ZCO77yM5oiR5Lus6ZyA6KaB5Y+K5pe25riF55CGXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY2xlYXJGbGFncyA9IGVudW1zLkNMRUFSX0NPTE9SIHwgZW51bXMuQ0xFQVJfREVQVEg7XG4gICAgLyoqXG4gICAgICog5riF55CG5bGP5bmV5pe25L2/55So55qE6aKc6ImyXG4gICAgICog5b2T5oiR5Lus5oqK5bin57yT5Yay55qE6ZmE5Lu2572u56m655qE5pe25YCZ77yM6YKj5LmI5bCx5Lya5Ye6546w6buR5bGP77yM5Y6f5Zug5pivR1BV5LuO5bin57yT5Yay5Y+W5LiN5Yiw6aKc6Imy5pWw5o2u55So5LqO5riy5p+TXG4gICAgICog6L+Z5Liq5pe25YCZ6ZyA6KaB5oiR5Lus5oyH5a6a5LiA56eN6aKc6Imy5p2l5pu05o2i5bin57yT5Yay55qE6aKc6Imy6ZmE5Lu25Lit55qE5YOP57Sg5L+h5oGvXG4gICAgICovXG4gICAgX2NsZWFyQ29sb3I6IEFycmF5PG51bWJlcj4gPSBbXTtcblxuICAgIC8vIG9ydGhvIHByb3BlcnRpZXNcbiAgICAvKipcbiAgICAgKiDkuIvpnaLov5nkuKrlgLzlsIbkvJrlvbHlk43pvZDmrKHoo4HliIfnqbrpl7TnmoTpq5jluqbnmoTojIPlm7TlpKflsI9cbiAgICAgKiDjgJAtX29ydGhvSGVpZ2h0LF9vcnRob0hlaWdodOOAkVxuICAgICAqIOmdnuW4uOmHjeimge+8jOebuOW9k+S6juinhuWPo+eahOWuveWSjOWxj+W5leWuveeahOavlOS+i1xuICAgICAqIOi/meS4quS4gOiIrOeUqOS6jjJE5riy5p+TXG4gICAgICog5bGP5bmV56m66Ze0LS3jgIvpvZDmrKHoo4HliIfnqbrpl7QtLeOAi+Wxj+W5leepuumXtFxuICAgICAqL1xuICAgIHByaXZhdGUgX29ydGhvSGVpZ2h0ID0gMTtcbiAgICAvKipcbiAgICAgKiDkuIvpnaLov5nkuKrlgLzlsIbkvJrlvbHlk43pvZDmrKHoo4HliIfnqbrpl7TnmoTlrr3luqbnmoTojIPlm7TlpKflsI9cbiAgICAgKiDjgJAtX29ydGhvV2lkdGgsX29ydGhvV2lkdGjjgJFcbiAgICAgKiDpnZ7luLjph43opoHvvIznm7jlvZPkuo7op4blj6PnmoTpq5jlkozlsY/luZXpq5jnmoTmr5TkvotcbiAgICAgKi9cbiAgICBwcml2YXRlIF9vcnRob1dpZHRoID0gMTtcblxuICAgIC8vIHByaW9yaXR5LiB0aGUgc21hbGxlciBvbmUgd2lsbCBiZSByZW5kZXJlZCBmaXJzdFxuICAgIC8v5b2T5Zy65pmv5pyJ5aSa5Liq55u45py65pe277yM5Yaz5a6a6YKj5Liq55u45py65YWI5riy5p+TXG4gICAgX3ByaW9yaXR5ID0gMDtcblxuXG4gICAgLyoqXG4gICAgICog6KeG5Y+j5LiO5bGP5bmV55qE5a+56b2Q6K6+572uXG4gICAgICog56yb5Y2h5bCU5Z2Q5qCH57O7XG4gICAgICogeDrooajnpLrop4blj6PnmoR46L205pa55ZCR55qE6LW35aeL5L2N572uXG4gICAgICogeTrooajnpLrop4blj6PnmoR56L205pa55ZCR55qE6LW35aeL5L2N572uXG4gICAgICogdzrooajnpLrop4blj6PnmoTlrr3luqblkozlsY/luZXnmoTlrr3luqbnmoTmr5TlgLxcbiAgICAgKiBoOuihqOekuuinhuWPo+eahOmrmOW6puWSjOWxj+W5leeahOmrmOW6pueahOavlOWAvFxuICAgICAqL1xuICAgIHByaXZhdGUgX3JlY3QgPSB7XG4gICAgICAgIHg6IDAsIHk6IDAsIHc6IDEsIGg6IDFcbiAgICB9O1xuXG4gICAgcHVibGljIHNldFJlY3QoeCA9IDAsIHkgPSAwLCB3ID0gMSwgaCA9IDEpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fcmVjdC54ID0geDtcbiAgICAgICAgdGhpcy5fcmVjdC55ID0geTtcbiAgICAgICAgdGhpcy5fcmVjdC53ID0gdztcbiAgICAgICAgdGhpcy5fcmVjdC5oID0gaDtcbiAgICB9XG4gICAgLy/ojrflj5bop4blj6NcbiAgICBwdWJsaWMgZ2V0IHJlY3QoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6YCP6KeG55+p6Zi1XG4gICAgICovXG4gICAgcHVibGljIGdldFByb2plY3Rpb25NYXRyaXgoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2plY3Rpb25NYXRyaXg7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNsZWFyaW5nIGZsYWdzIG9mIHRoZSBjYW1lcmFcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBjYW1lcmEgY2xlYXJpbmcgZmxhZ3NcbiAgICAgKi9cbiAgICBnZXRDbGVhckZsYWdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xlYXJGbGFncztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGNsZWFyaW5nIGZsYWdzIG9mIHRoZSBjYW1lcmFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmxhZ3MgY2FtZXJhIGNsZWFyaW5nIGZsYWdzXG4gICAgICovXG4gICAgc2V0Q2xlYXJGbGFncyhmbGFncykge1xuICAgICAgICB0aGlzLl9jbGVhckZsYWdzID0gZmxhZ3M7XG4gICAgfVxuXG5cbiAgICBwcml2YXRlIF90eXBlOiBudW1iZXIgPSBlbnVtcy5QUk9KX1BFUlNQRUNUSVZFO1xuXG4gICAgLyoqXG4gICAgICog5pu05paw55u45py655+p6Zi1XG4gICAgICog5Li76KaB5piv5oqV5b2x55+p6Zi15ZKM5qih5Z6L55+p6Zi1XG4gICAgICovXG4gICAgcHJpdmF0ZSB1cGRhdGVDYW1lcmFNYXRyaXgoKTogdm9pZCB7XG5cbiAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT0gZW51bXMuUFJPSl9QRVJTUEVDVElWRSkge1xuICAgICAgICAgICAgdGhpcy5fZ2xNYXRyaXgubWF0NC5wZXJzcGVjdGl2ZSh0aGlzLl9wcm9qZWN0aW9uTWF0cml4LCB0aGlzLl9mb3Z5LCB0aGlzLl9hc3BlY3QsIHRoaXMuX25lYXIsIHRoaXMuX2Zhcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgeCA9IHRoaXMuX29ydGhvV2lkdGg7XG4gICAgICAgICAgICBsZXQgeSA9IHRoaXMuX29ydGhvSGVpZ2h0O1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiDkuIvpnaLlsIbkvJrmnoTpgKDkuIDkuKrmraPkuqTmipXlvbHnn6npmLVcbiAgICAgICAgICAgICAqIOWPr+S7peaKium9kOasoeijgeWIh+WdkOagh+eahOS9jee9ruaDs+ixoeaIkOWxj+W5leato+S4reW/g1xuICAgICAgICAgICAgICogeOeahOiMg+WbtOaYr+OAkC14LHjjgJFcbiAgICAgICAgICAgICAqIHnnmoTojIPlm7TmmK/jgJAteSx544CRXG4gICAgICAgICAgICAgKiDov5nkuKrlsIbkvJrmmKDlsITliLDlsY/luZXlnZDmoIfns7vkuIrvvIzogIzlsY/luZXlnZDmoIfnmoTojIPlm7TmmK/jgJAwLDHjgJFcbiAgICAgICAgICAgICAqIOi/memHjOWwseS8muWtmOWcqOaYoOWwhOWFs+ezu1xuICAgICAgICAgICAgICog5a+55LqOMmTvvIzlnKjmiJHku6znmoTpgLvovpHkuK3vvIzpgJrluLjmmK/miorniankvZPmlL7lnKjlsY/luZXlnZDmoIfns7vkuIvvvIzmiJHku6zlj6rlhbPlv4Pov5nkuKrlsY/luZXlnZDmoIfns7vkuIvnmoTlnZDmoIdcbiAgICAgICAgICAgICAqIOS9huWFtuWunum9kOasoeijgeWIh+WdkOagh+Wug+eahOato+S4reW/g+ehruaYr+inhuWPo+eahOS4reW/g++8jOW5tumdnuW3puS4i+inku+8jOaJgOS7pei/memHjOi+ueeahOaYoOWwhOWwsemcgOimgeazqOaEj1xuICAgICAgICAgICAgICog5pyA5ZCO77yaXG4gICAgICAgICAgICAgKiAx5Y+v5Lul5o+Q5L6b57uZ55So5oi377yM5bCx6K6p5LuW5Y675L2/55So5bGP5bmV5Z2Q5qCH57O777yM5Y+q5piv5pyA5ZCO5LiK5Lyg5riy5p+T5pWw5o2u55qE5pe25YCZ77yM5oiR5Lus5oqK5a6D5pig5bCE5Yiw6b2Q5qyh6KOB5YiH56m66Ze05LiLXG4gICAgICAgICAgICAgKiDlsY/luZUtLeOAi+m9kOasoeijgeWIh1xuICAgICAgICAgICAgICog44CQMCwx44CRLT7jgJAteCx444CRXG4gICAgICAgICAgICAgKiDjgJAwLDHjgJEtPuOAkC15LHnjgJFcbiAgICAgICAgICAgICAqIDLmuLLmn5PlrozmiJDku6XlkI7vvIzmiJHku6zlho3miorlroPku47pvZDmrKHoo4HliIfnqbrpl7TmmKDlsITliLDlsY/luZXlnZDmoIfns7tcbiAgICAgICAgICAgICAqIOm9kOasoeijgeWIhyAtLeOAi+Wxj+W5lVxuICAgICAgICAgICAgICog44CQLXgseOOAkS0+44CQMCwx44CRXG4gICAgICAgICAgICAgKiDjgJAteSx544CRLT7jgJAwLDHjgJFcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdGhpcy5fZ2xNYXRyaXgubWF0NC5vcnRobyh0aGlzLl9wcm9qZWN0aW9uTWF0cml4LFxuICAgICAgICAgICAgICAgIC14LCB4LCAteSwgeSwgdGhpcy5fbmVhciwgdGhpcy5fZmFyXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlTWF0cml4RGF0YSgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVNYXRyaXhEYXRhKCl7XG4gICAgICAgICAvL+WIneWni+WMluaooeWei+efqemYtVxuICAgICAgICAgZ2xNYXRyaXgubWF0NC5pZGVudGl0eSh0aGlzLl9tb2RlbE1hdHJpeCk7XG4gICAgICAgICBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KHRoaXMuX2Zvb3RNYXRyaXgpO1xuICAgICAgICAgLy/lhYjnvKnmlL5cbiAgICAgICAgIHRoaXMubWF0NFNjYWxlJDModGhpcy5fbW9kZWxNYXRyaXgsIHRoaXMuX21vZGVsTWF0cml4LCBbdGhpcy5zY2FsZVgsIHRoaXMuc2NhbGVZLCB0aGlzLnNjYWxlWl0pO1xuICAgICAgICAgLy/lho3ml4vovaxcbiAgICAgICAgIHRoaXMubWF0cml4NFJvdGF0ZVgodGhpcy5fbW9kZWxNYXRyaXgsIHRoaXMuX21vZGVsTWF0cml4LCB0aGlzLnJvdGF0ZVggKiAoTWF0aC5QSSAvIDE4MCkpO1xuICAgICAgICAgdGhpcy5tYXRyaXg0Um90YXRlWSh0aGlzLl9tb2RlbE1hdHJpeCwgdGhpcy5fbW9kZWxNYXRyaXgsIHRoaXMucm90YXRlWSAqIChNYXRoLlBJIC8gMTgwKSk7XG4gICAgICAgICB0aGlzLm1hdHJpeDRSb3RhdGVaKHRoaXMuX21vZGVsTWF0cml4LCB0aGlzLl9tb2RlbE1hdHJpeCwgdGhpcy5yb3RhdGVaICogKE1hdGguUEkgLyAxODApKTtcbiAgICAgICAgIC8v5pyA5ZCO5bmz56e7XG4gICAgICAgICB0aGlzLm1hdDRUcmFuc2xhdGUkMih0aGlzLl9mb290TWF0cml4LCB0aGlzLl9mb290TWF0cml4LCBbdGhpcy54LCB0aGlzLnksIHRoaXMuel0pO1xuICAgICAgICAgLy9cbiAgICAgICAgIGdsTWF0cml4Lm1hdDQubXVsdGlwbHkodGhpcy5fbW9kZWxNYXRyaXgsdGhpcy5fZm9vdE1hdHJpeCx0aGlzLl9tb2RlbE1hdHJpeCk7XG4gICAgICAgICBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KHRoaXMuX21vZGVsTWF0cml4LHRoaXMuX3dvcmxkTWF0cml4LHRoaXMuX21vZGVsTWF0cml4KTtcbiAgICB9XG5cbiAgICBcblxuICAgIHB1YmxpYyBnZXRJbnZlcnNNb2RlbFZpZXdNYXRyaXgoKTogYW55IHtcbiAgICAgICAgdmFyIGludmVycyA9IHRoaXMuX2dsTWF0cml4Lm1hdDQuY3JlYXRlKCk7XG4gICAgICAgIHRoaXMuX2dsTWF0cml4Lm1hdDQuaW52ZXJ0KGludmVycywgdGhpcy5fbW9kZWxNYXRyaXgpXG4gICAgICAgIHJldHVybiBpbnZlcnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5q2k5Ye95pWw5Yqh5b+F6LCD55SoXG4gICAgICogQHBhcmFtIGV5ZSAg55u45py655qE5L2N572uXG4gICAgICogQHBhcmFtIGNlbnRlciDnm7jmnLrnnIvlkJHnmoTkvY3nva5cbiAgICAgKiBAcGFyYW0gdXAgXG4gICAgICog5oyJ54Wn5oiR6K6+5a6a55qE6buY6K6k5Y+C5pWw77yMXG4gICAgICog55yL5ZCR5Y6f54K577yM5q2k5aSE55qE5Y6f54K55oyH55qE5piv5bGP5bmV55qE5Lit5b+D77yMXG4gICAgICog55u45py65q2j552A5pGG5pS+77yM5Y+v5Lul5oqK6Ieq5bex55qE5aS05b2T5YGa5pGE5YOP5py6XG4gICAgICogZXllLno+PTAs5q2j6Z2i55yL5bGP5bmV55qE5Lit5b+DXG4gICAgICogZXllLno8MCzog4zpnaLnnIvlsY/luZXnmoTkuK3lv4NcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9va0F0KGV5ZTogQXJyYXk8bnVtYmVyPiwgY2VudGVyOiBBcnJheTxudW1iZXI+ID0gWzAsIDAsIDBdLCB1cDogQXJyYXk8bnVtYmVyPiA9IFswLCAxLCAwXSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9leWUgPSBleWU7XG4gICAgICAgIHRoaXMuX2NlbnRlciA9IGNlbnRlcjtcbiAgICAgICAgdGhpcy5fdXAgPSB1cDtcbiAgICAgICAgLy8gLy/mkYTlg4/mnLrnmoTkvY3nva5cbiAgICAgICAgdGhpcy5fZ2xNYXRyaXgubWF0NC5sb29rQXQodGhpcy5fbW9kZWxNYXRyaXgsIHRoaXMuX2V5ZSwgdGhpcy5fY2VudGVyLCB0aGlzLl91cCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICEjZW5cbiAgICAgKiBEZXN0aW5hdGlvbiByZW5kZXIgdGV4dHVyZS5cbiAgICAgKiBVc3VhbGx5IGNhbWVyYXMgcmVuZGVyIGRpcmVjdGx5IHRvIHNjcmVlbiwgYnV0IGZvciBzb21lIGVmZmVjdHMgaXQgaXMgdXNlZnVsIHRvIG1ha2UgYSBjYW1lcmEgcmVuZGVyIGludG8gYSB0ZXh0dXJlLlxuICAgICAqICEjemhcbiAgICAgKiDmkYTlg4/mnLrmuLLmn5PnmoTnm67moIcgUmVuZGVyVGV4dHVyZeOAglxuICAgICAqIOS4gOiIrOaRhOWDj+acuuS8muebtOaOpea4suafk+WIsOWxj+W5leS4iu+8jOS9huaYr+acieS4gOS6m+aViOaenOWPr+S7peS9v+eUqOaRhOWDj+acuua4suafk+WIsCBSZW5kZXJUZXh0dXJlIOS4iuWGjeWvuSBSZW5kZXJUZXh0dXJlIOi/m+ihjOWkhOeQhuadpeWunueOsOOAglxuICAgICAqIEBwcm9wZXJ0eSB7UmVuZGVyVGV4dHVyZX0gdGFyZ2V0VGV4dHVyZVxuICAgICAqL1xuICAgIHNldCB0YXJnZXRUZXh0dXJlKHRhcmdldFRleHR1cmU6IFJlbmRlclRleHR1cmUpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0VGV4dHVyZSA9IHRhcmdldFRleHR1cmU7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVRhcmdldFRleHR1cmUoKTtcbiAgICB9XG4gICAgZ2V0IHRhcmdldFRleHR1cmUoKTogUmVuZGVyVGV4dHVyZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90YXJnZXRUZXh0dXJlXG4gICAgfVxuICAgIHByaXZhdGUgX3VwZGF0ZVRhcmdldFRleHR1cmUoKSB7XG4gICAgICAgIGxldCB0ZXh0dXJlID0gdGhpcy5fdGFyZ2V0VGV4dHVyZTtcbiAgICAgICAgdGhpcy5zZXRGcmFtZUJ1ZmZlcih0ZXh0dXJlID8gdGV4dHVyZS5fZnJhbWVCdWZmZXIgOiBudWxsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgKiBHZXQgdGhlIGZyYW1lYnVmZmVyIG9mIHRoZSBjYW1lcmFcbiAgICAqIEByZXR1cm5zIHtGcmFtZUJ1ZmZlcn0gY2FtZXJhIGZyYW1lYnVmZmVyXG4gICAgKi9cbiAgICBnZXRGcmFtZWJ1ZmZlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZyYW1lYnVmZmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZyYW1lYnVmZmVyIG9mIHRoZSBjYW1lcmFcbiAgICAgKiBAcGFyYW0ge0ZyYW1lQnVmZmVyfSBmcmFtZWJ1ZmZlciBjYW1lcmEgZnJhbWVidWZmZXJcbiAgICAgKi9cbiAgICBzZXRGcmFtZUJ1ZmZlcihmcmFtZWJ1ZmZlcikge1xuICAgICAgICB0aGlzLl9mcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuICAgIH1cblxuXG5cblxufSIsImltcG9ydCBEZXZpY2UgZnJvbSBcIi4uLy4uLy4uL0RldmljZVwiO1xyXG5pbXBvcnQgeyBnbE1hdHJpeCB9IGZyb20gXCIuLi8uLi9NYXRyaXhcIjtcclxuaW1wb3J0IHsgTWF0aFV0aWxzIH0gZnJvbSBcIi4uLy4uL3V0aWxzL01hdGhVdGlsc1wiO1xyXG5pbXBvcnQgeyBzeVByaW1pdGl2ZXMgfSBmcm9tIFwiLi4vc2hhZGVyL1ByaW1pdGl2ZXNcIjtcclxuaW1wb3J0IHsgQnVmZmVyQXR0cmlic0RhdGEsIEdfU2hhZGVyRmFjdG9yeSwgU2hhZGVyRGF0YSB9IGZyb20gXCIuLi9zaGFkZXIvU2hhZGVyXCI7XHJcblxyXG5cclxuICB2YXIgYmFzZVZlcnRleFNoYWRlciA9XHJcbiAgJ2F0dHJpYnV0ZSB2ZWM0IGFfcG9zaXRpb247JyArXHJcbiAgJ2F0dHJpYnV0ZSB2ZWM0IGFfY29sb3I7JyArXHJcbiAgJ3VuaWZvcm0gbWF0NCB1X3dvcmxkVmlld1Byb2plY3Rpb247JyArXHJcbiAgJ3VuaWZvcm0gbWF0NCB1X2V4YW1wbGVXb3JsZFZpZXdQcm9qZWN0aW9uOycgK1xyXG4gICd2YXJ5aW5nIHZlYzQgdl9jb2xvcjsnICtcclxuICAndmFyeWluZyB2ZWM0IHZfcG9zaXRpb247JyArXHJcbiAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAnZ2xfUG9zaXRpb24gPSB1X3dvcmxkVmlld1Byb2plY3Rpb24gKiBhX3Bvc2l0aW9uOycgK1xyXG4gICd2X3Bvc2l0aW9uID0gdV9leGFtcGxlV29ybGRWaWV3UHJvamVjdGlvbiAqIGFfcG9zaXRpb247JyArXHJcbiAgJ3ZfcG9zaXRpb24gPSB2X3Bvc2l0aW9uIC8gdl9wb3NpdGlvbi53OycgK1xyXG4gICd2X2NvbG9yID0gYV9jb2xvcjsnICtcclxuICAnfSdcclxudmFyIGNvbG9yRnJhZ21lbnRTaGFkZXIgPVxyXG4gICdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnICtcclxuICAndmFyeWluZyB2ZWM0IHZfY29sb3I7JyArXHJcbiAgJ3ZhcnlpbmcgdmVjNCB2X3Bvc2l0aW9uOycgK1xyXG4gICd1bmlmb3JtIHZlYzQgdV9jb2xvcjsnICtcclxuICAndm9pZCBtYWluKCkgeycgK1xyXG4gICdib29sIGJsZW5kID0gKHZfcG9zaXRpb24ueCA8IC0xLjAgfHwgdl9wb3NpdGlvbi54ID4gMS4wIHx8JyArXHJcbiAgJ3ZfcG9zaXRpb24ueSA8IC0xLjAgfHwgdl9wb3NpdGlvbi55ID4gMS4wIHx8JyArXHJcbiAgJ3ZfcG9zaXRpb24ueiA8IC0xLjAgfHwgdl9wb3NpdGlvbi56ID4gMS4wKTsnICtcclxuICAndmVjNCBibGVuZENvbG9yID0gYmxlbmQgPyB2ZWM0KDAuMzUsIDAuMzUsIDAuMzUsIDEuMCkgOiB2ZWM0KDEsIDEsIDEsIDEpOycgK1xyXG4gICdnbF9GcmFnQ29sb3IgPSB2X2NvbG9yICogdV9jb2xvciAqIGJsZW5kQ29sb3I7JyArXHJcbiAgJ30nXHJcblxyXG4vKipcclxuICogXHJcbiAqL1xyXG5jbGFzcyBHcmFwaGljIHtcclxuICBjb25zdHJ1Y3RvcihnbCkge1xyXG4gICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuICBwcml2YXRlIHZlcnQgPVxyXG4gICAgJ2F0dHJpYnV0ZSB2ZWM0IGFfcG9zaXRpb247JyArXHJcbiAgICAnYXR0cmlidXRlIHZlYzQgYV9jb2xvcjsnICtcclxuICAgICd1bmlmb3JtIG1hdDQgdV93b3JsZFZpZXdQcm9qZWN0aW9uOycgK1xyXG4gICAgJ3ZhcnlpbmcgdmVjNCB2X2NvbG9yOycgK1xyXG4gICAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAgICdnbF9Qb3NpdGlvbiA9IHVfd29ybGRWaWV3UHJvamVjdGlvbiAqIGFfcG9zaXRpb247JyArXHJcbiAgICAnZ2xfUG9pbnRTaXplID0gNS4wOycgK1xyXG4gICAgJ3ZfY29sb3IgPSBhX2NvbG9yOycgK1xyXG4gICAgJ30nXHJcblxyXG4gIHByaXZhdGUgZnJhZyA9XHJcbiAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXHJcbiAgICAndW5pZm9ybSB2ZWM0IHVfY29sb3I7JyArXHJcbiAgICAndmFyeWluZyB2ZWM0IHZfY29sb3I7JyArXHJcbiAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgJ2dsX0ZyYWdDb2xvciA9IHVfY29sb3IgKiB2X2NvbG9yOycgK1xyXG4gICAgJ30nXHJcblxyXG4gXHJcblxyXG5cclxuICBwcml2YXRlIF9jb29yZGluYXRlQXJyYXlzID0ge1xyXG4gICAgcG9zaXRpb246IFtcclxuICAgICAgMCwgMCwgMCwgICAgICAgICAvL+WOn+eCuTAgICAvLzBcclxuICAgICAgMSwgMCwgMCwgICAvL3ggICAvLzFcclxuICAgICAgMCwgMSwgMCwgICAvL3kgICAvLzJcclxuICAgICAgMCwgMCwgMSwgICAgLy96ICAvLzNcclxuICAgICAgMCwgMCwgMCwgICAgICAgICAvL+WOn+eCuTEgIC8vNFxyXG4gICAgICAwLCAwLCAwLCAgICAgICAgIC8v5Y6f54K5MiAgLy81XHJcbiAgICAgIDAsIDAsIDAsICAgICAgICAgLy/ljp/ngrkzICAvLzZcclxuXHJcbiAgICAgIDEuMiwgMCwgMCwgICAvL3jovbTlu7bnlLMgICAgLy83XHJcbiAgICAgIDAsIDEuMiwgMCwgICAvL3novbTlu7bnlLMgICAgLy84XHJcbiAgICAgIDAsIDAsIDEuMiwgICAgLy966L205bu255SzICAgLy85XHJcblxyXG4gICAgICAwLCAwLCAwLCAwLFxyXG4gICAgICAwLCAxLCAxLCAwXHJcbiAgICBdLFxyXG4gICAgY29sb3I6IFtcclxuICAgICAgMCwgMCwgMCwgMSwgICAgICAgLy8gIDAg5Y6f54K5XHJcbiAgICAgIDEsIDAsIDAsIDEsICAgICAgIC8vICAxICB4ICAgICByZWQgICAg57qi6ImyXHJcbiAgICAgIDAsIDEsIDAsIDEsICAgICAgIC8vICAyICB5ICAgICBncmVlbiAg57u/6ImyXHJcbiAgICAgIDAsIDAsIDEsIDEsICAgICAgIC8vICAzICB6ICAgICBibHVlICAg6JOd6ImyXHJcbiAgICAgIDEsIDAsIDAsIDEsICAgICAgIC8vICA0ICDljp/ngrl4ICAgICByZWRcclxuICAgICAgMCwgMSwgMCwgMSwgICAgICAgLy8gIDUgIOWOn+eCuXkgICAgIGdyZWVuXHJcbiAgICAgIDAsIDAsIDEsIDEsICAgICAgICAvLyA2ICDljp/ngrl6ICAgICBibHVlXHJcbiAgICAgIDAsIDAsIDAsIDEsICAgICAgICAvLyA5XHJcbiAgICAgIDAsIDAsIDAsIDEsICAgICAgICAvLyAxMFxyXG4gICAgICAwLCAwLCAwLCAxLCAgICAgICAgLy8gMTFcclxuICAgICAgMSwgMSwgMCwgMCwgICAgICAgIC8vIDEyXHJcbiAgICAgIDEsIDEsIDAsIDAgICAgICAgICAvLyAxM1xyXG4gICAgXSxcclxuICAgIGluZGljZXM6IFtcclxuICAgICAgNCwgMSwgNSwgMiwgNiwgMywgMSwgNywgMiwgOCwgMywgOSwgMTAsIDExIC8vMTEgMTIgMTNcclxuICAgIF1cclxuICB9XHJcbiAgcHJpdmF0ZSBfcG9pbnRBcnJheXMgPSB7XHJcbiAgICBwb3NpdGlvbjogW1xyXG4gICAgICAwLCAwLCAwLFxyXG4gICAgICAxLCAwLCAwLCAgIC8vM1xyXG4gICAgICAwLCAxLCAwLCAgIC8vNyAgXHJcbiAgICAgIDAsIDAsIDEgICAgLy8xMVxyXG4gICAgXSxcclxuICAgIGNvbG9yOiBbXHJcbiAgICAgIDAsIDAsIDAsIDEsXHJcbiAgICAgIDEsIDAsIDAsIDEsXHJcbiAgICAgIDAsIDEsIDAsIDEsXHJcbiAgICAgIDAsIDAsIDEsIDFcclxuICAgIF1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcclxuICAgIGxldCBzY2FsZSA9IDY7XHJcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX2Nvb3JkaW5hdGVBcnJheXMucG9zaXRpb24ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgdGhpcy5fY29vcmRpbmF0ZUFycmF5cy5wb3NpdGlvbltqXSA9IHRoaXMuX2Nvb3JkaW5hdGVBcnJheXMucG9zaXRpb25bal0gKiBzY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9wb2ludEJ1ZmZlckluZm9yID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUJ1ZmZlckluZm9Gcm9tQXJyYXlzKHRoaXMuX3BvaW50QXJyYXlzKTtcclxuXHJcbiAgICAvL+WIm+W7unNoYWRlclxyXG4gICAgdGhpcy5fcHJvZ3JhbUluZm9yID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZVByb2dyYW1JbmZvKHRoaXMudmVydCwgdGhpcy5mcmFnKTtcclxuICAgIC8v5Yib5bu6YXR0cmlidWZmZXJcclxuICAgIHRoaXMuX2Nvb3JkaW5hdGVCdWZmZXJJbmZvID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUJ1ZmZlckluZm9Gcm9tQXJyYXlzKHRoaXMuX2Nvb3JkaW5hdGVBcnJheXMpO1xyXG4gIH1cclxuICBwcml2YXRlIF9wcm9ncmFtSW5mb3I6IFNoYWRlckRhdGE7XHJcbiAgcHJpdmF0ZSBfY29vcmRpbmF0ZUJ1ZmZlckluZm86IEJ1ZmZlckF0dHJpYnNEYXRhO1xyXG4gIHByaXZhdGUgX3BvaW50QnVmZmVySW5mb3I6IEJ1ZmZlckF0dHJpYnNEYXRhO1xyXG4gIC8qKlxyXG4gICAqIOe7mOWItuS4lueVjOWdkOagh+ezu1xyXG4gICAqIOS9oOaDs+WcqOS4iumdouS9jee9ruadpeinguWvn+S4lueVjOWdkOagh+ezu1xyXG4gICAqIEBwYXJhbSBwcm9qIOaKleW9seefqemYtVxyXG4gICAqIEBwYXJhbSBjYW1lcmEg55u45py655+p6Zi1XHJcbiAgICogQHBhcmFtIHdvcmxkIOS4lueVjOefqemYtSAg5b2T5YmN5qih5Z6L5Lit55qE54K56ZyA6KaB5LmY5Lul6L+Z5Liq55+p6Zi16L2s5o2i5Yiw5LiW55WM5Z2Q5qCH57O75LiLXHJcbiAgICogXHJcbiAgICovXHJcbiAgcHVibGljIGRyYXdMaW5lKHByb2o6IEZsb2F0MzJBcnJheSwgY2FtZXJhOiBGbG9hdDMyQXJyYXksIHdvcmxkID0gZ2xNYXRyaXgubWF0NC5pZGVudGl0eShudWxsKSk6IHZvaWQge1xyXG4gICAgdmFyIHZpZXcgPSBnbE1hdHJpeC5tYXQ0LmludmVydChudWxsLCBjYW1lcmEpXHJcbiAgICBsZXQgcHYgPSBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KG51bGwsIHByb2osIHZpZXcpO1xyXG4gICAgZ2xNYXRyaXgubWF0NC5tdWx0aXBseShwdiwgcHYsIHdvcmxkKTtcclxuICAgIHRoaXMuZ2wudXNlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSW5mb3Iuc3BHbElEKTtcclxuICAgIEdfU2hhZGVyRmFjdG9yeS5zZXRCdWZmZXJzQW5kQXR0cmlidXRlcyh0aGlzLl9wcm9ncmFtSW5mb3IuYXR0clNldHRlcnMsIHRoaXMuX2Nvb3JkaW5hdGVCdWZmZXJJbmZvKTtcclxuICAgIEdfU2hhZGVyRmFjdG9yeS5zZXRVbmlmb3Jtcyh0aGlzLl9wcm9ncmFtSW5mb3IudW5pU2V0dGVycywgeyB1X3dvcmxkVmlld1Byb2plY3Rpb246IHB2IH0pO1xyXG4gICAgR19TaGFkZXJGYWN0b3J5LnNldFVuaWZvcm1zKHRoaXMuX3Byb2dyYW1JbmZvci51bmlTZXR0ZXJzLCB7IHVfY29sb3I6IFsxLCAxLCAxLCAxXSB9KTtcclxuICAgIEdfU2hhZGVyRmFjdG9yeS5kcmF3QnVmZmVySW5mbyh0aGlzLl9jb29yZGluYXRlQnVmZmVySW5mbywgdGhpcy5nbC5MSU5FUyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVBvaW50KCk6IHZvaWQge1xyXG4gICAgdmFyIGNoYW5nZSA9IDAuMTtcclxuICAgIHRoaXMuX3BvaW50QXJyYXlzLnBvc2l0aW9uWzNdID0gdGhpcy5fcG9pbnRBcnJheXMucG9zaXRpb25bM10gKyBjaGFuZ2U7Ly/nnLznnZvnmoTkvY3nva5cclxuICAgIHRoaXMuX3BvaW50QXJyYXlzLnBvc2l0aW9uWzddID0gdGhpcy5fcG9pbnRBcnJheXMucG9zaXRpb25bN10gKyBjaGFuZ2U7XHJcbiAgICB0aGlzLl9wb2ludEFycmF5cy5wb3NpdGlvblsxMV0gPSB0aGlzLl9wb2ludEFycmF5cy5wb3NpdGlvblsxMV0gKyBjaGFuZ2U7XHJcbiAgICB0aGlzLl9wb2ludEJ1ZmZlckluZm9yID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUJ1ZmZlckluZm9Gcm9tQXJyYXlzKHRoaXMuX3BvaW50QXJyYXlzKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkcmF3UG9pbnQocHJvajogRmxvYXQzMkFycmF5LCBjYW1lcmE6IEZsb2F0MzJBcnJheSwgd29ybGQgPSBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG51bGwpKTogdm9pZCB7XHJcbiAgICB0aGlzLnVwZGF0ZVBvaW50KCk7XHJcbiAgICB2YXIgdmlldyA9IGdsTWF0cml4Lm1hdDQuaW52ZXJ0KG51bGwsIGNhbWVyYSlcclxuICAgIGxldCB2cCA9IGdsTWF0cml4Lm1hdDQubXVsdGlwbHkobnVsbCwgcHJvaiwgdmlldyk7XHJcbiAgICBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KHZwLCB2cCwgd29ybGQpO1xyXG5cclxuICAgIHRoaXMuZ2wudXNlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSW5mb3Iuc3BHbElEKTtcclxuICAgIEdfU2hhZGVyRmFjdG9yeS5zZXRCdWZmZXJzQW5kQXR0cmlidXRlcyh0aGlzLl9wcm9ncmFtSW5mb3IuYXR0clNldHRlcnMsIHRoaXMuX3BvaW50QnVmZmVySW5mb3IpO1xyXG4gICAgR19TaGFkZXJGYWN0b3J5LnNldFVuaWZvcm1zKHRoaXMuX3Byb2dyYW1JbmZvci51bmlTZXR0ZXJzLCB7IHVfd29ybGRWaWV3UHJvamVjdGlvbjogdnAgfSk7XHJcbiAgICBHX1NoYWRlckZhY3Rvcnkuc2V0VW5pZm9ybXModGhpcy5fcHJvZ3JhbUluZm9yLnVuaVNldHRlcnMsIHsgdV9jb2xvcjogWzEsIDEsIDEsIDFdIH0pO1xyXG4gICAgR19TaGFkZXJGYWN0b3J5LmRyYXdCdWZmZXJJbmZvKHRoaXMuX3BvaW50QnVmZmVySW5mb3IsIHRoaXMuZ2wuUE9JTlRTKTtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENhbWVyYU1vZGVsIHtcclxuICBjb25zdHJ1Y3RvcihnbCkge1xyXG4gICAgdGhpcy5nbCA9IGdsO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuICBwcml2YXRlIF9mcnVzdHVtQ3ViZTpTaGFkZXJEYXRhO1xyXG4gIHByaXZhdGUgX3Byb2dyYW1JbmZvcjogU2hhZGVyRGF0YTtcclxuICBwcml2YXRlIF9tb2RlbEJ1ZmZlcjogQnVmZmVyQXR0cmlic0RhdGE7XHJcbiAgcHJpdmF0ZSBfY2xpcFNwYWNlQnVmZmVyOiBCdWZmZXJBdHRyaWJzRGF0YTtcclxuICBwcml2YXRlIF9jdWJlQnVmZmVySW5mbzpCdWZmZXJBdHRyaWJzRGF0YTtcclxuICBwcml2YXRlIF9jb29yZGluYXRlOiBHcmFwaGljO1xyXG4gIHByaXZhdGUgX3dvcmxkVGVtcDpGbG9hdDMyQXJyYXk7XHJcbiAgcHJpdmF0ZSBfd29ybGRUZW1wMTpGbG9hdDMyQXJyYXk7XHJcbiAgcHJpdmF0ZSBfd29ybGRUZW1wMjpGbG9hdDMyQXJyYXk7XHJcbiAgcHJpdmF0ZSBfcHZUZW1wMTpGbG9hdDMyQXJyYXk7XHJcbiAgcHJpdmF0ZSBfbG9hY2FsSW52ZXJ0UHJvajpGbG9hdDMyQXJyYXk7XHJcbiAgcHJpdmF0ZSBfdmlld01hdHJpeDpGbG9hdDMyQXJyYXk7XHJcbiAgcHJpdmF0ZSBfb3JpZ2luUG9zOkFycmF5PG51bWJlcj47XHJcbiAgLy8gdW5pZm9ybXMuXHJcbiAgcHJpdmF0ZSBzaGFyZWRVbmlmb3JtcyA9IHtcclxuICB9O1xyXG4gIHByaXZhdGUgX2ZydXN0dW1DdWJlVW5pZm9ybXMgPSB7XHJcbiAgICB1X2NvbG9yOiBbMSwgMSwgMSwgMC40XSxcclxuICAgIHVfd29ybGRWaWV3UHJvamVjdGlvbjogbmV3IEZsb2F0MzJBcnJheSgxNiksXHJcbiAgICB1X2V4YW1wbGVXb3JsZFZpZXdQcm9qZWN0aW9uOiBuZXcgRmxvYXQzMkFycmF5KDE2KSxcclxuICB9O1xyXG5cclxuICBwcml2YXRlIHNvbGlkY29sb3J2ZXJ0ZXhzaGFkZXIgPVxyXG4gICAgJ2F0dHJpYnV0ZSB2ZWM0IGFfcG9zaXRpb247JyArXHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfbWF0cml4OycgK1xyXG4gICAgJ3ZvaWQgbWFpbigpIHsnICtcclxuICAgICdnbF9Qb3NpdGlvbiA9IHVfbWF0cml4ICogYV9wb3NpdGlvbjsnICtcclxuICAgICd9J1xyXG5cclxuICBwcml2YXRlIHNvbGlkY29sb3JmcmFnbWVudHNoYWRlciA9XHJcbiAgICAncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyArXHJcbiAgICAndW5pZm9ybSB2ZWM0IHVfY29sb3I7JyArXHJcbiAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgJ2dsX0ZyYWdDb2xvciA9IHVfY29sb3I7JyArXHJcbiAgICAnfSdcclxuXHJcbiAgcHJpdmF0ZSBpbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fcHJvZ3JhbUluZm9yID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZVByb2dyYW1JbmZvKHRoaXMuc29saWRjb2xvcnZlcnRleHNoYWRlciwgdGhpcy5zb2xpZGNvbG9yZnJhZ21lbnRzaGFkZXIpO1xyXG4gICAgdGhpcy5fZnJ1c3R1bUN1YmUgPSBHX1NoYWRlckZhY3RvcnkuY3JlYXRlUHJvZ3JhbUluZm8oYmFzZVZlcnRleFNoYWRlciwgY29sb3JGcmFnbWVudFNoYWRlcik7XHJcbiAgICB0aGlzLl9tb2RlbEJ1ZmZlciA9IHRoaXMuY3JlYXRlQ2FtZXJhQnVmZmVySW5mbygpO1xyXG4gICAgdGhpcy5fY2xpcFNwYWNlQnVmZmVyID0gdGhpcy5jcmVhdGVDbGlwc3BhY2VDdWJlQnVmZmVySW5mbygpO1xyXG5cclxuICAgIHRoaXMuX2Nvb3JkaW5hdGUgPSBuZXcgR3JhcGhpYyh0aGlzLmdsKTsvL+e7mOWItue6v1xyXG4gICAgXHJcbiAgICB0aGlzLl93b3JsZFRlbXAgPSBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG51bGwpO1xyXG4gICAgdGhpcy5fd29ybGRUZW1wMSA9IGdsTWF0cml4Lm1hdDQuaWRlbnRpdHkobnVsbCk7XHJcbiAgICB0aGlzLl93b3JsZFRlbXAyID0gZ2xNYXRyaXgubWF0NC5pZGVudGl0eShudWxsKTtcclxuICAgIHRoaXMuX2xvYWNhbEludmVydFByb2ogPSBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG51bGwpO1xyXG4gICAgdGhpcy5fcHZUZW1wMSA9IGdsTWF0cml4Lm1hdDQuaWRlbnRpdHkobnVsbCk7XHJcbiAgICB0aGlzLl92aWV3TWF0cml4ID0gZ2xNYXRyaXgubWF0NC5pZGVudGl0eShudWxsKTtcclxuXHJcbiAgICB0aGlzLl9zY2VuZUNhbWVyYU1hdHJpeCA9IGdsTWF0cml4Lm1hdDQuaWRlbnRpdHkobnVsbCk7XHJcbiAgICB0aGlzLl9zY2VuZUNhbWVyYVByb2plY3RNYXRyaXggPSBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG51bGwpO1xyXG4gICAgdGhpcy5fb3JpZ2luUG9zID0gWzAsMCwwXTtcclxuICAgIHZhciBmYWNlQ29sb3JzID0gW1xyXG4gICAgICBbMSwgMCwgMCwgMSxdLFxyXG4gICAgICBbMCwgMSwgMCwgMSxdLFxyXG4gICAgICBbMSwgMSwgMCwgMSxdLFxyXG4gICAgICBbMCwgMCwgMSwgMSxdLFxyXG4gICAgICBbMSwgMCwgMSwgMSxdLFxyXG4gICAgICBbMCwgMSwgMSwgMSxdLFxyXG4gICAgXTtcclxuICAgIHZhciBjb2xvclZlcnRzID0gW107XHJcbiAgICBmb3IgKHZhciBmID0gMDsgZiA8IDY7ICsrZikge1xyXG4gICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IDQ7ICsrdikge1xyXG4gICAgICAgIGNvbG9yVmVydHMucHVzaC5hcHBseShjb2xvclZlcnRzLCBmYWNlQ29sb3JzW2ZdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIGN1YmVBcnJheXM6IGFueSA9IHN5UHJpbWl0aXZlcy5jcmVhdGVDdWJlVmVydGljZXMoMik7XHJcbiAgICBkZWxldGUgY3ViZUFycmF5cy5ub3JtYWw7XHJcbiAgICBkZWxldGUgY3ViZUFycmF5cy50ZXhjb29yZDtcclxuICAgIGN1YmVBcnJheXMuY29sb3IgPSBjb2xvclZlcnRzO1xyXG4gICAgdGhpcy5fY3ViZUJ1ZmZlckluZm8gPSBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQnVmZmVySW5mb0Zyb21BcnJheXMoY3ViZUFycmF5cyk7XHJcblxyXG4gICAgdGhpcy5zZXRTY2VuZUNhbWVyYSgpO1xyXG5cclxuICB9XHJcbiAgcHJpdmF0ZSBjcmVhdGVDbGlwc3BhY2VDdWJlQnVmZmVySW5mbygpIHtcclxuICAgIC8vIGZpcnN0IGxldCdzIGFkZCBhIGN1YmUuIEl0IGdvZXMgZnJvbSAxIHRvIDNcclxuICAgIC8vIGJlY2F1c2UgY2FtZXJhcyBsb29rIGRvd24gLVogc28gd2Ugd2FudFxyXG4gICAgLy8gdGhlIGNhbWVyYSB0byBzdGFydCBhdCBaID0gMC4gV2UnbGwgcHV0IGFcclxuICAgIC8vIGEgY29uZSBpbiBmcm9udCBvZiB0aGlzIGN1YmUgb3BlbmluZ1xyXG4gICAgLy8gdG93YXJkIC1aXHJcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbXHJcbiAgICAgIC0xLCAtMSwgLTEsICAvLyBjdWJlIHZlcnRpY2VzXHJcbiAgICAgIDEsIC0xLCAtMSxcclxuICAgICAgLTEsIDEsIC0xLFxyXG4gICAgICAxLCAxLCAtMSxcclxuICAgICAgLTEsIC0xLCAxLFxyXG4gICAgICAxLCAtMSwgMSxcclxuICAgICAgLTEsIDEsIDEsXHJcbiAgICAgIDEsIDEsIDEsXHJcbiAgICAgIDAsIDAsIC0xLC8v5ZCO6IqC54K5IDhcclxuICAgICAgMCwgMCwgMSAvL+WJjeiKgueCuSA5XHJcbiAgICBdO1xyXG4gICAgY29uc3QgaW5kaWNlcyA9IFtcclxuICAgICAgMCwgMSwgMSwgMywgMywgMiwgMiwgMCwgLy8gY3ViZSBpbmRpY2VzXHJcbiAgICAgIDQsIDUsIDUsIDcsIDcsIDYsIDYsIDQsXHJcbiAgICAgIDAsIDQsIDEsIDUsIDMsIDcsIDIsIDYsXHJcbiAgICAgIDgsIDksIDksIDhcclxuICAgIF07XHJcbiAgICByZXR1cm4gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUJ1ZmZlckluZm9Gcm9tQXJyYXlzKHtcclxuICAgICAgcG9zaXRpb246IHBvc2l0aW9ucyxcclxuICAgICAgaW5kaWNlczogaW5kaWNlcyxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gY3JlYXRlIGdlb21ldHJ5IGZvciBhIGNhbWVyYVxyXG4gIHByaXZhdGUgY3JlYXRlQ2FtZXJhQnVmZmVySW5mbyhzY2FsZSA9IDEpIHtcclxuICAgIC8vIGZpcnN0IGxldCdzIGFkZCBhIGN1YmUuIEl0IGdvZXMgZnJvbSAxIHRvIDNcclxuICAgIC8vIGJlY2F1c2UgY2FtZXJhcyBsb29rIGRvd24gLVogc28gd2Ugd2FudFxyXG4gICAgLy8gdGhlIGNhbWVyYSB0byBzdGFydCBhdCBaID0gMC5cclxuICAgIC8vIFdlJ2xsIHB1dCBhIGNvbmUgaW4gZnJvbnQgb2YgdGhpcyBjdWJlIG9wZW5pbmdcclxuICAgIC8vIHRvd2FyZCAtWlxyXG4gICAgY29uc3QgcG9zaXRpb25zID0gW1xyXG4gICAgICAtMSwgLTEsIDEsICAvLyBjdWJlIHZlcnRpY2VzXHJcbiAgICAgIDEsIC0xLCAxLFxyXG4gICAgICAtMSwgMSwgMSxcclxuICAgICAgMSwgMSwgMSxcclxuICAgICAgLTEsIC0xLCAzLFxyXG4gICAgICAxLCAtMSwgMyxcclxuICAgICAgLTEsIDEsIDMsXHJcbiAgICAgIDEsIDEsIDMsXHJcbiAgICAgIDAsIDAsIDEsICAvLyBjb25lIHRpcFxyXG4gICAgXTtcclxuICAgIGNvbnN0IGluZGljZXMgPSBbXHJcbiAgICAgIDAsIDEsIDEsIDMsIDMsIDIsIDIsIDAsIC8vIGN1YmUgaW5kaWNlc1xyXG4gICAgICA0LCA1LCA1LCA3LCA3LCA2LCA2LCA0LFxyXG4gICAgICAwLCA0LCAxLCA1LCAzLCA3LCAyLCA2LFxyXG4gICAgXTtcclxuICAgIC8vIGFkZCBjb25lIHNlZ21lbnRzXHJcbiAgICBjb25zdCBudW1TZWdtZW50cyA9IDY7XHJcbiAgICBjb25zdCBjb25lQmFzZUluZGV4ID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7XHJcbiAgICBjb25zdCBjb25lVGlwSW5kZXggPSBjb25lQmFzZUluZGV4IC0gMTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU2VnbWVudHM7ICsraSkge1xyXG4gICAgICBjb25zdCB1ID0gaSAvIG51bVNlZ21lbnRzO1xyXG4gICAgICBjb25zdCBhbmdsZSA9IHUgKiBNYXRoLlBJICogMjtcclxuICAgICAgY29uc3QgeCA9IE1hdGguY29zKGFuZ2xlKTtcclxuICAgICAgY29uc3QgeSA9IE1hdGguc2luKGFuZ2xlKTtcclxuICAgICAgcG9zaXRpb25zLnB1c2goeCwgeSwgMCk7XHJcbiAgICAgIC8vIGxpbmUgZnJvbSB0aXAgdG8gZWRnZVxyXG4gICAgICBpbmRpY2VzLnB1c2goY29uZVRpcEluZGV4LCBjb25lQmFzZUluZGV4ICsgaSk7XHJcbiAgICAgIC8vIGxpbmUgZnJvbSBwb2ludCBvbiBlZGdlIHRvIG5leHQgcG9pbnQgb24gZWRnZVxyXG4gICAgICBpbmRpY2VzLnB1c2goY29uZUJhc2VJbmRleCArIGksIGNvbmVCYXNlSW5kZXggKyAoaSArIDEpICUgbnVtU2VnbWVudHMpO1xyXG4gICAgfVxyXG4gICAgcG9zaXRpb25zLmZvckVhY2goKHYsIG5keCkgPT4ge1xyXG4gICAgICBwb3NpdGlvbnNbbmR4XSAqPSBzY2FsZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVCdWZmZXJJbmZvRnJvbUFycmF5cyh7XHJcbiAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbnMsXHJcbiAgICAgIGluZGljZXM6IGluZGljZXMsXHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgKiDov5nkuKrlh73mlbDnmoTnm67nmoTlsLHmmK/nlKjkuIDkuKrnm7jmnLrljrvnnIvnm67moIfnm7jmnLpcclxuICAqIOebruagh+ebuOacuuacieS4pOS4quS4nOilv+imgee7mOWItiDkuIDkuKrmmK/nm7jmnLrmqKHlnosg5LiA5Liq5piv6b2Q5qyh6KOB5YiH56m66Ze0XHJcbiAgKiBAcGFyYW0gcHJvak1hdHJpeCDlvZPliY3mkYTlg4/mnLrnmoTmipXlvbHnn6npmLVcclxuICAqIEBwYXJhbSBjYW1lcmFNYXRyaXgg5b2T5YmN5pGE5YOP5py655qE55u45py655+p6Zi1XHJcbiAgKiBAcGFyYW0gdGFyZ2V0UHJvak1hdHJpeCDnm67moIfmkYTlg4/mnLrnmoTmipXlvbHnn6npmLVcclxuICAqIEBwYXJhbSB0YXJnZXRDYW1lcmFNYXRyaXgg55uu5qCH5pGE5YOP5py655qE55u45py655+p6Zi1XHJcbiAgKi9cclxuICBwdWJsaWMgZHJhdyhwcm9qTWF0cml4LCBjYW1lcmFNYXRyaXgsIHRhcmdldFByb2pNYXRyaXgsIHRhcmdldENhbWVyYU1hdHJpeCkge1xyXG4gICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgIC8vIGRyYXcgb2JqZWN0IHRvIHJlcHJlc2VudCBmaXJzdCBjYW1lcmFcclxuICAgIC8vIE1ha2UgYSB2aWV3IG1hdHJpeCBmcm9tIHRoZSBjYW1lcmEgbWF0cml4LlxyXG4gICAgZ2xNYXRyaXgubWF0NC5pbnZlcnQodGhpcy5fdmlld01hdHJpeCwgY2FtZXJhTWF0cml4KTtcclxuICAgIGdsTWF0cml4Lm1hdDQubXVsdGlwbHkodGhpcy5fd29ybGRUZW1wMSwgcHJvak1hdHJpeCwgdGhpcy5fdmlld01hdHJpeCk7IC8v5oqV5b2x55+p6Zi1WOinhuWPo+efqemYtVxyXG4gICAgLy8gdXNlIHRoZSBmaXJzdCdzIGNhbWVyYSdzIG1hdHJpeCBhcyB0aGUgbWF0cml4IHRvIHBvc2l0aW9uXHJcbiAgICAvLyB0aGUgY2FtZXJhJ3MgcmVwcmVzZW50YXRpdmUgaW4gdGhlIHNjZW5lXHJcbiAgICAvL+WPr+S7pei/meS5iOeQhuino++8jOesrOS4gOWPsOaRhOWDj+acuuS4iueahOeCueS5mOS7peWug+W+l+ebuOacuuefqemYte+8jOWPr+S7peWwhuS9jee9rui9rOaNouWIsOS4lueVjOWdkOagh+ezu+S4i1xyXG4gICAgLy/pgJrov4fkuJbnlYzlnZDmoIfns7vov5nkuKrmnqLnur3vvIzlho3lsIbngrnovazmjaLliLDlhbbku5bnmoTop4blj6PlnZDmoIfns7vkuIvvvIzov5vooYzmipXlvbFcclxuICAgIGdsTWF0cml4Lm1hdDQubXVsdGlwbHkodGhpcy5fd29ybGRUZW1wMSwgdGhpcy5fd29ybGRUZW1wMSwgdGFyZ2V0Q2FtZXJhTWF0cml4KTsvL+aKleW9seefqemYtXhz6KeG5Y+j55+p6Zi1eOesrOS4gOS4quaRhOWDj+acuueahOebuOacuuefqemYtVxyXG4gICAgZ2wudXNlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtSW5mb3Iuc3BHbElEKTtcclxuXHJcbiAgICAvLyAtLS0tLS0gRHJhdyB0aGUgQ2FtZXJhIFJlcHJlc2VudGF0aW9uIC0tLS0tLS0t57uY5Yi255u45py65qih5Z6LXHJcbiAgICAvLyBTZXR1cCBhbGwgdGhlIG5lZWRlZCBhdHRyaWJ1dGVzLlxyXG4gICAgR19TaGFkZXJGYWN0b3J5LnNldEJ1ZmZlcnNBbmRBdHRyaWJ1dGVzKHRoaXMuX3Byb2dyYW1JbmZvci5hdHRyU2V0dGVycywgdGhpcy5fbW9kZWxCdWZmZXIpO1xyXG4gICAgLy8gU2V0IHRoZSB1bmlmb3Jtc1xyXG4gICAgR19TaGFkZXJGYWN0b3J5LnNldFVuaWZvcm1zKHRoaXMuX3Byb2dyYW1JbmZvci51bmlTZXR0ZXJzLCB7XHJcbiAgICAgIHVfbWF0cml4OiB0aGlzLl93b3JsZFRlbXAxLFxyXG4gICAgICB1X2NvbG9yOiBbMSwgMCwgMCwgMV0sXHJcbiAgICB9KTtcclxuICAgIEdfU2hhZGVyRmFjdG9yeS5kcmF3QnVmZmVySW5mbyh0aGlzLl9tb2RlbEJ1ZmZlciwgZ2wuTElORVMpO1xyXG5cclxuICAgIC8vIC0tLS0tIERyYXcgdGhlIGZydXN0dW0gLS0tLS0tLSDnu5jliLbpvZDmrKHoo4HliIfnqbrpl7TlnZDmoIfns7tcclxuICAgIC8v5LiA5Liq5q2j5pa55L2T5LmY5Lul6L+Z5Liq55+p6Zi155qE6YCG55+p6Zi15Y+v5Lul5Y+Y5oiQ5LiA5Liq5qOx5Y+wXHJcbiAgICBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KHRoaXMuX3dvcmxkVGVtcDEsIHRoaXMuX3dvcmxkVGVtcDEsIGdsTWF0cml4Lm1hdDQuaW52ZXJ0KG51bGwsIHRhcmdldFByb2pNYXRyaXgpKTtcclxuICAgIC8vIFNldHVwIGFsbCB0aGUgbmVlZGVkIGF0dHJpYnV0ZXMuXHJcbiAgICBHX1NoYWRlckZhY3Rvcnkuc2V0QnVmZmVyc0FuZEF0dHJpYnV0ZXModGhpcy5fcHJvZ3JhbUluZm9yLmF0dHJTZXR0ZXJzLCB0aGlzLl9jbGlwU3BhY2VCdWZmZXIpO1xyXG4gICAgLy8gU2V0IHRoZSB1bmlmb3Jtc1xyXG4gICAgR19TaGFkZXJGYWN0b3J5LnNldFVuaWZvcm1zKHRoaXMuX3Byb2dyYW1JbmZvci51bmlTZXR0ZXJzLCB7XHJcbiAgICAgIHVfbWF0cml4OiB0aGlzLl93b3JsZFRlbXAxLFxyXG4gICAgICB1X2NvbG9yOiBbMCwgMSwgMCwgMV0sXHJcbiAgICB9KTtcclxuICAgIEdfU2hhZGVyRmFjdG9yeS5kcmF3QnVmZmVySW5mbyh0aGlzLl9jbGlwU3BhY2VCdWZmZXIsIGdsLkxJTkVTKTtcclxuXHJcbiAgICAvL+WOn+eCuVxyXG4gICAgZ2xNYXRyaXgubWF0NC5pZGVudGl0eSh0aGlzLl93b3JsZFRlbXAyKTtcclxuICAgIC8v6L2s5o2i5Yiw55u45py65Z2Q5qCH57O75LiLXHJcbiAgICAvL+S9oOWPr+S7peeQhuino+S4uuebuOacuuS4reeahOeCueS5mOS7peebuOacuuWdkOagh+ezu+WPr+S7pei9rOaNouWIsOS4lueVjOWdkOagh+ezu1xyXG4gICAgZ2xNYXRyaXgubWF0NC5tdWx0aXBseSh0aGlzLl93b3JsZFRlbXAyLCB0aGlzLl93b3JsZFRlbXAyLCB0YXJnZXRDYW1lcmFNYXRyaXgpOy8v5oqV5b2x55+p6Zi1eHPop4blj6Pnn6npmLV456ys5LiA5Liq5pGE5YOP5py655qE55u45py655+p6Zi1XHJcbiAgICB0aGlzLl9jb29yZGluYXRlLmRyYXdMaW5lKHByb2pNYXRyaXgsIGNhbWVyYU1hdHJpeCwgdGhpcy5fd29ybGRUZW1wMik7XHJcbiAgICB0aGlzLl9jb29yZGluYXRlLmRyYXdMaW5lKHByb2pNYXRyaXgsIGNhbWVyYU1hdHJpeCk7XHJcblxyXG4gICAgdGhpcy5fY29vcmRpbmF0ZS5kcmF3UG9pbnQocHJvak1hdHJpeCwgY2FtZXJhTWF0cml4LCB0aGlzLl93b3JsZFRlbXAyKTtcclxuICAgIHRoaXMuX2Nvb3JkaW5hdGUuZHJhd1BvaW50KHByb2pNYXRyaXgsIGNhbWVyYU1hdHJpeCk7XHJcblxyXG4gICAgdGhpcy5kcmF3RnJ1c3R1bUN1YmUocHJvak1hdHJpeCwgY2FtZXJhTWF0cml4LCB0YXJnZXRQcm9qTWF0cml4LCB0YXJnZXRDYW1lcmFNYXRyaXgpO1xyXG4gIH1cclxuXHJcbiAgLy8gRHJhdyBGcnVzdHVtIEN1YmUgYmVoaW5kXHJcbiAgcHJpdmF0ZSBkcmF3RnJ1c3R1bUN1YmUocHJvak1hdHJpeCwgY2FtZXJhTWF0cml4LCB0YXJnZXRQcm9qTWF0cml4LCB0YXJnZXRDYW1lcmFNYXRyaXgpIHtcclxuXHJcbiAgICAgLy/nu5jliLbpvZDmrKHoo4HliIfnqbrpl7Qg5YWt5Liq6Z2iXHJcbiAgICAgZ2xNYXRyaXgubWF0NC5pbnZlcnQodGhpcy5fdmlld01hdHJpeCwgY2FtZXJhTWF0cml4KTtcclxuICAgICBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KHRoaXMuX3B2VGVtcDEscHJvak1hdHJpeCx0aGlzLl92aWV3TWF0cml4KTtcclxuICAgICBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KHRoaXMuX3B2VGVtcDEsdGhpcy5fcHZUZW1wMSx0YXJnZXRDYW1lcmFNYXRyaXgpO1xyXG4gICAgIGdsTWF0cml4Lm1hdDQuaW52ZXJ0KHRoaXMuX2xvYWNhbEludmVydFByb2osdGFyZ2V0UHJvak1hdHJpeCk7XHJcblxyXG4gICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgIERldmljZS5JbnN0YW5jZS5jdWxsRmFjZShmYWxzZSk7XHJcbiAgICBnbC51c2VQcm9ncmFtKHRoaXMuX2ZydXN0dW1DdWJlLnNwR2xJRCk7XHJcbiAgICBHX1NoYWRlckZhY3Rvcnkuc2V0QnVmZmVyc0FuZEF0dHJpYnV0ZXModGhpcy5fZnJ1c3R1bUN1YmUuYXR0clNldHRlcnMsIHRoaXMuX2N1YmVCdWZmZXJJbmZvKTtcclxuICAgIGdsTWF0cml4Lm1hdDQudHJhbnNsYXRpb24odGhpcy5fd29ybGRUZW1wLCB0aGlzLl9vcmlnaW5Qb3NbMF0sdGhpcy5fb3JpZ2luUG9zWzFdLHRoaXMuX29yaWdpblBvc1syXSk7XHJcbiAgICBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KHRoaXMuX3dvcmxkVGVtcCwgdGhpcy5fbG9hY2FsSW52ZXJ0UHJvaiwgdGhpcy5fd29ybGRUZW1wKTtcclxuICAgIGdsTWF0cml4Lm1hdDQubXVsdGlwbHkodGhpcy5fZnJ1c3R1bUN1YmVVbmlmb3Jtcy51X3dvcmxkVmlld1Byb2plY3Rpb24sIHRoaXMuX3B2VGVtcDEsIHRoaXMuX3dvcmxkVGVtcCk7IC8vcHZtXHJcbiAgICBHX1NoYWRlckZhY3Rvcnkuc2V0VW5pZm9ybXModGhpcy5fZnJ1c3R1bUN1YmUudW5pU2V0dGVycywgdGhpcy5zaGFyZWRVbmlmb3Jtcyk7XHJcbiAgICBHX1NoYWRlckZhY3Rvcnkuc2V0VW5pZm9ybXModGhpcy5fZnJ1c3R1bUN1YmUudW5pU2V0dGVycywgdGhpcy5fZnJ1c3R1bUN1YmVVbmlmb3Jtcyk7XHJcbiAgICBHX1NoYWRlckZhY3RvcnkuZHJhd0J1ZmZlckluZm8odGhpcy5fY3ViZUJ1ZmZlckluZm8pO1xyXG4gICAgRGV2aWNlLkluc3RhbmNlLmNsb3NlQ3VsbEZhY2UoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3NjZW5lQ2FtZXJhTWF0cml4OkZsb2F0MzJBcnJheTtcclxuICAgIHByaXZhdGUgX3NjZW5lQ2FtZXJhUHJvamVjdE1hdHJpeDpGbG9hdDMyQXJyYXk7XHJcbiAgICAgLy/orr7nva7lnLrmma/nm7jmnLpcclxuICAgIHByaXZhdGUgc2V0U2NlbmVDYW1lcmEoKTp2b2lke1xyXG4gICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgY29uc3QgZWZmZWN0aXZlV2lkdGggPSBnbC5jYW52YXMud2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IGFzcGVjdCA9IGVmZmVjdGl2ZVdpZHRoIC8gZ2wuY2FudmFzLmhlaWdodDtcclxuICAgICAgICBjb25zdCBuZWFyID0gMTtcclxuICAgICAgICBjb25zdCBmYXIgPSAyMDAwO1xyXG4gICAgICAgIGdsTWF0cml4Lm1hdDQucGVyc3BlY3RpdmUodGhpcy5fc2NlbmVDYW1lcmFQcm9qZWN0TWF0cml4LCBNYXRoVXRpbHMuZGVnVG9SYWQoNjApLCBhc3BlY3QsIG5lYXIsIGZhcik7XHJcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgY2FtZXJhJ3MgbWF0cml4IHVzaW5nIGxvb2sgYXQuXHJcbiAgICAgICAgY29uc3QgY2FtZXJhUG9zaXRpb24yID0gWy03MCwgMTAsIDEwXTtcclxuICAgICAgICBjb25zdCB0YXJnZXQyID0gWzAsIDAsIDBdO1xyXG4gICAgICAgIGNvbnN0IHVwMiA9IFswLCAxLCAwXTtcclxuICAgICAgICBnbE1hdHJpeC5tYXQ0Lmxvb2tBdDIodGhpcy5fc2NlbmVDYW1lcmFNYXRyaXgsIGNhbWVyYVBvc2l0aW9uMiwgdGFyZ2V0MiwgdXAyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2NlbmVDYW1lcmFNYXRyaXgoKTpGbG9hdDMyQXJyYXl7XHJcbiAgICAgIHJldHVybiB0aGlzLl9zY2VuZUNhbWVyYU1hdHJpeDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRTY2VuZVByb2plY3RNYXRyaXgoKTpGbG9hdDMyQXJyYXl7XHJcbiAgICAgIHJldHVybiB0aGlzLl9zY2VuZUNhbWVyYVByb2plY3RNYXRyaXg7XHJcbiAgICB9XHJcbn0iLCJcclxuaW1wb3J0IERldmljZSBmcm9tIFwiLi4vLi4vLi4vRGV2aWNlXCI7XHJcbmltcG9ydCB7IE1hdGhVdGlscyB9IGZyb20gXCIuLi8uLi91dGlscy9NYXRoVXRpbHNcIjtcclxuaW1wb3J0IENhbWVyYSBmcm9tIFwiLi9DYW1lcmFcIjtcclxuaW1wb3J0IGVudW1zIGZyb20gXCIuL2VudW1zXCI7XHJcbmltcG9ydCBPcnRob0NhbWVyYSBmcm9tIFwiLi9PcnRob0NhbWVyYVwiO1xyXG5pbXBvcnQgUGVyc3BlY3RpdmVDYW1lcmEgZnJvbSBcIi4vUGVyc3BlY3RpdmVDYW1lcmFcIjtcclxuXHJcbi8qKlxyXG4gKiDmuLjmiI/kuLvnm7jmnLpcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVNYWluQ2FtZXJhIHtcclxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogR2FtZU1haW5DYW1lcmE7XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBHYW1lTWFpbkNhbWVyYSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSBEZXZpY2UuSW5zdGFuY2UuZ2w7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IEdhbWVNYWluQ2FtZXJhKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF8yZENhbWVyYTogT3J0aG9DYW1lcmE7XHJcbiAgICBwcml2YXRlIF8zZENhbWVyYTogUGVyc3BlY3RpdmVDYW1lcmE7XHJcbiAgICBwcml2YXRlIF9jYW1lcmFUeXBlOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgc2V0Q2FtZXJhKHR5cGU6IG51bWJlciwgYXNwZWN0OiBudW1iZXIsIGFuZ2xlOiBudW1iZXIgPSA2MCwgbmVhcjogbnVtYmVyID0gMC4xLCBmYXI6IG51bWJlciA9IDUwKTogQ2FtZXJhIHtcclxuICAgICAgICB0aGlzLl9jYW1lcmFUeXBlID0gdHlwZTtcclxuICAgICAgICBpZiAodHlwZSA9PSBlbnVtcy5QUk9KX1BFUlNQRUNUSVZFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuXzNkQ2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKGFuZ2xlICogTWF0aC5QSSAvIDE4MCwgYXNwZWN0LCBuZWFyLCBmYXIpO1xyXG4gICAgICAgICAgICAvLyB0aGlzLmNyZWF0ZVVJKCk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuXzNkQ2FtZXJhLnNob3dGcnVzdHVtKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl8zZENhbWVyYTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PSBlbnVtcy5QUk9KX09SVEhPKSB7XHJcbiAgICAgICAgICAgIHRoaXMuXzJkQ2FtZXJhID0gbmV3IE9ydGhvQ2FtZXJhKGFuZ2xlICogTWF0aC5QSSAvIDE4MCwgYXNwZWN0LCBuZWFyLCBmYXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fMmRDYW1lcmE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXRDYW1lcmEodHlwZT8pOiBDYW1lcmEge1xyXG4gICAgICAgIHJldHVybiB0eXBlID09IGVudW1zLlBST0pfUEVSU1BFQ1RJVkUgPyB0aGlzLl8zZENhbWVyYSA6IHRoaXMuXzJkQ2FtZXJhO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldDNEQ2FtZXJhKCk6UGVyc3BlY3RpdmVDYW1lcmF7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuXzNkQ2FtZXJhO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldDJEQ2FtZXJhKCk6T3J0aG9DYW1lcmF7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuXzJkQ2FtZXJhO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvL3Vp6YOo5YiGLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgcHJpdmF0ZSB6TmVhciA9IDEwOy8v55u45py65pyA6L+R6IO955yL5Yiw55qE6Led56a7XHJcbiAgICBwcml2YXRlIHpGYXIgPSA1MDsvL+ebuOacuuacgOi/nOiDveeci+WIsOeahOi3neemu1xyXG4gICAgcHJpdmF0ZSBmaWVsZE9mVmlldyA9IDMwOy8v55u45py65byg5byA55qE6KeS5bqmXHJcbiAgICBwcml2YXRlIHpQb3NpdGlvbiA9IC0yNTsvL+WcuuaZr+eahOS9jee9rlxyXG4gICAgcHJpdmF0ZSBleWVQb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkoWzMxLCAxNywgMTVdKTsvL+ebuOacuueahOS9jee9rlxyXG4gICAgcHJpdmF0ZSBleWVSb3RhdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDBdKTsvL+ebuOacuueahOaXi+i9rFxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVGaWVsZE9mVmlldyhldmVudCwgdWkpIHtcclxuICAgICAgICB0aGlzLmZpZWxkT2ZWaWV3ID0gdWkudmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgcHVibGljIHVwZGF0ZVpOZWFyKGV2ZW50LCB1aSkge1xyXG4gICAgICAgIHRoaXMuek5lYXIgPSB1aS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgICBwdWJsaWMgdXBkYXRlWkZhcihldmVudCwgdWkpIHtcclxuICAgICAgICB0aGlzLnpGYXIgPSB1aS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgICBwdWJsaWMgdXBkYXRlWlBvc2l0aW9uKGV2ZW50LCB1aSkge1xyXG4gICAgICAgIHRoaXMuelBvc2l0aW9uID0gdWkudmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgcHVibGljIHVwZGF0ZUNhbWVhclhQb3MoZXZlbnQsIHVpKSB7XHJcbiAgICAgICAgdGhpcy5leWVQb3NpdGlvblswXSA9IHVpLnZhbHVlO1xyXG4gICAgICB9XHJcbiAgICAgIHB1YmxpYyB1cGRhdGVDYW1lYXJZUG9zKGV2ZW50LCB1aSkge1xyXG4gICAgICAgIHRoaXMuZXllUG9zaXRpb25bMV0gPSB1aS52YWx1ZTtcclxuICAgICAgfVxyXG4gICAgICBwdWJsaWMgdXBkYXRlQ2FtZWFyWlBvcyhldmVudCwgdWkpIHtcclxuICAgICAgICB0aGlzLmV5ZVBvc2l0aW9uWzJdID0gdWkudmFsdWU7XHJcbiAgICAgIH1cclxuICAgICAgcHVibGljIHVwZGF0ZUNhbWVhclhSb3RhdGlvbihldmVudCwgdWkpIHtcclxuICAgICAgICB0aGlzLmV5ZVJvdGF0aW9uWzBdID0gTWF0aFV0aWxzLmRlZ1RvUmFkKHVpLnZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICBwdWJsaWMgdXBkYXRlQ2FtZWFyWVJvdGF0aW9uKGV2ZW50LCB1aSkge1xyXG4gICAgICAgIHRoaXMuZXllUm90YXRpb25bMV0gPSBNYXRoVXRpbHMuZGVnVG9SYWQodWkudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICAgIHB1YmxpYyB1cGRhdGVDYW1lYXJaUm90YXRpb24oZXZlbnQsIHVpKSB7XHJcbiAgICAgICAgdGhpcy5leWVSb3RhdGlvblsyXSA9IE1hdGhVdGlscy5kZWdUb1JhZCh1aS52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIC8v5Yib5bu655u45py6VUlcclxuICAgIHByaXZhdGUgY3JlYXRlVUkoKTp2b2lke1xyXG4gICAgICAgIHZhciB3ZWJnbExlc3NvbnNVSSA9IHdpbmRvd1tcIndlYmdsTGVzc29uc1VJXCJdO1xyXG4gICAgICAgIHdlYmdsTGVzc29uc1VJLnNldHVwU2xpZGVyKFwiI2ZpZWxkT2ZWaWV3XCIsIHsgdmFsdWU6IHRoaXMuZmllbGRPZlZpZXcsIHNsaWRlOiB0aGlzLnVwZGF0ZUZpZWxkT2ZWaWV3LmJpbmQodGhpcyksIG1heDogMTc5IH0pO1xyXG4gICAgICAgIHdlYmdsTGVzc29uc1VJLnNldHVwU2xpZGVyKFwiI3pOZWFyXCIsIHsgdmFsdWU6IHRoaXMuek5lYXIsIHNsaWRlOiB0aGlzLnVwZGF0ZVpOZWFyLmJpbmQodGhpcyksIG1pbjogMSwgbWF4OiA1MCB9KTtcclxuICAgICAgICB3ZWJnbExlc3NvbnNVSS5zZXR1cFNsaWRlcihcIiN6RmFyXCIsIHsgdmFsdWU6IHRoaXMuekZhciwgc2xpZGU6IHRoaXMudXBkYXRlWkZhci5iaW5kKHRoaXMpLCBtaW46IDEsIG1heDogNTAgfSk7XHJcbiAgICAgICAgd2ViZ2xMZXNzb25zVUkuc2V0dXBTbGlkZXIoXCIjelBvc2l0aW9uXCIsIHsgdmFsdWU6IHRoaXMuelBvc2l0aW9uLCBzbGlkZTogdGhpcy51cGRhdGVaUG9zaXRpb24uYmluZCh0aGlzKSwgbWluOiAtNjAsIG1heDogMCB9KTtcclxuICAgICAgICB3ZWJnbExlc3NvbnNVSS5zZXR1cFNsaWRlcihcIiNjYW1lcmFQb3NYXCIsIHsgdmFsdWU6IHRoaXMuZXllUG9zaXRpb25bMF0sIHNsaWRlOiB0aGlzLnVwZGF0ZUNhbWVhclhQb3MuYmluZCh0aGlzKSwgbWluOiAxLCBtYXg6IDUwIH0pOy8vMzFcclxuICAgICAgICB3ZWJnbExlc3NvbnNVSS5zZXR1cFNsaWRlcihcIiNjYW1lcmFQb3NZXCIsIHsgdmFsdWU6IHRoaXMuZXllUG9zaXRpb25bMV0sIHNsaWRlOiB0aGlzLnVwZGF0ZUNhbWVhcllQb3MuYmluZCh0aGlzKSwgbWluOiAxLCBtYXg6IDUwIH0pOy8vMTdcclxuICAgICAgICB3ZWJnbExlc3NvbnNVSS5zZXR1cFNsaWRlcihcIiNjYW1lcmFQb3NaXCIsIHsgdmFsdWU6IHRoaXMuZXllUG9zaXRpb25bMl0sIHNsaWRlOiB0aGlzLnVwZGF0ZUNhbWVhclpQb3MuYmluZCh0aGlzKSwgbWluOiAxLCBtYXg6IDUwIH0pOy8vMTVcclxuICAgICAgICB3ZWJnbExlc3NvbnNVSS5zZXR1cFNsaWRlcihcIiNjYW1lcmFSb3RhdGVYXCIsIHsgdmFsdWU6IHRoaXMuZXllUm90YXRpb25bMF0sIHNsaWRlOiB0aGlzLnVwZGF0ZUNhbWVhclhSb3RhdGlvbi5iaW5kKHRoaXMpLCBtaW46IDAsIG1heDogMzYwIH0pOy8vMzFcclxuICAgICAgICB3ZWJnbExlc3NvbnNVSS5zZXR1cFNsaWRlcihcIiNjYW1lcmFSb3RhdGVZXCIsIHsgdmFsdWU6IHRoaXMuZXllUm90YXRpb25bMV0sIHNsaWRlOiB0aGlzLnVwZGF0ZUNhbWVhcllSb3RhdGlvbi5iaW5kKHRoaXMpLCBtaW46IDAsIG1heDogMzYwIH0pOy8vMTdcclxuICAgICAgICB3ZWJnbExlc3NvbnNVSS5zZXR1cFNsaWRlcihcIiNjYW1lcmFSb3RhdGVaXCIsIHsgdmFsdWU6IHRoaXMuZXllUm90YXRpb25bMl0sIHNsaWRlOiB0aGlzLnVwZGF0ZUNhbWVhclpSb3RhdGlvbi5iaW5kKHRoaXMpLCBtaW46IDAsIG1heDogMzYwIH0pOy8vMTVcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgQ2FtZXJhIGZyb20gXCIuL0NhbWVyYVwiO1xyXG5pbXBvcnQgZW51bXMgZnJvbSBcIi4vZW51bXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9ydGhvQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhe1xyXG4gICAgY29uc3RydWN0b3IoZm92eSxhc3BlY3QsbmVhcixmYXIpe1xyXG4gICAgICAgIHN1cGVyKGZvdnksYXNwZWN0LG5lYXIsZmFyLGVudW1zLlBST0pfT1JUSE8pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IERldmljZSBmcm9tIFwiLi4vLi4vLi4vRGV2aWNlXCI7XHJcbmltcG9ydCB7IGdsTWF0cml4IH0gZnJvbSBcIi4uLy4uL01hdHJpeFwiO1xyXG5pbXBvcnQgQ2FtZXJhIGZyb20gXCIuL0NhbWVyYVwiO1xyXG5pbXBvcnQgZW51bXMgZnJvbSBcIi4vZW51bXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBlcnNwZWN0aXZlQ2FtZXJhIGV4dGVuZHMgQ2FtZXJhIHtcclxuICAgIGNvbnN0cnVjdG9yKGZvdnksIGFzcGVjdCwgbmVhciwgZmFyKSB7XHJcbiAgICAgICAgc3VwZXIoZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIsIGVudW1zLlBST0pfUEVSU1BFQ1RJVkUpO1xyXG4gICAgICAgIHRoaXMudGVzdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdGVzdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFJlY3QoMCwgMCwgMSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlYWR5RHJhdyh0aW1lOm51bWJlcik6dm9pZHtcclxuICAgICAgICAgICBzdXBlci5yZWFkeURyYXcodGltZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFZQKCk6RmxvYXQzMkFycmF5e1xyXG4gICAgICAgIHJldHVybiBnbE1hdHJpeC5tYXQ0Lm11bHRpcGx5KG51bGwsdGhpcy5fcHJvamVjdGlvbk1hdHJpeCx0aGlzLl9tb2RlbE1hdHJpeCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdGltZSBpbiBzZWNvbmRzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVMb29rQXQodGltZTogbnVtYmVyKTogQXJyYXk8YW55PnxGbG9hdDMyQXJyYXkge1xyXG5cclxuICAgICAgICAgLy8gY29udmVydCB0byBzZWNvbmRzXHJcbiAgICAgICAgIHRpbWUgKj0gMC4wMDE7XHJcblxyXG4gICAgICAgIC8vIGNhbWVyYSBnb2luZyBpbiBjaXJjbGUgMiB1bml0cyBmcm9tIG9yaWdpbiBsb29raW5nIGF0IG9yaWdpblxyXG4gICAgICAgIHZhciBtNCA9IHRoaXMuX2dsTWF0cml4Lm1hdDQ7XHJcbiAgICAgICAgdmFyIGNhbWVyYVBvc2l0aW9uID0gW01hdGguY29zKHRpbWUgKiAwLjEpLCAwLCBNYXRoLnNpbih0aW1lICogMC4xKV07XHJcbiAgICAgICAgdmFyIHRhcmdldCA9IFswLCAwLCAwXTtcclxuICAgICAgICB2YXIgdXAgPSBbMCwgMSwgMF07XHJcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgY2FtZXJhJ3MgbWF0cml4IHVzaW5nIGxvb2sgYXQuXHJcbiAgICAgICAgdmFyIGNhbWVyYU1hdHJpeCA9IG00LmNyZWF0ZSgpO1xyXG4gICAgICAgIG00Lmxvb2tBdChjYW1lcmFNYXRyaXgsIGNhbWVyYVBvc2l0aW9uLCB0YXJnZXQsIHVwKTtcclxuXHJcbiAgICAgICAgLy8gTWFrZSBhIHZpZXcgbWF0cml4IGZyb20gdGhlIGNhbWVyYSBtYXRyaXguXHJcbiAgICAgICAgdmFyIHZpZXdNYXRyaXggPSBtNC5jcmVhdGUoKTtcclxuICAgICAgICBtNC5pbnZlcnQodmlld01hdHJpeCwgY2FtZXJhTWF0cml4KTtcclxuXHJcbiAgICAgICAgLy8gV2Ugb25seSBjYXJlIGFib3V0IGRpcmVjaXRvbiBzbyByZW1vdmUgdGhlIHRyYW5zbGF0aW9uXHJcbiAgICAgICAgdmlld01hdHJpeFsxMl0gPSAwO1xyXG4gICAgICAgIHZpZXdNYXRyaXhbMTNdID0gMDtcclxuICAgICAgICB2aWV3TWF0cml4WzE0XSA9IDA7XHJcblxyXG4gICAgICAgIHZhciB2aWV3RGlyZWN0aW9uUHJvamVjdGlvbk1hdHJpeCA9IG00LmNyZWF0ZSgpO1xyXG4gICAgICAgIG00Lm11bHRpcGx5KHZpZXdEaXJlY3Rpb25Qcm9qZWN0aW9uTWF0cml4LCB0aGlzLl9wcm9qZWN0aW9uTWF0cml4LCB2aWV3TWF0cml4KTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgdmlld0RpcmVjdGlvblByb2plY3Rpb25JbnZlcnNlTWF0cml4ID0gbTQuY3JlYXRlKCk7XHJcbiAgICAgICAgbTQuaW52ZXJ0KHZpZXdEaXJlY3Rpb25Qcm9qZWN0aW9uSW52ZXJzZU1hdHJpeCwgdmlld0RpcmVjdGlvblByb2plY3Rpb25NYXRyaXgpO1xyXG4gICAgICAgIHJldHVybiB2aWV3RGlyZWN0aW9uUHJvamVjdGlvbkludmVyc2VNYXRyaXg7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvLyBwcm9qZWN0aW9uXHJcbiAgICBQUk9KX1BFUlNQRUNUSVZFOiAwLFxyXG4gICAgUFJPSl9PUlRITzogMSxcclxuICBcclxuICAgIC8vIGxpZ2h0c1xyXG4gICAgTElHSFRfRElSRUNUSU9OQUw6IDAsXHJcbiAgICBMSUdIVF9QT0lOVDogMSxcclxuICAgIExJR0hUX1NQT1Q6IDIsXHJcbiAgICBMSUdIVF9BTUJJRU5UOiAzLFxyXG4gIFxyXG4gICAgLy8gc2hhZG93c1xyXG4gICAgU0hBRE9XX05PTkU6IDAsXHJcbiAgICBTSEFET1dfSEFSRDogMSxcclxuICAgIFNIQURPV19TT0ZUOiAyLFxyXG4gIFxyXG4gICAgLy8gcGFyYW1ldGVyIHR5cGVcclxuICAgIC8vIFBBUkFNX0lOVDogICAgICAgICAgICAgdHlwZU1hcC5pbnQsXHJcbiAgICAvLyBQQVJBTV9JTlQyOiAgICAgICAgICAgIHR5cGVNYXAuaXZlYzIsXHJcbiAgICAvLyBQQVJBTV9JTlQzOiAgICAgICAgICAgIHR5cGVNYXAuaXZlYzMsXHJcbiAgICAvLyBQQVJBTV9JTlQ0OiAgICAgICAgICAgIHR5cGVNYXAuaXZlYzQsXHJcbiAgICAvLyBQQVJBTV9GTE9BVDogICAgICAgICAgIHR5cGVNYXAuZmxvYXQsXHJcbiAgICAvLyBQQVJBTV9GTE9BVDI6ICAgICAgICAgIHR5cGVNYXAudmVjMixcclxuICAgIC8vIFBBUkFNX0ZMT0FUMzogICAgICAgICAgdHlwZU1hcC52ZWMzLFxyXG4gICAgLy8gUEFSQU1fRkxPQVQ0OiAgICAgICAgICB0eXBlTWFwLnZlYzQsXHJcbiAgICAvLyBQQVJBTV9NQVQyOiAgICAgICAgICAgIHR5cGVNYXAubWF0MixcclxuICAgIC8vIFBBUkFNX01BVDM6ICAgICAgICAgICAgdHlwZU1hcC5tYXQzLFxyXG4gICAgLy8gUEFSQU1fTUFUNDogICAgICAgICAgICB0eXBlTWFwLm1hdDQsXHJcbiAgICAvLyBQQVJBTV9URVhUVVJFXzJEOiAgICAgIHR5cGVNYXAuc2FtcGxlcjJELFxyXG4gICAgLy8gUEFSQU1fVEVYVFVSRV9DVUJFOiAgICB0eXBlTWFwLnNhbXBsZXJDdWJlLFxyXG4gIFxyXG4gICAgLy8gY2xlYXIgZmxhZ3NcclxuICAgIENMRUFSX0NPTE9SOiAxLFxyXG4gICAgQ0xFQVJfREVQVEg6IDIsXHJcbiAgICBDTEVBUl9TVEVOQ0lMOiA0LFxyXG4gICAgQ0xFQVJfU0tZQk9YOiA4LFxyXG4gIFxyXG4gICAgLy9cclxuICAgIEJVRkZFUl9WSUVXX0lOVDg6IDAsXHJcbiAgICBCVUZGRVJfVklFV19VSU5UODogMSxcclxuICAgIEJVRkZFUl9WSUVXX0lOVDE2OiAyLFxyXG4gICAgQlVGRkVSX1ZJRVdfVUlOVDE2OiAzLFxyXG4gICAgQlVGRkVSX1ZJRVdfSU5UMzI6IDQsXHJcbiAgICBCVUZGRVJfVklFV19VSU5UMzI6IDUsXHJcbiAgICBCVUZGRVJfVklFV19GTE9BVDMyOiA2LFxyXG4gIH07IiwiXHJcbi8v56uL5pa55L2T55qE6Z2iXHJcbmV4cG9ydCBlbnVtIEN1YmVGYWNlIHtcclxuICAgIEZST05UID0gMCxcclxuICAgIEJBQ0sgPSAxLFxyXG4gICAgTEVGVCxcclxuICAgIFJJR0hULFxyXG4gICAgVVAsXHJcbiAgICBET1dOXHJcbn1cclxuLy/nq4vmlrnkvZPnmoTpnaLnmoTmlbDmja5cclxuZXhwb3J0IGNsYXNzIEN1YmVGYWNlRGF0YSB7XHJcbiAgICBjb25zdHJ1Y3RvcihmYWNlLCB2QXJyOiBBcnJheTxudW1iZXI+LCB1dkFycjogQXJyYXk8bnVtYmVyPiwgaW5kZXhBcnI6IEFycmF5PG51bWJlcj4sbm9ybWFsczpBcnJheTxudW1iZXI+KSB7XHJcbiAgICAgICAgdGhpcy5mYWNlID0gZmFjZTtcclxuICAgICAgICB0aGlzLnZlcnRleCA9IHZBcnI7XHJcbiAgICAgICAgdGhpcy52ZXJ0ZXhfaXRlbV9zaXplID0gdkFyci5sZW5ndGggLyB0aGlzLnZlcnRleF9pdGVtX251bXM7XHJcbiAgICAgICAgdGhpcy51diA9IHV2QXJyO1xyXG4gICAgICAgIHRoaXMudXZfaXRlbV9zaXplID0gdXZBcnIubGVuZ3RoIC8gdGhpcy51dl9pdGVtX251bXM7XHJcbiAgICAgICAgdGhpcy5pbmRleHMgPSBpbmRleEFycjtcclxuICAgICAgICB0aGlzLmluZGV4c19pdGVtX3NpemUgPSBpbmRleEFyci5sZW5ndGggLyB0aGlzLmluZGV4c19pdGVtX251bXM7XHJcbiAgICAgICAgdGhpcy5ub3JtYWxzID0gbm9ybWFscztcclxuICAgICAgICB0aGlzLm5vcm1hbF9pdGVtX3NpemUgPSBub3JtYWxzLmxlbmd0aC90aGlzLm5vcm1hbF9pdGVtX251bXM7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGZhY2U6IEN1YmVGYWNlID0gQ3ViZUZhY2UuRlJPTlQ7XHJcbiAgICBwcml2YXRlIG5vcm1hbHM6QXJyYXk8bnVtYmVyPiA9IFtdO1xyXG4gICAgcHJpdmF0ZSB1djogQXJyYXk8bnVtYmVyPiA9IFtdO1xyXG4gICAgcHJpdmF0ZSB2ZXJ0ZXg6IEFycmF5PG51bWJlcj4gPSBbXTtcclxuICAgIHByaXZhdGUgaW5kZXhzOiBBcnJheTxudW1iZXI+ID0gW107XHJcblxyXG4gICAgcmVhZG9ubHkgdmVydGV4X2l0ZW1fc2l6ZTogbnVtYmVyID0gMDtcclxuICAgIHJlYWRvbmx5IHZlcnRleF9pdGVtX251bXM6IG51bWJlciA9IDQ7XHJcbiAgICByZWFkb25seSBub3JtYWxfaXRlbV9zaXplOiBudW1iZXIgPSAwO1xyXG4gICAgcmVhZG9ubHkgbm9ybWFsX2l0ZW1fbnVtczogbnVtYmVyID0gNDtcclxuICAgIHJlYWRvbmx5IHV2X2l0ZW1fc2l6ZTogbnVtYmVyID0gMDtcclxuICAgIHJlYWRvbmx5IHV2X2l0ZW1fbnVtczogbnVtYmVyID0gNDtcclxuICAgIHJlYWRvbmx5IGluZGV4c19pdGVtX3NpemU6IG51bWJlciA9IDA7XHJcbiAgICByZWFkb25seSBpbmRleHNfaXRlbV9udW1zOiBudW1iZXIgPSAxO1xyXG4gICAgZ2V0IEZhY2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmFjZTtcclxuICAgIH1cclxuICAgIC8v6buY6K6k5oOF5Ya1IOS4gOS4qumdouacieWbm+S4queCuVxyXG4gICAgZ2V0IFZlcnRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0ZXg7XHJcbiAgICB9XHJcbiAgICBnZXQgVVYoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudXY7XHJcbiAgICB9XHJcbiAgICBnZXQgSW5kZXhzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluZGV4cztcclxuICAgIH1cclxuICAgIGdldCBOb3JtYWxzKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFscztcclxuICAgIH1cclxuXHJcblxyXG59XHJcbmV4cG9ydCBjbGFzcyBDdWJlRGF0YSB7XHJcbiAgICAvLyDpobbngrnmlbDmja5cclxuICAgIHByaXZhdGUgc3RhdGljIHZlclBvcyA9IFtcclxuICAgICAgICAvLyBGcm9udCBmYWNlXHJcbiAgICAgICAgMS4wLCAxLjAsIDEuMCwgLy92MFxyXG4gICAgICAgIC0xLjAsIDEuMCwgMS4wLCAvL3YxXHJcbiAgICAgICAgLTEuMCwgLTEuMCwgMS4wLCAvL3YyXHJcbiAgICAgICAgMS4wLCAtMS4wLCAxLjAsIC8vdjNcclxuXHJcbiAgICAgICAgLy8gQmFjayBmYWNlXHJcbiAgICAgICAgMS4wLCAxLjAsIC0xLjAsIC8vdjRcclxuICAgICAgICAtMS4wLCAxLjAsIC0xLjAsIC8vdjVcclxuICAgICAgICAtMS4wLCAtMS4wLCAtMS4wLCAvL3Y2XHJcbiAgICAgICAgMS4wLCAtMS4wLCAtMS4wLCAvL3Y3XHJcblxyXG4gICAgICAgIC8vIExlZnQgZmFjZVxyXG4gICAgICAgIC0xLjAsIDEuMCwgMS4wLCAvL3Y4XHJcbiAgICAgICAgLTEuMCwgMS4wLCAtMS4wLCAvL3Y5XHJcbiAgICAgICAgLTEuMCwgLTEuMCwgLTEuMCwgLy92MTBcclxuICAgICAgICAtMS4wLCAtMS4wLCAxLjAsIC8vdjExXHJcblxyXG4gICAgICAgIC8vIFJpZ2h0IGZhY2VcclxuICAgICAgICAxLjAsIDEuMCwgMS4wLCAvLzEyXHJcbiAgICAgICAgMS4wLCAtMS4wLCAxLjAsIC8vMTNcclxuICAgICAgICAxLjAsIC0xLjAsIC0xLjAsIC8vMTRcclxuICAgICAgICAxLjAsIDEuMCwgLTEuMCwgLy8xNVxyXG5cclxuICAgICAgICAvLyBUb3AgZmFjZVxyXG4gICAgICAgIDEuMCwgMS4wLCAxLjAsIC8vdjE2XHJcbiAgICAgICAgMS4wLCAxLjAsIC0xLjAsIC8vdjE3XHJcbiAgICAgICAgLTEuMCwgMS4wLCAtMS4wLCAvL3YxOFxyXG4gICAgICAgIC0xLjAsIDEuMCwgMS4wLCAvL3YxOVxyXG5cclxuICAgICAgICAvLyBCb3R0b20gZmFjZVxyXG4gICAgICAgIDEuMCwgLTEuMCwgMS4wLCAvL3YyMFxyXG4gICAgICAgIDEuMCwgLTEuMCwgLTEuMCwgLy92MjFcclxuICAgICAgICAtMS4wLCAtMS4wLCAtMS4wLCAvL3YyMlxyXG4gICAgICAgIC0xLjAsIC0xLjAsIDEuMCwgLy92MjNcclxuICAgIF07XHJcbiAgICAvLyB1diDmlbDmja5cclxuICAgIHByaXZhdGUgc3RhdGljIHRleFVWID0gW1xyXG4gICAgICAgIC8vRnJvbnQgZmFjZVxyXG4gICAgICAgIDAuMCwgMC4wLCAvL3YwXHJcbiAgICAgICAgMS4wLCAwLjAsIC8vdjFcclxuICAgICAgICAxLjAsIDEuMCwgLy92MlxyXG4gICAgICAgIDAuMCwgMS4wLCAvL3YzXHJcblxyXG4gICAgICAgIC8vIEJhY2sgZmFjZVxyXG4gICAgICAgIDAuMCwgMS4wLCAvL3Y0XHJcbiAgICAgICAgMS4wLCAxLjAsIC8vdjVcclxuICAgICAgICAxLjAsIDAuMCwgLy92NlxyXG4gICAgICAgIDAuMCwgMC4wLCAvL3Y3XHJcblxyXG4gICAgICAgIC8vIExlZnQgZmFjZVxyXG4gICAgICAgIDAuMCwgMS4wLCAvL3Y4XHJcbiAgICAgICAgMS4wLCAxLjAsIC8vdjlcclxuICAgICAgICAxLjAsIDAuMCwgLy92MTBcclxuICAgICAgICAwLjAsIDAuMCwgLy92MTFcclxuXHJcbiAgICAgICAgLy8gUmlnaHQgZmFjZVxyXG4gICAgICAgIDAuMCwgMS4wLCAvL3YxMlxyXG4gICAgICAgIDEuMCwgMS4wLCAvL3YxM1xyXG4gICAgICAgIDEuMCwgMC4wLCAvL3YxNFxyXG4gICAgICAgIDAuMCwgMC4wLCAvL3YxNVxyXG5cclxuICAgICAgICAvLyBUb3AgZmFjZVxyXG4gICAgICAgIDAuMCwgMS4wLCAvL3YxNlxyXG4gICAgICAgIDEuMCwgMS4wLCAvL3YxN1xyXG4gICAgICAgIDEuMCwgMC4wLCAvL3YxOFxyXG4gICAgICAgIDAuMCwgMC4wLCAvL3YxOVxyXG5cclxuICAgICAgICAvLyBCb3R0b20gZmFjZVxyXG4gICAgICAgIDAuMCwgMS4wLCAvL3YyMFxyXG4gICAgICAgIDEuMCwgMS4wLCAvL3YyMVxyXG4gICAgICAgIDEuMCwgMC4wLCAvL3YyMlxyXG4gICAgICAgIDAuMCwgMC4wLCAvL3YyM1xyXG4gICAgXTtcclxuICAgIC8vIOe0ouW8leaVsOaNrlxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgdmVySW5kZXggPSBbXHJcbiAgICAgICAgMCwgMSwgMiwgMCwgMiwgMywgLy8gRnJvbnQgZmFjZVxyXG4gICAgICAgIDQsIDYsIDUsIDQsIDcsIDYsIC8vIEJhY2sgZmFjZVxyXG4gICAgICAgIDgsIDksIDEwLCA4LCAxMCwgMTEsIC8vIExlZnQgZmFjZVxyXG4gICAgICAgIDEyLCAxMywgMTQsIDEyLCAxNCwgMTUsIC8vIFJpZ2h0IGZhY2VcclxuICAgICAgICAxNiwgMTcsIDE4LCAxNiwgMTgsIDE5LCAvLyBUb3AgZmFjZVxyXG4gICAgICAgIDIwLCAyMiwgMjEsIDIwLCAyMywgMjIgLy8gQm90dG9tIGZhY2VcclxuICAgIF07XHJcbiAgICBwcml2YXRlIHN0YXRpYyBub3JtYWxzID0gW1xyXG4gICAgICAgIC8vIGZyb250IGZhY2VcclxuICAgICAgICAwLCAwLCAxLFxyXG4gICAgICAgIDAsIDAsIDEsXHJcbiAgICAgICAgMCwgMCwgMSxcclxuICAgICAgICAwLCAwLCAxLFxyXG5cclxuICAgICAgICAvLyBiYWNrIGZhY2VcclxuICAgICAgICAwLCAwLCAtMSxcclxuICAgICAgICAwLCAwLCAtMSxcclxuICAgICAgICAwLCAwLCAtMSxcclxuICAgICAgICAwLCAwLCAtMSxcclxuXHJcbiAgICAgICAgLy8gbGVmdCBmYWNlXHJcbiAgICAgICAgLTEsIDAsIDAsXHJcbiAgICAgICAgLTEsIDAsIDAsXHJcbiAgICAgICAgLTEsIDAsIDAsXHJcbiAgICAgICAgLTEsIDAsIDAsXHJcblxyXG4gICAgICAgIC8vIHJpZ2h0IGZhY2VcclxuICAgICAgICAxLCAwLCAwLFxyXG4gICAgICAgIDEsIDAsIDAsXHJcbiAgICAgICAgMSwgMCwgMCxcclxuICAgICAgICAxLCAwLCAwLFxyXG5cclxuICAgICAgICAvLyB0b3AgZmFjZVxyXG4gICAgICAgIDAsIDEsIDAsXHJcbiAgICAgICAgMCwgMSwgMCxcclxuICAgICAgICAwLCAxLCAwLFxyXG4gICAgICAgIDAsIDEsIDAsXHJcblxyXG4gICAgICAgIC8vIGJvdHRvbSBmYWNlXHJcbiAgICAgICAgMCwgLTEsIDAsXHJcbiAgICAgICAgMCwgLTEsIDAsXHJcbiAgICAgICAgMCwgLTEsIDAsXHJcbiAgICAgICAgMCwgLTEsIDBdO1xyXG4gICAgcHVibGljIHN0YXRpYyBnZXRGYWNlRGF0YShmYWNlOiBDdWJlRmFjZSk6IEN1YmVGYWNlRGF0YSB7XHJcbiAgICAgICAgdmFyIGNGRGF0YSA9IGZ1bmN0aW9uIChrZXk6IG51bWJlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEN1YmVGYWNlRGF0YShDdWJlRmFjZS5GUk9OVCxcclxuICAgICAgICAgICAgICAgIEN1YmVEYXRhLnZlclBvcy5zbGljZSgzICogNCAqIGtleSwgMyAqIDQgKiAoa2V5ICsgMSkpLFxyXG4gICAgICAgICAgICAgICAgQ3ViZURhdGEudGV4VVYuc2xpY2UoMiAqIDQgKiBrZXksIDIgKiA0ICogKGtleSArIDEpKSxcclxuICAgICAgICAgICAgICAgIEN1YmVEYXRhLnZlckluZGV4LnNsaWNlKDEgKiA2ICoga2V5LCAxICogNiAqIChrZXkgKyAxKSksXHJcbiAgICAgICAgICAgICAgICBDdWJlRGF0YS5ub3JtYWxzLnNsaWNlKDMgKiA0ICoga2V5LCAzICogNCAqIChrZXkgKyAxKSkpO1xyXG5cclxuICAgICAgICB9O1xyXG4gICAgICAgIHN3aXRjaCAoZmFjZSkge1xyXG4gICAgICAgICAgICBjYXNlIEN1YmVGYWNlLkZST05UOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNGRGF0YShDdWJlRmFjZS5GUk9OVCk7XHJcbiAgICAgICAgICAgIGNhc2UgQ3ViZUZhY2UuQkFDSzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBjRkRhdGEoQ3ViZUZhY2UuQkFDSyk7XHJcbiAgICAgICAgICAgIGNhc2UgQ3ViZUZhY2UuTEVGVDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBjRkRhdGEoQ3ViZUZhY2UuTEVGVCk7XHJcbiAgICAgICAgICAgIGNhc2UgQ3ViZUZhY2UuUklHSFQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY0ZEYXRhKEN1YmVGYWNlLlJJR0hUKTtcclxuICAgICAgICAgICAgY2FzZSBDdWJlRmFjZS5VUDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBjRkRhdGEoQ3ViZUZhY2UuVVApO1xyXG4gICAgICAgICAgICBjYXNlIEN1YmVGYWNlLkRPV046XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY0ZEYXRhKEN1YmVGYWNlLkRPV04pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0RGF0YSgpe1xyXG4gICAgICAgIHZhciBmYWNlRnJvbnREYXRhID0gQ3ViZURhdGEuZ2V0RmFjZURhdGEoQ3ViZUZhY2UuRlJPTlQpO1xyXG4gICAgICAgIHZhciBmYWNlQmFja0RhdGEgPSBDdWJlRGF0YS5nZXRGYWNlRGF0YShDdWJlRmFjZS5CQUNLKTtcclxuICAgICAgICB2YXIgZmFjZUxlZnREYXRhID0gQ3ViZURhdGEuZ2V0RmFjZURhdGEoQ3ViZUZhY2UuTEVGVCk7XHJcbiAgICAgICAgdmFyIGZhY2VSaWdodERhdGEgPSBDdWJlRGF0YS5nZXRGYWNlRGF0YShDdWJlRmFjZS5SSUdIVCk7XHJcbiAgICAgICAgdmFyIGZhY2VVcERhdGEgPSBDdWJlRGF0YS5nZXRGYWNlRGF0YShDdWJlRmFjZS5VUCk7XHJcbiAgICAgICAgdmFyIGZhY2VEb3duRGF0YSA9IEN1YmVEYXRhLmdldEZhY2VEYXRhKEN1YmVGYWNlLkRPV04pO1xyXG4gICAgICAgIHZhciBjb25jYXREYXRhID0gZnVuY3Rpb24gKGtleTpzdHJpbmcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChcclxuICAgICAgICAgICAgICAgIGZhY2VGcm9udERhdGFba2V5XSxcclxuICAgICAgICAgICAgICAgIGZhY2VCYWNrRGF0YVtrZXldLFxyXG4gICAgICAgICAgICAgICAgZmFjZUxlZnREYXRhW2tleV0sXHJcbiAgICAgICAgICAgICAgICBmYWNlUmlnaHREYXRhW2tleV0sXHJcbiAgICAgICAgICAgICAgICBmYWNlVXBEYXRhW2tleV0sXHJcbiAgICAgICAgICAgICAgICBmYWNlRG93bkRhdGFba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB2ZXJ0ZXggPSBjb25jYXREYXRhKFwiVmVydGV4XCIpO1xyXG4gICAgICAgIHZhciB1dkRhdGEgPSBjb25jYXREYXRhKFwiVVZcIik7XHJcbiAgICAgICAgdmFyIGluZGV4cyA9IGNvbmNhdERhdGEoXCJJbmRleHNcIik7XHJcbiAgICAgICAgdmFyIG5vcm1hbHMgPSBjb25jYXREYXRhKFwiTm9ybWFsc1wiKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2ZXJ0ZXg6dmVydGV4LFxyXG4gICAgICAgICAgICB1dkRhdGE6dXZEYXRhLFxyXG4gICAgICAgICAgICBpbmRleHM6aW5kZXhzLFxyXG4gICAgICAgICAgICBub3JtYWxzOm5vcm1hbHMsXHJcbiAgICAgICAgICAgIGRGOmZhY2VGcm9udERhdGFcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldERhdGEyKCl7XHJcbiAgICAgICAgdmFyIGZhY2VGcm9udERhdGEgPSBDdWJlRGF0YS5nZXRGYWNlRGF0YShDdWJlRmFjZS5GUk9OVCk7XHJcbiAgICAgICAgdmFyIGZhY2VCYWNrRGF0YSA9IEN1YmVEYXRhLmdldEZhY2VEYXRhKEN1YmVGYWNlLkJBQ0spO1xyXG4gICAgICAgIHZhciBmYWNlTGVmdERhdGEgPSBDdWJlRGF0YS5nZXRGYWNlRGF0YShDdWJlRmFjZS5MRUZUKTtcclxuICAgICAgICB2YXIgZmFjZVJpZ2h0RGF0YSA9IEN1YmVEYXRhLmdldEZhY2VEYXRhKEN1YmVGYWNlLlJJR0hUKTtcclxuICAgICAgICB2YXIgZmFjZVVwRGF0YSA9IEN1YmVEYXRhLmdldEZhY2VEYXRhKEN1YmVGYWNlLlVQKTtcclxuICAgICAgICB2YXIgZmFjZURvd25EYXRhID0gQ3ViZURhdGEuZ2V0RmFjZURhdGEoQ3ViZUZhY2UuRE9XTik7XHJcbiAgICAgICAgdmFyIGNvbmNhdERhdGEgPSBmdW5jdGlvbiAoa2V5OnN0cmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gW10uY29uY2F0KFxyXG4gICAgICAgICAgICAgICAgZmFjZVJpZ2h0RGF0YVtrZXldLFxyXG4gICAgICAgICAgICAgICAgZmFjZUxlZnREYXRhW2tleV0sXHJcbiAgICAgICAgICAgICAgICBmYWNlVXBEYXRhW2tleV0sXHJcbiAgICAgICAgICAgICAgICBmYWNlRG93bkRhdGFba2V5XSxcclxuICAgICAgICAgICAgICAgIGZhY2VCYWNrRGF0YVtrZXldLFxyXG4gICAgICAgICAgICAgICAgZmFjZUZyb250RGF0YVtrZXldKVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmVydGV4ID0gY29uY2F0RGF0YShcIlZlcnRleFwiKTtcclxuICAgICAgICB2YXIgdXZEYXRhID0gY29uY2F0RGF0YShcIlVWXCIpO1xyXG4gICAgICAgIHZhciBpbmRleHMgPSBjb25jYXREYXRhKFwiSW5kZXhzXCIpO1xyXG4gICAgICAgIHZhciBub3JtYWxzID0gY29uY2F0RGF0YShcIk5vcm1hbHNcIik7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVydGV4OnZlcnRleCxcclxuICAgICAgICAgICAgdXZEYXRhOnV2RGF0YSxcclxuICAgICAgICAgICAgaW5kZXhzOmluZGV4cyxcclxuICAgICAgICAgICAgbm9ybWFsczpub3JtYWxzLFxyXG4gICAgICAgICAgICBkRjpmYWNlRnJvbnREYXRhXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgZ2xUZXh0dXJlRm10SW5mb3IsIGdsdGV4X2Zvcm1hdCwgZ2xUZXh0dXJlVG90YWxDaGFuZWxzIH0gZnJvbSBcIi4uL2dmeC9HTEVudW1zXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXN0b21UZXh0dXJlRGF0YSB7XHJcbiAgICBzdGF0aWMgZ2V0UmFuZG9tRGF0YSh3aWR0aCwgaGVpZ2h0LCBmb3JtYXQ6IGdsdGV4X2Zvcm1hdCkge1xyXG5cclxuICAgICAgICB2YXIgZm9ybWF0SW5mbyA9IGdsVGV4dHVyZUZtdEluZm9yKGZvcm1hdCk7XHJcbiAgICAgICAgdmFyIGNoYW5lbHMgPSBnbFRleHR1cmVUb3RhbENoYW5lbHMoZm9ybWF0KTtcclxuICAgICAgICB2YXIgdXJsRGF0YTogYW55ID0ge1xyXG4gICAgICAgICAgICBsZXZlbDogMCxcclxuICAgICAgICAgICAgaW50ZXJuYWxGb3JtYXQ6IGZvcm1hdEluZm8uaW50ZXJuYWxGb3JtYXQsXHJcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgIGJvcmRlcjogMCxcclxuICAgICAgICAgICAgZm9ybWF0OiBmb3JtYXRJbmZvLmZvcm1hdCxcclxuICAgICAgICAgICAgdHlwZTogZm9ybWF0SW5mby5waXhlbFR5cGUsXHJcbiAgICAgICAgICAgIGFsaWdubWVudDogMSxcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGdldFJhbmRvbUNvbG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmV0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IGNoYW5lbHM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcmV0LnB1c2goTWF0aC5yYW5kb20oKSAqIDI1Nik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJldERhdGEgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8PSBoZWlnaHQ7IGorKykge1xyXG4gICAgICAgICAgICB2YXIgY3VyQ29sb3IgPSBnZXRSYW5kb21Db2xvcigpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB3aWR0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICByZXREYXRhID0gW10uY29uY2F0KHJldERhdGEsY3VyQ29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHVybERhdGEuZGF0YSA9IG5ldyBVaW50OEFycmF5KHJldERhdGEpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHVybERhdGEpO1xyXG4gICAgICAgIHJldHVybiB1cmxEYXRhO1xyXG4gICAgfVxyXG59IiwiLy90ZXh0dXJlIOWPluWAvFxuXG5cbi8vIHRleHR1cmUgZmlsdGVyXG5leHBvcnQgY29uc3QgZ2x0ZXhfZmlsdGVyID0ge1xuXG4gICAgTkVBUkVTVDogOTcyOCwgICAgICAgICAgICAgICAgLy8gZ2wuTkVBUkVTVFxuICAgIExJTkVBUjogOTcyOSwgICAgICAgICAgICAgICAgIC8vIGdsLkxJTkVBUlxuICAgIC8v5LiL6Z2i5piv6ZKI5a+557yp5bCP55qE5piv6YeH55SobWlwbWFw5oqA5pyvXG4gICAgTkVBUkVTVF9NSVBNQVBfTkVBUkVTVDogOTk4NCwgLy8gZ2wuTkVBUkVTVF9NSVBNQVBfTkVBUkVTVFxuICAgIExJTkVBUl9NSVBNQVBfTkVBUkVTVDogOTk4NSwgIC8vIGdsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVFxuICAgIE5FQVJFU1RfTUlQTUFQX0xJTkVBUjogOTk4NiwgIC8vIGdsLk5FQVJFU1RfTUlQTUFQX0xJTkVBUlxuICAgIExJTkVBUl9NSVBNQVBfTElORUFSOiA5OTg3LCAgIC8vIGdsLkxJTkVBUl9NSVBNQVBfTElORUFSXG59XG5cblxuZXhwb3J0IGNvbnN0IGVudW0gZ2xUeXBle1xuICAgIC8vIGNvbnN0IEdMX0JZVEUgPSA1MTIwOyAgICAgICAgICAgICAgICAgIC8vIGdsLkJZVEVcbiAgICBVTlNJR05FRF9CWVRFID0gNTEyMSwgICAgICAgICAgICAvLyBnbC5VTlNJR05FRF9CWVRFXG4gICAgLy8gY29uc3QgR0xfU0hPUlQ6NTEyMiwgICAgICAgICAgICAgICAgIC8vIGdsLlNIT1JUXG4gICAgVU5TSUdORURfU0hPUlQgPSA1MTIzLCAgICAgICAgICAgLy8gZ2wuVU5TSUdORURfU0hPUlRcbiAgICBVTlNJR05FRF9JTlQgPSA1MTI1LCAgICAgICAgICAgICAvLyBnbC5VTlNJR05FRF9JTlRcbiAgICBGTE9BVCA9IDUxMjYsICAgICAgICAgICAgICAgICAgICAvLyBnbC5GTE9BVFxuICAgIFVOU0lHTkVEX1NIT1JUXzVfNl81ID0gMzM2MzUsICAgIC8vIGdsLlVOU0lHTkVEX1NIT1JUXzVfNl81XG4gICAgVU5TSUdORURfU0hPUlRfNF80XzRfNCA9IDMyODE5LCAgLy8gZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNFxuICAgIFVOU0lHTkVEX1NIT1JUXzVfNV81XzEgPSAzMjgyMCwgIC8vIGdsLlVOU0lHTkVEX1NIT1JUXzVfNV81XzFcbiAgICBIQUxGX0ZMT0FUX09FUyA9IDM2MTkzLCAgICAgICAgICAvLyBnbC5IQUxGX0ZMT0FUX09FU1xufVxuXG4vL3RleHR1cmUgbm9ybWFsIGZvcm1hdFxuY29uc3QgZW51bSBnbHRleF9uZm10e1xuICAgIERFUFRIX0NPTVBPTkVOVCA9IDY0MDIsIC8vIGdsLkRFUFRIX0NPTVBPTkVOVFxuICAgIEFMUEhBID0gNjQwNiwgICAgICAgICAgICAvLyBnbC5BTFBIQVxuICAgIFJHQiA9IDY0MDcsICAgICAgICAgICAgICAvLyBnbC5SR0JcbiAgICBSR0JBID0gNjQwOCwgICAgICAgICAgICAgLy8gZ2wuUkdCQVxuICAgIExVTUlOQU5DRSA9IDY0MDksICAgICAgICAvLyBnbC5MVU1JTkFOQ0VcbiAgICBMVU1JTkFOQ0VfQUxQSEEgPSA2NDEwLCAgLy8gZ2wuTFVNSU5BTkNFX0FMUEhBXG59XG4vL3RleHR1cmUgY29tcHJlc3NlZCBmb3JtYXRcbmNvbnN0IGVudW0gZ2x0ZXhfY2ZtdHtcbiAgICBSR0JfUzNUQ19EWFQxX0VYVCA9IDB4ODNGMCwgICAvLyBleHQuQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVFxuICAgIFJHQkFfUzNUQ19EWFQxX0VYVCA9IDB4ODNGMSwgIC8vIGV4dC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVFxuICAgIFJHQkFfUzNUQ19EWFQzX0VYVCA9IDB4ODNGMiwgIC8vIGV4dC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVFxuICAgIFJHQkFfUzNUQ19EWFQ1X0VYVCA9IDB4ODNGMywgIC8vIGV4dC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVFxuXG4gICAgUkdCX1BWUlRDXzRCUFBWMV9JTUcgPSAweDhDMDAsICAvLyBleHQuQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNR1xuICAgIFJHQl9QVlJUQ18yQlBQVjFfSU1HID0gMHg4QzAxLCAgLy8gZXh0LkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUdcbiAgICBSR0JBX1BWUlRDXzRCUFBWMV9JTUcgPSAweDhDMDIsIC8vIGV4dC5DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNR1xuICAgIFJHQkFfUFZSVENfMkJQUFYxX0lNRyA9IDB4OEMwMywgLy8gZXh0LkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HXG5cbiAgICBSR0JfRVRDMV9XRUJHTCA9IDB4OEQ2NCwgLy8gZXh0LkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0xcblxuICAgIFJHQjhfRVRDMiA9IDB4OTI3NCwgICAgICAgLy8gZXh0LkNPTVBSRVNTRURfUkdCOF9FVEMyXG4gICAgUkdCQThfRVRDMl9FQUMgPSAweDkyNzgsICAvLyBleHQuQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQ1xufVxuXG5jb25zdCBfZmlsdGVyR0wgPSBbXG4gICAgW2dsdGV4X2ZpbHRlci5ORUFSRVNULCBnbHRleF9maWx0ZXIuTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCwgZ2x0ZXhfZmlsdGVyLk5FQVJFU1RfTUlQTUFQX0xJTkVBUl0sXG4gICAgW2dsdGV4X2ZpbHRlci5MSU5FQVIsIGdsdGV4X2ZpbHRlci5MSU5FQVJfTUlQTUFQX05FQVJFU1QsIGdsdGV4X2ZpbHRlci5MSU5FQVJfTUlQTUFQX0xJTkVBUl0sXG5dO1xuXG5cbmNvbnN0IF90ZXh0dXJlRm10R0wgPSBbXG4gICAgLy8gUkdCX0RYVDE6IDBcbiAgICB7IGZvcm1hdDogZ2x0ZXhfbmZtdC5SR0IsIGludGVybmFsRm9ybWF0OiBnbHRleF9jZm10LlJHQl9TM1RDX0RYVDFfRVhULCBwaXhlbFR5cGU6IG51bGwgfSxcblxuICAgIC8vIFJHQkFfRFhUMTogMVxuICAgIHsgZm9ybWF0OiBnbHRleF9uZm10LlJHQkEsIGludGVybmFsRm9ybWF0OiBnbHRleF9jZm10LlJHQkFfUzNUQ19EWFQxX0VYVCwgcGl4ZWxUeXBlOiBudWxsIH0sXG5cbiAgICAvLyBSR0JBX0RYVDM6IDJcbiAgICB7IGZvcm1hdDogZ2x0ZXhfbmZtdC5SR0JBLCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfY2ZtdC5SR0JBX1MzVENfRFhUM19FWFQsIHBpeGVsVHlwZTogbnVsbCB9LFxuXG4gICAgLy8gUkdCQV9EWFQ1OiAzXG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuUkdCQSwgaW50ZXJuYWxGb3JtYXQ6IGdsdGV4X2NmbXQuUkdCQV9TM1RDX0RYVDVfRVhULCBwaXhlbFR5cGU6IG51bGwgfSxcblxuICAgIC8vIFJHQl9FVEMxOiA0XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuUkdCLCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfY2ZtdC5SR0JfRVRDMV9XRUJHTCwgcGl4ZWxUeXBlOiBudWxsIH0sXG5cbiAgICAvLyBSR0JfUFZSVENfMkJQUFYxOiA1XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuUkdCLCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfY2ZtdC5SR0JfUFZSVENfMkJQUFYxX0lNRywgcGl4ZWxUeXBlOiBudWxsIH0sXG5cbiAgICAvLyBSR0JBX1BWUlRDXzJCUFBWMTogNlxuICAgIHsgZm9ybWF0OiBnbHRleF9uZm10LlJHQkEsIGludGVybmFsRm9ybWF0OiBnbHRleF9jZm10LlJHQkFfUFZSVENfMkJQUFYxX0lNRywgcGl4ZWxUeXBlOiBudWxsIH0sXG5cbiAgICAvLyBSR0JfUFZSVENfNEJQUFYxOiA3XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuUkdCLCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfY2ZtdC5SR0JfUFZSVENfNEJQUFYxX0lNRywgcGl4ZWxUeXBlOiBudWxsIH0sXG5cbiAgICAvLyBSR0JBX1BWUlRDXzRCUFBWMTogOFxuICAgIHsgZm9ybWF0OiBnbHRleF9uZm10LlJHQkEsIGludGVybmFsRm9ybWF0OiBnbHRleF9jZm10LlJHQkFfUFZSVENfNEJQUFYxX0lNRywgcGl4ZWxUeXBlOiBudWxsIH0sXG5cblxuICAgIC8vIEE4OiA5XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuQUxQSEEsIGludGVybmFsRm9ybWF0OiBnbHRleF9uZm10LkFMUEhBLCBwaXhlbFR5cGU6IGdsVHlwZS5VTlNJR05FRF9CWVRFIH0sXG5cbiAgICAvLyBMODogMTBcbiAgICB7IGZvcm1hdDogZ2x0ZXhfbmZtdC5MVU1JTkFOQ0UsIGludGVybmFsRm9ybWF0OiBnbHRleF9uZm10LkxVTUlOQU5DRSwgcGl4ZWxUeXBlOiBnbFR5cGUuVU5TSUdORURfQllURSB9LFxuXG4gICAgLy8gTDhfQTg6IDExXG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuTFVNSU5BTkNFX0FMUEhBLCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfbmZtdC5MVU1JTkFOQ0VfQUxQSEEsIHBpeGVsVHlwZTogZ2xUeXBlLlVOU0lHTkVEX0JZVEUgfSxcblxuICAgIC8vIFI1X0c2X0I1OiAxMlxuICAgIHsgZm9ybWF0OiBnbHRleF9uZm10LlJHQiwgaW50ZXJuYWxGb3JtYXQ6IGdsdGV4X25mbXQuUkdCLCBwaXhlbFR5cGU6IGdsVHlwZS5VTlNJR05FRF9TSE9SVF81XzZfNSB9LFxuXG4gICAgLy8gUjVfRzVfQjVfQTE6IDEzXG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuUkdCQSwgaW50ZXJuYWxGb3JtYXQ6IGdsdGV4X25mbXQuUkdCQSwgcGl4ZWxUeXBlOiBnbFR5cGUuVU5TSUdORURfU0hPUlRfNV81XzVfMSB9LFxuXG4gICAgLy8gUjRfRzRfQjRfQTQ6IDE0XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuUkdCQSwgaW50ZXJuYWxGb3JtYXQ6IGdsdGV4X25mbXQuUkdCQSwgcGl4ZWxUeXBlOiBnbFR5cGUuVU5TSUdORURfU0hPUlRfNF80XzRfNCB9LFxuXG4gICAgLy8gUkdCODogMTVcbiAgICB7IGZvcm1hdDogZ2x0ZXhfbmZtdC5SR0IsIGludGVybmFsRm9ybWF0OiBnbHRleF9uZm10LlJHQiwgcGl4ZWxUeXBlOiBnbFR5cGUuVU5TSUdORURfQllURSB9LFxuXG4gICAgLy8gUkdCQTg6IDE2XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuUkdCQSwgaW50ZXJuYWxGb3JtYXQ6IGdsdGV4X25mbXQuUkdCQSwgcGl4ZWxUeXBlOiBnbFR5cGUuVU5TSUdORURfQllURSB9LFxuXG4gICAgLy8gUkdCMTZGOiAxN1xuICAgIHsgZm9ybWF0OiBnbHRleF9uZm10LlJHQiwgaW50ZXJuYWxGb3JtYXQ6IGdsdGV4X25mbXQuUkdCLCBwaXhlbFR5cGU6IGdsVHlwZS5IQUxGX0ZMT0FUX09FUyB9LFxuXG4gICAgLy8gUkdCQTE2RjogMThcbiAgICB7IGZvcm1hdDogZ2x0ZXhfbmZtdC5SR0JBLCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfbmZtdC5SR0JBLCBwaXhlbFR5cGU6IGdsVHlwZS5IQUxGX0ZMT0FUX09FUyB9LFxuXG4gICAgLy8gUkdCMzJGOiAxOVxuICAgIHsgZm9ybWF0OiBnbHRleF9uZm10LlJHQiwgaW50ZXJuYWxGb3JtYXQ6IGdsdGV4X25mbXQuUkdCLCBwaXhlbFR5cGU6IGdsVHlwZS5GTE9BVCB9LFxuXG4gICAgLy8gUkdCQTMyRjogMjBcbiAgICB7IGZvcm1hdDogZ2x0ZXhfbmZtdC5SR0JBLCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfbmZtdC5SR0JBLCBwaXhlbFR5cGU6IGdsVHlwZS5GTE9BVCB9LFxuXG4gICAgLy8gUjMyRjogMjFcbiAgICB7IGZvcm1hdDogbnVsbCwgaW50ZXJuYWxGb3JtYXQ6IG51bGwsIHBpeGVsVHlwZTogbnVsbCB9LFxuXG4gICAgLy8gXzExMTExMEY6IDIyXG4gICAgeyBmb3JtYXQ6IG51bGwsIGludGVybmFsRm9ybWF0OiBudWxsLCBwaXhlbFR5cGU6IG51bGwgfSxcblxuICAgIC8vIFNSR0I6IDIzXG4gICAgeyBmb3JtYXQ6IG51bGwsIGludGVybmFsRm9ybWF0OiBudWxsLCBwaXhlbFR5cGU6IG51bGwgfSxcblxuICAgIC8vIFNSR0JBOiAyNFxuICAgIHsgZm9ybWF0OiBudWxsLCBpbnRlcm5hbEZvcm1hdDogbnVsbCwgcGl4ZWxUeXBlOiBudWxsIH0sXG5cbiAgICAvLyBEMTY6IDI1XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuREVQVEhfQ09NUE9ORU5ULCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfbmZtdC5ERVBUSF9DT01QT05FTlQsIHBpeGVsVHlwZTogZ2xUeXBlLlVOU0lHTkVEX1NIT1JUIH0sXG5cbiAgICAvLyBEMzI6IDI2XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuREVQVEhfQ09NUE9ORU5ULCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfbmZtdC5ERVBUSF9DT01QT05FTlQsIHBpeGVsVHlwZTogZ2xUeXBlLlVOU0lHTkVEX0lOVCB9LFxuXG4gICAgLy8gRDI0Uzg6IDI3XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuREVQVEhfQ09NUE9ORU5ULCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfbmZtdC5ERVBUSF9DT01QT05FTlQsIHBpeGVsVHlwZTogZ2xUeXBlLlVOU0lHTkVEX0lOVCB9LFxuXG4gICAgLy8gUkdCX0VUQzI6IDI4XG4gICAgeyBmb3JtYXQ6IGdsdGV4X25mbXQuUkdCLCBpbnRlcm5hbEZvcm1hdDogZ2x0ZXhfY2ZtdC5SR0I4X0VUQzIsIHBpeGVsVHlwZTogbnVsbCB9LFxuXG4gICAgLy8gUkdCQV9FVEMyOiAyOVxuICAgIHsgZm9ybWF0OiBnbHRleF9uZm10LlJHQkEsIGludGVybmFsRm9ybWF0OiBnbHRleF9jZm10LlJHQkE4X0VUQzJfRUFDLCBwaXhlbFR5cGU6IG51bGwgfSxcbl07XG5cbi8qKlxuICogd2ViZ2zmnInmlYjnmoTnurnnkIbljZXlhYNcbiAqIOe7j+i/h+a1i+ivleacgOWkp+eahOe6ueeQhuWNleWFg+aVsOebruaYrzMy5LiqXG4gKi9cbmV4cG9ydCBjb25zdCBnbFRFWFRVUkVfVU5JVF9WQUxJRCA9IFtcbiAgICBcIlRFWFRVUkUwXCIsIFwiVEVYVFVSRTFcIiwgXCJURVhUVVJFMlwiLCBcIlRFWFRVUkUzXCIsIFwiVEVYVFVSRTRcIiwgXCJURVhUVVJFNVwiLCBcIlRFWFRVUkU2XCIsIFwiVEVYVFVSRTdcIixcbiAgICBcIlRFWFRVUkU4XCIsIFwiVEVYVFVSRTlcIiwgXCJURVhUVVJFMTBcIiwgXCJURVhUVVJFMTFcIiwgXCJURVhUVVJFMTJcIiwgXCJURVhUVVJFMTNcIiwgXCJURVhUVVJFMTRcIiwgXCJURVhUVVJFMTVcIixcbiAgICBcIlRFWFRVUkUxNlwiLCBcIlRFWFRVUkUxN1wiLCBcIlRFWFRVUkUxOFwiLCBcIlRFWFRVUkUxOVwiLCBcIlRFWFRVUkUyMFwiLCBcIlRFWFRVUkUyMVwiLCBcIlRFWFRVUkUyMlwiLCBcIlRFWFRVUkUyM1wiLFxuICAgIFwiVEVYVFVSRTI0XCIsIFwiVEVYVFVSRTI1XCIsIFwiVEVYVFVSRTI2XCIsIFwiVEVYVFVSRTI3XCIsIFwiVEVYVFVSRTI4XCIsIFwiVEVYVFVSRTI5XCIsIFwiVEVYVFVSRTMwXCIsIFwiVEVYVFVSRTMxXCIsXG5dXG5cbi8vIHZlcnRleCBhdHRyaWJ1dGUgc2VtYW50aWNcbmV4cG9ydCBjb25zdCBlbnVtIGdsdmVydF9hdHRyX3NlbWFudGlje1xuICAgIFBPU0lUSU9OID0gJ2FfcG9zaXRpb24nLFxuICAgIE5PUk1BTCA9ICdhX25vcm1hbCcsXG4gICAgVEFOR0VOVCA9ICdhX3RhbmdlbnQnLFxuICAgIEJJVEFOR0VOVCA9ICdhX2JpdGFuZ2VudCcsXG4gICAgV0VJR0hUUyA9ICdhX3dlaWdodHMnLFxuICAgIEpPSU5UUyA9ICdhX2pvaW50cycsXG4gICAgQ09MT1IgPSAndV9jb2xvcicsXG4gICAgQ09MT1JfRElSID0gJ3VfY29sb3JfZGlyJyxcbiAgICBDT0xPUjAgPSAndV9jb2xvcjAnLFxuICAgIENPTE9SMF9ESVIgPSAndV9jb2xvcjBfZGlyJyxcbiAgICBDT0xPUjEgPSAndV9jb2xvcjEnLFxuICAgIENPTE9SMV9ESVIgPSAndV9jb2xvcjFfZGlyJyxcbiAgICBVViA9ICdhX3V2JyxcbiAgICBVVjAgPSAnYV91djAnLFxuICAgIFVWMSA9ICdhX3V2MScsXG4gICAgVVYyID0gJ2FfdXYyJyxcbiAgICBVVjMgPSAnYV91djMnLFxuICAgIFVWNCA9ICdhX3V2NCcsXG4gICAgVVY1ID0gJ2FfdXY1JyxcbiAgICBVVjYgPSAnYV91djYnLFxuICAgIFVWNyA9ICdhX3V2NycsXG4gICAgVEVYX0NPT1JEID0gJ3VfdGV4Q29vcmQnLFxuICAgIFRFWF9DT09SRDEgPSAndV90ZXhDb29yZDEnLFxuICAgIFRFWF9DT09SRDIgPSAndV90ZXhDb29yZDInLFxuICAgIFRFWF9DT09SRDMgPSAndV90ZXhDb29yZDMnLFxuICAgIFRFWF9DT09SRDQgPSAndV90ZXhDb29yZDQnLFxuICAgIFRFWF9DT09SRDUgPSAndV90ZXhDb29yZDUnLFxuICAgIFRFWF9DT09SRDYgPSAndV90ZXhDb29yZDYnLFxuICAgIFRFWF9DT09SRDcgPSAndV90ZXhDb29yZDcnLFxuICAgIFRFWF9DT09SRDggPSAndV90ZXhDb29yZDgnLFxuICAgIFNLWUJPWCA9IFwidV9za3lib3hcIixcbiAgICBNVk1hdHJpeCA9ICd1X01WTWF0cml4JyxcbiAgICBNTWF0cml4ID0gJ3VfTU1hdHJpeCcsXG4gICAgVk1hdHJpeCA9ICd1X1ZNYXRyaXgnLFxuICAgIFBNYXRyaXggPSAndV9QTWF0cml4JyxcbiAgICBQTVZfTUFUUklYID0gXCJ1X1BWTV9NYXRyaXhcIixcbiAgICBQTVZfTUFUUklYX0lOVkVSU0UgPSBcInVfUFZNX01hdHJpeF9JbnZlcnNlXCJcblxufVxuXG5cblxuLy8gdGV4dHVyZSB3cmFwIG1vZGVcbmV4cG9ydCBjb25zdCBlbnVtIGdsdGV4X3dyYXB7XG4gICAgUkVQRUFUID0gMTA0OTcsIC8vIGdsLlJFUEVBVCAgICAgICAgICAg5bmz6ZO65byP55qE6YeN5aSN57q555CGXG4gICAgQ0xBTVAgPSAzMzA3MSwgIC8vIGdsLkNMQU1QX1RPX0VER0UgICAg5L2/55So57q555CG5Zu+5YOP6L6557yY5YC8XG4gICAgTUlSUk9SID0gMzM2NDgsIC8vIGdsLk1JUlJPUkVEX1JFUEVBVCAg6ZWc5YOP5a+556ew55qE6YeN5aSN57q555CGXG59XG4vLyB0ZXh0dXJlIGZvcm1hdFxuLy/lpJbpg6jkvb/nlKhcbmV4cG9ydCBjb25zdCBlbnVtIGdsdGV4X2Zvcm1hdCB7XG5cbiAgICAvLyBjb21wcmVzcyBmb3JtYXRzXG4gICAgUkdCX0RYVDEgPSAwLCAvLzBcbiAgICBSR0JBX0RYVDEsICAvLzEsXG4gICAgUkdCQV9EWFQzLCAgLy8yLFxuICAgIFJHQkFfRFhUNSwgIC8vMyxcbiAgICBSR0JfRVRDMSwgIC8vNCxcbiAgICBSR0JfUFZSVENfMkJQUFYxLCAgLy81LFxuICAgIFJHQkFfUFZSVENfMkJQUFYxLCAgLy82LFxuICAgIFJHQl9QVlJUQ180QlBQVjEsICAvLzcsXG4gICAgUkdCQV9QVlJUQ180QlBQVjEsICAvLzgsXG5cbiAgICAvLyBub3JtYWwgZm9ybWF0c1xuICAgIEE4LCAgLy85LFxuICAgIEw4LCAgLy8xMCxcbiAgICBMOF9BOCwgIC8vMTEsXG4gICAgUjVfRzZfQjUsICAvLzEyLFxuICAgIFI1X0c1X0I1X0ExLCAgLy8xMyxcbiAgICBSNF9HNF9CNF9BNCwgIC8vMTQsXG4gICAgUkdCOCwgIC8vMTUsICDluLjnlKhqcGdcbiAgICBSR0JBOCwgIC8vMTYs5bi455SocG5nXG4gICAgUkdCMTZGLCAgLy8xNyxcbiAgICBSR0JBMTZGLCAgLy8xOCxcbiAgICBSR0IzMkYsICAvLzE5LFxuICAgIFJHQkEzMkYsICAvLzIwLFxuICAgIFIzMkYsICAvLzIxLFxuICAgIF8xMTExMTBGLCAgLy8yMixcbiAgICBTUkdCLCAgLy8yMyxcbiAgICBTUkdCQSwgIC8vMjQsXG5cbiAgICAvLyBkZXB0aCBmb3JtYXRzXG4gICAgRDE2LCAgLy8yNSxcbiAgICBEMzIsICAvLzI2LFxuICAgIEQyNFM4LCAgLy8yNyxcblxuICAgIC8vIGV0YzIgZm9ybWF0XG4gICAgUkdCX0VUQzIsICAvLzI4LFxuICAgIFJHQkFfRVRDMiwgIC8vMjksXG5cbn1cblxuLy8gcmVuZGVyLWJ1ZmZlciBmb3JtYXRcbmV4cG9ydCBjb25zdCBnbHJlbmRlcl9idWZmZXJfZm9ybWF0ID0ge1xuICAgIFJHQkE0OiAzMjg1NCwgICAgLy8gZ2wuUkdCQTRcbiAgICBSR0I1X0ExOiAzMjg1NSwgIC8vIGdsLlJHQjVfQTFcbiAgICBSR0I1NjU6IDM2MTk0LCAgIC8vIGdsLlJHQjU2NVxuICAgIEQxNjogMzMxODksICAgICAgLy8gZ2wuREVQVEhfQ09NUE9ORU5UMTZcbiAgICBTODogMzYxNjgsICAgICAgIC8vIGdsLlNURU5DSUxfSU5ERVg4XG4gICAgRDI0Uzg6IDM0MDQxLCAgICAvLyBnbC5ERVBUSF9TVEVOQ0lMXG59XG5cbi8vIHByaW1pdGl2ZSB0eXBlXG5leHBvcnQgY29uc3QgZW51bSBnbHByaW1pdGl2ZV90eXBlIHtcblxuICAgIFBPSU5UUyA9IDAsICAgICAgICAgLy8gZ2wuUE9JTlRTICDopoHnu5jliLbkuIDns7vliJfnmoTngrlcbiAgICBMSU5FUyA9IDEsICAgICAgICAgIC8vIGdsLkxJTkVTICAg6KaB57uY5Yi25LqG5LiA57O75YiX5pyq6L+e5o6l55u057q/5q61KOWNleeLrOihjClcbiAgICBMSU5FX0xPT1AgPSAyLCAgICAgIC8vIGdsLkxJTkVfTE9PUCAg6KaB57uY5Yi25LiA57O75YiX6L+e5o6l55qE57q/5q61XG4gICAgTElORV9TVFJJUCA9IDMsICAgICAvLyBnbC5MSU5FX1NUUklQICDopoHnu5jliLbkuIDns7vliJfov57mjqXnmoTnur/mrrXjgILlroPov5jov57mjqXnmoTnrKzkuIDlkozmnIDlkI7nmoTpobbngrnvvIzku6XlvaLmiJDkuIDkuKrnjq9cbiAgICBUUklBTkdMRVMgPSA0LCAgICAgIC8vIGdsLlRSSUFOR0xFUyAg5LiA57O75YiX5Y2V54us55qE5LiJ6KeS5b2i77yb57uY5Yi25pa55byP77ya77yIdjAsdjEsdjLvvIksKHYxLHYzLHY0KVxuICAgIFRSSUFOR0xFX1NUUklQID0gNSwgLy8gZ2wuVFJJQU5HTEVfU1RSSVAgIOS4gOezu+WIl+W4pueKtueahOS4ieinkuW9olxuICAgIFRSSUFOR0xFX0ZBTiA9IDYsICAgLy8gZ2wuVFJJQU5HTEVfRkFOICDmiYflvaLnu5jliLbmlrnlvI9cbn1cblxuLy8gY3VsbFxuZXhwb3J0IGNvbnN0IGdsY3VsbCA9IHtcblxuICAgIE5PTkU6IDAsXG4gICAgRlJPTlQ6IDEwMjgsXG4gICAgQkFDSzogMTAyOSxcbiAgICBGUk9OVF9BTkRfQkFDSzogMTAzMixcbn1cblxuLy8gc3RlbmNpbCBvcGVyYXRpb25cbmV4cG9ydCBjb25zdCBnbHN0ZW5jaWxfb3BlcmF0aW9uID0ge1xuXG4gICAgRElTQUJMRTogMCwgICAgICAgICAgICAgLy8gZGlzYWJsZSBzdGVuY2lsXG4gICAgRU5BQkxFOiAxLCAgICAgICAgICAgICAgLy8gZW5hYmxlIHN0ZW5jaWxcbiAgICBJTkhFUklUOiAyLCAgICAgICAgICAgICAvLyBpbmhlcml0IHN0ZW5jaWwgc3RhdGVzXG5cbiAgICBPUF9LRUVQOiA3NjgwLCAgICAgICAgICAvLyBnbC5LRUVQXG4gICAgT1BfWkVSTzogMCwgICAgICAgICAgICAgLy8gZ2wuWkVST1xuICAgIE9QX1JFUExBQ0U6IDc2ODEsICAgICAgIC8vIGdsLlJFUExBQ0VcbiAgICBPUF9JTkNSOiA3NjgyLCAgICAgICAgICAvLyBnbC5JTkNSXG4gICAgT1BfSU5DUl9XUkFQOiAzNDA1NSwgICAgLy8gZ2wuSU5DUl9XUkFQXG4gICAgT1BfREVDUjogNzY4MywgICAgICAgICAgLy8gZ2wuREVDUlxuICAgIE9QX0RFQ1JfV1JBUDogMzQwNTYsICAgIC8vIGdsLkRFQ1JfV1JBUFxuICAgIE9QX0lOVkVSVDogNTM4NiwgICAgICAgIC8vIGdsLklOVkVSVFxufVxuXG4vLyBkZXB0aCBhbmQgc3RlbmNpbCBmdW5jdGlvblxuLy8g566A5YaZXCJkc1wiXG5leHBvcnQgY29uc3QgZ2xkZXB0aF9zdGVuY2lsX2Z1bmMgPSB7XG5cbiAgICBORVZFUjogNTEyLCAgICAvLyBnbC5ORVZFUlxuICAgIExFU1M6IDUxMywgICAgIC8vIGdsLkxFU1NcbiAgICBFUVVBTDogNTE0LCAgICAvLyBnbC5FUVVBTFxuICAgIExFUVVBTDogNTE1LCAgIC8vIGdsLkxFUVVBTFxuICAgIEdSRUFURVI6IDUxNiwgIC8vIGdsLkdSRUFURVJcbiAgICBOT1RFUVVBTDogNTE3LCAvLyBnbC5OT1RFUVVBTFxuICAgIEdFUVVBTDogNTE4LCAgIC8vIGdsLkdFUVVBTFxuICAgIEFMV0FZUzogNTE5LCAgIC8vIGdsLkFMV0FZU1xufVxuXG4gLy8gaW5kZXggYnVmZmVyIGZvcm1hdFxuZXhwb3J0IGNvbnN0IGdsaW5kZXhfYnVmZmVyX2Zvcm1hdCA9IHtcbiAgIFxuICBJTkRFWF9GTVRfVUlOVDg6IDUxMjEsICAvLyBnbC5VTlNJR05FRF9CWVRFXG4gIElOREVYX0ZNVF9VSU5UMTY6IDUxMjMsIC8vIGdsLlVOU0lHTkVEX1NIT1JUXG4gIElOREVYX0ZNVF9VSU5UMzI6IDUxMjUsIC8vIGdsLlVOU0lHTkVEX0lOVCAoT0VTX2VsZW1lbnRfaW5kZXhfdWludClcbn1cblxuIC8vIGJ1ZmZlciB1c2FnZVxuZXhwb3J0IGNvbnN0IGdsYnVmZmVyX3VzYWdlPSB7XG4gIFVTQUdFX1NUQVRJQzogMzUwNDQsICAvLyBnbC5TVEFUSUNfRFJBV1xuICBVU0FHRV9EWU5BTUlDOiAzNTA0OCwgLy8gZ2wuRFlOQU1JQ19EUkFXXG4gIFVTQUdFX1NUUkVBTTogMzUwNDAsICAvLyBnbC5TVFJFQU1fRFJBV1xufVxuXG4vLyBibGVuZC1mdW5jXG5leHBvcnQgY29uc3QgZ2xibGVuZF9mdW5jID0ge1xuICAgIEFERDogMzI3NzQsICAgICAgICAgICAgICAvLyBnbC5GVU5DX0FERFxuICAgIFNVQlRSQUNUOiAzMjc3OCwgICAgICAgICAvLyBnbC5GVU5DX1NVQlRSQUNUXG4gICAgUkVWRVJTRV9TVUJUUkFDVDogMzI3NzksIC8vIGdsLkZVTkNfUkVWRVJTRV9TVUJUUkFDVFxufVxuXG4vLyBibGVuZFxuZXhwb3J0IGNvbnN0IGdsYmxlbmQgPSB7XG4gICAgWkVSTzogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdsLlpFUk9cbiAgICBPTkU6IDEsICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2wuT05FXG4gICAgU1JDX0NPTE9SOiA3NjgsICAgICAgICAgICAgICAgICAgIC8vIGdsLlNSQ19DT0xPUlxuICAgIE9ORV9NSU5VU19TUkNfQ09MT1I6IDc2OSwgICAgICAgICAvLyBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SXG4gICAgRFNUX0NPTE9SOiA3NzQsICAgICAgICAgICAgICAgICAgIC8vIGdsLkRTVF9DT0xPUlxuICAgIE9ORV9NSU5VU19EU1RfQ09MT1I6IDc3NSwgICAgICAgICAvLyBnbC5PTkVfTUlOVVNfRFNUX0NPTE9SXG4gICAgU1JDX0FMUEhBOiA3NzAsICAgICAgICAgICAgICAgICAgIC8vIGdsLlNSQ19BTFBIQVxuICAgIE9ORV9NSU5VU19TUkNfQUxQSEE6IDc3MSwgICAgICAgICAvLyBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBXG4gICAgRFNUX0FMUEhBOiA3NzIsICAgICAgICAgICAgICAgICAgIC8vIGdsLkRTVF9BTFBIQVxuICAgIE9ORV9NSU5VU19EU1RfQUxQSEE6IDc3MywgICAgICAgICAvLyBnbC5PTkVfTUlOVVNfRFNUX0FMUEhBXG4gICAgQ09OU1RBTlRfQ09MT1I6IDMyNzY5LCAgICAgICAgICAgIC8vIGdsLkNPTlNUQU5UX0NPTE9SXG4gICAgT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SOiAzMjc3MCwgIC8vIGdsLk9ORV9NSU5VU19DT05TVEFOVF9DT0xPUlxuICAgIENPTlNUQU5UX0FMUEhBOiAzMjc3MSwgICAgICAgICAgICAvLyBnbC5DT05TVEFOVF9BTFBIQVxuICAgIE9ORV9NSU5VU19DT05TVEFOVF9BTFBIQTogMzI3NzIsICAvLyBnbC5PTkVfTUlOVVNfQ09OU1RBTlRfQUxQSEFcbiAgICBTUkNfQUxQSEFfU0FUVVJBVEU6IDc3NiwgICAgICAgICAgLy8gZ2wuU1JDX0FMUEhBX1NBVFVSQVRFXG59XG5cbi8qKlxuICogQG1ldGhvZCBnbEZpbHRlclxuICogQHBhcmFtIHtXZWJHTENvbnRleHR9IGdsXG4gKiBAcGFyYW0ge0ZJTFRFUl8qfSBmaWx0ZXJcbiAqIEBwYXJhbSB7RklMVEVSXyp9IG1pcEZpbHRlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2xGaWx0ZXIoZ2wsIGZpbHRlciwgbWlwRmlsdGVyID0gLTEpIHtcbiAgICBsZXQgcmVzdWx0ID0gX2ZpbHRlckdMW2ZpbHRlcl1bbWlwRmlsdGVyICsgMV07XG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgVW5rbm93biBGSUxURVI6ICR7ZmlsdGVyfWApO1xuICAgICAgICByZXR1cm4gbWlwRmlsdGVyID09PSAtMSA/IGdsdGV4X2ZpbHRlci5MSU5FQVIgOiBnbHRleF9maWx0ZXIuTElORUFSX01JUE1BUF9MSU5FQVI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBAbWV0aG9kIGdsVGV4dHVyZUZtdFxuICogQHBhcmFtIHtnbHRleF9mb3JtYXR9IGZtdFxuICogQHJldHVybiB7Zm9ybWF0LGludGVybmFsRm9ybWF0LHBpeGVsVHlwZX0gcmVzdWx0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnbFRleHR1cmVGbXRJbmZvcihmbXQ6Z2x0ZXhfZm9ybWF0KSB7XG4gICAgbGV0IHJlc3VsdCA9IF90ZXh0dXJlRm10R0xbZm10XTtcbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBVbmtub3duIFRFWFRVUkVfRk1UOiAke2ZtdH1gKTtcbiAgICAgICAgcmV0dXJuIF90ZXh0dXJlRm10R0xbZ2x0ZXhfZm9ybWF0LlJHQkE4XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKlxuZm9ybWF0ICAgICAgICAgICAgICAgIHR5cGUgICAgICAgICAgICDpgJrpgZPmlbAg6YCa6YGT5oC75a2X6IqC5pWwXG5SR0JBICAgICAgICAgXHQgVU5TSUdORURfQllURVx0ICAgICAgICA0XHQgICAgNFxuUkdCXHQgICAgICAgICAgICAgVU5TSUdORURfQllURVx0ICAgICAgICAzXHQgICAgM1xuUkdCQSAgICAgICAgICAgICBVTlNJR05FRF9TSE9SVF80XzRfNF80XHQ0XHQgICAgMlxuUkdCQSAgICAgICAgIFx0IFVOU0lHTkVEX1NIT1JUXzVfNV81XzFcdDRcdCAgICAyXG5SR0JcdCAgICAgICAgICAgICBVTlNJR05FRF9TSE9SVF81XzZfNSAgIDNcdCAgICAyXG5MVU1JTkFOQ0VfQUxQSEFcdCBVTlNJR05FRF9CWVRFICAgICAgIFx0Mlx0ICAgIDJcbkxVTUlOQU5DRSAgIFx0IFVOU0lHTkVEX0JZVEUgICAgICBcdDFcdCAgICAxXG5BTFBIQSAgICAgICBcdCBVTlNJR05FRF9CWVRFICAgICAgIFx0MVx0ICAgIDFcbiovXG5jb25zdCBnbGZvcm1hdF90eXBlX2J5dGVzID0ge307XG5nbGZvcm1hdF90eXBlX2J5dGVzW2dsdGV4X25mbXQuUkdCQV0gPSB7fTtcbmdsZm9ybWF0X3R5cGVfYnl0ZXNbZ2x0ZXhfbmZtdC5SR0JdID0ge307XG5nbGZvcm1hdF90eXBlX2J5dGVzW2dsdGV4X25mbXQuTFVNSU5BTkNFX0FMUEhBXSA9IHt9O1xuZ2xmb3JtYXRfdHlwZV9ieXRlc1tnbHRleF9uZm10LkxVTUlOQU5DRV0gPSB7fTtcbmdsZm9ybWF0X3R5cGVfYnl0ZXNbZ2x0ZXhfbmZtdC5BTFBIQV0gPSB7fTtcbmdsZm9ybWF0X3R5cGVfYnl0ZXNbZ2x0ZXhfbmZtdC5SR0JBXVtnbFR5cGUuVU5TSUdORURfQllURV0gPSA0O1xuZ2xmb3JtYXRfdHlwZV9ieXRlc1tnbHRleF9uZm10LlJHQl1bZ2xUeXBlLlVOU0lHTkVEX0JZVEVdID0gMztcbmdsZm9ybWF0X3R5cGVfYnl0ZXNbZ2x0ZXhfbmZtdC5SR0JBXVtnbFR5cGUuVU5TSUdORURfU0hPUlRfNF80XzRfNF0gPSAyO1xuZ2xmb3JtYXRfdHlwZV9ieXRlc1tnbHRleF9uZm10LlJHQkFdW2dsVHlwZS5VTlNJR05FRF9TSE9SVF81XzVfNV8xXSA9IDI7XG5nbGZvcm1hdF90eXBlX2J5dGVzW2dsdGV4X25mbXQuUkdCXVtnbFR5cGUuVU5TSUdORURfU0hPUlRfNV82XzVdID0gMjtcbmdsZm9ybWF0X3R5cGVfYnl0ZXNbZ2x0ZXhfbmZtdC5MVU1JTkFOQ0VfQUxQSEFdW2dsVHlwZS5VTlNJR05FRF9CWVRFXSA9IDI7XG5nbGZvcm1hdF90eXBlX2J5dGVzW2dsdGV4X25mbXQuTFVNSU5BTkNFXVtnbFR5cGUuVU5TSUdORURfQllURV0gPSAxO1xuZ2xmb3JtYXRfdHlwZV9ieXRlc1tnbHRleF9uZm10LkFMUEhBXVtnbFR5cGUuVU5TSUdORURfQllURV0gPSAxO1xuXG5jb25zdCBnbGZvcm1hdF90eXBlX2NoYW5lbHMgPSB7fTtcbmdsZm9ybWF0X3R5cGVfY2hhbmVsc1tnbHRleF9uZm10LlJHQkFdID0ge307XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5SR0JdID0ge307XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5MVU1JTkFOQ0VfQUxQSEFdID0ge307XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5MVU1JTkFOQ0VdID0ge307XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5BTFBIQV0gPSB7fTtcbmdsZm9ybWF0X3R5cGVfY2hhbmVsc1tnbHRleF9uZm10LlJHQkFdW2dsVHlwZS5VTlNJR05FRF9CWVRFXSA9IDQ7XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5SR0JdW2dsVHlwZS5VTlNJR05FRF9CWVRFXSA9IDM7XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5SR0JBXVtnbFR5cGUuVU5TSUdORURfU0hPUlRfNF80XzRfNF0gPSA0O1xuZ2xmb3JtYXRfdHlwZV9jaGFuZWxzW2dsdGV4X25mbXQuUkdCQV1bZ2xUeXBlLlVOU0lHTkVEX1NIT1JUXzVfNV81XzFdID0gNDtcbmdsZm9ybWF0X3R5cGVfY2hhbmVsc1tnbHRleF9uZm10LlJHQl1bZ2xUeXBlLlVOU0lHTkVEX1NIT1JUXzVfNl81XSA9IDM7XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5MVU1JTkFOQ0VfQUxQSEFdW2dsVHlwZS5VTlNJR05FRF9CWVRFXSA9IDI7XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5MVU1JTkFOQ0VdW2dsVHlwZS5VTlNJR05FRF9CWVRFXSA9IDE7XG5nbGZvcm1hdF90eXBlX2NoYW5lbHNbZ2x0ZXhfbmZtdC5BTFBIQV1bZ2xUeXBlLlVOU0lHTkVEX0JZVEVdID0gMTtcblxuLyoqXG4gKiDojrflj5bnurnnkIbnmoTpgJrpgZPmlbBcbiAqIEBtZXRob2QgZ2xUZXh0dXJlQ2hhbmVsVG90YWxCeXRlc1xuICogQHBhcmFtIHtnbHRleF9mb3JtYXR9IGZtdFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2xUZXh0dXJlVG90YWxDaGFuZWxzKGZtdCk6bnVtYmVye1xuICAgIGxldCByZXN1bHQgPSAgZ2xUZXh0dXJlRm10SW5mb3IoZm10KTtcbiAgICBsZXQgcmUgPSBnbGZvcm1hdF90eXBlX2NoYW5lbHNbcmVzdWx0LmZvcm1hdF1bcmVzdWx0LnBpeGVsVHlwZV07XG4gICAgaWYoIXJlKVxuICAgIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiZ2xUZXh0dXJlVG90YWxDaGFuZWxzIOaKpemUmSxcIixyZXN1bHQpO1xuICAgICAgICByZSA9IDA7XG4gICAgfVxuICAgIHJldHVybiByZTtcbn1cbi8qKlxuICog6I635Y+W57q555CG55qE6YCa6YGT5a2X6IqC5pWwXG4gKiBAbWV0aG9kIGdsVGV4dHVyZUNoYW5lbFRvdGFsQnl0ZXNcbiAqIEBwYXJhbSB7Z2x0ZXhfZm9ybWF0fSBmbXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdsVGV4dHVyZUNoYW5lbFRvdGFsQnl0ZXMoZm10KTpudW1iZXJ7XG4gICAgIGxldCByZXN1bHQgPSAgZ2xUZXh0dXJlRm10SW5mb3IoZm10KTtcbiAgICAgbGV0IHJlID0gZ2xmb3JtYXRfdHlwZV9ieXRlc1tyZXN1bHQuZm9ybWF0XVtyZXN1bHQucGl4ZWxUeXBlXTtcbiAgICAgaWYoIXJlKVxuICAgICB7XG4gICAgICAgICBjb25zb2xlLndhcm4oXCJnbFRleHR1cmVDaGFuZWxUb3RhbEJ5dGVzIOaKpemUmSxcIixyZXN1bHQpO1xuICAgICAgICAgcmUgPSAwO1xuICAgICB9XG4gICAgIHJldHVybiByZTtcbn1cblxuXG5cbiIsIlxuXG5leHBvcnQgY29uc3QgZ2xFcnJvcnMgPSB7XG4gICAgWzFdOntlcnJvcjpcImZhaWxlZCB0byBjb21waWxlIHNoYWRlcjogRVJST1I6IDA6MSA6IE5vIHByY2Vpc2lvbiBzcGVjaWZpZWQgZm9yIChmbG9hdClcIixcbiAgICByZWFzb246XCLmsqHmnInlnKjniYflhYPnnYDoibLlmajkuK3mjIflrppmbG9hdOeahOeyvuW6plwifSxcbiAgICBbMl06e2Vycm9yOlwi57G75Z6L5LiN5Yy56YWNXCIscmVhc29uOlwi57yW56iL55qE5pe25YCZ77yM5aaC5p6c5rWu54K55pWw5Yia5aW95pivMOOAgTHnrYnmlbTmlbDlgLzvvIzopoHms6jmhI/kuablhpnkuLowLjAsMS4w77yMXFxcbiAgICDkuI3og73nnIHnlaXngrnvvIzlpoLmnpznm7TmjqXlhpkw44CBMeetieW9ouW8j++8jOezu+e7n+S8muivhuWIq+S4uuaVtOWei+aVsO+8jOi/m+ihjOi/kOeul+eahOi/h+eoi+S4re+8jOWmguaenOaKiuaVsOaNruexu+Wei+aQnumUmeWPr+iDveS8muaKpemUmVwifSxcbiAgICBbM106e2Vycm9yOlwiV2ViR0w6IElOVkFMSURfT1BFUkFUSU9OOiB0ZXhJbWFnZTJEOiBBcnJheUJ1ZmZlclZpZXcgbm90IGJpZyBlbm91Z2ggZm9yIHJlcXVlc3RcIixcbiAgICByZWFzb246XCLmiJHku6zkvKDlhaXnmoTnurnnkIbmlbDmja7lkoznurnnkIbmoLzlvI/kuI3ljLnphY3vvIznurnnkIbmlbDmja7mnInlrr3pq5gs57q555CG5qC85byP5Lya5Yaz5a6a5q+P5LiA5Liq5YOP57Sg5Y+W5Yeg5Liq57q555CG5pWw5o2uXCJ9XG5cbn1cbi8qKlxuICogZW51bXNcbiAqL1xuZXhwb3J0IGNvbnN0IGdsRW51bXMgPSB7XG4gICAgLy8gYnVmZmVyIHVzYWdlXG4gICAgVVNBR0VfU1RBVElDOiAzNTA0NCwgIC8vIGdsLlNUQVRJQ19EUkFXXG4gICAgVVNBR0VfRFlOQU1JQzogMzUwNDgsIC8vIGdsLkRZTkFNSUNfRFJBV1xuICAgIFVTQUdFX1NUUkVBTTogMzUwNDAsICAvLyBnbC5TVFJFQU1fRFJBV1xuICBcbiAgICAvLyBpbmRleCBidWZmZXIgZm9ybWF0XG4gICAgSU5ERVhfRk1UX1VJTlQ4OiA1MTIxLCAgLy8gZ2wuVU5TSUdORURfQllURVxuICAgIElOREVYX0ZNVF9VSU5UMTY6IDUxMjMsIC8vIGdsLlVOU0lHTkVEX1NIT1JUXG4gICAgSU5ERVhfRk1UX1VJTlQzMjogNTEyNSwgLy8gZ2wuVU5TSUdORURfSU5UIChPRVNfZWxlbWVudF9pbmRleF91aW50KVxuICBcbiAgICAvLyB2ZXJ0ZXggYXR0cmlidXRlIHNlbWFudGljXG4gICAgQVRUUl9QT1NJVElPTjogJ2FfcG9zaXRpb24nLFxuICAgIEFUVFJfTk9STUFMOiAnYV9ub3JtYWwnLFxuICAgIEFUVFJfVEFOR0VOVDogJ2FfdGFuZ2VudCcsXG4gICAgQVRUUl9CSVRBTkdFTlQ6ICdhX2JpdGFuZ2VudCcsXG4gICAgQVRUUl9XRUlHSFRTOiAnYV93ZWlnaHRzJyxcbiAgICBBVFRSX0pPSU5UUzogJ2Ffam9pbnRzJyxcbiAgICBBVFRSX0NPTE9SOiAnYV9jb2xvcicsXG4gICAgQVRUUl9DT0xPUjA6ICdhX2NvbG9yMCcsXG4gICAgQVRUUl9DT0xPUjE6ICdhX2NvbG9yMScsXG4gICAgQVRUUl9VVjogJ2FfdXYnLFxuICAgIEFUVFJfVVYwOiAnYV91djAnLFxuICAgIEFUVFJfVVYxOiAnYV91djEnLFxuICAgIEFUVFJfVVYyOiAnYV91djInLFxuICAgIEFUVFJfVVYzOiAnYV91djMnLFxuICAgIEFUVFJfVVY0OiAnYV91djQnLFxuICAgIEFUVFJfVVY1OiAnYV91djUnLFxuICAgIEFUVFJfVVY2OiAnYV91djYnLFxuICAgIEFUVFJfVVY3OiAnYV91djcnLFxuICAgIEFUVFJfVEVYX0NPT1JEOiAnYV90ZXhDb29yZCcsXG4gICAgQVRUUl9URVhfQ09PUkQxOiAnYV90ZXhDb29yZDEnLFxuICAgIEFUVFJfVEVYX0NPT1JEMjogJ2FfdGV4Q29vcmQyJyxcbiAgICBBVFRSX1RFWF9DT09SRDM6ICdhX3RleENvb3JkMycsXG4gICAgQVRUUl9URVhfQ09PUkQ0OiAnYV90ZXhDb29yZDQnLFxuICAgIEFUVFJfVEVYX0NPT1JENTogJ2FfdGV4Q29vcmQ1JyxcbiAgICBBVFRSX1RFWF9DT09SRDY6ICdhX3RleENvb3JkNicsXG4gICAgQVRUUl9URVhfQ09PUkQ3OiAnYV90ZXhDb29yZDcnLFxuICAgIEFUVFJfVEVYX0NPT1JEODogJ2FfdGV4Q29vcmQ4JyxcbiAgXG4gIFxuICAgIC8vIHZlcnRleCBhdHRyaWJ1dGUgdHlwZVxuICAgIEFUVFJfVFlQRV9JTlQ4OiA1MTIwLCAgICAvLyBnbC5CWVRFXG4gICAgQVRUUl9UWVBFX1VJTlQ4OiA1MTIxLCAgIC8vIGdsLlVOU0lHTkVEX0JZVEVcbiAgICBBVFRSX1RZUEVfSU5UMTY6IDUxMjIsICAgLy8gZ2wuU0hPUlRcbiAgICBBVFRSX1RZUEVfVUlOVDE2OiA1MTIzLCAgLy8gZ2wuVU5TSUdORURfU0hPUlRcbiAgICBBVFRSX1RZUEVfSU5UMzI6IDUxMjQsICAgLy8gZ2wuSU5UXG4gICAgQVRUUl9UWVBFX1VJTlQzMjogNTEyNSwgIC8vIGdsLlVOU0lHTkVEX0lOVFxuICAgIEFUVFJfVFlQRV9GTE9BVDMyOiA1MTI2LCAvLyBnbC5GTE9BVFxuICBcbiAgICAvLyB0ZXh0dXJlIGZpbHRlclxuICAgIEZJTFRFUl9ORUFSRVNUOiAwLFxuICAgIEZJTFRFUl9MSU5FQVI6IDEsXG4gIFxuICAgIC8vIHRleHR1cmUgd3JhcCBtb2RlXG4gICAgV1JBUF9SRVBFQVQ6IDEwNDk3LCAvLyBnbC5SRVBFQVRcbiAgICBXUkFQX0NMQU1QOiAzMzA3MSwgIC8vIGdsLkNMQU1QX1RPX0VER0VcbiAgICBXUkFQX01JUlJPUjogMzM2NDgsIC8vIGdsLk1JUlJPUkVEX1JFUEVBVFxuICBcbiAgICAvLyB0ZXh0dXJlIGZvcm1hdFxuICAgIC8vIGNvbXByZXNzIGZvcm1hdHNcbiAgICBURVhUVVJFX0ZNVF9SR0JfRFhUMTogMCxcbiAgICBURVhUVVJFX0ZNVF9SR0JBX0RYVDE6IDEsXG4gICAgVEVYVFVSRV9GTVRfUkdCQV9EWFQzOiAyLFxuICAgIFRFWFRVUkVfRk1UX1JHQkFfRFhUNTogMyxcbiAgICBURVhUVVJFX0ZNVF9SR0JfRVRDMTogNCxcbiAgICBURVhUVVJFX0ZNVF9SR0JfUFZSVENfMkJQUFYxOiA1LFxuICAgIFRFWFRVUkVfRk1UX1JHQkFfUFZSVENfMkJQUFYxOiA2LFxuICAgIFRFWFRVUkVfRk1UX1JHQl9QVlJUQ180QlBQVjE6IDcsXG4gICAgVEVYVFVSRV9GTVRfUkdCQV9QVlJUQ180QlBQVjE6IDgsXG4gIFxuICAgIC8vIG5vcm1hbCBmb3JtYXRzXG4gICAgVEVYVFVSRV9GTVRfQTg6IDksXG4gICAgVEVYVFVSRV9GTVRfTDg6IDEwLFxuICAgIFRFWFRVUkVfRk1UX0w4X0E4OiAxMSxcbiAgICBURVhUVVJFX0ZNVF9SNV9HNl9CNTogMTIsXG4gICAgVEVYVFVSRV9GTVRfUjVfRzVfQjVfQTE6IDEzLFxuICAgIFRFWFRVUkVfRk1UX1I0X0c0X0I0X0E0OiAxNCxcbiAgICBURVhUVVJFX0ZNVF9SR0I4OiAxNSxcbiAgICBURVhUVVJFX0ZNVF9SR0JBODogMTYsXG4gICAgVEVYVFVSRV9GTVRfUkdCMTZGOiAxNyxcbiAgICBURVhUVVJFX0ZNVF9SR0JBMTZGOiAxOCxcbiAgICBURVhUVVJFX0ZNVF9SR0IzMkY6IDE5LFxuICAgIFRFWFRVUkVfRk1UX1JHQkEzMkY6IDIwLFxuICAgIFRFWFRVUkVfRk1UX1IzMkY6IDIxLFxuICAgIFRFWFRVUkVfRk1UXzExMTExMEY6IDIyLFxuICAgIFRFWFRVUkVfRk1UX1NSR0I6IDIzLFxuICAgIFRFWFRVUkVfRk1UX1NSR0JBOiAyNCxcbiAgXG4gICAgLy8gZGVwdGggZm9ybWF0c1xuICAgIFRFWFRVUkVfRk1UX0QxNjogMjUsXG4gICAgVEVYVFVSRV9GTVRfRDMyOiAyNixcbiAgICBURVhUVVJFX0ZNVF9EMjRTODogMjcsXG4gIFxuICAgIC8vIGV0YzIgZm9ybWF0XG4gICAgVEVYVFVSRV9GTVRfUkdCX0VUQzI6IDI4LFxuICAgIFRFWFRVUkVfRk1UX1JHQkFfRVRDMjogMjksXG4gIFxuICAgIC8vIGRlcHRoIGFuZCBzdGVuY2lsIGZ1bmN0aW9uXG4gICAgRFNfRlVOQ19ORVZFUjogNTEyLCAgICAvLyBnbC5ORVZFUlxuICAgIERTX0ZVTkNfTEVTUzogNTEzLCAgICAgLy8gZ2wuTEVTU1xuICAgIERTX0ZVTkNfRVFVQUw6IDUxNCwgICAgLy8gZ2wuRVFVQUxcbiAgICBEU19GVU5DX0xFUVVBTDogNTE1LCAgIC8vIGdsLkxFUVVBTFxuICAgIERTX0ZVTkNfR1JFQVRFUjogNTE2LCAgLy8gZ2wuR1JFQVRFUlxuICAgIERTX0ZVTkNfTk9URVFVQUw6IDUxNywgLy8gZ2wuTk9URVFVQUxcbiAgICBEU19GVU5DX0dFUVVBTDogNTE4LCAgIC8vIGdsLkdFUVVBTFxuICAgIERTX0ZVTkNfQUxXQVlTOiA1MTksICAgLy8gZ2wuQUxXQVlTXG4gIFxuICAgIC8vIHJlbmRlci1idWZmZXIgZm9ybWF0XG4gICAgUkJfRk1UX1JHQkE0OiAzMjg1NCwgICAgLy8gZ2wuUkdCQTRcbiAgICBSQl9GTVRfUkdCNV9BMTogMzI4NTUsICAvLyBnbC5SR0I1X0ExXG4gICAgUkJfRk1UX1JHQjU2NTogMzYxOTQsICAgLy8gZ2wuUkdCNTY1XG4gICAgUkJfRk1UX0QxNjogMzMxODksICAgICAgLy8gZ2wuREVQVEhfQ09NUE9ORU5UMTZcbiAgICBSQl9GTVRfUzg6IDM2MTY4LCAgICAgICAvLyBnbC5TVEVOQ0lMX0lOREVYOFxuICAgIFJCX0ZNVF9EMjRTODogMzQwNDEsICAgIC8vIGdsLkRFUFRIX1NURU5DSUxcbiAgXG4gICAgLy8gYmxlbmQtZXF1YXRpb25cbiAgICBCTEVORF9GVU5DX0FERDogMzI3NzQsICAgICAgICAgICAgICAvLyBnbC5GVU5DX0FERFxuICAgIEJMRU5EX0ZVTkNfU1VCVFJBQ1Q6IDMyNzc4LCAgICAgICAgIC8vIGdsLkZVTkNfU1VCVFJBQ1RcbiAgICBCTEVORF9GVU5DX1JFVkVSU0VfU1VCVFJBQ1Q6IDMyNzc5LCAvLyBnbC5GVU5DX1JFVkVSU0VfU1VCVFJBQ1RcbiAgXG4gICAgLy8gYmxlbmRcbiAgICBCTEVORF9aRVJPOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2wuWkVST1xuICAgIEJMRU5EX09ORTogMSwgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnbC5PTkVcbiAgICBCTEVORF9TUkNfQ09MT1I6IDc2OCwgICAgICAgICAgICAgICAgICAgLy8gZ2wuU1JDX0NPTE9SXG4gICAgQkxFTkRfT05FX01JTlVTX1NSQ19DT0xPUjogNzY5LCAgICAgICAgIC8vIGdsLk9ORV9NSU5VU19TUkNfQ09MT1JcbiAgICBCTEVORF9EU1RfQ09MT1I6IDc3NCwgICAgICAgICAgICAgICAgICAgLy8gZ2wuRFNUX0NPTE9SXG4gICAgQkxFTkRfT05FX01JTlVTX0RTVF9DT0xPUjogNzc1LCAgICAgICAgIC8vIGdsLk9ORV9NSU5VU19EU1RfQ09MT1JcbiAgICBCTEVORF9TUkNfQUxQSEE6IDc3MCwgICAgICAgICAgICAgICAgICAgLy8gZ2wuU1JDX0FMUEhBXG4gICAgQkxFTkRfT05FX01JTlVTX1NSQ19BTFBIQTogNzcxLCAgICAgICAgIC8vIGdsLk9ORV9NSU5VU19TUkNfQUxQSEFcbiAgICBCTEVORF9EU1RfQUxQSEE6IDc3MiwgICAgICAgICAgICAgICAgICAgLy8gZ2wuRFNUX0FMUEhBXG4gICAgQkxFTkRfT05FX01JTlVTX0RTVF9BTFBIQTogNzczLCAgICAgICAgIC8vIGdsLk9ORV9NSU5VU19EU1RfQUxQSEFcbiAgICBCTEVORF9DT05TVEFOVF9DT0xPUjogMzI3NjksICAgICAgICAgICAgLy8gZ2wuQ09OU1RBTlRfQ09MT1JcbiAgICBCTEVORF9PTkVfTUlOVVNfQ09OU1RBTlRfQ09MT1I6IDMyNzcwLCAgLy8gZ2wuT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SXG4gICAgQkxFTkRfQ09OU1RBTlRfQUxQSEE6IDMyNzcxLCAgICAgICAgICAgIC8vIGdsLkNPTlNUQU5UX0FMUEhBXG4gICAgQkxFTkRfT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBOiAzMjc3MiwgIC8vIGdsLk9ORV9NSU5VU19DT05TVEFOVF9BTFBIQVxuICAgIEJMRU5EX1NSQ19BTFBIQV9TQVRVUkFURTogNzc2LCAgICAgICAgICAvLyBnbC5TUkNfQUxQSEFfU0FUVVJBVEVcbiAgXG4gICAgLy8gc3RlbmNpbCBvcGVyYXRpb25cbiAgICBTVEVOQ0lMX0RJU0FCTEU6IDAsICAgICAgICAgICAgIC8vIGRpc2FibGUgc3RlbmNpbFxuICAgIFNURU5DSUxfRU5BQkxFOiAxLCAgICAgICAgICAgICAgLy8gZW5hYmxlIHN0ZW5jaWxcbiAgICBTVEVOQ0lMX0lOSEVSSVQ6IDIsICAgICAgICAgICAgIC8vIGluaGVyaXQgc3RlbmNpbCBzdGF0ZXNcbiAgXG4gICAgU1RFTkNJTF9PUF9LRUVQOiA3NjgwLCAgICAgICAgICAvLyBnbC5LRUVQXG4gICAgU1RFTkNJTF9PUF9aRVJPOiAwLCAgICAgICAgICAgICAvLyBnbC5aRVJPXG4gICAgU1RFTkNJTF9PUF9SRVBMQUNFOiA3NjgxLCAgICAgICAvLyBnbC5SRVBMQUNFXG4gICAgU1RFTkNJTF9PUF9JTkNSOiA3NjgyLCAgICAgICAgICAvLyBnbC5JTkNSXG4gICAgU1RFTkNJTF9PUF9JTkNSX1dSQVA6IDM0MDU1LCAgICAvLyBnbC5JTkNSX1dSQVBcbiAgICBTVEVOQ0lMX09QX0RFQ1I6IDc2ODMsICAgICAgICAgIC8vIGdsLkRFQ1JcbiAgICBTVEVOQ0lMX09QX0RFQ1JfV1JBUDogMzQwNTYsICAgIC8vIGdsLkRFQ1JfV1JBUFxuICAgIFNURU5DSUxfT1BfSU5WRVJUOiA1Mzg2LCAgICAgICAgLy8gZ2wuSU5WRVJUXG4gIFxuICAgIC8vIGN1bGxcbiAgICBDVUxMX05PTkU6IDAsXG4gICAgQ1VMTF9GUk9OVDogMTAyOCxcbiAgICBDVUxMX0JBQ0s6IDEwMjksXG4gICAgQ1VMTF9GUk9OVF9BTkRfQkFDSzogMTAzMixcbiAgXG4gICAgLy8gcHJpbWl0aXZlIHR5cGVcbiAgICBQVF9QT0lOVFM6IDAsICAgICAgICAgLy8gZ2wuUE9JTlRTXG4gICAgUFRfTElORVM6IDEsICAgICAgICAgIC8vIGdsLkxJTkVTXG4gICAgUFRfTElORV9MT09QOiAyLCAgICAgIC8vIGdsLkxJTkVfTE9PUFxuICAgIFBUX0xJTkVfU1RSSVA6IDMsICAgICAvLyBnbC5MSU5FX1NUUklQXG4gICAgUFRfVFJJQU5HTEVTOiA0LCAgICAgIC8vIGdsLlRSSUFOR0xFU1xuICAgIFBUX1RSSUFOR0xFX1NUUklQOiA1LCAvLyBnbC5UUklBTkdMRV9TVFJJUFxuICAgIFBUX1RSSUFOR0xFX0ZBTjogNiwgICAvLyBnbC5UUklBTkdMRV9GQU5cbn07XG5cbmV4cG9ydCBuYW1lc3BhY2UgR0xhcGkge1xuXG4gICAgLy/mnKzlnLBvcGVnbOS4iuS4i+aWh1xuICAgIHZhciBnbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG5cbiAgICAvL+atpOWHveaVsOWKoeW/heiwg+eUqFxuICAgIGV4cG9ydCBmdW5jdGlvbiBiaW5kR0woZ2xUKTogdm9pZCB7XG4gICAgICAgIGdsID0gZ2xUO1xuXG4gICAgICAgIEdMYXBpLmdsVEVYVFVSRV9NQUdfRklMVEVSID0gZ2wuVEVYVFVSRV9NQUdfRklMVEVSO1xuICAgICAgICBHTGFwaS5nbFRFWFRVUkVfTUlOX0ZJTFRFUiA9IGdsLlRFWFRVUkVfTUlOX0ZJTFRFUjtcbiAgICB9XG4gICAgZXhwb3J0IHZhciBnbFRFWFRVUkVfTUFHX0ZJTFRFUjtcbiAgICBleHBvcnQgdmFyIGdsVEVYVFVSRV9NSU5fRklMVEVSO1xuICAgXG5cblxuICAgIC8qKlxuICogQG1ldGhvZCBhdHRyVHlwZUJ5dGVzXG4gKiBAcGFyYW0ge0FUVFJfVFlQRV8qfSBhdHRyVHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXR0clR5cGVCeXRlcyhhdHRyVHlwZSkge1xuICAgIFxuICAgIGlmIChhdHRyVHlwZSA9PT0gZ2xFbnVtcy5BVFRSX1RZUEVfSU5UOCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChhdHRyVHlwZSA9PT0gZ2xFbnVtcy5BVFRSX1RZUEVfVUlOVDgpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoYXR0clR5cGUgPT09IGdsRW51bXMuQVRUUl9UWVBFX0lOVDE2KSB7XG4gICAgICByZXR1cm4gMjtcbiAgICB9IGVsc2UgaWYgKGF0dHJUeXBlID09PSBnbEVudW1zLkFUVFJfVFlQRV9VSU5UMTYpIHtcbiAgICAgIHJldHVybiAyO1xuICAgIH0gZWxzZSBpZiAoYXR0clR5cGUgPT09IGdsRW51bXMuQVRUUl9UWVBFX0lOVDMyKSB7XG4gICAgICByZXR1cm4gNDtcbiAgICB9IGVsc2UgaWYgKGF0dHJUeXBlID09PSBnbEVudW1zLkFUVFJfVFlQRV9VSU5UMzIpIHtcbiAgICAgIHJldHVybiA0O1xuICAgIH0gZWxzZSBpZiAoYXR0clR5cGUgPT09IGdsRW51bXMuQVRUUl9UWVBFX0ZMT0FUMzIpIHtcbiAgICAgIHJldHVybiA0O1xuICAgIH1cbiAgXG4gICAgY29uc29sZS53YXJuKGBVbmtub3duIEFUVFJfVFlQRTogJHthdHRyVHlwZX1gKTtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBcblxuICAgIC8qKlxuICAgICAqIOWwhmJ1ZmZlcue7keWumuWIsOebruagh+e8k+WGsuWMulxuICAgICAqIEBwYXJhbSB0YXJnZXQgXG4gICAgICogR0xlbnVt5oyH5a6a57uT5ZCI54K577yI55uu5qCH77yJ44CC5Y+v6IO955qE5YC877yaXG4gICAgICAgIGdsLkFSUkFZX0JVRkZFUu+8muWMheWQq+mhtueCueWxnuaAp+eahOe8k+WGsuWMuu+8jOS+i+WmgumhtueCueWdkOagh++8jOe6ueeQhuWdkOagh+aVsOaNruaIlumhtueCueminOiJsuaVsOaNruOAglxuICAgICAgICBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUu+8mueUqOS6juWFg+e0oOe0ouW8leeahOe8k+WGsuWMuuOAglxuICAgICAgICDkvb/nlKhXZWJHTCAy5LiK5LiL5paH5pe277yM6L+Y5Y+v5Lul5L2/55So5Lul5LiL5YC877yaXG4gICAgICAgIGdsLkNPUFlfUkVBRF9CVUZGRVLvvJrnlKjkuo7ku47kuIDkuKrnvJPlhrLljLrlr7nosaHlpI3liLbliLDlj6bkuIDkuKrnvJPlhrLljLrlr7nosaHnmoTnvJPlhrLljLrjgIJcbiAgICAgICAgZ2wuQ09QWV9XUklURV9CVUZGRVLvvJrnlKjkuo7ku47kuIDkuKrnvJPlhrLljLrlr7nosaHlpI3liLbliLDlj6bkuIDkuKrnvJPlhrLljLrlr7nosaHnmoTnvJPlhrLljLrjgIJcbiAgICAgICAgZ2wuVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUu+8mueUqOS6juWPmOaNouWPjemmiOaTjeS9nOeahOe8k+WGsuWMuuOAglxuICAgICAgICBnbC5VTklGT1JNX0JVRkZFUu+8mueUqOS6juWtmOWCqOe7n+S4gOWdl+eahOe8k+WGsuWMuuOAglxuICAgICAgICBnbC5QSVhFTF9QQUNLX0JVRkZFUu+8mueUqOS6juWDj+e0oOS8oOi+k+aTjeS9nOeahOe8k+WGsuWMuuOAglxuICAgICAgICBnbC5QSVhFTF9VTlBBQ0tfQlVGRkVS77ya55So5LqO5YOP57Sg5Lyg6L6T5pON5L2c55qE57yT5Yay5Yy644CCXG4gICAgICogQHBhcmFtIGJ1ZmZlciBcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gYmluZEJ1ZmZlcih0YXJnZXQsIGJ1ZmZlcikge1xuICAgICAgICBnbC5iaW5kQnVmZmVyKHRhcmdldCwgYnVmZmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbW9kZSBcbiAgICAgKiDmnprkuL7nsbvlnosg5oyH5a6a6KaB5riy5p+T55qE5Zu+5YWD57G75Z6L44CC5Y+v5Lul5piv5Lul5LiL57G75Z6LOlxuICAgICAgICBnbC5QT0lOVFM6IOeUu+WNleeLrOeahOeCueOAglxuICAgICAgICBnbC5MSU5FX1NUUklQOiDnlLvkuIDmnaHnm7Tnur/liLDkuIvkuIDkuKrpobbngrnjgIJcbiAgICAgICAgZ2wuTElORV9MT09QOiDnu5jliLbkuIDmnaHnm7Tnur/liLDkuIvkuIDkuKrpobbngrnvvIzlubblsIbmnIDlkI7kuIDkuKrpobbngrnov5Tlm57liLDnrKzkuIDkuKrpobbngrkuXG4gICAgICAgIGdsLkxJTkVTOiDlnKjkuIDlr7npobbngrnkuYvpl7TnlLvkuIDmnaHnur8uXG4gICAgICAgIGdsLlRSSUFOR0xFX1NUUklQXG4gICAgICAgIGdsLlRSSUFOR0xFX0ZBTlxuICAgICAgICBnbC5UUklBTkdMRVM6IOS4uuS4gOe7hOS4ieS4qumhtueCuee7mOWItuS4gOS4quS4ieinkuW9oi5cbiAgICAgKiBAcGFyYW0gY291bnQgXG4gICAgICAgIOaVtOaVsOWeiyDmjIflrpropoHmuLLmn5PnmoTlhYPntKDmlbDph49cbiAgICAgKiBAcGFyYW0gdHlwZSBcbiAgICAgICAg5p6a5Li+57G75Z6LIOaMh+WumuWFg+e0oOaVsOe7hOe8k+WGsuWMuuS4reeahOWAvOeahOexu+Wei+OAguWPr+iDveeahOWAvOaYrzpcbiAgICAgICAgZ2wuVU5TSUdORURfQllURVxuICAgICAgICBnbC5VTlNJR05FRF9TSE9SVFxuICAgICAgICDlvZPkvb/nlKggT0VTX2VsZW1lbnRfaW5kZXhfdWludCDmianlsZXml7Y6XG4gICAgICAgIGdsLlVOU0lHTkVEX0lOVFxuICAgICAqIEBwYXJhbSBvZmZzZXQgXG4gICAgICAgICDlrZfoioLljZXkvY0g5oyH5a6a5YWD57Sg5pWw57uE57yT5Yay5Yy65Lit55qE5YGP56e76YeP44CC5b+F6aG75piv57uZ5a6a57G75Z6L5aSn5bCP55qE5pyJ5pWI5YCN5pWwXG4gICAgICAgIEByZXR1cm5zXG4gICAgICAgIG5vbmVcbiAgICAgICAgQGVycm9yXG4gICAgICAgIOWmguaenCBtb2RlIOS4jeaYr+ato+ehruWAvCwgIGdsLklOVkFMSURfRU5VTSDlsIbkvJrmipvlh7rplJnor6/lvILluLguXG4gICAgICAgIOWmguaenG9mZnNldCDkuI3mmK/nu5nlrprnsbvlnovlpKflsI/nmoTmnInmlYjlgI3mlbAsIGdsLklOVkFMSURfT1BFUkFUSU9OIOWwhuS8muaKm+WHuumUmeivr+W8guW4uC5cbiAgICAgICAg5aaC5p6cIGNvdW50IOaYr+i0n+eahCwgIGdsLklOVkFMSURfVkFMVUUg5bCG5Lya5oqb5Ye66ZSZ6K+v5byC5bi4LlxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBkcmF3RWxlbWVudHMobW9kZSwgY291bnQsIHR5cGUsIG9mZnNldCkge1xuICAgICAgICBnbC5kcmF3RWxlbWVudHMobW9kZSwgY291bnQsIHR5cGUsIG9mZnNldClcbiAgICB9XG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIG1vZGUgXG4gICAgICogR0xlbnVtIOexu+Wei++8jOaMh+Wumue7mOWItuWbvuWFg+eahOaWueW8j++8jOWPr+iDveWAvOWmguS4i+OAglxuICAgICAgICBnbC5QT0lOVFM6IOe7mOWItuS4gOezu+WIl+eCueOAglxuICAgICAgICBnbC5MSU5FX1NUUklQOiDnu5jliLbkuIDkuKrnur/mnaHjgILljbPvvIznu5jliLbkuIDns7vliJfnur/mrrXvvIzkuIrkuIDngrnov57mjqXkuIvkuIDngrnjgIJcbiAgICAgICAgZ2wuTElORV9MT09QOiDnu5jliLbkuIDkuKrnur/lnIjjgILljbPvvIznu5jliLbkuIDns7vliJfnur/mrrXvvIzkuIrkuIDngrnov57mjqXkuIvkuIDngrnvvIzlubbkuJTmnIDlkI7kuIDngrnkuI7nrKzkuIDkuKrngrnnm7jov57jgIJcbiAgICAgICAgZ2wuTElORVM6IOe7mOWItuS4gOezu+WIl+WNleeLrOe6v+auteOAguavj+S4pOS4queCueS9nOS4uuerr+eCue+8jOe6v+auteS5i+mXtOS4jei/nuaOpeOAglxuICAgICAgICBnbC5UUklBTkdMRV9TVFJJUO+8mue7mOWItuS4gOS4quS4ieinkuW4puOAglxuICAgICAgICBnbC5UUklBTkdMRV9GQU7vvJrnu5jliLbkuIDkuKrkuInop5LmiYfjgIJcbiAgICAgICAgZ2wuVFJJQU5HTEVTOiDnu5jliLbkuIDns7vliJfkuInop5LlvaLjgILmr4/kuInkuKrngrnkvZzkuLrpobbngrlcbiAgICAgKiBAcGFyYW0gZmlyc3QgXG4gICAgICAgIEdMaW50IOexu+WeiyDvvIzmjIflrprku47lk6rkuKrngrnlvIDlp4vnu5jliLZcbiAgICAgKiBAcGFyYW0gY291bnQgXG4gICAgICAgIEdMc2l6ZWkg57G75Z6L77yM5oyH5a6a57uY5Yi26ZyA6KaB5L2/55So5Yiw5aSa5bCR5Liq54K5XG4gICAgIEByZXR1cm5zXG4gICAgIG5vbmVcbiAgICAgQGVycm9yXG4gICAgICAgIOWmguaenCBtb2RlIOS4jeaYr+S4gOS4quWPr+aOpeWPl+WAvO+8jOWwhuS8muaKm+WHuiBnbC5JTlZBTElEX0VOVU0g5byC5bi444CCXG4gICAgICAgIOWmguaenCBmaXJzdCDmiJbogIUgY291bnQg5piv6LSf5YC877yM5Lya5oqb5Ye6IGdsLklOVkFMSURfVkFMVUUg5byC5bi444CCXG4gICAgICAgIOWmguaenCBnbC5DVVJSRU5UX1BST0dSQU0g5Li6IG51bGzvvIzkvJrmipvlh7ogZ2wuSU5WQUxJRF9PUEVSQVRJT04g5byC5bi4XG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRyYXdBcnJheXMobW9kZSwgZmlyc3QsIGNvdW50KSB7XG4gICAgICAgIGdsLmRyYXdBcnJheXMobW9kZSwgZmlyc3QsIGNvdW50KTtcbiAgICB9XG4gICAgLypcbiAgICAgICAgLy8gV2ViR0wxOlxuICAgIHZvaWQgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIGxldmVsLCBpbnRlcm5hbGZvcm1hdCwgd2lkdGgsIGhlaWdodCwgYm9yZGVyLCBmb3JtYXQsIHR5cGUsIEFycmF5QnVmZmVyVmlldz8gcGl4ZWxzKTtcbiAgICB2b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIGZvcm1hdCwgdHlwZSwgSW1hZ2VEYXRhPyBwaXhlbHMpO1xuICAgIHZvaWQgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIGxldmVsLCBpbnRlcm5hbGZvcm1hdCwgZm9ybWF0LCB0eXBlLCBIVE1MSW1hZ2VFbGVtZW50PyBwaXhlbHMpO1xuICAgIHZvaWQgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIGxldmVsLCBpbnRlcm5hbGZvcm1hdCwgZm9ybWF0LCB0eXBlLCBIVE1MQ2FudmFzRWxlbWVudD8gcGl4ZWxzKTtcbiAgICB2b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIGZvcm1hdCwgdHlwZSwgSFRNTFZpZGVvRWxlbWVudD8gcGl4ZWxzKTtcbiAgICB2b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIGZvcm1hdCwgdHlwZSwgSW1hZ2VCaXRtYXA/IHBpeGVscyk7XG4gICAgLy8gV2ViR0wyOlxuICAgIHZvaWQgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIGxldmVsLCBpbnRlcm5hbGZvcm1hdCwgd2lkdGgsIGhlaWdodCwgYm9yZGVyLCBmb3JtYXQsIHR5cGUsIEdMaW50cHRyIG9mZnNldCk7XG4gICAgdm9pZCBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBib3JkZXIsIGZvcm1hdCwgdHlwZSwgSFRNTENhbnZhc0VsZW1lbnQgc291cmNlKTtcbiAgICB2b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgZm9ybWF0LCB0eXBlLCBIVE1MSW1hZ2VFbGVtZW50IHNvdXJjZSk7IFxuICAgIHZvaWQgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIGxldmVsLCBpbnRlcm5hbGZvcm1hdCwgd2lkdGgsIGhlaWdodCwgYm9yZGVyLCBmb3JtYXQsIHR5cGUsIEhUTUxWaWRlb0VsZW1lbnQgc291cmNlKTsgXG4gICAgdm9pZCBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBib3JkZXIsIGZvcm1hdCwgdHlwZSwgSW1hZ2VCaXRtYXAgc291cmNlKTtcbiAgICB2b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgZm9ybWF0LCB0eXBlLCBJbWFnZURhdGEgc291cmNlKTtcbiAgICB2b2lkIGdsLnRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgZm9ybWF0LCB0eXBlLCBBcnJheUJ1ZmZlclZpZXcgc3JjRGF0YSwgc3JjT2Zmc2V0KTtcbiAgICAqL1xuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB0YXJnZXQgXG4gICAgICogICAgR0xlbnVtIOaMh+Wumue6ueeQhueahOe7keWumuWvueixoS7lj6/og73nmoTlgLw6XG4gICAgICAgICAgICAgZ2wuVEVYVFVSRV8yRDog5LqM57u057q555CG6LS05Zu+LlxuICAgICAgICAgICAgIGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWDrnq4vmlrnkvZPmmKDlsITnurnnkIbnmoTmraNY6Z2i44CCXG4gICAgICAgICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YOiDnq4vmlrnkvZPmmKDlsITnurnnkIbnmoTotJ9Y6Z2i44CCXG4gICAgICAgICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9ZOiDnq4vmlrnkvZPmmKDlsITnurnnkIbnmoTmraNZ6Z2i44CCXG4gICAgICAgICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZOiDnq4vmlrnkvZPmmKDlsITnurnnkIbnmoTotJ9Z6Z2i44CCXG4gICAgICAgICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aOiDnq4vmlrnkvZPmmKDlsITnurnnkIbnmoTmraNa6Z2i44CCXG4gICAgICAgICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9aOiDnq4vmlrnkvZPmmKDlsITnurnnkIbnmoTotJ9a6Z2i44CCXG4gICAgICogQHBhcmFtIGxldmVsIFxuICAgICAqICBHTGludCDmjIflrpror6bnu4bnuqfliKsuIDDnuqfmmK/ln7rmnKzlm77lg4/nrYnnuqfvvIxu57qn5piv56ysbuS4qumHkeWtl+WhlOeugOWMlue6py5cbiAgICAgKiBAcGFyYW0gaW50ZXJuYWxmb3JtYXQgXG4gICAgICogQHBhcmFtIHdpZHRoIFxuICAgICAqICBHTHNpemVpIOaMh+Wumue6ueeQhueahOWuveW6plxuICAgICAqIEBwYXJhbSBoZWlnaHQgXG4gICAgICogR0xzaXplaSDmjIflrprnurnnkIbnmoTpq5jluqZcbiAgICAgKiBAcGFyYW0gYm9yZGVyIFxuICAgICAqIEdMaW50IOaMh+Wumue6ueeQhueahOi+ueahhuWuveW6puOAguW/hemhu+S4uiAwXG4gICAgICogQHBhcmFtIGZvcm1hdCBcbiAgICAgKiAgR0xlbnVtIOaMh+WumnRleGVs5pWw5o2u5qC85byP44CC5ZyoIFdlYkdMIDHkuK3vvIzlroPlv4XpobvkuI4gaW50ZXJuYWxmb3JtYXQg55u45ZCM77yI5p+l55yL5LiK6Z2iKS4g5ZyoV2ViR0wgMuS4rSwg6L+Z5byg6KGo5Lit5YiX5Ye65LqG6L+Z5Lqb57uE5ZCIXG4gICAgICogQHBhcmFtIHR5cGUgXG4gICAgICogR0xlbnVtIOaMh+WumnRleGVs5pWw5o2u55qE5pWw5o2u57G75Z6L44CC5Y+v6IO955qE5YC8OlxuICAgICAgICAgZ2wuVU5TSUdORURfQllURTogIGdsLlJHQkHmr4/kuKrpgJrpgZM45L2NXG4gICAgICAgICBnbC5VTlNJR05FRF9TSE9SVF81XzZfNTogNSBiaXRz57qiLCA2IGJpdHPnu78sIDUgYml0c+iTnVxuICAgICAgICAgZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNDogNCBiaXRz57qiLCA0IGJpdHPnu78sIDQgYml0c+iTnSwgNCBhbHBoYSBiaXRzLlxuICAgICAgICAgZ2wuVU5TSUdORURfU0hPUlRfNV81XzVfMTogNSBiaXRz57qiLCA1IGJpdHPnu78sIDUgYml0c+iTnSwgMSBhbHBoYSBiaXQuXG4gICAgICAgICDlvZPkvb/nlKggV0VCR0xfZGVwdGhfdGV4dHVyZSDmianlsZU6XG4gICAgICAgICBnbC5VTlNJR05FRF9TSE9SVFxuICAgICAgICAgZ2wuVU5TSUdORURfSU5UXG4gICAgICAgICBleHQuVU5TSUdORURfSU5UXzI0XzhfV0VCR0wgKGNvbnN0YW50IHByb3ZpZGVkIGJ5IHRoZSBleHRlbnNpb24pXG4gICAgICAgICDlvZPkvb/nlKggT0VTX3RleHR1cmVfZmxvYXTmianlsZUgOlxuICAgICAgICAgZ2wuRkxPQVRcbiAgICAgICAgIOW9k+S9v+eUqCBPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0IOaJqeWxlTpcbiAgICAgICAgIGV4dC5IQUxGX0ZMT0FUX09FUyAoY29uc3RhbnQgcHJvdmlkZWQgYnkgdGhlIGV4dGVuc2lvbilcbiAgICAgICAgIOW9k+S9v+eUqCBXZWJHTCAyIGNvbnRleHQs5LiL6Z2i55qE5YC85Lmf5piv5Y+v55So55qEOlxuICAgICAgICAgZ2wuQllURVxuICAgICAgICAgZ2wuVU5TSUdORURfU0hPUlRcbiAgICAgICAgIGdsLlNIT1JUXG4gICAgICAgICBnbC5VTlNJR05FRF9JTlRcbiAgICAgICAgIGdsLklOVFxuICAgICAgICAgZ2wuSEFMRl9GTE9BVFxuICAgICAgICAgZ2wuRkxPQVRcbiAgICAgICAgIGdsLlVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFVlxuICAgICAgICAgZ2wuVU5TSUdORURfSU5UXzEwRl8xMUZfMTFGX1JFVlxuICAgICAgICAgZ2wuVU5TSUdORURfSU5UXzVfOV85XzlfUkVWXG4gICAgICAgICBnbC5VTlNJR05FRF9JTlRfMjRfOFxuICAgICAgICAgZ2wuRkxPQVRfMzJfVU5TSUdORURfSU5UXzI0XzhfUkVWIChwaXhlbHMgbXVzdCBiZSBudWxsKVxuICAgICAqIEBwYXJhbSBwaXhlbHMgXG4gICAgICog5LiL5YiX5a+56LGh5LmL5LiA5Y+v5Lul55So5L2c57q555CG55qE5YOP57Sg5rqQOlxuICAgICAgICAgQXJyYXlCdWZmZXJWaWV3LFxuICAgICAgICAgVWludDhBcnJheSAg5aaC5p6cIHR5cGUg5pivIGdsLlVOU0lHTkVEX0JZVEXliJnlv4Xpobvkvb/nlKhcbiAgICAgICAgIFVpbnQxNkFycmF5IOWmguaenCB0eXBlIOaYryBnbC5VTlNJR05FRF9TSE9SVF81XzZfNSwgZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNCwgZ2wuVU5TSUdORURfU0hPUlRfNV81XzVfMSwgZ2wuVU5TSUdORURfU0hPUlQg5oiWZXh0LkhBTEZfRkxPQVRfT0VT5YiZ5b+F6aG75L2/55SoXG4gICAgICAgICBVaW50MzJBcnJheSDlpoLmnpx0eXBlIOaYryBnbC5VTlNJR05FRF9JTlQg5oiWZXh0LlVOU0lHTkVEX0lOVF8yNF84X1dFQkdM5YiZ5b+F6aG75L2/55SoXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRleEltYWdlMkQodGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgZm9ybWF0LCB0eXBlLCBwaXhlbHM6IEFycmF5QnVmZmVyVmlldyk6IHZvaWQge1xuICAgICAgICBnbC50ZXhJbWFnZTJEKHRhcmdldCwgbGV2ZWwsIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBib3JkZXIsIGZvcm1hdCwgdHlwZSwgcGl4ZWxzKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWbvuWDj+mihOWkhOeQhuWHveaVsFxuICAgICAqIOinhOWumuS6huWbvuWDj+WmguS9leS7juWGheWtmOS4reivu+WHuu+8jOWPiOaIluiAheWmguS9leS7juaYvuWtmOivu+WFpeWGheWtmFxuICAgICAqIEBwYXJhbSBwbmFtZSBcbiAgICAgKiAgR2xlbnVtIOexu+WeiyDvvIzooajnpLrlpITnkIbnmoTmlrnlvI/jgILlhbPkuo7or6Xlj4LmlbDlj6/pgInlgLzvvIzor7fop4HkuIvpnaLooajmoLxcbiAgICAgKiBAcGFyYW0gcGFyYW0gXG4gICAgICogIEdMaW50ICDnsbvlnovvvIzooajnpLogcG5hbWUg5aSE55CG5pa55byP55qE5Y+C5pWw44CC5YWz5LqO6K+l5Y+C5pWw5Y+v6YCJ5YC877yM6K+36KeB5LiL6Z2i6KGo5qC8XG4gICAgICog5pSv5oyB55qE5bmz5Y+wd2ViZ2wgMS4wLG9wZW5nbCBlcyAyLjBcbiAgICAgKiBwbmFtZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCAgICAgICAgICAgIHBhcmFtICAgICAgICAgIGRlc1xuICAgICAqIGdsLlBBQ0tfQUxJR05NRU5UICAgICAgICAgICAgICAgICAgICAgICAgIDQgICAgICAgICAgICAgMSwgMiwgNCwgOCAgICAgICDlsIblg4/ntKDmlbDmja7miZPljIXliLDlhoXlrZjkuK3vvIjku47mmL7lrZjlsIbmlbDmja7lj5HlvoDlhoXlrZjvvIlcbiAgICAgKiBnbC5VTlBBQ0tfQUxJR05NRU5UICAgICAgICAgICAgICAgICAgICAgICA0ICAgICAgICAgICAgIDEsIDIsIDQsIDggICAgICAg5LuO5YaF5a2Y5Lit6Kej5YyF5YOP57Sg5pWw5o2uKOaOpeWujOS7peWQjuWPkeW+gOaYvuWtmClcbiAgICAgKiBnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMICAgICAgICAgICAgICAgICAgICBmYWxzZSAgICAgICAgIHRydWUsZmFsc2UgICAgICAg5aaC5p6c5Li6dHJ1Ze+8jOWImeaKiuWbvueJh+S4iuS4i+WvueensOe/u+i9rOWdkOagh+i9tCjlm77niYfmnKzouqvkuI3lj5gpXG4gICAgICogZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMICAgICAgICAgZmFsc2UgICAgICAgICB0cnVlLCBmYWxzZSAgICAgIOWwhmFscGhh6YCa6YGT5LmY5Lul5YW25LuW6aKc6Imy6YCa6YGTXG4gICAgICogZ2wuVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCAgKGdsLkJST1dTRVJfREVGQVVMVF9XRUJHTCkgKGdsLkJST1dTRVJfREVGQVVMVF9XRUJHTCwgZ2wuTk9ORSkg6buY6K6k6aKc6Imy56m66Ze06L2s5o2i5oiW5peg6aKc6Imy56m66Ze06L2s5o2iXG4gICAgICogXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHBpeGVsU3RvcmVpKHBuYW1lLCBwYXJhbSkge1xuICAgICAgICBnbC5waXhlbFN0b3JlaShwbmFtZSwgcGFyYW0pXG4gICAgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiB0ZXhQYXJhbWV0ZXJmKHRhcmdldDogR0xlbnVtLCBwbmFtZTogR0xlbnVtLCBwYXJhbTogR0xmbG9hdCkge1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJmKHRhcmdldCwgcG5hbWUsIHBhcmFtKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6K6+572u57q555CG6L+H5ruk55qE5bGe5oCnXG4gICAgICog5b2T5Zu+54mH6L+b6KGM5LiA5Lqb5Y+Y5o2i6K+45aaC5pS+5aSn57yp5bCP562J77yM5aaC5L2V5LuO57q555CG5Lit5Y+W5pWw5o2uXG4gICAgICogQHBhcmFtIHRhcmdldCBcbiAgICAgKiBHTGVudW0g5oyH5a6a57uR5a6a54K5KOebruaghynjgILlj6/og73nmoTlgLzvvJpcbiAgICAgICAgICAgICAgICBnbC5URVhUVVJFXzJEOiDkuoznu7TnurnnkIYuXG4gICAgICAgICAgICAgICAgZ2wuVEVYVFVSRV9DVUJFX01BUDog56uL5pa55L2T57q555CGLlxuICAgICAgICAgICAgICAgIOW9k+S9v+eUqCBXZWJHTCAyIGNvbnRleHQg5pe2LOi/mOWPr+S7peS9v+eUqOS7peS4i+WAvFxuICAgICAgICAgICAgICAgIGdsLlRFWFRVUkVfM0Q6IOS4iee7tOi0tOWbvi5cbiAgICAgICAgICAgICAgICBnbC5URVhUVVJFXzJEX0FSUkFZOiDkuoznu7TmlbDnu4TotLTlm74uXG4gICAgICogQHBhcmFtIHBuYW1lIFxuICAgICAqIEBwYXJhbSBwYXJhbSBcbiAgICAgKiBcbiAgICAgKiAgZ2wuVEVYVFVSRV9NQUdfRklMVEVSXHTnurnnkIbmlL7lpKfmu6Tms6LlmahcdGdsLkxJTkVBUiAo6buY6K6k5YC8KSwgZ2wuTkVBUkVTVC5cbiAgICAgICAgZ2wuVEVYVFVSRV9NSU5fRklMVEVSXHTnurnnkIbnvKnlsI/mu6Tms6LlmahcdGdsLkxJTkVBUiwgZ2wuTkVBUkVTVCwgZ2wuTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCwgZ2wuTElORUFSX01JUE1BUF9ORUFSRVNULCBnbC5ORUFSRVNUX01JUE1BUF9MSU5FQVIgKOm7mOiupOWAvCksIGdsLkxJTkVBUl9NSVBNQVBfTElORUFSLlxuICAgICAgICBnbC5URVhUVVJFX1dSQVBfU1x057q555CG5Z2Q5qCH5rC05bmz5aGr5YWFIHNcdGdsLlJFUEVBVCAo6buY6K6k5YC8KSxnbC5DTEFNUF9UT19FREdFLCBnbC5NSVJST1JFRF9SRVBFQVQuXG4gICAgICAgIGdsLlRFWFRVUkVfV1JBUF9UXHTnurnnkIblnZDmoIflnoLnm7TloavlhYUgdFx0Z2wuUkVQRUFUICjpu5jorqTlgLwpLGdsLkNMQU1QX1RPX0VER0UsIGdsLk1JUlJPUkVEX1JFUEVBVC5cbiAgICAgICAgQWRkaXRpb25hbGx5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIHRoZSBFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMgZXh0ZW5zaW9uXG4gICAgICAgIGV4dC5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVFx057q555CG5pyA5aSn5ZCR5byC5oCnXHQgR0xmbG9hdCDlgLwuXG4gICAgICAgIEFkZGl0aW9uYWxseSBhdmFpbGFibGUgd2hlbiB1c2luZyBhIFdlYkdMIDIgY29udGV4dFxuICAgICAgICBnbC5URVhUVVJFX0JBU0VfTEVWRUxcdOe6ueeQhuaYoOWwhOetiee6p1x05Lu75L2V5pW05Z6L5YC8LlxuICAgICAgICBnbC5URVhUVVJFX0NPTVBBUkVfRlVOQ1x057q555CG5a+55q+U5Ye95pWwXHRnbC5MRVFVQUwgKOm7mOiupOWAvCksIGdsLkdFUVVBTCwgZ2wuTEVTUywgZ2wuR1JFQVRFUiwgZ2wuRVFVQUwsIGdsLk5PVEVRVUFMLCBnbC5BTFdBWVMsIGdsLk5FVkVSLlxuICAgICAgICBnbC5URVhUVVJFX0NPTVBBUkVfTU9ERVx057q555CG5a+55q+U5qih5byPXHRnbC5OT05FICjpu5jorqTlgLwpLCBnbC5DT01QQVJFX1JFRl9UT19URVhUVVJFLlxuICAgICAgICBnbC5URVhUVVJFX01BWF9MRVZFTFx05pyA5aSn57q555CG5pig5bCE5pWw57uE562J57qnXHTku7vkvZXmlbTlnovlgLwuXG4gICAgICAgIGdsLlRFWFRVUkVfTUFYX0xPRFx057q555CG5pyA5aSn57uG6IqC5bGC5qyh5YC8XHTku7vkvZXmlbTlnovlgLwuXG4gICAgICAgIGdsLlRFWFRVUkVfTUlOX0xPRFx057q555CG5pyA5bCP57uG6IqC5bGC5qyh5YC8XHTku7vkvZXmta7ngrnlnovlgLwuXG4gICAgICAgIGdsLlRFWFRVUkVfV1JBUF9SXHTnurnnkIblnZDmoIdy5YyF6KOF5Yqf6IO9XHRnbC5SRVBFQVQgKOm7mOiupOWAvCksIGdsLkNMQU1QX1RPX0VER0UsIGdsLk1JUlJPUkVEX1JFUEVBVC5cbiAgICAgICAgQGVycm9yXG4gICAgICAgIElOVkFMSURfRU5VTSB0YXJnZXTkuI3mmK/lkIjms5XnmoTlgLzjgIJcbiAgICAgICAgSU5WQUxJRF9PUFJBVElPTiDlvZPliY3nm67moIfkuIrmsqHmnInnu5HlrprnurnnkIblr7nosaFcbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gdGV4UGFyYW1ldGVyaSh0YXJnZXQ6IEdMZW51bSwgcG5hbWU6IEdMZW51bSwgcGFyYW06IEdMaW50KSB7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkodGFyZ2V0LCBwbmFtZSwgcGFyYW0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6I635Y+Wc2hhZGVy5LitYXR0cmlidXRl5LiL5a+55bqU55qE5bGe5oCn5L2N572uXG4gICAgICogQHBhcmFtIHByb2dyYW0gc2hhZGVy55qEZ2xJRFxuICAgICAqIEBwYXJhbSBuYW1lIOWxnuaAp+eahOWQjeWtl1xuICAgICAqIEByZXR1cm5zXG4gICAgICog6KGo5piO5bGe5oCn5L2N572u55qE5LiL5qCHIEdMaW50IOaVsOWtl++8jOWmguaenOaJvuS4jeWIsOivpeWxnuaAp+WImei/lOWbni0xXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIG5hbWUpOiBHTHVpbnQge1xuICAgICAgICByZXR1cm4gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgbmFtZSlcbiAgICB9XG4gICAgLyoqXG4gICAgICog5r+A5rS76aG254K55bGe5oCnXG4gICAgICogQHBhcmFtIGluZGV4IFxuICAgICAqIOexu+Wei+S4ukdMdWludCDnmoTntKLlvJXvvIzmjIflkJHopoHmv4DmtLvnmoTpobbngrnlsZ7mgKfjgILlpoLmnpzmgqjlj6rnn6XpgZPlsZ7mgKfnmoTlkI3np7DvvIzkuI3nn6XpgZPntKLlvJXvvIxcbiAgICAgKiDmgqjlj6/ku6Xkvb/nlKjku6XkuIvmlrnms5XmnaXojrflj5bntKLlvJVnZXRBdHRyaWJMb2NhdGlvbigpXG4gICAgICogXG4gICAgICog54m55Yir6K+05piOXG4gICAgICog5ZyoV2ViR0zkuK3vvIzkvZznlKjkuo7pobbngrnnmoTmlbDmja7kvJrlhYjlgqjlrZjlnKhhdHRyaWJ1dGVz44CCXG4gICAgICog6L+Z5Lqb5pWw5o2u5LuF5a+5SmF2YVNjcmlwdOS7o+eggeWSjOmhtueCueedgOiJsuWZqOWPr+eUqOOAglxuICAgICAqIOWxnuaAp+eUsee0ouW8leWPt+W8leeUqOWIsEdQVee7tOaKpOeahOWxnuaAp+WIl+ihqOS4reOAguWcqOS4jeWQjOeahOW5s+WPsOaIlkdQVeS4iu+8jOafkOS6m+mhtueCueWxnuaAp+e0ouW8leWPr+iDveWFt+aciemihOWumuS5ieeahOWAvOOAglxuICAgICAqIOWIm+W7uuWxnuaAp+aXtu+8jFdlYkdM5bGC5Lya5YiG6YWN5YW25LuW5bGe5oCn44CCXG4gICAgICAg5peg6K665oCO5qC377yM6YO96ZyA6KaB5L2g5L2/55SoZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoKeaWueazle+8jOadpea/gOa0u+avj+S4gOS4quWxnuaAp+S7peS+v+S9v+eUqO+8jOS4jeiiq+a/gOa0u+eahOWxnuaAp+aYr+S4jeS8muiiq+S9v+eUqOeahOOAglxuICAgICAgIOS4gOaXpua/gOa0u++8jOS7peS4i+WFtuS7luaWueazleWwseWPr+S7peiOt+WPluWIsOWxnuaAp+eahOWAvOS6hu+8jFxuICAgICAgIOWMheaLrHZlcnRleEF0dHJpYlBvaW50ZXIoKe+8jHZlcnRleEF0dHJpYiooKe+8jOWSjCBnZXRWZXJ0ZXhBdHRyaWIoKVxuICAgICAgIEBlcnJvclxuICAgICAgIOaCqOWPr+S7peS9v+eUqGdldEVycm9yKCnmlrnms5XvvIzmnaXmo4Dmn6Xkvb/nlKhlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSgp5pe25Y+R55Sf55qE6ZSZ6K+v44CCXG4gICAgICAgV2ViR0xSZW5kZXJpbmdDb250ZXh0LklOVkFMSURfVkFMVUUg6Z2e5rOV55qEIGluZGV4IOOAglxuICAgICAgIOS4gOiIrOaYryBpbmRleCDlpKfkuo7miJbnrYnkuo7kuobpobbngrnlsZ7mgKfliJfooajlhYHorrjnmoTmnIDlpKflgLzjgILor6XlgLzlj6/ku6XpgJrov4cgV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk1BWF9WRVJURVhfQVRUUklCU+iOt+WPllxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShpbmRleDogR0x1aW50KSB7XG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGluZGV4KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5pa55rOV5Zyo57uZ5a6a55qE57Si5byV5L2N572u5YWz6Zet6YCa55So6aG254K55bGe5oCn5pWw57uEXG4gICAgICogQHBhcmFtIGluZGV4IFxuICAgICAqIHNoYWRlciDlj5jph4/nmoTkvY3nva5cbiAgICAgKi9cbiAgICBleHBvcnQgZnVuY3Rpb24gZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGluZGV4OiBHTHVpbnQpIHtcbiAgICAgICAgZ2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGluZGV4KVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDlkYror4nmmL7ljaHku47lvZPliY3nu5HlrprnmoTnvJPlhrLljLrvvIhiaW5kQnVmZmVyKCnmjIflrprnmoTnvJPlhrLljLrvvInkuK3or7vlj5bpobbngrnmlbDmja7jgIJcbiAgICAgICBXZWJHTCBBUEkg55qEV2ViR0xSZW5kZXJpbmdDb250ZXh0LnZlcnRleEF0dHJpYlBvaW50ZXIoKeaWueazlee7keWumuW9k+WJjee8k+WGsuWMuuiMg+WbtOWIsGdsLkFSUkFZX0JVRkZFUixcbiAgICAgICDmiJDkuLrlvZPliY3pobbngrnnvJPlhrLljLrlr7nosaHnmoTpgJrnlKjpobbngrnlsZ7mgKflubbmjIflrprlroPnmoTluIPlsYAo57yT5Yay5Yy65a+56LGh5Lit55qE5YGP56e76YePKVxuICAgICAqIEBwYXJhbSBpbmRleCBcbiAgICAgICDmjIflrpropoHkv67mlLnnmoTpobbngrnlsZ7mgKfnmoTntKLlvJUg5YW25a6e5bCx5piv5p+Q5LiqYXR0cmlidXRl5Y+Y6YeP5Zyoc2hhZGVy5Lit55qE5L2N572uXG4gICAgICogQHBhcmFtIHNpemUgXG4gICAgICAg5oyH5a6a5q+P5Liq6aG254K55bGe5oCn55qE57uE5oiQ5pWw6YeP77yM5b+F6aG75pivMe+8jDLvvIwz5oiWNFxuICAgICAqIEBwYXJhbSB0eXBlIFxuICAgICAgICDmjIflrprmlbDnu4TkuK3mr4/kuKrlhYPntKDnmoTmlbDmja7nsbvlnovlj6/og73mmK/vvJpcbiAgICAgICAgICAgIGdsLkJZVEU6IHNpZ25lZCA4LWJpdCBpbnRlZ2VyLCB3aXRoIHZhbHVlcyBpbiBbLTEyOCwgMTI3XVxuICAgICAgICAgICAg5pyJ56ym5Y+355qEOOS9jeaVtOaVsO+8jOiMg+WbtFstMTI4LCAxMjddXG4gICAgICAgICAgICBnbC5TSE9SVDogc2lnbmVkIDE2LWJpdCBpbnRlZ2VyLCB3aXRoIHZhbHVlcyBpbiBbLTMyNzY4LCAzMjc2N11cbiAgICAgICAgICAgIOacieespuWPt+eahDE25L2N5pW05pWw77yM6IyD5Zu0Wy0zMjc2OCwgMzI3NjddXG4gICAgICAgICAgICBnbC5VTlNJR05FRF9CWVRFOiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyLCB3aXRoIHZhbHVlcyBpbiBbMCwgMjU1XVxuICAgICAgICAgICAg5peg56ym5Y+355qEOOS9jeaVtOaVsO+8jOiMg+WbtFswLCAyNTVdXG4gICAgICAgICAgICBnbC5VTlNJR05FRF9TSE9SVDogdW5zaWduZWQgMTYtYml0IGludGVnZXIsIHdpdGggdmFsdWVzIGluIFswLCA2NTUzNV1cbiAgICAgICAgICAgIOaXoOespuWPt+eahDE25L2N5pW05pWw77yM6IyD5Zu0WzAsIDY1NTM1XVxuICAgICAgICAgICAgZ2wuRkxPQVQ6IDMyLWJpdCBJRUVFIGZsb2F0aW5nIHBvaW50IG51bWJlclxuICAgICAgICAgICAgMzLkvY1JRUVF5qCH5YeG55qE5rWu54K55pWwXG4gICAgICAgICAgICBXaGVuIHVzaW5nIGEgV2ViR0wgMiBjb250ZXh0LCB0aGUgZm9sbG93aW5nIHZhbHVlcyBhcmUgYXZhaWxhYmxlIGFkZGl0aW9uYWxseTpcbiAgICAgICAgICAgIOS9v+eUqFdlYkdMMueJiOacrOeahOi/mOWPr+S7peS9v+eUqOS7peS4i+WAvO+8mlxuICAgICAgICAgICAgZ2wuSEFMRl9GTE9BVDogMTYtYml0IElFRUUgZmxvYXRpbmcgcG9pbnQgbnVtYmVyXG4gICAgICAgICAgICAxNuS9jUlFRUXmoIflh4bnmoTmta7ngrnmlbBcbiAgICAgKiBAcGFyYW0gbm9ybWFsaXplZCBcbiAgICAgICAg5b2T6L2s5o2i5Li65rWu54K55pWw5pe25piv5ZCm5bqU6K+l5bCG5pW05pWw5pWw5YC85b2S5LiA5YyW5Yiw54m55a6a55qE6IyD5Zu044CCXG4gICAgICAgICAgICBGb3IgdHlwZXMgZ2wuQllURSBhbmQgZ2wuU0hPUlQsIG5vcm1hbGl6ZXMgdGhlIHZhbHVlcyB0byBbLTEsIDFdIGlmIHRydWUuXG4gICAgICAgICAgICDlr7nkuo7nsbvlnotnbC5CWVRF5ZKMZ2wuU0hPUlTvvIzlpoLmnpzmmK90cnVl5YiZ5bCG5YC85b2S5LiA5YyW5Li6Wy0xLCAxXVxuICAgICAgICAgICAgRm9yIHR5cGVzIGdsLlVOU0lHTkVEX0JZVEUgYW5kIGdsLlVOU0lHTkVEX1NIT1JULCBub3JtYWxpemVzIHRoZSB2YWx1ZXMgdG8gWzAsIDFdIGlmIHRydWUuXG4gICAgICAgICAgICDlr7nkuo7nsbvlnotnbC5VTlNJR05FRF9CWVRF5ZKMZ2wuVU5TSUdORURfU0hPUlTvvIzlpoLmnpzmmK90cnVl5YiZ5bCG5YC85b2S5LiA5YyW5Li6WzAsIDFdXG4gICAgICAgICAgICBGb3IgdHlwZXMgZ2wuRkxPQVQgYW5kIGdsLkhBTEZfRkxPQVQsIHRoaXMgcGFyYW1ldGVyIGhhcyBubyBlZmZlY3QuXG4gICAgICAgICAgICDlr7nkuo7nsbvlnotnbC5GTE9BVOWSjGdsLkhBTEZfRkxPQVTvvIzmraTlj4LmlbDml6DmlYhcbiAgICAgKiBAcGFyYW0gc3RyaWRlIFxuICAgICAgICDkuIDkuKpHTHNpemVp77yM5Lul5a2X6IqC5Li65Y2V5L2N5oyH5a6a6L+e57ut6aG254K55bGe5oCn5byA5aeL5LmL6Ze055qE5YGP56e76YePKOWNs+aVsOe7hOS4reS4gOihjOmVv+W6pinjgIJcbiAgICAgICAg5LiN6IO95aSn5LqOMjU144CC5aaC5p6cc3RyaWRl5Li6MO+8jOWImeWBh+WumuivpeWxnuaAp+aYr+e0p+WvhuaJk+WMheeahO+8jOWNs+S4jeS6pOmUmeWxnuaAp++8jFxuICAgICAgICDmr4/kuKrlsZ7mgKflnKjkuIDkuKrljZXni6znmoTlnZfkuK3vvIzkuIvkuIDkuKrpobbngrnnmoTlsZ7mgKfntKfot5/lvZPliY3pobbngrnkuYvlkI5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFxuICAgICAgICAgR0xpbnRwdHLmjIflrprpobbngrnlsZ7mgKfmlbDnu4TkuK3nrKzkuIDpg6jliIbnmoTlrZfoioLlgY/np7vph4/jgILlv4XpobvmmK/nsbvlnovnmoTlrZfoioLplb/luqbnmoTlgI3mlbBcblxuICAgICAgICBAZXJyb3JcbiAgICAgICAgQSBnbC5JTlZBTElEX1ZBTFVFIGVycm9yIGlzIHRocm93biBpZiBvZmZzZXQgaXMgbmVnYXRpdmUuXG4gICAgICAgIOWmguaenOWBj+enu+mHj+S4uui0n++8jOWImeaKm+WHumdsLklOVkFMSURfVkFMVUXplJnor6/jgIJcbiAgICAgICAgQSBnbC5JTlZBTElEX09QRVJBVElPTiBlcnJvciBpcyB0aHJvd24gaWYgc3RyaWRlIGFuZCBvZmZzZXQgYXJlIG5vdCBtdWx0aXBsZXMgb2YgdGhlIHNpemUgb2YgdGhlIGRhdGEgdHlwZS5cbiAgICAgICAg5aaC5p6cc3RyaWRl5ZKMb2Zmc2V05LiN5piv5pWw5o2u57G75Z6L5aSn5bCP55qE5YCN5pWw77yM5YiZ5oqb5Ye6Z2wuSU5WQUxJRF9PUEVSQVRJT07plJnor6/jgIJcbiAgICAgICAgQSBnbC5JTlZBTElEX09QRVJBVElPTiBlcnJvciBpcyB0aHJvd24gaWYgbm8gV2ViR0xCdWZmZXIgaXMgYm91bmQgdG8gdGhlIEFSUkFZX0JVRkZFUiB0YXJnZXQuXG4gICAgICAgIOWmguaenOayoeacieWwhldlYkdMQnVmZmVy57uR5a6a5YiwQVJSQVlfQlVGRkVS55uu5qCH77yM5YiZ5oqb5Ye6Z2wuSU5WQUxJRF9PUEVSQVRJT07plJnor6/jgIJcbiAgICAgICAgV2hlbiB1c2luZyBhIFdlYkdMIDIgY29udGV4dFxuICAgICAgICBhIGdsLklOVkFMSURfT1BFUkFUSU9OIGVycm9yIGlzIHRocm93biBpZiB0aGlzIHZlcnRleCBhdHRyaWJ1dGUgaXMgZGVmaW5lZCBhcyBhIGludGVnZXIgaW4gdGhlIHZlcnRleCBzaGFkZXIgKGUuZy4gdXZlYzQgb3IgaXZlYzQsIGluc3RlYWQgb2YgdmVjNCkuXG4gICAgICovXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHZlcnRleEF0dHJpYlBvaW50ZXIoaW5kZXgsIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSwgb2Zmc2V0KSB7XG4gICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoaW5kZXgsIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSwgb2Zmc2V0KVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiDorr7nva7nvJPlhrLljLrlpKflsI9cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IFxuICAgICAqIEBwYXJhbSBzaXplIFxuICAgICAqIEdMc2l6ZWlwdHIg6K6+5a6aQnVmZmVy5a+56LGh55qE5pWw5o2u5a2Y5YKo5Yy65aSn5bCPXG4gICAgICogQHBhcmFtIHVzYWdlIFxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBidWZmZXJEYXRhTGVuZ3RoKHRhcmdldCwgc2l6ZTogR0xzaXplaXB0ciwgdXNhZ2UpIHtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YSh0YXJnZXQsIHNpemUsIHVzYWdlKVxuICAgIH1cbiAgICBleHBvcnQgZnVuY3Rpb24gYnVmZmVyRGF0YSh0YXJnZXQsIHNyY0RhdGE6IEFycmF5QnVmZmVyLCB1c2FnZSkge1xuICAgICAgICBnbC5idWZmZXJEYXRhKHRhcmdldCwgc3JjRGF0YSwgdXNhZ2UpXG4gICAgfVxuICAgIGV4cG9ydCBmdW5jdGlvbiBidWZmZXJTdWJEYXRhKHRhcmdldCwgb2Zmc2V0LHNyY0RhdGE6QXJyYXlCdWZmZXJWaWV3KVxuICAgIHtcbiAgICAgICAgZ2wuYnVmZmVyU3ViRGF0YSh0YXJnZXQsIG9mZnNldCxzcmNEYXRhKVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IFxuICAgICAqIEdMZW51bSDmjIflrppCdWZmZXLnu5HlrprngrnvvIjnm67moIfvvInjgILlj6/lj5bku6XkuIvlgLzvvJpcbiAgICAgICAgZ2wuQVJSQVlfQlVGRkVSOiDljIXlkKvpobbngrnlsZ7mgKfnmoRCdWZmZXLvvIzlpoLpobbngrnlnZDmoIfvvIznurnnkIblnZDmoIfmlbDmja7miJbpobbngrnpopzoibLmlbDmja7jgIJcbiAgICAgICAgZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVI6IOeUqOS6juWFg+e0oOe0ouW8leeahEJ1ZmZlcuOAglxuICAgICAgICDlvZPkvb/nlKggV2ViR0wgMiBjb250ZXh0IOaXtu+8jOWPr+S7peS9v+eUqOS7peS4i+WAvO+8mlxuICAgICAgICBnbC5DT1BZX1JFQURfQlVGRkVSOiDku47kuIDkuKpCdWZmZXLlr7nosaHlpI3liLbliLDlj6bkuIDkuKpCdWZmZXLlr7nosaHjgIJcbiAgICAgICAgZ2wuQ09QWV9XUklURV9CVUZGRVI6IOS7juS4gOS4qkJ1ZmZlcuWvueixoeWkjeWItuWIsOWPpuS4gOS4qkJ1ZmZlcuWvueixoeOAglxuICAgICAgICBnbC5UUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSOiDnlKjkuo7ovazmjaLlj43ppojmk43kvZznmoRCdWZmZXLjgIJcbiAgICAgICAgZ2wuVU5JRk9STV9CVUZGRVI6IOeUqOS6juWtmOWCqOe7n+S4gOWdl+eahEJ1ZmZlcuOAglxuICAgICAgICBnbC5QSVhFTF9QQUNLX0JVRkZFUjog55So5LqO5YOP57Sg6L2s5o2i5pON5L2c55qEQnVmZmVy44CCXG4gICAgICAgIGdsLlBJWEVMX1VOUEFDS19CVUZGRVI6IOeUqOS6juWDj+e0oOi9rOaNouaTjeS9nOeahEJ1ZmZlclxuICAgICAqIEBwYXJhbSBzcmNEYXRhIFxuICAgICAgICDkuIDkuKpBcnJheUJ1ZmZlcu+8jFNoYXJlZEFycmF5QnVmZmVyIOaIluiAhSBBcnJheUJ1ZmZlclZpZXcg57G75Z6L55qE5pWw57uE5a+56LGh77yM5bCG6KKr5aSN5Yi25YiwQnVmZmVy55qE5pWw5o2u5a2Y5YKo5Yy644CCXG4gICAgICAgICDlpoLmnpzkuLpudWxs77yM5pWw5o2u5a2Y5YKo5Yy65LuN5Lya6KKr5Yib5bu677yM5L2G5piv5LiN5Lya6L+b6KGM5Yid5aeL5YyW5ZKM5a6a5LmJXG4gICAgICogQHBhcmFtIHVzYWdlIFxuICAgICAgICAgR0xlbnVtIOaMh+WumuaVsOaNruWtmOWCqOWMuueahOS9v+eUqOaWueazleOAguWPr+WPluS7peS4i+WAvO+8mlxuICAgICAgICAgICAgZ2wuU1RBVElDX0RSQVc6IOe8k+WGsuWMuueahOWGheWuueWPr+iDvee7j+W4uOS9v+eUqO+8jOiAjOS4jeS8mue7j+W4uOabtOaUueOAguWGheWuueiiq+WGmeWFpee8k+WGsuWMuu+8jOS9huS4jeiiq+ivu+WPluOAglxuICAgICAgICAgICAgZ2wuRFlOQU1JQ19EUkFXOiDnvJPlhrLljLrnmoTlhoXlrrnlj6/og73nu4/luLjooqvkvb/nlKjvvIzlubbkuJTnu4/luLjmm7TmlLnjgILlhoXlrrnooqvlhpnlhaXnvJPlhrLljLrvvIzkvYbkuI3ooqvor7vlj5bjgIJcbiAgICAgICAgICAgIGdsLlNUUkVBTV9EUkFXOiDnvJPlhrLljLrnmoTlhoXlrrnlj6/og73kuI3kvJrnu4/luLjkvb/nlKjjgILlhoXlrrnooqvlhpnlhaXnvJPlhrLljLrvvIzkvYbkuI3ooqvor7vlj5bjgIJcbiAgICAgICAgICAgIOW9k+S9v+eUqCBXZWJHTCAyIGNvbnRleHQg5pe277yM5Y+v5Lul5L2/55So5Lul5LiL5YC877yaXG4gICAgICAgICAgICBnbC5TVEFUSUNfUkVBRDog57yT5Yay5Yy655qE5YaF5a655Y+v6IO957uP5bi45L2/55So77yM6ICM5LiN5Lya57uP5bi45pu05pS544CC5YaF5a655LuO57yT5Yay5Yy66K+75Y+W77yM5L2G5LiN5YaZ5YWl44CCXG4gICAgICAgICAgICBnbC5EWU5BTUlDX1JFQUQ6IOe8k+WGsuWMuueahOWGheWuueWPr+iDvee7j+W4uOS9v+eUqO+8jOW5tuS4lOe7j+W4uOabtOaUueOAguWGheWuueS7jue8k+WGsuWMuuivu+WPlu+8jOS9huS4jeWGmeWFpeOAglxuICAgICAgICAgICAgZ2wuU1RSRUFNX1JFQUQ6IOe8k+WGsuWMuueahOWGheWuueWPr+iDveS4jeS8mue7j+W4uOS9v+eUqOOAguWGheWuueS7jue8k+WGsuWMuuivu+WPlu+8jOS9huS4jeWGmeWFpeOAglxuICAgICAgICAgICAgZ2wuU1RBVElDX0NPUFk6IOe8k+WGsuWMuueahOWGheWuueWPr+iDvee7j+W4uOS9v+eUqO+8jOiAjOS4jeS8mue7j+W4uOabtOaUueOAgueUqOaIt+S4jeS8muS7jue8k+WGsuWMuuivu+WPluWGheWuue+8jOS5n+S4jeWGmeWFpeOAglxuICAgICAgICAgICAgZ2wuRFlOQU1JQ19DT1BZOiDnvJPlhrLljLrnmoTlhoXlrrnlj6/og73nu4/luLjkvb/nlKjvvIzlubbkuJTnu4/luLjmm7TmlLnjgILnlKjmiLfkuI3kvJrku47nvJPlhrLljLror7vlj5blhoXlrrnvvIzkuZ/kuI3lhpnlhaXjgIJcbiAgICAgICAgICAgIGdsLlNUUkVBTV9DT1BZOiDnvJPlhrLljLrnmoTlhoXlrrnlj6/og73kuI3kvJrnu4/luLjkvb/nlKjjgILnlKjmiLfkuI3kvJrku47nvJPlhrLljLror7vlj5blhoXlrrnvvIzkuZ/kuI3lhpnlhaVcbiAgICAgKiBAcGFyYW0gc3JjT2Zmc2V0IFxuICAgICAgICAgICBHTHVpbnQg5oyH5a6a6K+75Y+W57yT5Yay5pe255qE5Yid5aeL5YWD57Sg57Si5byV5YGP56e76YePXG4gICAgICogQHBhcmFtIGxlbmd0aCBcbiAgICAgICAgICAgIEdMdWludCDpu5jorqTkuLowXG4gICAgICAgIEBlcnJvclxuICAgICAgICAgICAg5aaC5p6c5peg5rOV5Yib5bu6c2l6ZeaMh+WumuWkp+Wwj+eahOaVsOaNruWtmOWCqOWMuu+8jOWImeS8muaKm+WHumdsLk9VVF9PRl9NRU1PUlnlvILluLjjgIJcbiAgICAgICAgICAgIOWmguaenHNpemXmmK/otJ/lgLzvvIzliJnkvJrmipvlh7pnbC5JTlZBTElEX1ZBTFVF5byC5bi444CCXG4gICAgICAgICAgICDlpoLmnpx0YXJnZXTmiJZ1c2FnZeS4jeWxnuS6juaemuS4vuWAvOS5i+WIl++8jOWImeS8muaKm+WHumdsLklOVkFMSURfRU5VTeW8guW4uFxuICAgICAqL1xuICAgIGV4cG9ydCBmdW5jdGlvbiBidWZmZXJEYXRhRm9yV2ViZ2wyKHRhcmdldCwgc3JjRGF0YTogQXJyYXlCdWZmZXJWaWV3LCB1c2FnZSwgc3JjT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgICAgLy9nbC5idWZmZXJEYXRhKHRhcmdldCwgc3JjRGF0YSwgdXNhZ2UsIHNyY09mZnNldCwgbGVuZ3RoKVxuICAgIH1cblxufSIsImltcG9ydCB7IGdsTWF0cml4IH0gZnJvbSBcIi4uLy4uL01hdHJpeFwiO1xyXG5pbXBvcnQgeyBHX1NoYWRlckZhY3RvcnkgfSBmcm9tIFwiLi9TaGFkZXJcIjtcclxuXHJcbi8qKlxyXG4gKiDnu5jliLbkuK3lv4NcclxuICovXHJcbmV4cG9ydCBuYW1lc3BhY2Ugc3lQcmltaXRpdmVzIHtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gYXBwbHlGdW5jVG9WM0FycmF5KGFycmF5LCBtYXRyaXgsIGZuKSB7XHJcbiAgICAgICAgY29uc3QgbGVuID0gYXJyYXkubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHRtcCA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XHJcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGxlbjsgaWkgKz0gMykge1xyXG4gICAgICAgICAgICBmbihtYXRyaXgsIFthcnJheVtpaV0sIGFycmF5W2lpICsgMV0sIGFycmF5W2lpICsgMl1dLCB0bXApO1xyXG4gICAgICAgICAgICBhcnJheVtpaV0gPSB0bXBbMF07XHJcbiAgICAgICAgICAgIGFycmF5W2lpICsgMV0gPSB0bXBbMV07XHJcbiAgICAgICAgICAgIGFycmF5W2lpICsgMl0gPSB0bXBbMl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybU5vcm1hbChtaSwgdiwgZHN0KSB7XHJcbiAgICAgICAgZHN0ID0gZHN0IHx8IG5ldyBGbG9hdDMyQXJyYXkoMyk7XHJcbiAgICAgICAgY29uc3QgdjAgPSB2WzBdO1xyXG4gICAgICAgIGNvbnN0IHYxID0gdlsxXTtcclxuICAgICAgICBjb25zdCB2MiA9IHZbMl07XHJcblxyXG4gICAgICAgIGRzdFswXSA9IHYwICogbWlbMCAqIDQgKyAwXSArIHYxICogbWlbMCAqIDQgKyAxXSArIHYyICogbWlbMCAqIDQgKyAyXTtcclxuICAgICAgICBkc3RbMV0gPSB2MCAqIG1pWzEgKiA0ICsgMF0gKyB2MSAqIG1pWzEgKiA0ICsgMV0gKyB2MiAqIG1pWzEgKiA0ICsgMl07XHJcbiAgICAgICAgZHN0WzJdID0gdjAgKiBtaVsyICogNCArIDBdICsgdjEgKiBtaVsyICogNCArIDFdICsgdjIgKiBtaVsyICogNCArIDJdO1xyXG5cclxuICAgICAgICByZXR1cm4gZHN0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVvcmllbnRzIGRpcmVjdGlvbnMgYnkgdGhlIGdpdmVuIG1hdHJpeC4uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfFR5cGVkQXJyYXl9IGFycmF5IFRoZSBhcnJheS4gQXNzdW1lcyB2YWx1ZSBmbG9hdHMgcGVyIGVsZW1lbnQuXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4IEEgbWF0cml4IHRvIG11bHRpcGx5IGJ5LlxyXG4gICAgICogQHJldHVybiB7bnVtYmVyW118VHlwZWRBcnJheX0gdGhlIHNhbWUgYXJyYXkgdGhhdCB3YXMgcGFzc2VkIGluXHJcbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOnByaW1pdGl2ZXNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVvcmllbnREaXJlY3Rpb25zKGFycmF5LCBtYXRyaXgpIHtcclxuICAgICAgICBhcHBseUZ1bmNUb1YzQXJyYXkoYXJyYXksIG1hdHJpeCwgZ2xNYXRyaXgubWF0NC50cmFuc2Zvcm1EaXJlY3Rpb24pO1xyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlb3JpZW50cyBub3JtYWxzIGJ5IHRoZSBpbnZlcnNlLXRyYW5zcG9zZSBvZiB0aGUgZ2l2ZW5cclxuICAgICAqIG1hdHJpeC4uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfFR5cGVkQXJyYXl9IGFycmF5IFRoZSBhcnJheS4gQXNzdW1lcyB2YWx1ZSBmbG9hdHMgcGVyIGVsZW1lbnQuXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4IEEgbWF0cml4IHRvIG11bHRpcGx5IGJ5LlxyXG4gICAgICogQHJldHVybiB7bnVtYmVyW118VHlwZWRBcnJheX0gdGhlIHNhbWUgYXJyYXkgdGhhdCB3YXMgcGFzc2VkIGluXHJcbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOnByaW1pdGl2ZXNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVvcmllbnROb3JtYWxzKGFycmF5LCBtYXRyaXgpIHtcclxuICAgICAgICBsZXQgaW52ZXJ0TSA9IGdsTWF0cml4Lm1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgZ2xNYXRyaXgubWF0NC5pbnZlcnQoaW52ZXJ0TSxtYXRyaXgpO1xyXG4gICAgICAgIGFwcGx5RnVuY1RvVjNBcnJheShhcnJheSwgaW52ZXJ0TSwgdHJhbnNmb3JtTm9ybWFsKTtcclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW9yaWVudHMgcG9zaXRpb25zIGJ5IHRoZSBnaXZlbiBtYXRyaXguIEluIG90aGVyIHdvcmRzLCBpdFxyXG4gICAgICogbXVsdGlwbGllcyBlYWNoIHZlcnRleCBieSB0aGUgZ2l2ZW4gbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJbXXxUeXBlZEFycmF5fSBhcnJheSBUaGUgYXJyYXkuIEFzc3VtZXMgdmFsdWUgZmxvYXRzIHBlciBlbGVtZW50LlxyXG4gICAgICogQHBhcmFtIHtNYXRyaXh9IG1hdHJpeCBBIG1hdHJpeCB0byBtdWx0aXBseSBieS5cclxuICAgICAqIEByZXR1cm4ge251bWJlcltdfFR5cGVkQXJyYXl9IHRoZSBzYW1lIGFycmF5IHRoYXQgd2FzIHBhc3NlZCBpblxyXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpwcmltaXRpdmVzXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJlb3JpZW50UG9zaXRpb25zKGFycmF5LCBtYXRyaXgpIHtcclxuICAgICAgICBhcHBseUZ1bmNUb1YzQXJyYXkoYXJyYXksIG1hdHJpeCwgZ2xNYXRyaXgubWF0NC50cmFuc2Zvcm1Qb2ludCk7XHJcbiAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVvcmllbnRzIGFycmF5cyBieSB0aGUgZ2l2ZW4gbWF0cml4LiBBc3N1bWVzIGFycmF5cyBoYXZlXHJcbiAgICAgKiBuYW1lcyB0aGF0IGNvbnRhaW5zICdwb3MnIGNvdWxkIGJlIHJlb3JpZW50ZWQgYXMgcG9zaXRpb25zLFxyXG4gICAgICogJ2Jpbm9ybScgb3IgJ3RhbicgYXMgZGlyZWN0aW9ucywgYW5kICdub3JtJyBhcyBub3JtYWxzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIChudW1iZXJbXXxUeXBlZEFycmF5KT59IGFycmF5cyBUaGUgdmVydGljZXMgdG8gcmVvcmllbnRcclxuICAgICAqIEBwYXJhbSB7TWF0cml4fSBtYXRyaXggbWF0cml4IHRvIHJlb3JpZW50IGJ5LlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0LjxzdHJpbmcsIChudW1iZXJbXXxUeXBlZEFycmF5KT59IHNhbWUgYXJyYXlzIHRoYXQgd2VyZSBwYXNzZWQgaW4uXHJcbiAgICAgKiBAbWVtYmVyT2YgbW9kdWxlOnByaW1pdGl2ZXNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVvcmllbnRWZXJ0aWNlcyhhcnJheXMsIG1hdHJpeCkge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGFycmF5cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgICAgICBjb25zdCBhcnJheSA9IGFycmF5c1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZigncG9zJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVvcmllbnRQb3NpdGlvbnMoYXJyYXksIG1hdHJpeCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmFtZS5pbmRleE9mKCd0YW4nKSA+PSAwIHx8IG5hbWUuaW5kZXhPZignYmlub3JtJykgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVvcmllbnREaXJlY3Rpb25zKGFycmF5LCBtYXRyaXgpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5hbWUuaW5kZXhPZignbm9ybScpID49IDApIHtcclxuICAgICAgICAgICAgICAgIHJlb3JpZW50Tm9ybWFscyhhcnJheSwgbWF0cml4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBhcnJheXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjcmVhdGVzIGEgcmFuZG9tIGludGVnZXIgYmV0d2VlbiAwIGFuZCByYW5nZSAtIDEgaW5jbHVzaXZlLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhbmdlXHJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IHJhbmRvbSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIHJhbmdlIC0gMSBpbmNsdXNpdmUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHJhbmRJbnQocmFuZ2UpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIHJhbmdlIHwgMDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIFhaIHBsYW5lIHZlcnRpY2VzLlxyXG4gICAgICogVGhlIGNyZWF0ZWQgcGxhbmUgaGFzIHBvc2l0aW9uLCBub3JtYWwgYW5kIHV2IHN0cmVhbXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aF0gV2lkdGggb2YgdGhlIHBsYW5lLiBEZWZhdWx0ID0gMVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aF0gRGVwdGggb2YgdGhlIHBsYW5lLiBEZWZhdWx0ID0gMVxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdWJkaXZpc2lvbnNXaWR0aF0gTnVtYmVyIG9mIHN0ZXBzIGFjcm9zcyB0aGUgcGxhbmUuIERlZmF1bHQgPSAxXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N1YmRpdmlzaW9uc0RlcHRoXSBOdW1iZXIgb2Ygc3RlcHMgZG93biB0aGUgcGxhbmUuIERlZmF1bHQgPSAxXHJcbiAgICAgKiBAcGFyYW0ge01hdHJpeDR9IFttYXRyaXhdIEEgbWF0cml4IGJ5IHdoaWNoIHRvIG11bHRpcGx5IGFsbCB0aGUgdmVydGljZXMuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZywgVHlwZWRBcnJheT59IFRoZVxyXG4gICAgICogICAgICAgICBjcmVhdGVkIHBsYW5lIHZlcnRpY2VzLlxyXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpwcmltaXRpdmVzXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQbGFuZVZlcnRpY2VzKHdpZHRoLGRlcHRoLHN1YmRpdmlzaW9uc1dpZHRoLHN1YmRpdmlzaW9uc0RlcHRoLG1hdHJpeCkge1xyXG4gICAgICAgIGlmKCFtYXRyaXgpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtYXRyaXggPSBnbE1hdHJpeC5tYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBnbE1hdHJpeC5tYXQ0LmlkZW50aXR5KG1hdHJpeCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdpZHRoID0gd2lkdGggfHwgMTtcclxuICAgICAgICBkZXB0aCA9IGRlcHRoIHx8IDE7XHJcbiAgICAgICAgc3ViZGl2aXNpb25zV2lkdGggPSBzdWJkaXZpc2lvbnNXaWR0aCB8fCAxO1xyXG4gICAgICAgIHN1YmRpdmlzaW9uc0RlcHRoID0gc3ViZGl2aXNpb25zRGVwdGggfHwgMTtcclxuXHJcbiAgICAgICAgY29uc3QgbnVtVmVydGljZXMgPSAoc3ViZGl2aXNpb25zV2lkdGggKyAxKSAqIChzdWJkaXZpc2lvbnNEZXB0aCArIDEpO1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVBdWdtZW50ZWRUeXBlZEFycmF5KDMsIG51bVZlcnRpY2VzKTtcclxuICAgICAgICBjb25zdCBub3JtYWxzID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUF1Z21lbnRlZFR5cGVkQXJyYXkoMywgbnVtVmVydGljZXMpO1xyXG4gICAgICAgIGNvbnN0IHRleGNvb3JkcyA9IEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVBdWdtZW50ZWRUeXBlZEFycmF5KDIsIG51bVZlcnRpY2VzKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeiA9IDA7IHogPD0gc3ViZGl2aXNpb25zRGVwdGg7IHorKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8PSBzdWJkaXZpc2lvbnNXaWR0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1ID0geCAvIHN1YmRpdmlzaW9uc1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IHogLyBzdWJkaXZpc2lvbnNEZXB0aDtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoICogdSAtIHdpZHRoICogMC41LFxyXG4gICAgICAgICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVwdGggKiB2IC0gZGVwdGggKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFscy5wdXNoKDAsIDEsIDApO1xyXG4gICAgICAgICAgICAgICAgdGV4Y29vcmRzLnB1c2godSwgdik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG51bVZlcnRzQWNyb3NzID0gc3ViZGl2aXNpb25zV2lkdGggKyAxO1xyXG4gICAgICAgIGNvbnN0IGluZGljZXMgPSBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQXVnbWVudGVkVHlwZWRBcnJheShcclxuICAgICAgICAgICAgMywgc3ViZGl2aXNpb25zV2lkdGggKiBzdWJkaXZpc2lvbnNEZXB0aCAqIDIsIFVpbnQxNkFycmF5KTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeiA9IDA7IHogPCBzdWJkaXZpc2lvbnNEZXB0aDsgeisrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgc3ViZGl2aXNpb25zV2lkdGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSB0cmlhbmdsZSAxIG9mIHF1YWQuXHJcbiAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgKHogKyAwKSAqIG51bVZlcnRzQWNyb3NzICsgeCxcclxuICAgICAgICAgICAgICAgICAgICAoeiArIDEpICogbnVtVmVydHNBY3Jvc3MgKyB4LFxyXG4gICAgICAgICAgICAgICAgICAgICh6ICsgMCkgKiBudW1WZXJ0c0Fjcm9zcyArIHggKyAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHRyaWFuZ2xlIDIgb2YgcXVhZC5cclxuICAgICAgICAgICAgICAgIGluZGljZXMucHVzaChcclxuICAgICAgICAgICAgICAgICAgICAoeiArIDEpICogbnVtVmVydHNBY3Jvc3MgKyB4LFxyXG4gICAgICAgICAgICAgICAgICAgICh6ICsgMSkgKiBudW1WZXJ0c0Fjcm9zcyArIHggKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgICh6ICsgMCkgKiBudW1WZXJ0c0Fjcm9zcyArIHggKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYXJyYXlzID0gcmVvcmllbnRWZXJ0aWNlcyh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbnMsXHJcbiAgICAgICAgICAgIG5vcm1hbDogbm9ybWFscyxcclxuICAgICAgICAgICAgdGV4Y29vcmQ6IHRleGNvb3JkcyxcclxuICAgICAgICAgICAgaW5kaWNlczogaW5kaWNlcyxcclxuICAgICAgICB9LCBtYXRyaXgpO1xyXG4gICAgICAgIHJldHVybiBhcnJheXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIHNwaGVyZSB2ZXJ0aWNlcy5cclxuICAgICAqIFRoZSBjcmVhdGVkIHNwaGVyZSBoYXMgcG9zaXRpb24sIG5vcm1hbCBhbmQgdXYgc3RyZWFtcy5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgcmFkaXVzIG9mIHRoZSBzcGhlcmUuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3ViZGl2aXNpb25zQXhpcyBudW1iZXIgb2Ygc3RlcHMgYXJvdW5kIHRoZSBzcGhlcmUuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3ViZGl2aXNpb25zSGVpZ2h0IG51bWJlciBvZiB2ZXJ0aWNhbGx5IG9uIHRoZSBzcGhlcmUuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdF9zdGFydExhdGl0dWRlSW5SYWRpYW5zXSB3aGVyZSB0byBzdGFydCB0aGVcclxuICAgICAqICAgICB0b3Agb2YgdGhlIHNwaGVyZS4gRGVmYXVsdCA9IDAuXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdF9lbmRMYXRpdHVkZUluUmFkaWFuc10gV2hlcmUgdG8gZW5kIHRoZVxyXG4gICAgICogICAgIGJvdHRvbSBvZiB0aGUgc3BoZXJlLiBEZWZhdWx0ID0gTWF0aC5QSS5cclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0X3N0YXJ0TG9uZ2l0dWRlSW5SYWRpYW5zXSB3aGVyZSB0byBzdGFydFxyXG4gICAgICogICAgIHdyYXBwaW5nIHRoZSBzcGhlcmUuIERlZmF1bHQgPSAwLlxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRfZW5kTG9uZ2l0dWRlSW5SYWRpYW5zXSB3aGVyZSB0byBlbmRcclxuICAgICAqICAgICB3cmFwcGluZyB0aGUgc3BoZXJlLiBEZWZhdWx0ID0gMiAqIE1hdGguUEkuXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZywgVHlwZWRBcnJheT59IFRoZVxyXG4gICAgICogICAgICAgICBjcmVhdGVkIHBsYW5lIHZlcnRpY2VzLlxyXG4gICAgICogQG1lbWJlck9mIG1vZHVsZTpwcmltaXRpdmVzXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTcGhlcmVWZXJ0aWNlcyhyYWRpdXMsc3ViZGl2aXNpb25zQXhpcyxzdWJkaXZpc2lvbnNIZWlnaHQsb3B0X3N0YXJ0TGF0aXR1ZGVJblJhZGlhbnM/LG9wdF9lbmRMYXRpdHVkZUluUmFkaWFucz8sb3B0X3N0YXJ0TG9uZ2l0dWRlSW5SYWRpYW5zPyxvcHRfZW5kTG9uZ2l0dWRlSW5SYWRpYW5zPykge1xyXG4gICAgICAgIGlmIChzdWJkaXZpc2lvbnNBeGlzIDw9IDAgfHwgc3ViZGl2aXNpb25zSGVpZ2h0IDw9IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ3N1YmRpdmlzaW9uQXhpcyBhbmQgc3ViZGl2aXNpb25IZWlnaHQgbXVzdCBiZSA+IDAnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3B0X3N0YXJ0TGF0aXR1ZGVJblJhZGlhbnMgPSBvcHRfc3RhcnRMYXRpdHVkZUluUmFkaWFucyB8fCAwO1xyXG4gICAgICAgIG9wdF9lbmRMYXRpdHVkZUluUmFkaWFucyA9IG9wdF9lbmRMYXRpdHVkZUluUmFkaWFucyB8fCBNYXRoLlBJO1xyXG4gICAgICAgIG9wdF9zdGFydExvbmdpdHVkZUluUmFkaWFucyA9IG9wdF9zdGFydExvbmdpdHVkZUluUmFkaWFucyB8fCAwO1xyXG4gICAgICAgIG9wdF9lbmRMb25naXR1ZGVJblJhZGlhbnMgPSBvcHRfZW5kTG9uZ2l0dWRlSW5SYWRpYW5zIHx8IChNYXRoLlBJICogMik7XHJcbiAgICAgICAgY29uc3QgbGF0UmFuZ2UgPSBvcHRfZW5kTGF0aXR1ZGVJblJhZGlhbnMgLSBvcHRfc3RhcnRMYXRpdHVkZUluUmFkaWFucztcclxuICAgICAgICBjb25zdCBsb25nUmFuZ2UgPSBvcHRfZW5kTG9uZ2l0dWRlSW5SYWRpYW5zIC0gb3B0X3N0YXJ0TG9uZ2l0dWRlSW5SYWRpYW5zO1xyXG4gICAgICAgIC8vIFdlIGFyZSBnb2luZyB0byBnZW5lcmF0ZSBvdXIgc3BoZXJlIGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGl0c1xyXG4gICAgICAgIC8vIHNwaGVyaWNhbCBjb29yZGluYXRlcyBhbmQgZ2VuZXJhdGluZyAyIHRyaWFuZ2xlcyBmb3IgZWFjaCBxdWFkIG9uIGFcclxuICAgICAgICAvLyByaW5nIG9mIHRoZSBzcGhlcmUuXHJcbiAgICAgICAgY29uc3QgbnVtVmVydGljZXMgPSAoc3ViZGl2aXNpb25zQXhpcyArIDEpICogKHN1YmRpdmlzaW9uc0hlaWdodCArIDEpO1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVBdWdtZW50ZWRUeXBlZEFycmF5KDMsIG51bVZlcnRpY2VzKTtcclxuICAgICAgICBjb25zdCBub3JtYWxzID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUF1Z21lbnRlZFR5cGVkQXJyYXkoMywgbnVtVmVydGljZXMpO1xyXG4gICAgICAgIGNvbnN0IHRleENvb3JkcyA9IEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVBdWdtZW50ZWRUeXBlZEFycmF5KDIsIG51bVZlcnRpY2VzKTtcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUgdGhlIGluZGl2aWR1YWwgdmVydGljZXMgaW4gb3VyIHZlcnRleCBidWZmZXIuXHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPD0gc3ViZGl2aXNpb25zSGVpZ2h0OyB5KyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPD0gc3ViZGl2aXNpb25zQXhpczsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIHZlcnRleCBiYXNlZCBvbiBpdHMgc3BoZXJpY2FsIGNvb3JkaW5hdGVzXHJcbiAgICAgICAgICAgICAgICBjb25zdCB1ID0geCAvIHN1YmRpdmlzaW9uc0F4aXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0geSAvIHN1YmRpdmlzaW9uc0hlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRoZXRhID0gbG9uZ1JhbmdlICogdTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBoaSA9IGxhdFJhbmdlICogdjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNpblRoZXRhID0gTWF0aC5zaW4odGhldGEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29zVGhldGEgPSBNYXRoLmNvcyh0aGV0YSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaW5QaGkgPSBNYXRoLnNpbihwaGkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY29zUGhpID0gTWF0aC5jb3MocGhpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHV4ID0gY29zVGhldGEgKiBzaW5QaGk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1eSA9IGNvc1BoaTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHV6ID0gc2luVGhldGEgKiBzaW5QaGk7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChyYWRpdXMgKiB1eCwgcmFkaXVzICogdXksIHJhZGl1cyAqIHV6KTtcclxuICAgICAgICAgICAgICAgIG5vcm1hbHMucHVzaCh1eCwgdXksIHV6KTtcclxuICAgICAgICAgICAgICAgIHRleENvb3Jkcy5wdXNoKDEgLSB1LCB2KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBudW1WZXJ0c0Fyb3VuZCA9IHN1YmRpdmlzaW9uc0F4aXMgKyAxO1xyXG4gICAgICAgIGNvbnN0IGluZGljZXMgPSBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQXVnbWVudGVkVHlwZWRBcnJheSgzLCBzdWJkaXZpc2lvbnNBeGlzICogc3ViZGl2aXNpb25zSGVpZ2h0ICogMiwgVWludDE2QXJyYXkpO1xyXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgc3ViZGl2aXNpb25zQXhpczsgeCsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgc3ViZGl2aXNpb25zSGVpZ2h0OyB5KyspIHtcclxuICAgICAgICAgICAgICAgIC8vIE1ha2UgdHJpYW5nbGUgMSBvZiBxdWFkLlxyXG4gICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgICh5ICsgMCkgKiBudW1WZXJ0c0Fyb3VuZCArIHgsXHJcbiAgICAgICAgICAgICAgICAgICAgKHkgKyAwKSAqIG51bVZlcnRzQXJvdW5kICsgeCArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgKHkgKyAxKSAqIG51bVZlcnRzQXJvdW5kICsgeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSB0cmlhbmdsZSAyIG9mIHF1YWQuXHJcbiAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgKHkgKyAxKSAqIG51bVZlcnRzQXJvdW5kICsgeCxcclxuICAgICAgICAgICAgICAgICAgICAoeSArIDApICogbnVtVmVydHNBcm91bmQgKyB4ICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAoeSArIDEpICogbnVtVmVydHNBcm91bmQgKyB4ICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcG9zaXRpb246IHBvc2l0aW9ucyxcclxuICAgICAgICAgICAgbm9ybWFsOiBub3JtYWxzLFxyXG4gICAgICAgICAgICB0ZXhjb29yZDogdGV4Q29vcmRzLFxyXG4gICAgICAgICAgICBpbmRpY2VzOiBpbmRpY2VzLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEFycmF5IG9mIHRoZSBpbmRpY2VzIG9mIGNvcm5lcnMgb2YgZWFjaCBmYWNlIG9mIGEgY3ViZS5cclxuICAgICogQHR5cGUge0FycmF5LjxudW1iZXJbXT59XHJcbiAgICAqL1xyXG4gICAgY29uc3QgQ1VCRV9GQUNFX0lORElDRVMgPSBbXHJcbiAgICAgICAgWzMsIDcsIDUsIDFdLCAvLyByaWdodFxyXG4gICAgICAgIFs2LCAyLCAwLCA0XSwgLy8gbGVmdFxyXG4gICAgICAgIFs2LCA3LCAzLCAyXSwgLy8gPz9cclxuICAgICAgICBbMCwgMSwgNSwgNF0sIC8vID8/XHJcbiAgICAgICAgWzcsIDYsIDQsIDVdLCAvLyBmcm9udFxyXG4gICAgICAgIFsyLCAzLCAxLCAwXSwgLy8gYmFja1xyXG4gICAgXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdGhlIHZlcnRpY2VzIGFuZCBpbmRpY2VzIGZvciBhIGN1YmUuIFRoZVxyXG4gICAgICogY3ViZSB3aWxsIGJlIGNyZWF0ZWQgYXJvdW5kIHRoZSBvcmlnaW4uICgtc2l6ZSAvIDIsIHNpemUgLyAyKVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIFdpZHRoLCBoZWlnaHQgYW5kIGRlcHRoIG9mIHRoZSBjdWJlLlxyXG4gICAgICogQHJldHVybiB7T2JqZWN0LjxzdHJpbmcsIFR5cGVkQXJyYXk+fSBUaGVcclxuICAgICAqICAgICAgICAgY3JlYXRlZCBwbGFuZSB2ZXJ0aWNlcy5cclxuICAgICAqIEBtZW1iZXJPZiBtb2R1bGU6cHJpbWl0aXZlc1xyXG4gICAgICovXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3ViZVZlcnRpY2VzKHNpemUpIHtcclxuICAgICAgICBjb25zdCBrID0gc2l6ZSAvIDI7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvcm5lclZlcnRpY2VzID0gW1xyXG4gICAgICAgICAgICBbLWssIC1rLCAta10sXHJcbiAgICAgICAgICAgIFsraywgLWssIC1rXSxcclxuICAgICAgICAgICAgWy1rLCAraywgLWtdLFxyXG4gICAgICAgICAgICBbK2ssICtrLCAta10sXHJcbiAgICAgICAgICAgIFstaywgLWssICtrXSxcclxuICAgICAgICAgICAgWytrLCAtaywgK2tdLFxyXG4gICAgICAgICAgICBbLWssICtrLCAra10sXHJcbiAgICAgICAgICAgIFsraywgK2ssICtrXSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBjb25zdCBmYWNlTm9ybWFscyA9IFtcclxuICAgICAgICAgICAgWysxLCArMCwgKzBdLFxyXG4gICAgICAgICAgICBbLTEsICswLCArMF0sXHJcbiAgICAgICAgICAgIFsrMCwgKzEsICswXSxcclxuICAgICAgICAgICAgWyswLCAtMSwgKzBdLFxyXG4gICAgICAgICAgICBbKzAsICswLCArMV0sXHJcbiAgICAgICAgICAgIFsrMCwgKzAsIC0xXSxcclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBjb25zdCB1dkNvb3JkcyA9IFtcclxuICAgICAgICAgICAgWzEsIDBdLFxyXG4gICAgICAgICAgICBbMCwgMF0sXHJcbiAgICAgICAgICAgIFswLCAxXSxcclxuICAgICAgICAgICAgWzEsIDFdLFxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGNvbnN0IG51bVZlcnRpY2VzID0gNiAqIDQ7XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUF1Z21lbnRlZFR5cGVkQXJyYXkoMywgbnVtVmVydGljZXMpO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbHMgPSBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQXVnbWVudGVkVHlwZWRBcnJheSgzLCBudW1WZXJ0aWNlcyk7XHJcbiAgICAgICAgY29uc3QgdGV4Q29vcmRzID0gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUF1Z21lbnRlZFR5cGVkQXJyYXkoMiwgbnVtVmVydGljZXMpO1xyXG4gICAgICAgIGNvbnN0IGluZGljZXMgPSBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQXVnbWVudGVkVHlwZWRBcnJheSgzLCA2ICogMiwgVWludDE2QXJyYXkpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBmID0gMDsgZiA8IDY7ICsrZikge1xyXG4gICAgICAgICAgICBjb25zdCBmYWNlSW5kaWNlcyA9IENVQkVfRkFDRV9JTkRJQ0VTW2ZdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB2ID0gMDsgdiA8IDQ7ICsrdikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBjb3JuZXJWZXJ0aWNlc1tmYWNlSW5kaWNlc1t2XV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub3JtYWwgPSBmYWNlTm9ybWFsc1tmXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHV2ID0gdXZDb29yZHNbdl07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRWFjaCBmYWNlIG5lZWRzIGFsbCBmb3VyIHZlcnRpY2VzIGJlY2F1c2UgdGhlIG5vcm1hbHMgYW5kIHRleHR1cmVcclxuICAgICAgICAgICAgICAgIC8vIGNvb3JkaW5hdGVzIGFyZSBub3QgYWxsIHRoZSBzYW1lLlxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zLnB1c2gocG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFscy5wdXNoKG5vcm1hbCk7XHJcbiAgICAgICAgICAgICAgICB0ZXhDb29yZHMucHVzaCh1dik7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFR3byB0cmlhbmdsZXMgbWFrZSBhIHNxdWFyZSBmYWNlLlxyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSA0ICogZjtcclxuICAgICAgICAgICAgaW5kaWNlcy5wdXNoKG9mZnNldCArIDAsIG9mZnNldCArIDEsIG9mZnNldCArIDIpO1xyXG4gICAgICAgICAgICBpbmRpY2VzLnB1c2gob2Zmc2V0ICsgMCwgb2Zmc2V0ICsgMiwgb2Zmc2V0ICsgMyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogcG9zaXRpb25zLFxyXG4gICAgICAgICAgICBub3JtYWw6IG5vcm1hbHMsXHJcbiAgICAgICAgICAgIHRleGNvb3JkOiB0ZXhDb29yZHMsXHJcbiAgICAgICAgICAgIGluZGljZXM6IGluZGljZXMsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAgLyoqXHJcbiAgICAgKiBFeHBhbmRzIFJMRSBkYXRhXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBybGVEYXRhIGRhdGEgaW4gZm9ybWF0IG9mIHJ1bi1sZW5ndGgsIHgsIHksIHosIHJ1bi1sZW5ndGgsIHgsIHksIHpcclxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IFtwYWRkaW5nXSB2YWx1ZSB0byBhZGQgZWFjaCBlbnRyeSB3aXRoLlxyXG4gICAgICogQHJldHVybiB7bnVtYmVyW119IHRoZSBleHBhbmRlZCBybGVEYXRhXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBleHBhbmRSTEVEYXRhKHJsZURhdGEsIHBhZGRpbmc/KSB7XHJcbiAgICAgICAgcGFkZGluZyA9IHBhZGRpbmcgfHwgW107XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBybGVEYXRhLmxlbmd0aDsgaWkgKz0gNCkge1xyXG4gICAgICAgICAgY29uc3QgcnVuTGVuZ3RoID0gcmxlRGF0YVtpaV07XHJcbiAgICAgICAgICBjb25zdCBlbGVtZW50ID0gcmxlRGF0YS5zbGljZShpaSArIDEsIGlpICsgNCk7XHJcbiAgICAgICAgICBlbGVtZW50LnB1c2guYXBwbHkoZWxlbWVudCwgcGFkZGluZyk7XHJcbiAgICAgICAgICBmb3IgKGxldCBqaiA9IDA7IGpqIDwgcnVuTGVuZ3RoOyArK2pqKSB7XHJcbiAgICAgICAgICAgIGRhdGEucHVzaC5hcHBseShkYXRhLCBlbGVtZW50KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQ3JlYXRlcyAzRCAnRicgdmVydGljZXMuXHJcbiAgICAqIEFuICdGJyBpcyB1c2VmdWwgYmVjYXVzZSB5b3UgY2FuIGVhc2lseSB0ZWxsIHdoaWNoIHdheSBpdCBpcyBvcmllbnRlZC5cclxuICAgICogVGhlIGNyZWF0ZWQgJ0YnIGhhcyBwb3NpdGlvbiwgbm9ybWFsIGFuZCB1diBzdHJlYW1zLlxyXG4gICAgKlxyXG4gICAgKiBAcmV0dXJuIHtPYmplY3QuPHN0cmluZywgVHlwZWRBcnJheT59IFRoZVxyXG4gICAgKiAgICAgICAgIGNyZWF0ZWQgcGxhbmUgdmVydGljZXMuXHJcbiAgICAqIEBtZW1iZXJPZiBtb2R1bGU6cHJpbWl0aXZlc1xyXG4gICAgKi9cclxuICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZTNERlZlcnRpY2VzKCkge1xyXG4gXHJcbiAgICAgY29uc3QgcG9zaXRpb25zID0gW1xyXG4gICAgICAgLy8gbGVmdCBjb2x1bW4gZnJvbnRcclxuICAgICAgIDAsICAgMCwgIDAsXHJcbiAgICAgICAwLCAxNTAsICAwLFxyXG4gICAgICAgMzAsICAgMCwgIDAsXHJcbiAgICAgICAwLCAxNTAsICAwLFxyXG4gICAgICAgMzAsIDE1MCwgIDAsXHJcbiAgICAgICAzMCwgICAwLCAgMCxcclxuIFxyXG4gICAgICAgLy8gdG9wIHJ1bmcgZnJvbnRcclxuICAgICAgIDMwLCAgIDAsICAwLFxyXG4gICAgICAgMzAsICAzMCwgIDAsXHJcbiAgICAgICAxMDAsICAgMCwgIDAsXHJcbiAgICAgICAzMCwgIDMwLCAgMCxcclxuICAgICAgIDEwMCwgIDMwLCAgMCxcclxuICAgICAgIDEwMCwgICAwLCAgMCxcclxuIFxyXG4gICAgICAgLy8gbWlkZGxlIHJ1bmcgZnJvbnRcclxuICAgICAgIDMwLCAgNjAsICAwLFxyXG4gICAgICAgMzAsICA5MCwgIDAsXHJcbiAgICAgICA2NywgIDYwLCAgMCxcclxuICAgICAgIDMwLCAgOTAsICAwLFxyXG4gICAgICAgNjcsICA5MCwgIDAsXHJcbiAgICAgICA2NywgIDYwLCAgMCxcclxuIFxyXG4gICAgICAgLy8gbGVmdCBjb2x1bW4gYmFja1xyXG4gICAgICAgICAwLCAgIDAsICAzMCxcclxuICAgICAgICAzMCwgICAwLCAgMzAsXHJcbiAgICAgICAgIDAsIDE1MCwgIDMwLFxyXG4gICAgICAgICAwLCAxNTAsICAzMCxcclxuICAgICAgICAzMCwgICAwLCAgMzAsXHJcbiAgICAgICAgMzAsIDE1MCwgIDMwLFxyXG4gXHJcbiAgICAgICAvLyB0b3AgcnVuZyBiYWNrXHJcbiAgICAgICAgMzAsICAgMCwgIDMwLFxyXG4gICAgICAgMTAwLCAgIDAsICAzMCxcclxuICAgICAgICAzMCwgIDMwLCAgMzAsXHJcbiAgICAgICAgMzAsICAzMCwgIDMwLFxyXG4gICAgICAgMTAwLCAgIDAsICAzMCxcclxuICAgICAgIDEwMCwgIDMwLCAgMzAsXHJcbiBcclxuICAgICAgIC8vIG1pZGRsZSBydW5nIGJhY2tcclxuICAgICAgICAzMCwgIDYwLCAgMzAsXHJcbiAgICAgICAgNjcsICA2MCwgIDMwLFxyXG4gICAgICAgIDMwLCAgOTAsICAzMCxcclxuICAgICAgICAzMCwgIDkwLCAgMzAsXHJcbiAgICAgICAgNjcsICA2MCwgIDMwLFxyXG4gICAgICAgIDY3LCAgOTAsICAzMCxcclxuIFxyXG4gICAgICAgLy8gdG9wXHJcbiAgICAgICAgIDAsICAgMCwgICAwLFxyXG4gICAgICAgMTAwLCAgIDAsICAgMCxcclxuICAgICAgIDEwMCwgICAwLCAgMzAsXHJcbiAgICAgICAgIDAsICAgMCwgICAwLFxyXG4gICAgICAgMTAwLCAgIDAsICAzMCxcclxuICAgICAgICAgMCwgICAwLCAgMzAsXHJcbiBcclxuICAgICAgIC8vIHRvcCBydW5nIHJpZ2h0XHJcbiAgICAgICAxMDAsICAgMCwgICAwLFxyXG4gICAgICAgMTAwLCAgMzAsICAgMCxcclxuICAgICAgIDEwMCwgIDMwLCAgMzAsXHJcbiAgICAgICAxMDAsICAgMCwgICAwLFxyXG4gICAgICAgMTAwLCAgMzAsICAzMCxcclxuICAgICAgIDEwMCwgICAwLCAgMzAsXHJcbiBcclxuICAgICAgIC8vIHVuZGVyIHRvcCBydW5nXHJcbiAgICAgICAzMCwgICAzMCwgICAwLFxyXG4gICAgICAgMzAsICAgMzAsICAzMCxcclxuICAgICAgIDEwMCwgIDMwLCAgMzAsXHJcbiAgICAgICAzMCwgICAzMCwgICAwLFxyXG4gICAgICAgMTAwLCAgMzAsICAzMCxcclxuICAgICAgIDEwMCwgIDMwLCAgIDAsXHJcbiBcclxuICAgICAgIC8vIGJldHdlZW4gdG9wIHJ1bmcgYW5kIG1pZGRsZVxyXG4gICAgICAgMzAsICAgMzAsICAgMCxcclxuICAgICAgIDMwLCAgIDYwLCAgMzAsXHJcbiAgICAgICAzMCwgICAzMCwgIDMwLFxyXG4gICAgICAgMzAsICAgMzAsICAgMCxcclxuICAgICAgIDMwLCAgIDYwLCAgIDAsXHJcbiAgICAgICAzMCwgICA2MCwgIDMwLFxyXG4gXHJcbiAgICAgICAvLyB0b3Agb2YgbWlkZGxlIHJ1bmdcclxuICAgICAgIDMwLCAgIDYwLCAgIDAsXHJcbiAgICAgICA2NywgICA2MCwgIDMwLFxyXG4gICAgICAgMzAsICAgNjAsICAzMCxcclxuICAgICAgIDMwLCAgIDYwLCAgIDAsXHJcbiAgICAgICA2NywgICA2MCwgICAwLFxyXG4gICAgICAgNjcsICAgNjAsICAzMCxcclxuIFxyXG4gICAgICAgLy8gcmlnaHQgb2YgbWlkZGxlIHJ1bmdcclxuICAgICAgIDY3LCAgIDYwLCAgIDAsXHJcbiAgICAgICA2NywgICA5MCwgIDMwLFxyXG4gICAgICAgNjcsICAgNjAsICAzMCxcclxuICAgICAgIDY3LCAgIDYwLCAgIDAsXHJcbiAgICAgICA2NywgICA5MCwgICAwLFxyXG4gICAgICAgNjcsICAgOTAsICAzMCxcclxuIFxyXG4gICAgICAgLy8gYm90dG9tIG9mIG1pZGRsZSBydW5nLlxyXG4gICAgICAgMzAsICAgOTAsICAgMCxcclxuICAgICAgIDMwLCAgIDkwLCAgMzAsXHJcbiAgICAgICA2NywgICA5MCwgIDMwLFxyXG4gICAgICAgMzAsICAgOTAsICAgMCxcclxuICAgICAgIDY3LCAgIDkwLCAgMzAsXHJcbiAgICAgICA2NywgICA5MCwgICAwLFxyXG4gXHJcbiAgICAgICAvLyByaWdodCBvZiBib3R0b21cclxuICAgICAgIDMwLCAgIDkwLCAgIDAsXHJcbiAgICAgICAzMCwgIDE1MCwgIDMwLFxyXG4gICAgICAgMzAsICAgOTAsICAzMCxcclxuICAgICAgIDMwLCAgIDkwLCAgIDAsXHJcbiAgICAgICAzMCwgIDE1MCwgICAwLFxyXG4gICAgICAgMzAsICAxNTAsICAzMCxcclxuIFxyXG4gICAgICAgLy8gYm90dG9tXHJcbiAgICAgICAwLCAgIDE1MCwgICAwLFxyXG4gICAgICAgMCwgICAxNTAsICAzMCxcclxuICAgICAgIDMwLCAgMTUwLCAgMzAsXHJcbiAgICAgICAwLCAgIDE1MCwgICAwLFxyXG4gICAgICAgMzAsICAxNTAsICAzMCxcclxuICAgICAgIDMwLCAgMTUwLCAgIDAsXHJcbiBcclxuICAgICAgIC8vIGxlZnQgc2lkZVxyXG4gICAgICAgMCwgICAwLCAgIDAsXHJcbiAgICAgICAwLCAgIDAsICAzMCxcclxuICAgICAgIDAsIDE1MCwgIDMwLFxyXG4gICAgICAgMCwgICAwLCAgIDAsXHJcbiAgICAgICAwLCAxNTAsICAzMCxcclxuICAgICAgIDAsIDE1MCwgICAwLFxyXG4gICAgIF07XHJcbiBcclxuICAgICBjb25zdCB0ZXhjb29yZHMgPSBbXHJcbiAgICAgICAvLyBsZWZ0IGNvbHVtbiBmcm9udFxyXG4gICAgICAgMC4yMiwgMC4xOSxcclxuICAgICAgIDAuMjIsIDAuNzksXHJcbiAgICAgICAwLjM0LCAwLjE5LFxyXG4gICAgICAgMC4yMiwgMC43OSxcclxuICAgICAgIDAuMzQsIDAuNzksXHJcbiAgICAgICAwLjM0LCAwLjE5LFxyXG4gXHJcbiAgICAgICAvLyB0b3AgcnVuZyBmcm9udFxyXG4gICAgICAgMC4zNCwgMC4xOSxcclxuICAgICAgIDAuMzQsIDAuMzEsXHJcbiAgICAgICAwLjYyLCAwLjE5LFxyXG4gICAgICAgMC4zNCwgMC4zMSxcclxuICAgICAgIDAuNjIsIDAuMzEsXHJcbiAgICAgICAwLjYyLCAwLjE5LFxyXG4gXHJcbiAgICAgICAvLyBtaWRkbGUgcnVuZyBmcm9udFxyXG4gICAgICAgMC4zNCwgMC40MyxcclxuICAgICAgIDAuMzQsIDAuNTUsXHJcbiAgICAgICAwLjQ5LCAwLjQzLFxyXG4gICAgICAgMC4zNCwgMC41NSxcclxuICAgICAgIDAuNDksIDAuNTUsXHJcbiAgICAgICAwLjQ5LCAwLjQzLFxyXG4gXHJcbiAgICAgICAvLyBsZWZ0IGNvbHVtbiBiYWNrXHJcbiAgICAgICAwLCAwLFxyXG4gICAgICAgMSwgMCxcclxuICAgICAgIDAsIDEsXHJcbiAgICAgICAwLCAxLFxyXG4gICAgICAgMSwgMCxcclxuICAgICAgIDEsIDEsXHJcbiBcclxuICAgICAgIC8vIHRvcCBydW5nIGJhY2tcclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAxLCAwLFxyXG4gICAgICAgMCwgMSxcclxuICAgICAgIDAsIDEsXHJcbiAgICAgICAxLCAwLFxyXG4gICAgICAgMSwgMSxcclxuIFxyXG4gICAgICAgLy8gbWlkZGxlIHJ1bmcgYmFja1xyXG4gICAgICAgMCwgMCxcclxuICAgICAgIDEsIDAsXHJcbiAgICAgICAwLCAxLFxyXG4gICAgICAgMCwgMSxcclxuICAgICAgIDEsIDAsXHJcbiAgICAgICAxLCAxLFxyXG4gXHJcbiAgICAgICAvLyB0b3BcclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAxLCAwLFxyXG4gICAgICAgMSwgMSxcclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAxLCAxLFxyXG4gICAgICAgMCwgMSxcclxuIFxyXG4gICAgICAgLy8gdG9wIHJ1bmcgcmlnaHRcclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAxLCAwLFxyXG4gICAgICAgMSwgMSxcclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAxLCAxLFxyXG4gICAgICAgMCwgMSxcclxuIFxyXG4gICAgICAgLy8gdW5kZXIgdG9wIHJ1bmdcclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAwLCAxLFxyXG4gICAgICAgMSwgMSxcclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAxLCAxLFxyXG4gICAgICAgMSwgMCxcclxuIFxyXG4gICAgICAgLy8gYmV0d2VlbiB0b3AgcnVuZyBhbmQgbWlkZGxlXHJcbiAgICAgICAwLCAwLFxyXG4gICAgICAgMSwgMSxcclxuICAgICAgIDAsIDEsXHJcbiAgICAgICAwLCAwLFxyXG4gICAgICAgMSwgMCxcclxuICAgICAgIDEsIDEsXHJcbiBcclxuICAgICAgIC8vIHRvcCBvZiBtaWRkbGUgcnVuZ1xyXG4gICAgICAgMCwgMCxcclxuICAgICAgIDEsIDEsXHJcbiAgICAgICAwLCAxLFxyXG4gICAgICAgMCwgMCxcclxuICAgICAgIDEsIDAsXHJcbiAgICAgICAxLCAxLFxyXG4gXHJcbiAgICAgICAvLyByaWdodCBvZiBtaWRkbGUgcnVuZ1xyXG4gICAgICAgMCwgMCxcclxuICAgICAgIDEsIDEsXHJcbiAgICAgICAwLCAxLFxyXG4gICAgICAgMCwgMCxcclxuICAgICAgIDEsIDAsXHJcbiAgICAgICAxLCAxLFxyXG4gXHJcbiAgICAgICAvLyBib3R0b20gb2YgbWlkZGxlIHJ1bmcuXHJcbiAgICAgICAwLCAwLFxyXG4gICAgICAgMCwgMSxcclxuICAgICAgIDEsIDEsXHJcbiAgICAgICAwLCAwLFxyXG4gICAgICAgMSwgMSxcclxuICAgICAgIDEsIDAsXHJcbiBcclxuICAgICAgIC8vIHJpZ2h0IG9mIGJvdHRvbVxyXG4gICAgICAgMCwgMCxcclxuICAgICAgIDEsIDEsXHJcbiAgICAgICAwLCAxLFxyXG4gICAgICAgMCwgMCxcclxuICAgICAgIDEsIDAsXHJcbiAgICAgICAxLCAxLFxyXG4gXHJcbiAgICAgICAvLyBib3R0b21cclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAwLCAxLFxyXG4gICAgICAgMSwgMSxcclxuICAgICAgIDAsIDAsXHJcbiAgICAgICAxLCAxLFxyXG4gICAgICAgMSwgMCxcclxuIFxyXG4gICAgICAgLy8gbGVmdCBzaWRlXHJcbiAgICAgICAwLCAwLFxyXG4gICAgICAgMCwgMSxcclxuICAgICAgIDEsIDEsXHJcbiAgICAgICAwLCAwLFxyXG4gICAgICAgMSwgMSxcclxuICAgICAgIDEsIDAsXHJcbiAgICAgXTtcclxuIFxyXG4gICAgIGNvbnN0IG5vcm1hbHMgPSBleHBhbmRSTEVEYXRhKFtcclxuICAgICAgIC8vIGxlZnQgY29sdW1uIGZyb250XHJcbiAgICAgICAvLyB0b3AgcnVuZyBmcm9udFxyXG4gICAgICAgLy8gbWlkZGxlIHJ1bmcgZnJvbnRcclxuICAgICAgIDE4LCAwLCAwLCAxLFxyXG4gXHJcbiAgICAgICAvLyBsZWZ0IGNvbHVtbiBiYWNrXHJcbiAgICAgICAvLyB0b3AgcnVuZyBiYWNrXHJcbiAgICAgICAvLyBtaWRkbGUgcnVuZyBiYWNrXHJcbiAgICAgICAxOCwgMCwgMCwgLTEsXHJcbiBcclxuICAgICAgIC8vIHRvcFxyXG4gICAgICAgNiwgMCwgMSwgMCxcclxuIFxyXG4gICAgICAgLy8gdG9wIHJ1bmcgcmlnaHRcclxuICAgICAgIDYsIDEsIDAsIDAsXHJcbiBcclxuICAgICAgIC8vIHVuZGVyIHRvcCBydW5nXHJcbiAgICAgICA2LCAwLCAtMSwgMCxcclxuIFxyXG4gICAgICAgLy8gYmV0d2VlbiB0b3AgcnVuZyBhbmQgbWlkZGxlXHJcbiAgICAgICA2LCAxLCAwLCAwLFxyXG4gXHJcbiAgICAgICAvLyB0b3Agb2YgbWlkZGxlIHJ1bmdcclxuICAgICAgIDYsIDAsIDEsIDAsXHJcbiBcclxuICAgICAgIC8vIHJpZ2h0IG9mIG1pZGRsZSBydW5nXHJcbiAgICAgICA2LCAxLCAwLCAwLFxyXG4gXHJcbiAgICAgICAvLyBib3R0b20gb2YgbWlkZGxlIHJ1bmcuXHJcbiAgICAgICA2LCAwLCAtMSwgMCxcclxuIFxyXG4gICAgICAgLy8gcmlnaHQgb2YgYm90dG9tXHJcbiAgICAgICA2LCAxLCAwLCAwLFxyXG4gXHJcbiAgICAgICAvLyBib3R0b21cclxuICAgICAgIDYsIDAsIC0xLCAwLFxyXG4gXHJcbiAgICAgICAvLyBsZWZ0IHNpZGVcclxuICAgICAgIDYsIC0xLCAwLCAwLFxyXG4gICAgIF0pO1xyXG4gXHJcbiAgICAgY29uc3QgY29sb3JzID0gZXhwYW5kUkxFRGF0YShbXHJcbiAgICAgICAgICAgLy8gbGVmdCBjb2x1bW4gZnJvbnRcclxuICAgICAgICAgICAvLyB0b3AgcnVuZyBmcm9udFxyXG4gICAgICAgICAgIC8vIG1pZGRsZSBydW5nIGZyb250XHJcbiAgICAgICAgIDE4LCAyMDAsICA3MCwgMTIwLFxyXG4gXHJcbiAgICAgICAgICAgLy8gbGVmdCBjb2x1bW4gYmFja1xyXG4gICAgICAgICAgIC8vIHRvcCBydW5nIGJhY2tcclxuICAgICAgICAgICAvLyBtaWRkbGUgcnVuZyBiYWNrXHJcbiAgICAgICAgIDE4LCA4MCwgNzAsIDIwMCxcclxuIFxyXG4gICAgICAgICAgIC8vIHRvcFxyXG4gICAgICAgICA2LCA3MCwgMjAwLCAyMTAsXHJcbiBcclxuICAgICAgICAgICAvLyB0b3AgcnVuZyByaWdodFxyXG4gICAgICAgICA2LCAyMDAsIDIwMCwgNzAsXHJcbiBcclxuICAgICAgICAgICAvLyB1bmRlciB0b3AgcnVuZ1xyXG4gICAgICAgICA2LCAyMTAsIDEwMCwgNzAsXHJcbiBcclxuICAgICAgICAgICAvLyBiZXR3ZWVuIHRvcCBydW5nIGFuZCBtaWRkbGVcclxuICAgICAgICAgNiwgMjEwLCAxNjAsIDcwLFxyXG4gXHJcbiAgICAgICAgICAgLy8gdG9wIG9mIG1pZGRsZSBydW5nXHJcbiAgICAgICAgIDYsIDcwLCAxODAsIDIxMCxcclxuIFxyXG4gICAgICAgICAgIC8vIHJpZ2h0IG9mIG1pZGRsZSBydW5nXHJcbiAgICAgICAgIDYsIDEwMCwgNzAsIDIxMCxcclxuIFxyXG4gICAgICAgICAgIC8vIGJvdHRvbSBvZiBtaWRkbGUgcnVuZy5cclxuICAgICAgICAgNiwgNzYsIDIxMCwgMTAwLFxyXG4gXHJcbiAgICAgICAgICAgLy8gcmlnaHQgb2YgYm90dG9tXHJcbiAgICAgICAgIDYsIDE0MCwgMjEwLCA4MCxcclxuIFxyXG4gICAgICAgICAgIC8vIGJvdHRvbVxyXG4gICAgICAgICA2LCA5MCwgMTMwLCAxMTAsXHJcbiBcclxuICAgICAgICAgICAvLyBsZWZ0IHNpZGVcclxuICAgICAgICAgNiwgMTYwLCAxNjAsIDIyMCxcclxuICAgICBdLCBbMjU1XSk7XHJcbiBcclxuICAgICBjb25zdCBudW1WZXJ0cyA9IHBvc2l0aW9ucy5sZW5ndGggLyAzO1xyXG4gXHJcbiAgICAgY29uc3QgYXJyYXlzID0ge1xyXG4gICAgICAgcG9zaXRpb246IEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVBdWdtZW50ZWRUeXBlZEFycmF5KDMsIG51bVZlcnRzKSxcclxuICAgICAgIHRleGNvb3JkOiBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQXVnbWVudGVkVHlwZWRBcnJheSgyLCAgbnVtVmVydHMpLFxyXG4gICAgICAgbm9ybWFsOiBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQXVnbWVudGVkVHlwZWRBcnJheSgzLCBudW1WZXJ0cyksXHJcbiAgICAgICBjb2xvcjogR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUF1Z21lbnRlZFR5cGVkQXJyYXkoNCwgbnVtVmVydHMsIFVpbnQ4QXJyYXkpLFxyXG4gICAgICAgaW5kaWNlczogR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUF1Z21lbnRlZFR5cGVkQXJyYXkoMywgbnVtVmVydHMgLyAzLCBVaW50MTZBcnJheSksXHJcbiAgICAgfTtcclxuIFxyXG4gICAgIGFycmF5cy5wb3NpdGlvbi5wdXNoKHBvc2l0aW9ucyk7XHJcbiAgICAgYXJyYXlzLnRleGNvb3JkLnB1c2godGV4Y29vcmRzKTtcclxuICAgICBhcnJheXMubm9ybWFsLnB1c2gobm9ybWFscyk7XHJcbiAgICAgYXJyYXlzLmNvbG9yLnB1c2goY29sb3JzKTtcclxuIFxyXG4gICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBudW1WZXJ0czsgKytpaSkge1xyXG4gICAgICAgYXJyYXlzLmluZGljZXMucHVzaChpaSk7XHJcbiAgICAgfVxyXG4gXHJcbiAgICAgcmV0dXJuIGFycmF5cztcclxuICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2FsbHMgZm4gdG8gY3JlYXRlIHZlcnRpY2VzIGFuZCB0aGVuXHJcbiAgICAgKiBjcmVhdGVzIGEgYnVmZmVySW5mbyBvYmplY3QgZm9yIHRoZW1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlQnVmZmVySW5mb0Z1bmMoZm4pIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjb25zdCBhcnJheXMgPSBmbi5hcHBseShudWxsLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcclxuICAgICAgICAgICAgcmV0dXJuIEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVCdWZmZXJJbmZvRnJvbUFycmF5cyhhcnJheXMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNwaGVyZUJ1ZmZlckluZm8ocmFkaXVzLHN1YmRpdmlzaW9uc0F4aXMsc3ViZGl2aXNpb25zSGVpZ2h0LG9wdF9zdGFydExhdGl0dWRlSW5SYWRpYW5zPyxvcHRfZW5kTGF0aXR1ZGVJblJhZGlhbnM/LG9wdF9zdGFydExvbmdpdHVkZUluUmFkaWFucz8sb3B0X2VuZExvbmdpdHVkZUluUmFkaWFucz8pIHtcclxuICAgICAgICBjb25zdCBhcnJheXMgPSBjcmVhdGVTcGhlcmVWZXJ0aWNlcy5hcHBseShudWxsLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKTtcclxuICAgICAgICByZXR1cm4gR19TaGFkZXJGYWN0b3J5LmNyZWF0ZUJ1ZmZlckluZm9Gcm9tQXJyYXlzKGFycmF5cyk7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlUGxhbmVCdWZmZXJJbmZvKHdpZHRoLGRlcHRoLHN1YmRpdmlzaW9uc1dpZHRoLHN1YmRpdmlzaW9uc0RlcHRoLG1hdHJpeD8pIHtcclxuICAgICAgICBjb25zdCBhcnJheXMgPSBjcmVhdGVQbGFuZVZlcnRpY2VzLmFwcGx5KG51bGwsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpO1xyXG4gICAgICAgIHJldHVybiBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQnVmZmVySW5mb0Zyb21BcnJheXMoYXJyYXlzKTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDdWJlQnVmZmVySW5mbyhzaXplKSB7XHJcbiAgICAgICAgY29uc3QgYXJyYXlzID0gY3JlYXRlQ3ViZVZlcnRpY2VzLmFwcGx5KG51bGwsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCkpO1xyXG4gICAgICAgIHJldHVybiBHX1NoYWRlckZhY3RvcnkuY3JlYXRlQnVmZmVySW5mb0Zyb21BcnJheXMoYXJyYXlzKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZnVuY3Rpb24gY3JlYXRlM0RGQnVmZmVySW5mbygpe1xyXG4gICAgICAgICAgICBjb25zdCBhcnJheXMgPSBjcmVhdGUzREZWZXJ0aWNlcy5hcHBseShudWxsLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDApKTtcclxuICAgICAgICAgICAgcmV0dXJuIEdfU2hhZGVyRmFjdG9yeS5jcmVhdGVCdWZmZXJJbmZvRnJvbUFycmF5cyhhcnJheXMpO1xyXG4gICAgXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIHJldHVybiB7XHJcbiAgICBjcmVhdGUzREZCdWZmZXJJbmZvOiBjcmVhdGVCdWZmZXJJbmZvRnVuYyhjcmVhdGUzREZWZXJ0aWNlcyksXHJcbiAgICBjcmVhdGUzREZCdWZmZXI6IGNyZWF0ZUJ1ZmZlckZ1bmMoY3JlYXRlM0RGVmVydGljZXMpLFxyXG4gICAgY3JlYXRlM0RGVmVydGljZXMsXHJcbiAgICBjcmVhdGUzREZXaXRoVmVydGV4Q29sb3JzQnVmZmVySW5mbzogY3JlYXRlRmxhdHRlbmVkRnVuYyhjcmVhdGUzREZWZXJ0aWNlcyksXHJcbiAgICBjcmVhdGVDdWJlQnVmZmVySW5mbzogY3JlYXRlQnVmZmVySW5mb0Z1bmMoY3JlYXRlQ3ViZVZlcnRpY2VzKSxcclxuICAgIGNyZWF0ZUN1YmVCdWZmZXJzOiBjcmVhdGVCdWZmZXJGdW5jKGNyZWF0ZUN1YmVWZXJ0aWNlcyksXHJcbiAgICBjcmVhdGVDdWJlVmVydGljZXMsXHJcbiAgICBjcmVhdGVDdWJlV2l0aFZlcnRleENvbG9yc0J1ZmZlckluZm86IGNyZWF0ZUZsYXR0ZW5lZEZ1bmMoY3JlYXRlQ3ViZVZlcnRpY2VzKSxcclxuICAgIGNyZWF0ZVBsYW5lQnVmZmVySW5mbzogY3JlYXRlQnVmZmVySW5mb0Z1bmMoY3JlYXRlUGxhbmVWZXJ0aWNlcyksXHJcbiAgICBjcmVhdGVQbGFuZUJ1ZmZlcnM6IGNyZWF0ZUJ1ZmZlckZ1bmMoY3JlYXRlUGxhbmVWZXJ0aWNlcyksXHJcbiAgICBjcmVhdGVQbGFuZVZlcnRpY2VzLFxyXG4gICAgY3JlYXRlUGxhbmVXaXRoVmVydGV4Q29sb3JzQnVmZmVySW5mbzogY3JlYXRlRmxhdHRlbmVkRnVuYyhjcmVhdGVQbGFuZVZlcnRpY2VzKSxcclxuICAgIGNyZWF0ZVhZUXVhZEJ1ZmZlckluZm86IGNyZWF0ZUJ1ZmZlckluZm9GdW5jKGNyZWF0ZVhZUXVhZFZlcnRpY2VzKSxcclxuICAgIGNyZWF0ZVhZUXVhZEJ1ZmZlcnM6IGNyZWF0ZUJ1ZmZlckZ1bmMoY3JlYXRlWFlRdWFkVmVydGljZXMpLFxyXG4gICAgY3JlYXRlWFlRdWFkVmVydGljZXMsXHJcbiAgICBjcmVhdGVYWVF1YWRXaXRoVmVydGV4Q29sb3JzQnVmZmVySW5mbzogY3JlYXRlRmxhdHRlbmVkRnVuYyhjcmVhdGVYWVF1YWRWZXJ0aWNlcyksXHJcbiAgICBjcmVhdGVTcGhlcmVCdWZmZXJJbmZvOiBjcmVhdGVCdWZmZXJJbmZvRnVuYyhjcmVhdGVTcGhlcmVWZXJ0aWNlcyksXHJcbiAgICBjcmVhdGVTcGhlcmVCdWZmZXJzOiBjcmVhdGVCdWZmZXJGdW5jKGNyZWF0ZVNwaGVyZVZlcnRpY2VzKSxcclxuICAgIGNyZWF0ZVNwaGVyZVZlcnRpY2VzLFxyXG4gICAgY3JlYXRlU3BoZXJlV2l0aFZlcnRleENvbG9yc0J1ZmZlckluZm86IGNyZWF0ZUZsYXR0ZW5lZEZ1bmMoY3JlYXRlU3BoZXJlVmVydGljZXMpLFxyXG4gICAgY3JlYXRlVHJ1bmNhdGVkQ29uZUJ1ZmZlckluZm86IGNyZWF0ZUJ1ZmZlckluZm9GdW5jKGNyZWF0ZVRydW5jYXRlZENvbmVWZXJ0aWNlcyksXHJcbiAgICBjcmVhdGVUcnVuY2F0ZWRDb25lQnVmZmVyczogY3JlYXRlQnVmZmVyRnVuYyhjcmVhdGVUcnVuY2F0ZWRDb25lVmVydGljZXMpLFxyXG4gICAgY3JlYXRlVHJ1bmNhdGVkQ29uZVZlcnRpY2VzLFxyXG4gICAgY3JlYXRlVHJ1bmNhdGVkQ29uZVdpdGhWZXJ0ZXhDb2xvcnNCdWZmZXJJbmZvOiBjcmVhdGVGbGF0dGVuZWRGdW5jKGNyZWF0ZVRydW5jYXRlZENvbmVWZXJ0aWNlcyksXHJcbiAgICBkZWluZGV4VmVydGljZXMsXHJcbiAgICBmbGF0dGVuTm9ybWFscyxcclxuICAgIG1ha2VSYW5kb21WZXJ0ZXhDb2xvcnMsXHJcbiAgICByZW9yaWVudERpcmVjdGlvbnMsXHJcbiAgICByZW9yaWVudE5vcm1hbHMsXHJcbiAgICByZW9yaWVudFBvc2l0aW9ucyxcclxuICAgIHJlb3JpZW50VmVydGljZXMsXHJcbiAgfTtcclxuICAgICAqL1xyXG5cclxuXHJcbn0iLCJcclxuaW1wb3J0IHsgZ2x2ZXJ0X2F0dHJfc2VtYW50aWMsIGdsVEVYVFVSRV9VTklUX1ZBTElELCBnbHByaW1pdGl2ZV90eXBlIH0gZnJvbSBcIi4uL2dmeC9HTEVudW1zXCI7XHJcbmltcG9ydCB7IEdMYXBpIH0gZnJvbSBcIi4uL2dmeC9HTGFwaVwiO1xyXG5cclxuZW51bSBTaGFkZXJUeXBlIHtcclxuICAgIFZFUlRFWCA9IDEsXHJcbiAgICBGUkFHTUVOVFxyXG59XHJcblxyXG5cclxudmFyIHZlcnRleHRCYXNlQ29kZSA9XHJcbiAgICAnYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjsnICtcclxuICAgICdhdHRyaWJ1dGUgdmVjMyBhX25vcm1hbDsnICtcclxuICAgICdhdHRyaWJ1dGUgdmVjMiBhX3V2OycgK1xyXG5cclxuICAgICd1bmlmb3JtIG1hdDQgdV9NVk1hdHJpeDsnICtcclxuICAgICd1bmlmb3JtIG1hdDQgdV9QTWF0cml4OycgK1xyXG4gICAgJ3VuaWZvcm0gbWF0NCB1X01NYXRyaXg7JyArXHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfVk1hdHJpeDsnICtcclxuXHJcbiAgICAndmFyeWluZyB2ZWMzIHZfbm9ybWFsOycgK1xyXG4gICAgJ3ZhcnlpbmcgdmVjMiB2X3V2OycgK1xyXG5cclxuICAgICd2b2lkIG1haW4oKSB7JyArXHJcbiAgICAnZ2xfUG9zaXRpb24gPSB1X1BNYXRyaXggKiB1X01WTWF0cml4ICogdmVjNChhX3Bvc2l0aW9uLCAxLjApOycgK1xyXG4gICAgJ3ZfdXYgPSBhX3V2OycgK1xyXG4gICAgJ30nXHJcbi8v5Z+656GA55qEc2hhZGVy55qE54mH5q61552A6Imy5ZmoXHJcbnZhciBmcmFnQmFzZUNvZGUgPVxyXG4gICAgJ3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycgK1xyXG5cclxuICAgICd2YXJ5aW5nIHZlYzIgdl91djsnICtcclxuICAgICd1bmlmb3JtIHNhbXBsZXJDdWJlIHVfc2t5Ym94OycgK1xyXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVfdGV4Q29vcmQ7JyArXHJcbiAgICAndW5pZm9ybSBtYXQ0IHVfUFZNX01hdHJpeF9JbnZlcnNlOycgK1xyXG4gICAgJ3VuaWZvcm0gdmVjNCB1X2NvbG9yOycgK1xyXG4gICAgJ3VuaWZvcm0gdmVjNCB1X2NvbG9yX2RpcjsnICtcclxuXHJcbiAgICAndm9pZCBtYWluKCkgeycgK1xyXG4gICAgJ2dsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1X3RleENvb3JkLCB2X3V2KTsnICtcclxuICAgICd9J1xyXG5cclxuZXhwb3J0IGNsYXNzIFNoYWRlckRhdGEge1xyXG4gICAgY29uc3RydWN0b3Ioc3BHTElELCBpbmRleCkge1xyXG4gICAgICAgIHRoaXMuX3NwR0xJRCA9IHNwR0xJRDtcclxuICAgICAgICB0aGlzLl90ZXh0dXJlVW5pdCA9IDA7XHJcbiAgICAgICAgdGhpcy5faW5kZXggPSBpbmRleDtcclxuICAgIH1cclxuICAgIHByaXZhdGUgX3NwR0xJRDtcclxuICAgIHByaXZhdGUgX3RleHR1cmVVbml0OiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBfdW5pZm9ybVNldHRlcnM6IHsgW2luZGV4OiBzdHJpbmddOiBGdW5jdGlvbiB9O1xyXG4gICAgcHJpdmF0ZSBfYXR0cmliU2V0dGVyczogeyBbaW5kZXg6IHN0cmluZ106IEZ1bmN0aW9uIH07XHJcbiAgICBwcml2YXRlIF9pbmRleDogbnVtYmVyID0gLTE7XHJcbiAgICBwdWJsaWMgZ2V0IHNwR2xJRCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3BHTElEO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCB0ZXh0dXJlVW5pdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZVVuaXQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYWRkVGV4dHVyZVVuaXQoKSB7XHJcbiAgICAgICAgdmFyIGJlZm9yZSA9IHRoaXMuX3RleHR1cmVVbml0O1xyXG4gICAgICAgIHRoaXMuX3RleHR1cmVVbml0Kys7XHJcbiAgICAgICAgcmV0dXJuIGJlZm9yZTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBnZXQgdW5pU2V0dGVycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdW5pZm9ybVNldHRlcnM7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IGF0dHJTZXR0ZXJzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdHRyaWJTZXR0ZXJzO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCB1bmlTZXR0ZXJzKHNldDogeyBbaW5kZXg6IHN0cmluZ106IEZ1bmN0aW9uIH0pIHtcclxuICAgICAgICB0aGlzLl91bmlmb3JtU2V0dGVycyA9IHNldDtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzZXQgYXR0clNldHRlcnMoc2V0OiB7IFtpbmRleDogc3RyaW5nXTogRnVuY3Rpb24gfSkge1xyXG4gICAgICAgIHRoaXMuX2F0dHJpYlNldHRlcnMgPSBzZXQ7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IEluZGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbmRleDtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgQnVmZmVyQXR0cmlic0RhdGF7XHJcbiAgICBjb25zdHJ1Y3RvcihhdHRyaWJzLG51bUVsZW1lbnRzLGluZGljZXMpe1xyXG4gICAgICAgIHRoaXMuYXR0cmlicyA9IGF0dHJpYnM7XHJcbiAgICAgICAgdGhpcy5udW1FbGVtZW50cyA9IG51bUVsZW1lbnRzO1xyXG4gICAgICAgIHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5kaWNlczpBcnJheTxudW1iZXI+O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG51bUVsZW1lbnRzOm51bWJlcjtcclxuICAgIHB1YmxpYyByZWFkb25seSBhdHRyaWJzOk9iamVjdDtcclxufVxyXG4vKipcclxuICogc2hhZGVy5bel5Y6CXHJcbiAqL1xyXG5jbGFzcyBTaGFkZXJGYWN0b3J5IHtcclxuICAgIHB1YmxpYyBfZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIHByb3RlY3RlZCBfc2hhZGVyRGF0YTogQXJyYXk8U2hhZGVyRGF0YT47XHJcbiAgICBpbml0KGdsKSB7XHJcbiAgICAgICAgdGhpcy5fZ2wgPSBnbDtcclxuICAgICAgICB0aGlzLl9zaGFkZXJEYXRhID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIDkuKpzaGFkZXJEYXRhXHJcbiAgICAgKiBAcGFyYW0gaW5kZXggXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXRTaGFyZURhdGFCeUluZGV4KGluZGV4KTogU2hhZGVyRGF0YSB7XHJcbiAgICAgICAgdmFyIHJldDogU2hhZGVyRGF0YTtcclxuICAgICAgICB0aGlzLl9zaGFkZXJEYXRhLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuSW5kZXggPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHJldCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bkuIDkuKpzaGFkZXJEYXRhXHJcbiAgICAgKiBAcGFyYW0gZ2xJRCBcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldFNoYXJlRGF0YUJ5R2xJRChnbElEKTogU2hhZGVyRGF0YSB7XHJcbiAgICAgICAgdmFyIHJldDogU2hhZGVyRGF0YTtcclxuICAgICAgICB0aGlzLl9zaGFkZXJEYXRhLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUuc3BHbElEID09IGdsSUQpIHtcclxuICAgICAgICAgICAgICAgIHJldCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDnlJ/miJDkuIDkuKpzaGFkZXJEYXRhXHJcbiAgICAgKiBAcGFyYW0gR0xJRCBcclxuICAgICAqIEBwYXJhbSB0ZXh0dXJlVW5pdCBcclxuICAgICAqIEBwYXJhbSBVU2V0IFxyXG4gICAgICogQHBhcmFtIEFTZXQgXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBjcmVhdGVTaGFkZXJEYXRhKEdMSUQpOiBTaGFkZXJEYXRhIHtcclxuICAgICAgICB2YXIgcmV0ID0gdGhpcy5nZXRTaGFyZURhdGFCeUdsSUQoR0xJRCk7XHJcbiAgICAgICAgaWYgKHJldCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX3NoYWRlckRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgcmVzOiBTaGFkZXJEYXRhID0gbmV3IFNoYWRlckRhdGEoR0xJRCwgaW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXJEYXRhLnB1c2gocmVzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgKiBcclxuICAgICogQHBhcmFtIHNoYWRlclR5cGUgc2hhZGVy55qE57G75Z6LIDHku6PooajpobbngrnnnYDoibLlmaggMuS7o+ihqOWDj+e0oOedgOiJsuWZqFxyXG4gICAgKiBAcGFyYW0gc2hhZGVyU291cmNlIHNoYWRlcueahOa6kOeggVxyXG4gICAgKi9cclxuICAgIHByaXZhdGUgbG9hZFNoYWRlcihzaGFkZXJUeXBlOiBTaGFkZXJUeXBlLCBzaGFkZXJTb3VyY2UpIHtcclxuICAgICAgICAvLyDliJvlu7rnnYDoibLlmahcclxuICAgICAgICB2YXIgc2hhZGVyO1xyXG4gICAgICAgIGlmIChzaGFkZXJUeXBlID09IFNoYWRlclR5cGUuRlJBR01FTlQpIHtcclxuICAgICAgICAgICAgc2hhZGVyID0gdGhpcy5fZ2wuY3JlYXRlU2hhZGVyKHRoaXMuX2dsLkZSQUdNRU5UX1NIQURFUik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzaGFkZXJUeXBlID09IFNoYWRlclR5cGUuVkVSVEVYKSB7XHJcbiAgICAgICAgICAgIHNoYWRlciA9IHRoaXMuX2dsLmNyZWF0ZVNoYWRlcih0aGlzLl9nbC5WRVJURVhfU0hBREVSKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g57yW6K+R552A6Imy5ZmoXHJcbiAgICAgICAgdGhpcy5fZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcclxuICAgICAgICB0aGlzLl9nbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcbiAgICAgICAgLy8g5Yik5pat57yW6K+R5piv5ZCm5oiQ5YqfXHJcbiAgICAgICAgaWYgKCF0aGlzLl9nbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCB0aGlzLl9nbC5DT01QSUxFX1NUQVRVUykpIHtcclxuICAgICAgICAgICAgYWxlcnQodGhpcy5fZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaGFkZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHZlcnRleHRDb2RlIOmhtueCuXNoYWRlciBcclxuICAgICAqIEBwYXJhbSBmcmFnQ29kZSDniYfmrrVzaGFkZXJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNyZWF0ZVNoYWRlcih2ZXJ0ZXh0Q29kZTogc3RyaW5nID0gdmVydGV4dEJhc2VDb2RlLCBmcmFnQ29kZTogc3RyaW5nID0gZnJhZ0Jhc2VDb2RlKTogYW55IHtcclxuICAgICAgICAvLyDku44gRE9NIOS4iuWIm+W7uuWvueW6lOeahOedgOiJsuWZqFxyXG4gICAgICAgIHZhciB2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmxvYWRTaGFkZXIoU2hhZGVyVHlwZS5WRVJURVgsIHZlcnRleHRDb2RlKTtcclxuICAgICAgICB2YXIgZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmxvYWRTaGFkZXIoU2hhZGVyVHlwZS5GUkFHTUVOVCwgZnJhZ0NvZGUpO1xyXG5cclxuICAgICAgICAvLyDliJvlu7rnqIvluo/lubbov57mjqXnnYDoibLlmahcclxuICAgICAgICB2YXIgc2hhZGVyR0xJRCA9IHRoaXMuX2dsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgICAgICB0aGlzLl9nbC5hdHRhY2hTaGFkZXIoc2hhZGVyR0xJRCwgdmVydGV4U2hhZGVyKTtcclxuICAgICAgICB0aGlzLl9nbC5hdHRhY2hTaGFkZXIoc2hhZGVyR0xJRCwgZnJhZ21lbnRTaGFkZXIpO1xyXG5cclxuICAgICAgICB0aGlzLl9nbC5saW5rUHJvZ3JhbShzaGFkZXJHTElEKTtcclxuICAgICAgICAvLyDov57mjqXlpLHotKXnmoTmo4DmtYtcclxuICAgICAgICBpZiAoIXRoaXMuX2dsLmdldFByb2dyYW1QYXJhbWV0ZXIoc2hhZGVyR0xJRCwgdGhpcy5fZ2wuTElOS19TVEFUVVMpKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiRmFpbGVkIHRvIHNldHVwIHNoYWRlcnNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaGFkZXJHTElEO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvbkNyZWF0ZVNoYWRlcigpOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGVzdHJveVNoZGVyKHNoYWRlclByb2dyYW0pOiB2b2lkIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVBdHRyaWJTZXR0ZXIoaW5kZXgpIHtcclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLl9nbDtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcclxuICAgICAgICAgICAgaWYgKGIudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGIudmFsdWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWI0ZnYoaW5kZXgsIGIudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnZlcnRleEF0dHJpYjNmdihpbmRleCwgYi52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliMmZ2KGluZGV4LCBiLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWIxZnYoaW5kZXgsIGIudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RoZSBsZW5ndGggb2YgYSBmbG9hdCBjb25zdGFudCB2YWx1ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNCEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBiLmJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGluZGV4LCBiLm51bUNvbXBvbmVudHMgfHwgYi5zaXplLCBiLnR5cGUgfHwgZ2wuRkxPQVQsIGIubm9ybWFsaXplIHx8IGZhbHNlLCBiLnN0cmlkZSB8fCAwLCBiLm9mZnNldCB8fCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIGNyZWF0ZUF0dHJpYnV0ZVNldHRlcnMoc2hhZGVyRGF0YTogU2hhZGVyRGF0YSk6IHsgW2luZGV4OiBzdHJpbmddOiBGdW5jdGlvbiB9IHtcclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLl9nbDtcclxuICAgICAgICB2YXIgcHJvZ3JhbSA9IHNoYWRlckRhdGEuc3BHbElEO1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYlNldHRlcnM6IHsgW2luZGV4OiBzdHJpbmddOiBGdW5jdGlvbiB9ID0ge1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgbnVtQXR0cmlicyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xyXG4gICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBudW1BdHRyaWJzOyArK2lpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYkluZm8gPSBnbC5nZXRBY3RpdmVBdHRyaWIocHJvZ3JhbSwgaWkpO1xyXG4gICAgICAgICAgICBpZiAoIWF0dHJpYkluZm8pIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgYXR0cmliSW5mby5uYW1lKTtcclxuICAgICAgICAgICAgYXR0cmliU2V0dGVyc1thdHRyaWJJbmZvLm5hbWVdID0gdGhpcy5jcmVhdGVBdHRyaWJTZXR0ZXIoaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXR0cmliU2V0dGVycztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgYmluZCBwb2ludCBmb3IgYSBnaXZlbiBzYW1wbGVyIHR5cGVcclxuICAgKi9cclxuICAgIHByaXZhdGUgZ2V0QmluZFBvaW50Rm9yU2FtcGxlclR5cGUoZ2wsIHR5cGUpIHtcclxuICAgICAgICBpZiAodHlwZSA9PT0gZ2wuU0FNUExFUl8yRCkgcmV0dXJuIGdsLlRFWFRVUkVfMkQ7ICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICAgICAgaWYgKHR5cGUgPT09IGdsLlNBTVBMRVJfQ1VCRSkgcmV0dXJuIGdsLlRFWFRVUkVfQ1VCRV9NQVA7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICAgKiBDcmVhdGVzIGEgc2V0dGVyIGZvciBhIHVuaWZvcm0gb2YgdGhlIGdpdmVuIHByb2dyYW0gd2l0aCBpdCdzXHJcbiAgICAgICAqIGxvY2F0aW9uIGVtYmVkZGVkIGluIHRoZSBzZXR0ZXIuXHJcbiAgICAgICAqIEBwYXJhbSB7V2ViR0xQcm9ncmFtfSBwcm9ncmFtXHJcbiAgICAgICAqIEBwYXJhbSB7V2ViR0xVbmlmb3JtSW5mb30gdW5pZm9ybUluZm9cclxuICAgICAgICogQHJldHVybnMge2Z1bmN0aW9ufSB0aGUgY3JlYXRlZCBzZXR0ZXIuXHJcbiAgICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVVbmlmb3JtU2V0dGVyKHVuaWZvcm1JbmZvLCBzaGFkZXJEYXRhOiBTaGFkZXJEYXRhKSB7XHJcbiAgICAgICAgdmFyIGdsID0gdGhpcy5fZ2w7XHJcbiAgICAgICAgdmFyIHByb2dyYW0gPSBzaGFkZXJEYXRhLnNwR2xJRDtcclxuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCB1bmlmb3JtSW5mby5uYW1lKTtcclxuICAgICAgICBjb25zdCB0eXBlID0gdW5pZm9ybUluZm8udHlwZTtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGlzIHVuaWZvcm0gaXMgYW4gYXJyYXlcclxuICAgICAgICBjb25zdCBpc0FycmF5ID0gKHVuaWZvcm1JbmZvLnNpemUgPiAxICYmIHVuaWZvcm1JbmZvLm5hbWUuc3Vic3RyKC0zKSA9PT0gJ1swXScpO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5GTE9BVCAmJiBpc0FycmF5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmdihsb2NhdGlvbiwgdik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5GTE9BVCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5GTE9BVF9WRUMyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTJmdihsb2NhdGlvbiwgdik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5GTE9BVF9WRUMzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdihsb2NhdGlvbiwgdik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5GTE9BVF9WRUM0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdihsb2NhdGlvbiwgdik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5JTlQgJiYgaXNBcnJheSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaXYobG9jYXRpb24sIHYpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gZ2wuSU5UKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IGdsLklOVF9WRUMyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTJpdihsb2NhdGlvbiwgdik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5JTlRfVkVDMykge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zaXYobG9jYXRpb24sIHYpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gZ2wuSU5UX1ZFQzQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IGdsLkJPT0wpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWl2KGxvY2F0aW9uLCB2KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IGdsLkJPT0xfVkVDMikge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0yaXYobG9jYXRpb24sIHYpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gZ2wuQk9PTF9WRUMzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNpdihsb2NhdGlvbiwgdik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5CT09MX1ZFQzQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGl2KGxvY2F0aW9uLCB2KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IGdsLkZMT0FUX01BVDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4MmZ2KGxvY2F0aW9uLCBmYWxzZSwgdik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBnbC5GTE9BVF9NQVQzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDNmdihsb2NhdGlvbiwgZmFsc2UsIHYpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gZ2wuRkxPQVRfTUFUNCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB2KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCh0eXBlID09PSBnbC5TQU1QTEVSXzJEIHx8IHR5cGUgPT09IGdsLlNBTVBMRVJfQ1VCRSkgJiYgaXNBcnJheSkge1xyXG4gICAgICAgICAgICBjb25zdCB1bml0cyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgdW5pZm9ybUluZm8uc2l6ZTsgKytpaSkge1xyXG4gICAgICAgICAgICAgICAgdW5pdHMucHVzaChzaGFkZXJEYXRhLmFkZFRleHR1cmVVbml0KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYmluZFBvaW50LCB1bml0cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0ZXh0dXJlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaXYobG9jYXRpb24sIHVuaXRzKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uICh0ZXh0dXJlLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgdW5pdHNbaW5kZXhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoYmluZFBvaW50LCB0ZXh0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0odGhpcy5nZXRCaW5kUG9pbnRGb3JTYW1wbGVyVHlwZShnbCwgdHlwZSksIHVuaXRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IGdsLlNBTVBMRVJfMkQgfHwgdHlwZSA9PT0gZ2wuU0FNUExFUl9DVUJFKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYmluZFBvaW50LCB1bml0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkobG9jYXRpb24sIHVuaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB1bml0KTtcclxuICAgICAgICAgICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShiaW5kUG9pbnQsIHRleHR1cmUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSh0aGlzLmdldEJpbmRQb2ludEZvclNhbXBsZXJUeXBlKGdsLCB0eXBlKSwgc2hhZGVyRGF0YS5hZGRUZXh0dXJlVW5pdCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgKCd1bmtub3duIHR5cGU6IDB4JyArIHR5cGUudG9TdHJpbmcoMTYpKTsgLy8gd2Ugc2hvdWxkIG5ldmVyIGdldCBoZXJlLlxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdW5pZm9ybeWPmOmHj+iuvue9ruWZqFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVVuaWZvcm1TZXR0ZXJzKHNoYWRlckRhdGE6IFNoYWRlckRhdGEpOiB7IFtpbmRleDogc3RyaW5nXTogRnVuY3Rpb24gfSB7XHJcbiAgICAgICAgdmFyIHByb2dyYW0gPSBzaGFkZXJEYXRhLnNwR2xJRDtcclxuICAgICAgICBsZXQgZ2wgPSB0aGlzLl9nbDtcclxuXHJcblxyXG4gICAgICAgIHZhciB1bmlmb3JtU2V0dGVyczogeyBbaW5kZXg6IHN0cmluZ106IEZ1bmN0aW9uIH0gPSB7fVxyXG4gICAgICAgIGNvbnN0IG51bVVuaWZvcm1zID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgbnVtVW5pZm9ybXM7ICsraWkpIHtcclxuICAgICAgICAgICAgY29uc3QgdW5pZm9ybUluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGlpKTtcclxuICAgICAgICAgICAgaWYgKCF1bmlmb3JtSW5mbykge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IG5hbWUgPSB1bmlmb3JtSW5mby5uYW1lO1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGFycmF5IHN1ZmZpeC5cclxuICAgICAgICAgICAgaWYgKG5hbWUuc3Vic3RyKC0zKSA9PT0gJ1swXScpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNldHRlciA9IHRoaXMuY3JlYXRlVW5pZm9ybVNldHRlcih1bmlmb3JtSW5mbywgc2hhZGVyRGF0YSk7XHJcbiAgICAgICAgICAgIHVuaWZvcm1TZXR0ZXJzW25hbWVdID0gc2V0dGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdW5pZm9ybVNldHRlcnM7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIm+W7uuS4gOS4qnNoYWRlclxyXG4gICAgICogQHBhcmFtIHZzIFxyXG4gICAgICogQHBhcmFtIGZzIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY3JlYXRlUHJvZ3JhbUluZm8odnM6IHN0cmluZywgZnM6IHN0cmluZyk6IFNoYWRlckRhdGEge1xyXG4gICAgICAgIHZhciBnbElEID0gdGhpcy5jcmVhdGVTaGFkZXIodnMsIGZzKTtcclxuICAgICAgICB2YXIgc2hhZGVyRGF0YSA9IHRoaXMuY3JlYXRlU2hhZGVyRGF0YShnbElEKTtcclxuICAgICAgICBjb25zdCB1bmlmb3JtU2V0dGVycyA9IHRoaXMuY3JlYXRlVW5pZm9ybVNldHRlcnMoc2hhZGVyRGF0YSk7XHJcbiAgICAgICAgY29uc3QgYXR0cmliU2V0dGVycyA9IHRoaXMuY3JlYXRlQXR0cmlidXRlU2V0dGVycyhzaGFkZXJEYXRhKTtcclxuICAgICAgICBzaGFkZXJEYXRhLnVuaVNldHRlcnMgPSB1bmlmb3JtU2V0dGVycztcclxuICAgICAgICBzaGFkZXJEYXRhLmF0dHJTZXR0ZXJzID0gYXR0cmliU2V0dGVycztcclxuXHJcbiAgICAgICAgcmV0dXJuIHNoYWRlckRhdGE7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBnZXRTaGFkZXJQcm9ncmFtKGluZGV4KTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRTaGFyZURhdGFCeUluZGV4KGluZGV4KS5zcEdsSUQ7XHJcbiAgICB9XHJcbiAgICAvL+iuvue9rmF0dHJpYnV0ZeWPmOmHj1xyXG4gICAgcHVibGljIHNldEJ1ZmZlcnNBbmRBdHRyaWJ1dGVzKGF0dHJpYlNldHRlcnM6IHsgW2luZGV4OiBzdHJpbmddOiBGdW5jdGlvbiB9LCBidWZmZXJzKSB7XHJcbiAgICAgICAgdmFyIGdsID0gdGhpcy5fZ2w7XHJcbiAgICAgICAgdmFyIGF0dHJpYnMgPSBidWZmZXJzLmF0dHJpYnM7XHJcbiAgICAgICAgdmFyIHNldHRlcnMgPSBhdHRyaWJTZXR0ZXJzO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2V0dGVyID0gc2V0dGVyc1tuYW1lXTtcclxuICAgICAgICAgICAgaWYgKHNldHRlcikge1xyXG4gICAgICAgICAgICAgICAgc2V0dGVyKGF0dHJpYnNbbmFtZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJlcnJvciAg57uR5a6aYXR0cmlidXRl5Y+Y6YeP5aSx6LSlLS0tLS1cIixuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoYnVmZmVycy5pbmRpY2VzKSB7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGJ1ZmZlcnMuaW5kaWNlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy/orr7nva51bmlmb3Jt5Y+Y6YePXHJcbiAgICBwdWJsaWMgc2V0VW5pZm9ybXModW5pZm9ybVNldHRlcnM6IHsgW2luZGV4OiBzdHJpbmddOiBGdW5jdGlvbiB9LCAuLi52YWx1ZXMpIHtcclxuICAgICAgICB2YXIgc2V0dGVycyA9IHVuaWZvcm1TZXR0ZXJzO1xyXG4gICAgICAgIGZvciAoY29uc3QgdW5pZm9ybXMgb2YgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHVuaWZvcm1zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZXR0ZXIgPSBzZXR0ZXJzW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNldHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRlcih1bmlmb3Jtc1tuYW1lXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJlcnJvciAg57uR5a6adW5pZm9ybeWPmOmHj+Wksei0pS0tLS0tLVwiLG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvL+WQr+WKqOmhtueCueedgOiJsuWZqOe7mOWItlxyXG4gICAgcHVibGljIGRyYXdCdWZmZXJJbmZvKGJ1ZmZlckluZm8sIHByaW1pdGl2ZVR5cGU/OmdscHJpbWl0aXZlX3R5cGUsIGNvdW50PzpudW1iZXIsIG9mZnNldD86bnVtYmVyKSB7XHJcbiAgICAgICAgdmFyIGdsID0gdGhpcy5fZ2w7XHJcbiAgICAgICAgY29uc3QgaW5kaWNlcyA9IGJ1ZmZlckluZm8uaW5kaWNlcztcclxuICAgICAgICBwcmltaXRpdmVUeXBlID0gcHJpbWl0aXZlVHlwZSA9PT0gdW5kZWZpbmVkID8gZ2wuVFJJQU5HTEVTIDogcHJpbWl0aXZlVHlwZTtcclxuICAgICAgICBjb25zdCBudW1FbGVtZW50cyA9IGNvdW50ID09PSB1bmRlZmluZWQgPyBidWZmZXJJbmZvLm51bUVsZW1lbnRzIDogY291bnQ7XHJcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0ID09PSB1bmRlZmluZWQgPyAwIDogb2Zmc2V0O1xyXG4gICAgICAgIGlmIChpbmRpY2VzKSB7XHJcbiAgICAgICAgICAgIGdsLmRyYXdFbGVtZW50cyhwcmltaXRpdmVUeXBlLCBudW1FbGVtZW50cywgZ2wuVU5TSUdORURfU0hPUlQsIG9mZnNldCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ2wuZHJhd0FycmF5cyhwcmltaXRpdmVUeXBlLCBvZmZzZXQsIG51bUVsZW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9leHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIEFkZCBgcHVzaGAgdG8gYSB0eXBlZCBhcnJheS4gSXQganVzdCBrZWVwcyBhICdjdXJzb3InXHJcbiAgICAvLyBhbmQgYWxsb3dzIHVzZSB0byBgcHVzaGAgdmFsdWVzIGludG8gdGhlIGFycmF5IHNvIHdlXHJcbiAgICAvLyBkb24ndCBoYXZlIHRvIG1hbnVhbGx5IGNvbXB1dGUgb2Zmc2V0c1xyXG4gICAgcHVibGljIGF1Z21lbnRUeXBlZEFycmF5KHR5cGVkQXJyYXksIG51bUNvbXBvbmVudHMpIHtcclxuICAgICAgICBsZXQgY3Vyc29yID0gMDtcclxuICAgICAgICB0eXBlZEFycmF5LnB1c2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2lpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGFyZ3VtZW50c1tpaV07XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSB8fCAodmFsdWUuYnVmZmVyICYmIHZhbHVlLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGpqID0gMDsgamogPCB2YWx1ZS5sZW5ndGg7ICsramopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZWRBcnJheVtjdXJzb3IrK10gPSB2YWx1ZVtqal07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlZEFycmF5W2N1cnNvcisrXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0eXBlZEFycmF5LnJlc2V0ID0gZnVuY3Rpb24gKG9wdF9pbmRleCkge1xyXG4gICAgICAgICAgICBjdXJzb3IgPSBvcHRfaW5kZXggfHwgMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHR5cGVkQXJyYXkubnVtQ29tcG9uZW50cyA9IG51bUNvbXBvbmVudHM7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGVkQXJyYXksICdudW1FbGVtZW50cycsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggLyB0aGlzLm51bUNvbXBvbmVudHMgfCAwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0eXBlZEFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBjcmVhdGVzIGEgdHlwZWQgYXJyYXkgd2l0aCBhIGBwdXNoYCBmdW5jdGlvbiBhdHRhY2hlZFxyXG4gICAgKiBzbyB0aGF0IHlvdSBjYW4gZWFzaWx5ICpwdXNoKiB2YWx1ZXMuXHJcbiAgICAqXHJcbiAgICAqIGBwdXNoYCBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMuIElmIGFuIGFyZ3VtZW50IGlzIGFuIGFycmF5IGVhY2ggZWxlbWVudFxyXG4gICAgKiBvZiB0aGUgYXJyYXkgd2lsbCBiZSBhZGRlZCB0byB0aGUgdHlwZWQgYXJyYXkuXHJcbiAgICAqXHJcbiAgICAqIEV4YW1wbGU6XHJcbiAgICAqXHJcbiAgICAqICAgICBsZXQgYXJyYXkgPSBjcmVhdGVBdWdtZW50ZWRUeXBlZEFycmF5KDMsIDIpOyAgLy8gY3JlYXRlcyBhIEZsb2F0MzJBcnJheSB3aXRoIDYgdmFsdWVzXHJcbiAgICAqICAgICBhcnJheS5wdXNoKDEsIDIsIDMpO1xyXG4gICAgKiAgICAgYXJyYXkucHVzaChbNCwgNSwgNl0pO1xyXG4gICAgKiAgICAgLy8gYXJyYXkgbm93IGNvbnRhaW5zIFsxLCAyLCAzLCA0LCA1LCA2XVxyXG4gICAgKlxyXG4gICAgKiBBbHNvIGhhcyBgbnVtQ29tcG9uZW50c2AgYW5kIGBudW1FbGVtZW50c2AgcHJvcGVydGllcy5cclxuICAgICpcclxuICAgICogQHBhcmFtIHtudW1iZXJ9IG51bUNvbXBvbmVudHMgbnVtYmVyIG9mIGNvbXBvbmVudHNcclxuICAgICogQHBhcmFtIHtudW1iZXJ9IG51bUVsZW1lbnRzIG51bWJlciBvZiBlbGVtZW50cy4gVGhlIHRvdGFsIHNpemUgb2YgdGhlIGFycmF5IHdpbGwgYmUgYG51bUNvbXBvbmVudHMgKiBudW1FbGVtZW50c2AuXHJcbiAgICAqIEBwYXJhbSB7Y29uc3RydWN0b3J9IG9wdF90eXBlIEEgY29uc3RydWN0b3IgZm9yIHRoZSB0eXBlLiBEZWZhdWx0ID0gYEZsb2F0MzJBcnJheWAuXHJcbiAgICAqIEByZXR1cm4ge0FycmF5QnVmZmVyfSBBIHR5cGVkIGFycmF5LlxyXG4gICAgKiBAbWVtYmVyT2YgbW9kdWxlOndlYmdsLXV0aWxzXHJcbiAgICAqL1xyXG4gICAgcHVibGljIGNyZWF0ZUF1Z21lbnRlZFR5cGVkQXJyYXkobnVtQ29tcG9uZW50cywgbnVtRWxlbWVudHMsIG9wdF90eXBlPykge1xyXG4gICAgICAgIGNvbnN0IFR5cGUgPSBvcHRfdHlwZSB8fCBGbG9hdDMyQXJyYXk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVnbWVudFR5cGVkQXJyYXkobmV3IFR5cGUobnVtQ29tcG9uZW50cyAqIG51bUVsZW1lbnRzKSwgbnVtQ29tcG9uZW50cyk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0QXJyYXkoYXJyYXkpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXkubGVuZ3RoID8gYXJyYXkgOiBhcnJheS5kYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0ZXhjb29yZFJFID0gL2Nvb3JkfHRleHR1cmUvaTtcclxuICAgIHB1YmxpYyBjb2xvclJFID0gL2NvbG9yfGNvbG91ci9pO1xyXG4gICAgcHVibGljIGd1ZXNzTnVtQ29tcG9uZW50c0Zyb21OYW1lKG5hbWUsIGxlbmd0aD8pIHtcclxuICAgICAgICBsZXQgbnVtQ29tcG9uZW50cztcclxuICAgICAgICBpZiAodGhpcy50ZXhjb29yZFJFLnRlc3QobmFtZSkpIHtcclxuICAgICAgICAgICAgbnVtQ29tcG9uZW50cyA9IDI7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbG9yUkUudGVzdChuYW1lKSkge1xyXG4gICAgICAgICAgICBudW1Db21wb25lbnRzID0gNDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBudW1Db21wb25lbnRzID0gMzsgIC8vIHBvc2l0aW9uLCBub3JtYWxzLCBpbmRpY2VzIC4uLlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGxlbmd0aCAlIG51bUNvbXBvbmVudHMgPiAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuIG5vdCBndWVzcyBudW1Db21wb25lbnRzIGZvciBhdHRyaWJ1dGUgJyR7bmFtZX0nLiBUcmllZCAke251bUNvbXBvbmVudHN9IGJ1dCAke2xlbmd0aH0gdmFsdWVzIGlzIG5vdCBldmVubHkgZGl2aXNpYmxlIGJ5ICR7bnVtQ29tcG9uZW50c30uIFlvdSBzaG91bGQgc3BlY2lmeSBpdC5gKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudW1Db21wb25lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXROdW1Db21wb25lbnRzKGFycmF5LCBhcnJheU5hbWUpIHtcclxuICAgICAgICByZXR1cm4gYXJyYXkubnVtQ29tcG9uZW50cyB8fCBhcnJheS5zaXplIHx8IHRoaXMuZ3Vlc3NOdW1Db21wb25lbnRzRnJvbU5hbWUoYXJyYXlOYW1lLCB0aGlzLmdldEFycmF5KGFycmF5KS5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdHJpZXMgdG8gZ2V0IHRoZSBudW1iZXIgb2YgZWxlbWVudHMgZnJvbSBhIHNldCBvZiBhcnJheXMuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBwb3NpdGlvbktleXMgPSBbJ3Bvc2l0aW9uJywgJ3Bvc2l0aW9ucycsICdhX3Bvc2l0aW9uJ107XHJcbiAgICBwdWJsaWMgZ2V0TnVtRWxlbWVudHNGcm9tTm9uSW5kZXhlZEFycmF5cyhhcnJheXMpIHtcclxuICAgICAgICBsZXQga2V5O1xyXG4gICAgICAgIGZvciAoY29uc3QgayBvZiB0aGlzLnBvc2l0aW9uS2V5cykge1xyXG4gICAgICAgICAgICBpZiAoayBpbiBhcnJheXMpIHtcclxuICAgICAgICAgICAgICAgIGtleSA9IGs7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBrZXkgPSBrZXkgfHwgT2JqZWN0LmtleXMoYXJyYXlzKVswXTtcclxuICAgICAgICBjb25zdCBhcnJheSA9IGFycmF5c1trZXldO1xyXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuZ2V0QXJyYXkoYXJyYXkpLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBudW1Db21wb25lbnRzID0gdGhpcy5nZXROdW1Db21wb25lbnRzKGFycmF5LCBrZXkpO1xyXG4gICAgICAgIGNvbnN0IG51bUVsZW1lbnRzID0gbGVuZ3RoIC8gbnVtQ29tcG9uZW50cztcclxuICAgICAgICBpZiAobGVuZ3RoICUgbnVtQ29tcG9uZW50cyA+IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBudW1Db21wb25lbnRzICR7bnVtQ29tcG9uZW50c30gbm90IGNvcnJlY3QgZm9yIGxlbmd0aCAke2xlbmd0aH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bUVsZW1lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRHTFR5cGVGb3JUeXBlZEFycmF5KGdsLCB0eXBlZEFycmF5KSB7XHJcbiAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpIHsgcmV0dXJuIGdsLkJZVEU7IH0gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7IHJldHVybiBnbC5VTlNJR05FRF9CWVRFOyB9ICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50MTZBcnJheSkgeyByZXR1cm4gZ2wuU0hPUlQ7IH0gICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQxNkFycmF5KSB7IHJldHVybiBnbC5VTlNJR05FRF9TSE9SVDsgfSAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSkgeyByZXR1cm4gZ2wuSU5UOyB9ICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQzMkFycmF5KSB7IHJldHVybiBnbC5VTlNJR05FRF9JTlQ7IH0gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KSB7IHJldHVybiBnbC5GTE9BVDsgfSAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgICAgIHRocm93ICd1bnN1cHBvcnRlZCB0eXBlZCBhcnJheSB0eXBlJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGlzIGlzIHJlYWxseSBqdXN0IGEgZ3Vlc3MuIFRob3VnaCBJIGNhbid0IHJlYWxseSBpbWFnaW5lIHVzaW5nXHJcbiAgICAvLyBhbnl0aGluZyBlbHNlPyBNYXliZSBmb3Igc29tZSBjb21wcmVzc2lvbj9cclxuICAgIHB1YmxpYyBnZXROb3JtYWxpemF0aW9uRm9yVHlwZWRBcnJheSh0eXBlZEFycmF5KSB7XHJcbiAgICAgICAgaWYgKHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkpIHsgcmV0dXJuIHRydWU7IH0gIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHsgcmV0dXJuIHRydWU7IH0gIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzQXJyYXlCdWZmZXIoYSkge1xyXG4gICAgICAgIHJldHVybiBhLmJ1ZmZlciAmJiBhLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVCdWZmZXJGcm9tVHlwZWRBcnJheShnbCwgYXJyYXksIHR5cGU/LCBkcmF3VHlwZT8pIHtcclxuICAgICAgICB0eXBlID0gdHlwZSB8fCBnbC5BUlJBWV9CVUZGRVI7XHJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcih0eXBlLCBidWZmZXIpO1xyXG4gICAgICAgIGdsLmJ1ZmZlckRhdGEodHlwZSwgYXJyYXksIGRyYXdUeXBlIHx8IGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICByZXR1cm4gYnVmZmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhbGxCdXRJbmRpY2VzKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gbmFtZSAhPT0gJ2luZGljZXMnO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjcmVhdGVNYXBwaW5nKG9iaikge1xyXG4gICAgICAgIGNvbnN0IG1hcHBpbmcgPSB7fTtcclxuICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZpbHRlcih0aGlzLmFsbEJ1dEluZGljZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICBtYXBwaW5nWydhXycgKyBrZXldID0ga2V5O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBtYXBwaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtYWtlVHlwZWRBcnJheShhcnJheSwgbmFtZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXJyYXlCdWZmZXIoYXJyYXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFycmF5LmRhdGEgJiYgdGhpcy5pc0FycmF5QnVmZmVyKGFycmF5LmRhdGEpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJheS5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcnJheSkpIHtcclxuICAgICAgICAgICAgYXJyYXkgPSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBhcnJheSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhcnJheS5udW1Db21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgIGFycmF5Lm51bUNvbXBvbmVudHMgPSB0aGlzLmd1ZXNzTnVtQ29tcG9uZW50c0Zyb21OYW1lKG5hbWUsIGFycmF5Lmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB0eXBlID0gYXJyYXkudHlwZTtcclxuICAgICAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpbmRpY2VzJykge1xyXG4gICAgICAgICAgICAgICAgdHlwZSA9IFVpbnQxNkFycmF5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHR5cGVkQXJyYXkgPSB0aGlzLmNyZWF0ZUF1Z21lbnRlZFR5cGVkQXJyYXkoYXJyYXkubnVtQ29tcG9uZW50cywgYXJyYXkuZGF0YS5sZW5ndGggLyBhcnJheS5udW1Db21wb25lbnRzIHwgMCwgdHlwZSk7XHJcbiAgICAgICAgdHlwZWRBcnJheS5wdXNoKGFycmF5LmRhdGEpO1xyXG4gICAgICAgIHJldHVybiB0eXBlZEFycmF5O1xyXG4gICAgfVxyXG4gICAgcHVibGljIGNyZWF0ZUF0dHJpYnNGcm9tQXJyYXlzKGdsLCBhcnJheXMsIG9wdF9tYXBwaW5nKSB7XHJcbiAgICAgICAgY29uc3QgbWFwcGluZyA9IG9wdF9tYXBwaW5nIHx8IHRoaXMuY3JlYXRlTWFwcGluZyhhcnJheXMpO1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYnMgPSB7fTtcclxuICAgICAgICBPYmplY3Qua2V5cyhtYXBwaW5nKS5mb3JFYWNoKChhdHRyaWJOYW1lKT0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnVmZmVyTmFtZSA9IG1hcHBpbmdbYXR0cmliTmFtZV07XHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdBcnJheSA9IGFycmF5c1tidWZmZXJOYW1lXTtcclxuICAgICAgICAgICAgaWYgKG9yaWdBcnJheS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlic1thdHRyaWJOYW1lXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb3JpZ0FycmF5LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gdGhpcy5tYWtlVHlwZWRBcnJheShvcmlnQXJyYXksIGJ1ZmZlck5hbWUpO1xyXG4gICAgICAgICAgICAgICAgYXR0cmlic1thdHRyaWJOYW1lXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IHRoaXMuY3JlYXRlQnVmZmVyRnJvbVR5cGVkQXJyYXkoZ2wsIGFycmF5KSxcclxuICAgICAgICAgICAgICAgICAgICBudW1Db21wb25lbnRzOiBvcmlnQXJyYXkubnVtQ29tcG9uZW50cyB8fCBhcnJheS5udW1Db21wb25lbnRzIHx8IHRoaXMuZ3Vlc3NOdW1Db21wb25lbnRzRnJvbU5hbWUoYnVmZmVyTmFtZSksXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogdGhpcy5nZXRHTFR5cGVGb3JUeXBlZEFycmF5KGdsLCBhcnJheSksXHJcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplOiB0aGlzLmdldE5vcm1hbGl6YXRpb25Gb3JUeXBlZEFycmF5KGFycmF5KSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYXR0cmlicztcclxuICAgIH1cclxuICAgIHB1YmxpYyBjcmVhdGVCdWZmZXJJbmZvRnJvbUFycmF5cyhhcnJheXMsIG9wdF9tYXBwaW5nPykge1xyXG4gICAgICAgIHZhciBnbCA9IHRoaXMuX2dsO1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlckluZm86IGFueSA9IHtcclxuICAgICAgICAgICAgYXR0cmliczogdGhpcy5jcmVhdGVBdHRyaWJzRnJvbUFycmF5cyhnbCwgYXJyYXlzLCBvcHRfbWFwcGluZyksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgaW5kaWNlcyA9IGFycmF5cy5pbmRpY2VzO1xyXG4gICAgICAgIGlmIChpbmRpY2VzKSB7XHJcbiAgICAgICAgICAgIGluZGljZXMgPSB0aGlzLm1ha2VUeXBlZEFycmF5KGluZGljZXMsICdpbmRpY2VzJyk7XHJcbiAgICAgICAgICAgIGJ1ZmZlckluZm8uaW5kaWNlcyA9IHRoaXMuY3JlYXRlQnVmZmVyRnJvbVR5cGVkQXJyYXkoZ2wsIGluZGljZXMsIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSKTtcclxuICAgICAgICAgICAgYnVmZmVySW5mby5udW1FbGVtZW50cyA9IGluZGljZXMubGVuZ3RoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlckluZm8ubnVtRWxlbWVudHMgPSB0aGlzLmdldE51bUVsZW1lbnRzRnJvbU5vbkluZGV4ZWRBcnJheXMoYXJyYXlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJBdHRyaWJzRGF0YShidWZmZXJJbmZvLmF0dHJpYnMsYnVmZmVySW5mby5udW1FbGVtZW50cyxidWZmZXJJbmZvLmluZGljZXMpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIEdfU2hhZGVyRmFjdG9yeSA9IG5ldyBTaGFkZXJGYWN0b3J5KCk7XHJcblxyXG5leHBvcnQgY2xhc3MgU2hhZGVyIHtcclxuICAgIHByaXZhdGUgYV9wb3NpdGlvbl9sb2M7Ly/pobbngrnlsZ7mgKfkvY3nva5cclxuICAgIHByaXZhdGUgYV9ub3JtYWxfbG9jOy8v5rOV57q/5bGe5oCn55qE5L2N572uXHJcbiAgICBwcml2YXRlIGFfdXZfbG9jOy8vdXblsZ7mgKfkvY3nva5cclxuICAgIHByaXZhdGUgYV90YW5nZW50X2xvYzsvL+WIh+e6v+WxnuaAp+S9jee9rlxyXG4gICAgcHJpdmF0ZSB1X2NvbG9yX2xvYzsvL+WFieeFp+WxnuaAp+S9jee9rlxyXG4gICAgcHJpdmF0ZSB1X2NvbG9yX2Rpcl9sb2M7Ly/lhYnnhafmlrnlkJHlsZ7mgKfkvY3nva5cclxuICAgIHByaXZhdGUgdV9NVk1hdHJpeF9sb2M7Ly/mqKHlnovop4blj6Pnn6npmLXlsZ7mgKfkvY3nva5cclxuICAgIHByaXZhdGUgdV9QTWF0cml4X2xvYzsvL+mAj+inhuaKleW9seefqemYteWxnuaAp+S9jee9rlxyXG4gICAgcHJpdmF0ZSB1X01NYXRyaXhfbG9jOy8v5qih5Z6L55+p6Zi15bGe5oCn5L2N572uXHJcbiAgICBwcml2YXRlIHVfVk1hdHJpeF9sb2M7Ly/op4blj6Pnn6npmLXlsZ7mgKfkvY3nva5cclxuICAgIHByaXZhdGUgdV90ZXhDb29yZF9sb2M7Ly/nurnnkIblsZ7mgKfkvY3nva5cclxuICAgIHByaXZhdGUgdV9za3lib3hfbG9jOy8v5aSp56m655uS5bGe5oCn5L2N572uXHJcbiAgICBwcml2YXRlIHVfcHZtX21hdHJpeF9sb2M7Ly/mipXlvbHop4blj6PmqKHlnovnn6npmLVcclxuICAgIHByaXZhdGUgdV9wdm1fbWF0cml4X2ludmVyc2VfbG9jOy8v5qih5Z6L6KeG5Zu+5oqV5b2x55qE6YCG55+p6Zi1XHJcblxyXG4gICAgcHVibGljIFVTRV9OT1JNQUw6IGJvb2xlYW4gPSBmYWxzZTsvL+azlee6v1xyXG4gICAgcHVibGljIFVTRV9MSUdIVDogYm9vbGVhbiA9IGZhbHNlOy8v5YWJ54WnXHJcbiAgICBwdWJsaWMgVVNFX1NLWUJPWDogYm9vbGVhbiA9IGZhbHNlOy8v5aSp56m655uSXHJcblxyXG5cclxuICAgIHB1YmxpYyBpc1Nob3dEZWJ1Z0xvZzogYm9vbGVhbjsvL+aYr+WQpuaYvuekuuaKpemUmeaXpeW/l1xyXG5cclxuICAgIHByb3RlY3RlZCBfZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dDtcclxuICAgIHByb3RlY3RlZCBfc3BHTElEO1xyXG4gICAgY29uc3RydWN0b3IoZ2wsIGdsSUQpIHtcclxuICAgICAgICB0aGlzLl9nbCA9IGdsO1xyXG4gICAgICAgIHRoaXMuX3NwR0xJRCA9IGdsSUQ7XHJcbiAgICAgICAgdGhpcy5vbkNyZWF0ZVNoYWRlcigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliJvlu7rkuIDkuKpzaGFkZXJcclxuICAgICAqIEBwYXJhbSB2ZXJ0IFxyXG4gICAgICogQHBhcmFtIGZyYWcgXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBjcmVhdGUodmVydCwgZnJhZyk6IFNoYWRlciB7XHJcbiAgICAgICAgdmFyIGdsSUQgPSBHX1NoYWRlckZhY3RvcnkuY3JlYXRlU2hhZGVyKHZlcnQsIGZyYWcpO1xyXG4gICAgICAgIHJldHVybiBuZXcgU2hhZGVyKEdfU2hhZGVyRmFjdG9yeS5fZ2wsIGdsSUQpXHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgb25DcmVhdGVTaGFkZXIoKTogdm9pZCB7XHJcbiAgICAgICAgdmFyIHNoYWRlclByb2dyYW1HTElEID0gdGhpcy5fc3BHTElEO1xyXG4gICAgICAgIHZhciBnbCA9IHRoaXMuX2dsO1xyXG4gICAgICAgIHRoaXMuYV9wb3NpdGlvbl9sb2MgPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihzaGFkZXJQcm9ncmFtR0xJRCwgZ2x2ZXJ0X2F0dHJfc2VtYW50aWMuUE9TSVRJT04pO1xyXG4gICAgICAgIHRoaXMuYV9ub3JtYWxfbG9jID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbUdMSUQsIGdsdmVydF9hdHRyX3NlbWFudGljLk5PUk1BTCk7XHJcbiAgICAgICAgdGhpcy5hX3V2X2xvYyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW1HTElELCBnbHZlcnRfYXR0cl9zZW1hbnRpYy5VVik7XHJcbiAgICAgICAgdGhpcy5hX3RhbmdlbnRfbG9jID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbUdMSUQsIGdsdmVydF9hdHRyX3NlbWFudGljLlRBTkdFTlQpO1xyXG4gICAgICAgIHRoaXMudV9jb2xvcl9sb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbUdMSUQsIGdsdmVydF9hdHRyX3NlbWFudGljLkNPTE9SKTtcclxuICAgICAgICB0aGlzLnVfY29sb3JfZGlyX2xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtR0xJRCwgZ2x2ZXJ0X2F0dHJfc2VtYW50aWMuQ09MT1JfRElSKTtcclxuICAgICAgICB0aGlzLnVfTVZNYXRyaXhfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW1HTElELCBnbHZlcnRfYXR0cl9zZW1hbnRpYy5NVk1hdHJpeCk7XHJcbiAgICAgICAgdGhpcy51X1BNYXRyaXhfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW1HTElELCBnbHZlcnRfYXR0cl9zZW1hbnRpYy5QTWF0cml4KTtcclxuICAgICAgICB0aGlzLnVfdGV4Q29vcmRfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW1HTElELCBnbHZlcnRfYXR0cl9zZW1hbnRpYy5URVhfQ09PUkQpO1xyXG4gICAgICAgIHRoaXMudV9za3lib3hfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW1HTElELCBnbHZlcnRfYXR0cl9zZW1hbnRpYy5TS1lCT1gpO1xyXG4gICAgICAgIHRoaXMudV9wdm1fbWF0cml4X2xvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtR0xJRCwgZ2x2ZXJ0X2F0dHJfc2VtYW50aWMuUE1WX01BVFJJWCk7XHJcbiAgICAgICAgdGhpcy51X3B2bV9tYXRyaXhfaW52ZXJzZV9sb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbUdMSUQsIGdsdmVydF9hdHRyX3NlbWFudGljLlBNVl9NQVRSSVhfSU5WRVJTRSk7XHJcbiAgICAgICAgdGhpcy51X01NYXRyaXhfbG9jID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHNoYWRlclByb2dyYW1HTElELCBnbHZlcnRfYXR0cl9zZW1hbnRpYy5NTWF0cml4KTtcclxuICAgICAgICB0aGlzLnVfVk1hdHJpeF9sb2MgPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbUdMSUQsIGdsdmVydF9hdHRyX3NlbWFudGljLlZNYXRyaXgpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0Q3VzdG9tQXR0cmlidXRlTG9jYXRpb24odmFyTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NwR0xJRCwgdmFyTmFtZSlcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0R0xJRCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3BHTElEO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qOA5p+lc2hhZGVy5Lit5Y+Y6YeP55qE5L2N572u5piv5ZCm5pyJ5pWIXHJcbiAgICAgKiBAcGFyYW0gbG9jIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNoZWNrbG9jVmFsaWQobG9jLCB0YWdOYW1lKTogYm9vbGVhbiB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9ICEobG9jID09IG51bGwgfHwgbG9jIDwgMCk7XHJcbiAgICAgICAgaWYgKCFyZXN1bHQgJiYgdGhpcy5pc1Nob3dEZWJ1Z0xvZykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZXJyLS0tLS0tLVwiLCBsb2MsIHRhZ05hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjaGVja0dMSURWYWxpZChnbElEKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIChnbElEID09IG51bGwgfHwgZ2xJRCA8PSAwKSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvL+WQr+eUqOWxnuaAp+S7jue8k+WGsuWMuuS4reiOt+WPluaVsOaNrueahOWKn+iDvVxyXG4gICAgcHJpdmF0ZSBlbmFibGVWZXJ0ZXhBdHRyaWJ1dGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLmFfcG9zaXRpb25fbG9jLCBcImFfcG9zaXRpb25fbG9jXCIpKSB7Ly8g6K6+5a6a5Li65pWw57uE57G75Z6L55qE5Y+Y6YeP5pWw5o2uXHJcbiAgICAgICAgICAgIHRoaXMuX2dsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV9wb3NpdGlvbl9sb2MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jaGVja2xvY1ZhbGlkKHRoaXMuYV91dl9sb2MsIFwiYV91dl9sb2NcIikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hX3V2X2xvYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrbG9jVmFsaWQodGhpcy5hX25vcm1hbF9sb2MsIFwiYV9ub3JtYWxfbG9jXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV9ub3JtYWxfbG9jKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgLy9zaGFkZXLkuK3miYDmnInnmoRhdHRyaWJ1dGVz5Y+Y6YePXHJcbiAgICBwcml2YXRlIHVwZGF0ZUF0dHJpYnV0ZXMoc2hhZGVyUHJvZ3JhbUdMSUQpOiB2b2lkIHtcclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLl9nbDtcclxuICAgICAgICBjb25zdCBudW1BdHRyaWJzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihzaGFkZXJQcm9ncmFtR0xJRCwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xyXG4gICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBudW1BdHRyaWJzOyArK2lpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYkluZm8gPSBnbC5nZXRBY3RpdmVBdHRyaWIoc2hhZGVyUHJvZ3JhbUdMSUQsIGlpKTtcclxuICAgICAgICAgICAgaWYgKCFhdHRyaWJJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImF0dHJpYkluZm8tLVwiLCBhdHRyaWJJbmZvLm5hbWUpO1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW1HTElELCBhdHRyaWJJbmZvLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL+a/gOa0u3NoYWRlclxyXG4gICAgcHVibGljIGFjdGl2ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSgpO1xyXG4gICAgICAgIHRoaXMuZW5hYmxlVmVydGV4QXR0cmlidXRlKCk7XHJcbiAgICAgICAgdGhpcy5fZ2wudXNlUHJvZ3JhbSh0aGlzLl9zcEdMSUQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBjb2xvciDlhYnnmoTpopzoibJcclxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24g5YWJ55qE5pa55ZCRXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRVc2VMaWdodChjb2xvciA9IFswLjIsIDEsIDAuMiwgMV0sIGRpcmVjdGlvbiA9IFswLjUsIDAuNywgMV0pOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLlVTRV9MSUdIVCB8fCAhdGhpcy5jaGVja2xvY1ZhbGlkKHRoaXMudV9jb2xvcl9sb2MsIFwidV9jb2xvcl9sb2NcIikgfHwgIXRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLnVfY29sb3JfZGlyX2xvYywgXCJ1X2NvbG9yX2Rpcl9sb2NcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTZXQgdGhlIGNvbG9yIHRvIHVzZVxyXG4gICAgICAgIHRoaXMuX2dsLnVuaWZvcm00ZnYodGhpcy51X2NvbG9yX2xvYywgY29sb3IpOyAvLyBncmVlblxyXG5cclxuICAgICAgICAvLyBzZXQgdGhlIGxpZ2h0IGRpcmVjdGlvbi5cclxuICAgICAgICB0aGlzLl9nbC51bmlmb3JtM2Z2KHRoaXMudV9jb2xvcl9kaXJfbG9jLCBkaXJlY3Rpb24pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldFVzZVNreUJveCh1X3B2bV9tYXRyaXhfaW52ZXJzZSk6IHZvaWQge1xyXG5cclxuICAgICAgICB2YXIgZ2wgPSB0aGlzLl9nbDtcclxuXHJcbiAgICAgICAgZ2wuZW5hYmxlKGdsLkNVTExfRkFDRSk7XHJcbiAgICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG5cclxuICAgICAgICAvLyBTZXQgdGhlIHVuaWZvcm1zXHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihcclxuICAgICAgICAgICAgdGhpcy51X3B2bV9tYXRyaXhfaW52ZXJzZV9sb2MsIGZhbHNlLFxyXG4gICAgICAgICAgICB1X3B2bV9tYXRyaXhfaW52ZXJzZSk7XHJcblxyXG4gICAgICAgIC8vIFRlbGwgdGhlIHNoYWRlciB0byB1c2UgdGV4dHVyZSB1bml0IDAgZm9yIHVfc2t5Ym94XHJcbiAgICAgICAgZ2wudW5pZm9ybTFpKHRoaXMudV9za3lib3hfbG9jLCAwKTtcclxuXHJcbiAgICAgICAgLy8gbGV0IG91ciBxdWFkIHBhc3MgdGhlIGRlcHRoIHRlc3QgYXQgMS4wXHJcbiAgICAgICAgZ2wuZGVwdGhGdW5jKGdsLkxFUVVBTCk7XHJcbiAgICB9XHJcbiAgICAvL+iuvue9ruS9v+eUqOaKleW9seinhuWPo+aooeWei+efqemYtVxyXG4gICAgcHVibGljIHNldFVzZVByb2plY3RWaWV3TW9kZWxNYXRyaXgocHZtTWF0cml4KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLnVfcHZtX21hdHJpeF9sb2MsIFwidV9wdm1fbWF0cml4X2xvY1wiKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudV9wdm1fbWF0cml4X2xvYywgZmFsc2UsIHB2bU1hdHJpeCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy/orr7nva7lhYnnhadcclxuICAgIHB1YmxpYyBzZXRVc2VDb2xvcih1Q29sb3IpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jaGVja2xvY1ZhbGlkKHRoaXMudV9jb2xvcl9sb2MsIFwidV9jb2xvcl9sb2NcIikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTRmdih0aGlzLnVfY29sb3JfbG9jLCB1Q29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8v6K6+572u5qih5Z6L6KeG5Y+j55+p6Zi1XHJcbiAgICBwdWJsaWMgc2V0VXNlTW9kZWxWaWV3TWF0cml4KG12TWF0cml4KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrbG9jVmFsaWQodGhpcy51X01WTWF0cml4X2xvYywgXCJ1X01WTWF0cml4X2xvY1wiKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudV9NVk1hdHJpeF9sb2MsIGZhbHNlLCBtdk1hdHJpeCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy/orr7nva7pgI/op4bmipXlvbHnn6npmLVcclxuICAgIHB1YmxpYyBzZXRVc2VQcm9qZWN0aW9uTWF0cml4KHByb2pNYXRyaXgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLnVfUE1hdHJpeF9sb2MsIFwidV9QTWF0cml4X2xvY1wiKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMudV9QTWF0cml4X2xvYywgZmFsc2UsIHByb2pNYXRyaXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8v6K6+572u6aG254K55YC8XHJcbiAgICBwdWJsaWMgc2V0VXNlVmVydGV4QXR0cmliUG9pbnRlckZvclZlcnRleChnbElELCBpdGVtU2l6ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrR0xJRFZhbGlkKGdsSUQpKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLmFfcG9zaXRpb25fbG9jLCBcImFfcG9zaXRpb25fbG9jXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCBnbElEKTtcclxuICAgICAgICAgICAgdGhpcy5fZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5hX3Bvc2l0aW9uX2xvYyk7XHJcbiAgICAgICAgICAgIEdMYXBpLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5hX3Bvc2l0aW9uX2xvYywgaXRlbVNpemUsIHRoaXMuX2dsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy/orr7nva7ms5Xnur/lgLxcclxuICAgIHB1YmxpYyBzZXRVc2VWZXJ0ZXhBdHRyaVBvaW50ZXJGb3JOb3JtYWwoZ2xJRCwgaXRlbVNpemU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5jaGVja0dMSURWYWxpZChnbElEKSkgcmV0dXJuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGxvY2FsdGlvbjpzaGFkZXLkuK1hdHRyaWJ1dGXlo7DmmI7lj5jph4/nmoTkvY3nva5cclxuICAgICAgICAgKiBzaXplOuavj+asoei/reS7o+S9v+eUqOeahOWNleS9jeaVsOaNrlxyXG4gICAgICAgICAqIHR5cGU65Y2V5L2N5pWw5o2u57G75Z6LXHJcbiAgICAgICAgICogbm9ybWFsbGl6ZTrljZXkvY3ljJbvvIjjgJAwLTI1NeOAkS0t44CL44CQMC0x44CR77yJXHJcbiAgICAgICAgICogc3RyaWRlOuavj+asoei/reS7o+i3s+WkmuWwkeS4quaVsOaNruWIsOS4i+S4gOS4quaVsOaNrlxyXG4gICAgICAgICAqIG9mZnNldDrku47nu5HlrprnvJPlhrLljLrnmoTlgY/np7vkvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBpZiAodGhpcy5jaGVja2xvY1ZhbGlkKHRoaXMuYV9ub3JtYWxfbG9jLCBcImFfbm9ybWFsX2xvY1wiKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgZ2xJRCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV9ub3JtYWxfbG9jKTtcclxuICAgICAgICAgICAgdGhpcy5fZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLmFfbm9ybWFsX2xvYywgaXRlbVNpemUsIHRoaXMuX2dsLkZMT0FULCBmYWxzZSwgMCwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy/orr7nva51duWAvFxyXG4gICAgcHVibGljIHNldFVzZVZlcnRleEF0dHJpYlBvaW50ZXJGb3JVVihnbElELCBpdGVtU2l6ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrR0xJRFZhbGlkKGdsSUQpKSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrbG9jVmFsaWQodGhpcy5hX3V2X2xvYywgXCJhX3V2X2xvY1wiKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9nbC5iaW5kQnVmZmVyKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgZ2xJRCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV91dl9sb2MpO1xyXG4gICAgICAgICAgICB0aGlzLl9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuYV91dl9sb2MsIGl0ZW1TaXplLCB0aGlzLl9nbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8v6K6+572u5L2/55So55qE57q555CGXHJcbiAgICAvL+azqOaEj+WmguaenOatpOWkhOS4jemHjeaWsOiuvue9ruS9v+eUqOeahOe6ueeQhu+8jOmCo+S5iOS8mum7mOiupOS9v+eUqOS4iuS4gOasoee7mOWItuaXtueahOe6ueeQhlxyXG4gICAgcHVibGljIHNldFVzZVRleHR1cmUoZ2xJRCwgcG9zID0gMCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5jaGVja0dMSURWYWxpZChnbElEKSkgcmV0dXJuO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAgKiBhY3RpdmVUZXh0dXJl5b+F6aG75ZyoYmluZFRleHR1cmXkuYvliY3jgILlpoLmnpzmsqFhY3RpdmVUZXh0dXJl5bCxYmluZFRleHR1cmXvvIzkvJrpu5jorqTnu5HlrprliLAw5Y+357q555CG5Y2V5YWDXHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLnVfdGV4Q29vcmRfbG9jLCBcInVfdGV4Q29vcmRfbG9jXCIpKSB7XHJcbiAgICAgICAgICAgIC8vIOa/gOa0uyAwIOWPt+e6ueeQhuWNleWFg1xyXG4gICAgICAgICAgICB0aGlzLl9nbC5hY3RpdmVUZXh0dXJlKHRoaXMuX2dsW2dsVEVYVFVSRV9VTklUX1ZBTElEW3Bvc11dKTtcclxuICAgICAgICAgICAgLy8g5oyH5a6a5b2T5YmN5pON5L2c55qE6LS05Zu+XHJcbiAgICAgICAgICAgIHRoaXMuX2dsLmJpbmRUZXh0dXJlKHRoaXMuX2dsLlRFWFRVUkVfMkQsIGdsSUQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fZ2wudW5pZm9ybTFpKHRoaXMudV90ZXhDb29yZF9sb2MsIHBvcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLmFfcG9zaXRpb25fbG9jLCBcImFfcG9zaXRpb25fbG9jXCIpKSB7Ly8g6K6+5a6a5Li65pWw57uE57G75Z6L55qE5Y+Y6YeP5pWw5o2uXHJcbiAgICAgICAgICAgIHRoaXMuX2dsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmFfcG9zaXRpb25fbG9jKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLmFfdXZfbG9jLCBcImFfdXZfbG9jXCIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLmFfdXZfbG9jKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tsb2NWYWxpZCh0aGlzLmFfbm9ybWFsX2xvYywgXCJhX25vcm1hbF9sb2NcIikpIHtcclxuICAgICAgICAgICAgdGhpcy5fZ2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuYV9ub3JtYWxfbG9jKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn0iLCIvKipcbiAqIOaVsOWtpuW6k+W3peWFt+exu1xuICovXG5leHBvcnQgbmFtZXNwYWNlIE1hdGhVdGlscyB7XG4gIC8qKlxuICAgKiDmsYLlvKfluqZcbiAgICogQHBhcmFtIGRlZyDop5LluqZcbiAgICovXG4gIGV4cG9ydCBmdW5jdGlvbiBkZWdUb1JhZChkZWcpIHtcbiAgICByZXR1cm4gZGVnICogTWF0aC5QSSAvIDE4MDtcbiAgfVxuICBleHBvcnQgZnVuY3Rpb24gcHgodikge1xuICAgIHJldHVybiBgJHt2IHwgMH1weGA7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIHJhZFRvRGVnKHIpIHtcbiAgICByZXR1cm4gciAqIDE4MCAvIE1hdGguUEk7XG4gIH1cbiAgLy8gQ2hlY2sgaWYgdGhlIGltYWdlIGlzIGEgcG93ZXIgb2YgMiBpbiBib3RoIGRpbWVuc2lvbnMuXG4gIGV4cG9ydCBmdW5jdGlvbiBpc1Bvd2VyT2YyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmICh2YWx1ZSAtIDEpKSA9PT0gMDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiByYW5kKG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbjtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBlbW9kKHgsIG4pIHtcbiAgICByZXR1cm4geCA+PSAwID8gKHggJSBuKSA6ICgobiAtICgteCAlIG4pKSAlIG4pO1xuICB9XG59Il19
