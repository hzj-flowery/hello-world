/** Declaration file generated by dts-gen */

declare const glMatrix: {
    glMatrix: {
        glMatrix: {
            ARRAY_TYPE: any;
            EPSILON: number;
            RANDOM: any;
            equals: any;
            setMatrixArrayType: any;
            toRadian: any;
        };
        mat2: {
            LDU: any;
            add: any;
            adjoint: any;
            clone: any;
            copy: any;
            create: any;
            determinant: any;
            equals: any;
            exactEquals: any;
            frob: any;
            fromRotation: any;
            fromScaling: any;
            fromValues: any;
            identity: any;
            invert: any;
            mul: any;
            multiply: any;
            multiplyScalar: any;
            multiplyScalarAndAdd: any;
            rotate: any;
            scale: any;
            set: any;
            str: any;
            sub: any;
            subtract: any;
            transpose: any;
        };
        mat2d: {
            add: any;
            clone: any;
            copy: any;
            create: any;
            determinant: any;
            equals: any;
            exactEquals: any;
            frob: any;
            fromRotation: any;
            fromScaling: any;
            fromTranslation: any;
            fromValues: any;
            identity: any;
            invert: any;
            mul: any;
            multiply: any;
            multiplyScalar: any;
            multiplyScalarAndAdd: any;
            rotate: any;
            scale: any;
            set: any;
            str: any;
            sub: any;
            subtract: any;
            translate: any;
        };
        mat3: {
            add: any;
            adjoint: any;
            clone: any;
            copy: any;
            create: any;
            determinant: any;
            equals: any;
            exactEquals: any;
            frob: any;
            fromMat2d: any;
            fromMat4: any;
            fromQuat: any;
            fromRotation: any;
            fromScaling: any;
            fromTranslation: any;
            fromValues: any;
            identity: any;
            invert: any;
            mul: any;
            multiply: any;
            multiplyScalar: any;
            multiplyScalarAndAdd: any;
            normalFromMat4: any;
            projection: any;
            rotate: any;
            scale: any;
            set: any;
            str: any;
            sub: any;
            subtract: any;
            translate: any;
            transpose: any;
        };
        mat4: {
            add: any;
            adjoint: any;
            clone: any;
            copy: any;
            create: any;
            determinant: any;
            equals: any;
            exactEquals: any;
            frob: any;
            fromQuat: any;
            fromQuat2: any;
            fromRotation: any;
            fromRotationTranslation: any;
            fromRotationTranslationScale: any;
            fromRotationTranslationScaleOrigin: any;
            fromScaling: any;
            fromTranslation: any;
            fromValues: any;
            fromXRotation: any;
            fromYRotation: any;
            fromZRotation: any;
            frustum: any;
            getRotation: any;
            getScaling: any;
            getTranslation: any;
            identity: any;
            invert: any;
            lookAt: any;
            mul: any;
            multiply: any;
            multiplyScalar: any;
            multiplyScalarAndAdd: any;
            ortho: any;
            perspective: any;
            perspectiveFromFieldOfView: any;
            rotate: any;
            rotateX: any;
            rotateY: any;
            rotateZ: any;
            scale: any;
            set: any;
            str: any;
            sub: any;
            subtract: any;
            targetTo: any;
            translate: any;
            transpose: any;
        };
        quat: {
            add: any;
            calculateW: any;
            clone: any;
            conjugate: any;
            copy: any;
            create: any;
            dot: any;
            equals: any;
            exactEquals: any;
            fromEuler: any;
            fromMat3: any;
            fromValues: any;
            getAxisAngle: any;
            identity: any;
            invert: any;
            len: any;
            length: any;
            lerp: any;
            mul: any;
            multiply: any;
            normalize: any;
            random: any;
            rotateX: any;
            rotateY: any;
            rotateZ: any;
            rotationTo: any;
            scale: any;
            set: any;
            setAxes: any;
            setAxisAngle: any;
            slerp: any;
            sqlerp: any;
            sqrLen: any;
            squaredLength: any;
            str: any;
        };
        quat2: {
            add: any;
            clone: any;
            conjugate: any;
            copy: any;
            create: any;
            dot: any;
            equals: any;
            exactEquals: any;
            fromMat4: any;
            fromRotation: any;
            fromRotationTranslation: any;
            fromRotationTranslationValues: any;
            fromTranslation: any;
            fromValues: any;
            getDual: any;
            getReal: any;
            getTranslation: any;
            identity: any;
            invert: any;
            len: any;
            length: any;
            lerp: any;
            mul: any;
            multiply: any;
            normalize: any;
            rotateAroundAxis: any;
            rotateByQuatAppend: any;
            rotateByQuatPrepend: any;
            rotateX: any;
            rotateY: any;
            rotateZ: any;
            scale: any;
            set: any;
            setDual: any;
            setReal: any;
            sqrLen: any;
            squaredLength: any;
            str: any;
            translate: any;
        };
        vec2: {
            add: any;
            angle: any;
            ceil: any;
            clone: any;
            copy: any;
            create: any;
            cross: any;
            dist: any;
            distance: any;
            div: any;
            divide: any;
            dot: any;
            equals: any;
            exactEquals: any;
            floor: any;
            forEach: any;
            fromValues: any;
            inverse: any;
            len: any;
            length: any;
            lerp: any;
            max: any;
            min: any;
            mul: any;
            multiply: any;
            negate: any;
            normalize: any;
            random: any;
            rotate: any;
            round: any;
            scale: any;
            scaleAndAdd: any;
            set: any;
            sqrDist: any;
            sqrLen: any;
            squaredDistance: any;
            squaredLength: any;
            str: any;
            sub: any;
            subtract: any;
            transformMat2: any;
            transformMat2d: any;
            transformMat3: any;
            transformMat4: any;
            zero: any;
        };
        vec3: {
            add: any;
            angle: any;
            bezier: any;
            ceil: any;
            clone: any;
            copy: any;
            create: any;
            cross: any;
            dist: any;
            distance: any;
            div: any;
            divide: any;
            dot: any;
            equals: any;
            exactEquals: any;
            floor: any;
            forEach: any;
            fromValues: any;
            hermite: any;
            inverse: any;
            len: any;
            length: any;
            lerp: any;
            max: any;
            min: any;
            mul: any;
            multiply: any;
            negate: any;
            normalize: any;
            random: any;
            rotateX: any;
            rotateY: any;
            rotateZ: any;
            round: any;
            scale: any;
            scaleAndAdd: any;
            set: any;
            sqrDist: any;
            sqrLen: any;
            squaredDistance: any;
            squaredLength: any;
            str: any;
            sub: any;
            subtract: any;
            transformMat3: any;
            transformMat4: any;
            transformQuat: any;
            zero: any;
        };
        vec4: {
            add: any;
            ceil: any;
            clone: any;
            copy: any;
            create: any;
            cross: any;
            dist: any;
            distance: any;
            div: any;
            divide: any;
            dot: any;
            equals: any;
            exactEquals: any;
            floor: any;
            forEach: any;
            fromValues: any;
            inverse: any;
            len: any;
            length: any;
            lerp: any;
            max: any;
            min: any;
            mul: any;
            multiply: any;
            negate: any;
            normalize: any;
            random: any;
            round: any;
            scale: any;
            scaleAndAdd: any;
            set: any;
            sqrDist: any;
            sqrLen: any;
            squaredDistance: any;
            squaredLength: any;
            str: any;
            sub: any;
            subtract: any;
            transformMat4: any;
            transformQuat: any;
            zero: any;
        };
    };
};

